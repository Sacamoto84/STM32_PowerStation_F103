
STM32_PowerStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000909c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b74  080091b0  080091b0  000191b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d24  08009d24  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  08009d24  08009d24  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d24  08009d24  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d2c  08009d2c  00019d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  20000238  08009f68  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a70  08009f68  00020a70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021c81  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042a5  00000000  00000000  00041f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  000461d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015cd  00000000  00000000  00047640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e0ac  00000000  00000000  00048c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000208c7  00000000  00000000  00066cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095e05  00000000  00000000  00087580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006498  00000000  00000000  0011d388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004a94  00000000  00000000  00123820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001282b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	08009194 	.word	0x08009194

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	08009194 	.word	0x08009194

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_GPIO_Init+0xbc>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a28      	ldr	r2, [pc, #160]	; (800118c <MX_GPIO_Init+0xbc>)
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_GPIO_Init+0xbc>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_GPIO_Init+0xbc>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a22      	ldr	r2, [pc, #136]	; (800118c <MX_GPIO_Init+0xbc>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <MX_GPIO_Init+0xbc>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_GPIO_Init+0xbc>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a1c      	ldr	r2, [pc, #112]	; (800118c <MX_GPIO_Init+0xbc>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_GPIO_Init+0xbc>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2110      	movs	r1, #16
 8001130:	4817      	ldr	r0, [pc, #92]	; (8001190 <MX_GPIO_Init+0xc0>)
 8001132:	f002 fb8c 	bl	800384e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001136:	2310      	movs	r3, #16
 8001138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2302      	movs	r3, #2
 8001144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	4810      	ldr	r0, [pc, #64]	; (8001190 <MX_GPIO_Init+0xc0>)
 800114e:	f002 f9e3 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 8001152:	2301      	movs	r3, #1
 8001154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	4619      	mov	r1, r3
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001166:	f002 f9d7 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800116a:	2340      	movs	r3, #64	; 0x40
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_GPIO_Init+0xc4>)
 800117e:	f002 f9cb 	bl	8003518 <HAL_GPIO_Init>

}
 8001182:	bf00      	nop
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800
 8001194:	40010c00 	.word	0x40010c00

08001198 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_I2C2_Init+0x50>)
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_I2C2_Init+0x54>)
 80011a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_I2C2_Init+0x50>)
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_I2C2_Init+0x58>)
 80011a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_I2C2_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_I2C2_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_I2C2_Init+0x50>)
 80011b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_I2C2_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_I2C2_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_I2C2_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_I2C2_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_I2C2_Init+0x50>)
 80011d6:	f002 fb53 	bl	8003880 <HAL_I2C_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011e0:	f001 fd4e 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000254 	.word	0x20000254
 80011ec:	40005800 	.word	0x40005800
 80011f0:	00061a80 	.word	0x00061a80

080011f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <HAL_I2C_MspInit+0x74>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d124      	bne.n	800125e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_I2C_MspInit+0x78>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_I2C_MspInit+0x78>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_I2C_MspInit+0x78>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800122c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001232:	2312      	movs	r3, #18
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4619      	mov	r1, r3
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_I2C_MspInit+0x7c>)
 8001242:	f002 f969 	bl	8003518 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_I2C_MspInit+0x78>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <HAL_I2C_MspInit+0x78>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_I2C_MspInit+0x78>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40005800 	.word	0x40005800
 800126c:	40021000 	.word	0x40021000
 8001270:	40010c00 	.word	0x40010c00

08001274 <_ZN7ADS124311sendCommandEh.isra.0>:





	void sendCommand(uint8_t cmd)
 8001274:	b570      	push	{r4, r5, r6, lr}
	{
		ADS124x_CS_0;
 8001276:	2200      	movs	r2, #0
 8001278:	2110      	movs	r1, #16
	void sendCommand(uint8_t cmd)
 800127a:	4606      	mov	r6, r0
 800127c:	b084      	sub	sp, #16
		ADS124x_CS_0;
 800127e:	481f      	ldr	r0, [pc, #124]	; (80012fc <_ZN7ADS124311sendCommandEh.isra.0+0x88>)
 8001280:	f002 fae5 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001284:	2300      	movs	r3, #0
 8001286:	491e      	ldr	r1, [pc, #120]	; (8001300 <_ZN7ADS124311sendCommandEh.isra.0+0x8c>)
 8001288:	4d1e      	ldr	r5, [pc, #120]	; (8001304 <_ZN7ADS124311sendCommandEh.isra.0+0x90>)
 800128a:	604b      	str	r3, [r1, #4]
 800128c:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <_ZN7ADS124311sendCommandEh.isra.0+0x94>)
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	4c1e      	ldr	r4, [pc, #120]	; (800130c <_ZN7ADS124311sendCommandEh.isra.0+0x98>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	0c9b      	lsrs	r3, r3, #18
 8001298:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	3b10      	subs	r3, #16
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	684a      	ldr	r2, [r1, #4]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d8fc      	bhi.n	80012a2 <_ZN7ADS124311sendCommandEh.isra.0+0x2e>
		XferByte(cmd);
 80012a8:	4a19      	ldr	r2, [pc, #100]	; (8001310 <_ZN7ADS124311sendCommandEh.isra.0+0x9c>)
 80012aa:	f88d 600e 	strb.w	r6, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80012ae:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d0fb      	beq.n	80012ae <_ZN7ADS124311sendCommandEh.isra.0+0x3a>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80012b6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80012ba:	2301      	movs	r3, #1
 80012bc:	f10d 020f 	add.w	r2, sp, #15
 80012c0:	f10d 010e 	add.w	r1, sp, #14
 80012c4:	4812      	ldr	r0, [pc, #72]	; (8001310 <_ZN7ADS124311sendCommandEh.isra.0+0x9c>)
 80012c6:	9600      	str	r6, [sp, #0]
 80012c8:	f003 fc0a 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80012cc:	2300      	movs	r3, #0
 80012ce:	490c      	ldr	r1, [pc, #48]	; (8001300 <_ZN7ADS124311sendCommandEh.isra.0+0x8c>)
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <_ZN7ADS124311sendCommandEh.isra.0+0x94>)
 80012d2:	604b      	str	r3, [r1, #4]
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0c9b      	lsrs	r3, r3, #18
 80012dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	3b10      	subs	r3, #16
 80012e4:	6023      	str	r3, [r4, #0]
 80012e6:	684a      	ldr	r2, [r1, #4]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d8fc      	bhi.n	80012e6 <_ZN7ADS124311sendCommandEh.isra.0+0x72>
		ADS124x_CS_1;
 80012ec:	2201      	movs	r2, #1
 80012ee:	2110      	movs	r1, #16
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <_ZN7ADS124311sendCommandEh.isra.0+0x88>)
	}
 80012f2:	b004      	add	sp, #16
 80012f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ADS124x_CS_1;
 80012f8:	f002 baa9 	b.w	800384e <HAL_GPIO_WritePin>
 80012fc:	40010800 	.word	0x40010800
 8001300:	e0001000 	.word	0xe0001000
 8001304:	2000005c 	.word	0x2000005c
 8001308:	431bde83 	.word	0x431bde83
 800130c:	2000091c 	.word	0x2000091c
 8001310:	2000082c 	.word	0x2000082c

08001314 <_ZN7ADS124315readAllRegisterEv>:
	void readAllRegister() {
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
		ADS124x_CS_0;
 8001316:	2200      	movs	r2, #0
 8001318:	2110      	movs	r1, #16
	void readAllRegister() {
 800131a:	4606      	mov	r6, r0
 800131c:	b085      	sub	sp, #20
		ADS124x_CS_0;
 800131e:	48cf      	ldr	r0, [pc, #828]	; (800165c <_ZN7ADS124315readAllRegisterEv+0x348>)
 8001320:	f002 fa95 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001324:	2300      	movs	r3, #0
 8001326:	49ce      	ldr	r1, [pc, #824]	; (8001660 <_ZN7ADS124315readAllRegisterEv+0x34c>)
 8001328:	4fce      	ldr	r7, [pc, #824]	; (8001664 <_ZN7ADS124315readAllRegisterEv+0x350>)
 800132a:	604b      	str	r3, [r1, #4]
 800132c:	4ace      	ldr	r2, [pc, #824]	; (8001668 <_ZN7ADS124315readAllRegisterEv+0x354>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	4dce      	ldr	r5, [pc, #824]	; (800166c <_ZN7ADS124315readAllRegisterEv+0x358>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0c9b      	lsrs	r3, r3, #18
 8001338:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	3b10      	subs	r3, #16
 8001340:	602b      	str	r3, [r5, #0]
 8001342:	684a      	ldr	r2, [r1, #4]
 8001344:	4293      	cmp	r3, r2
 8001346:	d8fc      	bhi.n	8001342 <_ZN7ADS124315readAllRegisterEv+0x2e>
		XferByte(0x10);
 8001348:	2310      	movs	r3, #16
 800134a:	4cc9      	ldr	r4, [pc, #804]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800134c:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001350:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001354:	2b02      	cmp	r3, #2
 8001356:	d0fb      	beq.n	8001350 <_ZN7ADS124315readAllRegisterEv+0x3c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135c:	48c4      	ldr	r0, [pc, #784]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	f10d 020f 	add.w	r2, sp, #15
 8001364:	2301      	movs	r3, #1
 8001366:	f10d 010e 	add.w	r1, sp, #14
 800136a:	f003 fbb9 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(15);
 800136e:	230f      	movs	r3, #15
 8001370:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001374:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001378:	2b02      	cmp	r3, #2
 800137a:	d0fb      	beq.n	8001374 <_ZN7ADS124315readAllRegisterEv+0x60>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800137c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001380:	48bb      	ldr	r0, [pc, #748]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	f10d 020f 	add.w	r2, sp, #15
 8001388:	2301      	movs	r3, #1
 800138a:	f10d 010e 	add.w	r1, sp, #14
 800138e:	f003 fba7 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		readSETUP(XferByte(0));
 8001392:	2300      	movs	r3, #0
 8001394:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001398:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800139c:	2b02      	cmp	r3, #2
 800139e:	d0fb      	beq.n	8001398 <_ZN7ADS124315readAllRegisterEv+0x84>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80013a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a4:	48b2      	ldr	r0, [pc, #712]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	f10d 020f 	add.w	r2, sp, #15
 80013ac:	2301      	movs	r3, #1
 80013ae:	f10d 010e 	add.w	r1, sp, #14
 80013b2:	f003 fb95 	bl	8004ae0 <HAL_SPI_TransmitReceive>


	void readSETUP(uint8_t p) {
		ADSregister.SETUP.PGA = p & 0x7;
		ADSregister.SETUP.BOCS = (p >> 3) & 0x1;
		ADSregister.SETUP.ID = p >> 4;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f88d 300e 	strb.w	r3, [sp, #14]
		ADSregister.SETUP.PGA = p & 0x7;
 80013bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80013c0:	7033      	strb	r3, [r6, #0]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80013c2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d0fb      	beq.n	80013c2 <_ZN7ADS124315readAllRegisterEv+0xae>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	48a8      	ldr	r0, [pc, #672]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	f10d 020f 	add.w	r2, sp, #15
 80013d6:	2301      	movs	r3, #1
 80013d8:	f10d 010e 	add.w	r1, sp, #14
 80013dc:	f003 fb80 	bl	8004ae0 <HAL_SPI_TransmitReceive>
	}

	void readMUX(uint8_t p) {
		ADSregister.MUX.NSEL = p & 0x0F;
		ADSregister.MUX.PSEL = (uint8_t) ((p >> 4) & 0x0F);
 80013e0:	2300      	movs	r3, #0
 80013e2:	f88d 300e 	strb.w	r3, [sp, #14]
		ADSregister.MUX.NSEL = p & 0x0F;
 80013e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80013ea:	7073      	strb	r3, [r6, #1]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80013ec:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d0fb      	beq.n	80013ec <_ZN7ADS124315readAllRegisterEv+0xd8>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80013f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f8:	489d      	ldr	r0, [pc, #628]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	f10d 020f 	add.w	r2, sp, #15
 8001400:	2301      	movs	r3, #1
 8001402:	f10d 010e 	add.w	r1, sp, #14
 8001406:	f003 fb6b 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (value >> pos) & 1;
 800140a:	2300      	movs	r3, #0
 800140c:	f88d 300e 	strb.w	r3, [sp, #14]
	}

	void readACR(uint8_t p) {
		ADSregister.ACR.DR0 = read_bit(p, 0);
 8001410:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001414:	70b3      	strb	r3, [r6, #2]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001416:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800141a:	2b02      	cmp	r3, #2
 800141c:	d0fb      	beq.n	8001416 <_ZN7ADS124315readAllRegisterEv+0x102>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	4893      	ldr	r0, [pc, #588]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	f10d 020f 	add.w	r2, sp, #15
 800142a:	2301      	movs	r3, #1
 800142c:	f10d 010e 	add.w	r1, sp, #14
 8001430:	f003 fb56 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001434:	2300      	movs	r3, #0
 8001436:	f88d 300e 	strb.w	r3, [sp, #14]
 800143a:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.ODAC = XferByte(0);
 800143e:	70f3      	strb	r3, [r6, #3]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001440:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001444:	2b02      	cmp	r3, #2
 8001446:	d0fb      	beq.n	8001440 <_ZN7ADS124315readAllRegisterEv+0x12c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144c:	4888      	ldr	r0, [pc, #544]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	f10d 020f 	add.w	r2, sp, #15
 8001454:	2301      	movs	r3, #1
 8001456:	f10d 010e 	add.w	r1, sp, #14
 800145a:	f003 fb41 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 800145e:	2300      	movs	r3, #0
 8001460:	f88d 300e 	strb.w	r3, [sp, #14]
 8001464:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DIO = XferByte(0);
 8001468:	7133      	strb	r3, [r6, #4]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800146a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800146e:	2b02      	cmp	r3, #2
 8001470:	d0fb      	beq.n	800146a <_ZN7ADS124315readAllRegisterEv+0x156>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	487e      	ldr	r0, [pc, #504]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	f10d 020f 	add.w	r2, sp, #15
 800147e:	2301      	movs	r3, #1
 8001480:	f10d 010e 	add.w	r1, sp, #14
 8001484:	f003 fb2c 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001488:	2300      	movs	r3, #0
 800148a:	f88d 300e 	strb.w	r3, [sp, #14]
 800148e:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DIR = XferByte(0);
 8001492:	7173      	strb	r3, [r6, #5]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001494:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001498:	2b02      	cmp	r3, #2
 800149a:	d0fb      	beq.n	8001494 <_ZN7ADS124315readAllRegisterEv+0x180>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800149c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a0:	4873      	ldr	r0, [pc, #460]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	f10d 020f 	add.w	r2, sp, #15
 80014a8:	2301      	movs	r3, #1
 80014aa:	f10d 010e 	add.w	r1, sp, #14
 80014ae:	f003 fb17 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f88d 300e 	strb.w	r3, [sp, #14]
 80014b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.IOCON = XferByte(0);
 80014bc:	71b3      	strb	r3, [r6, #6]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80014be:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d0fb      	beq.n	80014be <_ZN7ADS124315readAllRegisterEv+0x1aa>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	4869      	ldr	r0, [pc, #420]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	f10d 020f 	add.w	r2, sp, #15
 80014d2:	2301      	movs	r3, #1
 80014d4:	f10d 010e 	add.w	r1, sp, #14
 80014d8:	f003 fb02 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80014dc:	2300      	movs	r3, #0
 80014de:	f88d 300e 	strb.w	r3, [sp, #14]
 80014e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.OCR0 = XferByte(0);
 80014e6:	71f3      	strb	r3, [r6, #7]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80014e8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d0fb      	beq.n	80014e8 <_ZN7ADS124315readAllRegisterEv+0x1d4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80014f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f4:	485e      	ldr	r0, [pc, #376]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f10d 020f 	add.w	r2, sp, #15
 80014fc:	2301      	movs	r3, #1
 80014fe:	f10d 010e 	add.w	r1, sp, #14
 8001502:	f003 faed 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001506:	2300      	movs	r3, #0
 8001508:	f88d 300e 	strb.w	r3, [sp, #14]
 800150c:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.OCR1 = XferByte(0);
 8001510:	7233      	strb	r3, [r6, #8]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001512:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001516:	2b02      	cmp	r3, #2
 8001518:	d0fb      	beq.n	8001512 <_ZN7ADS124315readAllRegisterEv+0x1fe>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	4854      	ldr	r0, [pc, #336]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	f10d 020f 	add.w	r2, sp, #15
 8001526:	2301      	movs	r3, #1
 8001528:	f10d 010e 	add.w	r1, sp, #14
 800152c:	f003 fad8 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001530:	2300      	movs	r3, #0
 8001532:	f88d 300e 	strb.w	r3, [sp, #14]
 8001536:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.OCR2 = XferByte(0);
 800153a:	7273      	strb	r3, [r6, #9]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800153c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001540:	2b02      	cmp	r3, #2
 8001542:	d0fb      	beq.n	800153c <_ZN7ADS124315readAllRegisterEv+0x228>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001548:	4849      	ldr	r0, [pc, #292]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	f10d 020f 	add.w	r2, sp, #15
 8001550:	2301      	movs	r3, #1
 8001552:	f10d 010e 	add.w	r1, sp, #14
 8001556:	f003 fac3 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 800155a:	2300      	movs	r3, #0
 800155c:	f88d 300e 	strb.w	r3, [sp, #14]
 8001560:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.FSR0 = XferByte(0);
 8001564:	72b3      	strb	r3, [r6, #10]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001566:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800156a:	2b02      	cmp	r3, #2
 800156c:	d0fb      	beq.n	8001566 <_ZN7ADS124315readAllRegisterEv+0x252>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	483f      	ldr	r0, [pc, #252]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	f10d 020f 	add.w	r2, sp, #15
 800157a:	2301      	movs	r3, #1
 800157c:	f10d 010e 	add.w	r1, sp, #14
 8001580:	f003 faae 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001584:	2300      	movs	r3, #0
 8001586:	f88d 300e 	strb.w	r3, [sp, #14]
 800158a:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.FSR1 = XferByte(0);
 800158e:	72f3      	strb	r3, [r6, #11]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001590:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001594:	2b02      	cmp	r3, #2
 8001596:	d0fb      	beq.n	8001590 <_ZN7ADS124315readAllRegisterEv+0x27c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159c:	4834      	ldr	r0, [pc, #208]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	f10d 020f 	add.w	r2, sp, #15
 80015a4:	2301      	movs	r3, #1
 80015a6:	f10d 010e 	add.w	r1, sp, #14
 80015aa:	f003 fa99 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f88d 300e 	strb.w	r3, [sp, #14]
 80015b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.FSR2 = XferByte(0);
 80015b8:	7333      	strb	r3, [r6, #12]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80015ba:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d0fb      	beq.n	80015ba <_ZN7ADS124315readAllRegisterEv+0x2a6>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	482a      	ldr	r0, [pc, #168]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	f10d 020f 	add.w	r2, sp, #15
 80015ce:	2301      	movs	r3, #1
 80015d0:	f10d 010e 	add.w	r1, sp, #14
 80015d4:	f003 fa84 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80015d8:	2300      	movs	r3, #0
 80015da:	f88d 300e 	strb.w	r3, [sp, #14]
 80015de:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DOR2 = XferByte(0);
 80015e2:	7373      	strb	r3, [r6, #13]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80015e4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d0fb      	beq.n	80015e4 <_ZN7ADS124315readAllRegisterEv+0x2d0>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80015ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f0:	481f      	ldr	r0, [pc, #124]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	f10d 020f 	add.w	r2, sp, #15
 80015f8:	2301      	movs	r3, #1
 80015fa:	f10d 010e 	add.w	r1, sp, #14
 80015fe:	f003 fa6f 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001602:	2300      	movs	r3, #0
 8001604:	f88d 300e 	strb.w	r3, [sp, #14]
 8001608:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DOR1 = XferByte(0);
 800160c:	73b3      	strb	r3, [r6, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800160e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001612:	2b02      	cmp	r3, #2
 8001614:	d0fb      	beq.n	800160e <_ZN7ADS124315readAllRegisterEv+0x2fa>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	f10d 020f 	add.w	r2, sp, #15
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	f10d 010e 	add.w	r1, sp, #14
 8001624:	2301      	movs	r3, #1
 8001626:	4812      	ldr	r0, [pc, #72]	; (8001670 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001628:	f003 fa5a 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800162c:	2300      	movs	r3, #0
		return (unsigned char) rxData;
 800162e:	f89d 200f 	ldrb.w	r2, [sp, #15]
		delayMicroseconds(20);
 8001632:	490b      	ldr	r1, [pc, #44]	; (8001660 <_ZN7ADS124315readAllRegisterEv+0x34c>)
		ADSregister.DOR0 = XferByte(0);
 8001634:	73f2      	strb	r2, [r6, #15]
		delayMicroseconds(20);
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <_ZN7ADS124315readAllRegisterEv+0x354>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	0c9b      	lsrs	r3, r3, #18
 8001642:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3b10      	subs	r3, #16
 800164a:	602b      	str	r3, [r5, #0]
 800164c:	684a      	ldr	r2, [r1, #4]
 800164e:	4293      	cmp	r3, r2
 8001650:	d8fc      	bhi.n	800164c <_ZN7ADS124315readAllRegisterEv+0x338>
		XferByte(15);
 8001652:	230f      	movs	r3, #15
 8001654:	f88d 300e 	strb.w	r3, [sp, #14]
 8001658:	e00c      	b.n	8001674 <_ZN7ADS124315readAllRegisterEv+0x360>
 800165a:	bf00      	nop
 800165c:	40010800 	.word	0x40010800
 8001660:	e0001000 	.word	0xe0001000
 8001664:	2000005c 	.word	0x2000005c
 8001668:	431bde83 	.word	0x431bde83
 800166c:	2000091c 	.word	0x2000091c
 8001670:	2000082c 	.word	0x2000082c
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001674:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001678:	2b02      	cmp	r3, #2
 800167a:	d0fb      	beq.n	8001674 <_ZN7ADS124315readAllRegisterEv+0x360>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800167c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001680:	f10d 020f 	add.w	r2, sp, #15
 8001684:	f10d 010e 	add.w	r1, sp, #14
 8001688:	2301      	movs	r3, #1
 800168a:	9400      	str	r4, [sp, #0]
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <_ZN7ADS124315readAllRegisterEv+0x390>)
 800168e:	f003 fa27 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		ADS124x_CS_1;
 8001692:	2201      	movs	r2, #1
 8001694:	2110      	movs	r1, #16
 8001696:	4804      	ldr	r0, [pc, #16]	; (80016a8 <_ZN7ADS124315readAllRegisterEv+0x394>)
	}
 8001698:	b005      	add	sp, #20
 800169a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		ADS124x_CS_1;
 800169e:	f002 b8d6 	b.w	800384e <HAL_GPIO_WritePin>
 80016a2:	bf00      	nop
 80016a4:	2000082c 	.word	0x2000082c
 80016a8:	40010800 	.word	0x40010800

080016ac <TIM1_UP_IRQHandler>:
Power power;
classLog Log;


extern "C" void TIM1_UP_IRQHandler(void)
{
 80016ac:	b508      	push	{r3, lr}

	GPIO_PinState lastKey;

	void tickKey() {

		key.tick();
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <TIM1_UP_IRQHandler+0x38>)
 80016b0:	f004 fb04 	bl	8005cbc <_ZN7GButton4tickEv>

		if (key.isPress()) {
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <TIM1_UP_IRQHandler+0x38>)
 80016b6:	f004 fa63 	bl	8005b80 <_ZN7GButton7isPressEv>
 80016ba:	b130      	cbz	r0, 80016ca <TIM1_UP_IRQHandler+0x1e>
			if (screen == UI)
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <TIM1_UP_IRQHandler+0x3c>)
 80016be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80016c2:	b93a      	cbnz	r2, 80016d4 <TIM1_UP_IRQHandler+0x28>
				screen = BATTERY;
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	power.tickKey();


  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016ca:	4808      	ldr	r0, [pc, #32]	; (80016ec <TIM1_UP_IRQHandler+0x40>)
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80016cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 80016d0:	f003 bcfe 	b.w	80050d0 <HAL_TIM_IRQHandler>
			else
				screen = UI;
 80016d4:	2200      	movs	r2, #0
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <TIM1_UP_IRQHandler+0x40>)
 80016d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80016dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 80016e0:	f003 bcf6 	b.w	80050d0 <HAL_TIM_IRQHandler>
 80016e4:	200007ac 	.word	0x200007ac
 80016e8:	200007cc 	.word	0x200007cc
 80016ec:	20000888 	.word	0x20000888

080016f0 <_Z4loopv>:





void loop() {
 80016f0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80016f4:	4c1c      	ldr	r4, [pc, #112]	; (8001768 <_Z4loopv+0x78>)
 80016f6:	b095      	sub	sp, #84	; 0x54

	}

	void tick() {

		if (screen == UI)
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <_Z4loopv+0x7c>)
 80016fa:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
 80016fe:	2d00      	cmp	r5, #0
 8001700:	f040 82dc 	bne.w	8001cbc <_Z4loopv+0x5cc>

	}

	void screenUI() {

		tft->Fill1(0);
 8001704:	461e      	mov	r6, r3
 8001706:	4629      	mov	r1, r5
 8001708:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800170a:	f004 fdb3 	bl	8006274 <_ZN3TFT5Fill1Et>
	}
	void SetBColor(u16 BColor) {
		uTFT.BColor = BColor;
	}
	void GotoXY(i16 x, i16 y) {
		uTFT.CurrentX = x;
 800170e:	f44f 2300 	mov.w	r3, #524288	; 0x80000

		tft->GotoXY(0, 8);
 8001712:	6b37      	ldr	r7, [r6, #48]	; 0x30
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
static inline char FontClassicPuts(TFT * tft, char* str, FontDef_t* Font, uint8_t NoBack) {
	while (*str) {
 8001714:	2655      	movs	r6, #85	; 0x55
	for (i = 0; i < Font->FontHeight; i++) {
 8001716:	4628      	mov	r0, r5
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001718:	7821      	ldrb	r1, [r4, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 800171a:	7865      	ldrb	r5, [r4, #1]
 800171c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8001770 <_Z4loopv+0x80>
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	b36d      	cbz	r5, 8001780 <_Z4loopv+0x90>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001724:	f1a6 0820 	sub.w	r8, r6, #32
	for (i = 0; i < Font->FontHeight; i++) {
 8001728:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800172a:	fb08 6305 	mla	r3, r8, r5, r6
 800172e:	6862      	ldr	r2, [r4, #4]
 8001730:	f832 a013 	ldrh.w	sl, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001734:	b321      	cbz	r1, 8001780 <_Z4loopv+0x90>
 8001736:	2500      	movs	r5, #0
 8001738:	e00a      	b.n	8001750 <_Z4loopv+0x60>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800173a:	4638      	mov	r0, r7
 800173c:	8b3b      	ldrh	r3, [r7, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 800173e:	4432      	add	r2, r6
 8001740:	f004 fd6a 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8001744:	7821      	ldrb	r1, [r4, #0]
 8001746:	3501      	adds	r5, #1
 8001748:	428d      	cmp	r5, r1
 800174a:	d213      	bcs.n	8001774 <_Z4loopv+0x84>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800174c:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
			if ((b << j) & 0x8000) {
 8001750:	fa0a f305 	lsl.w	r3, sl, r5
 8001754:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8001756:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800175a:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 800175e:	d4ec      	bmi.n	800173a <_Z4loopv+0x4a>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8001760:	1941      	adds	r1, r0, r5
 8001762:	8b7b      	ldrh	r3, [r7, #26]
 8001764:	4638      	mov	r0, r7
 8001766:	e7ea      	b.n	800173e <_Z4loopv+0x4e>
 8001768:	20000068 	.word	0x20000068
 800176c:	200007cc 	.word	0x200007cc
 8001770:	080091b0 	.word	0x080091b0
	for (i = 0; i < Font->FontHeight; i++) {
 8001774:	7865      	ldrb	r5, [r4, #1]
 8001776:	3601      	adds	r6, #1
 8001778:	42b5      	cmp	r5, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800177a:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 800177e:	d8d4      	bhi.n	800172a <_Z4loopv+0x3a>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001780:	4408      	add	r0, r1
 8001782:	3801      	subs	r0, #1
	while (*str) {
 8001784:	f819 6f01 	ldrb.w	r6, [r9, #1]!
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001788:	b200      	sxth	r0, r0
 800178a:	82b8      	strh	r0, [r7, #20]
	while (*str) {
 800178c:	2e00      	cmp	r6, #0
 800178e:	d1c8      	bne.n	8001722 <_Z4loopv+0x32>
		FontClassicPuts(tft, "UI", &Font_7x10, 0);

		adc.readAllRegister();
 8001790:	48b7      	ldr	r0, [pc, #732]	; (8001a70 <_Z4loopv+0x380>)
 8001792:	f7ff fdbf 	bl	8001314 <_ZN7ADS124315readAllRegisterEv>

		if (adc.ADSregister.SETUP.PGA != PGA_1) {
 8001796:	4bb7      	ldr	r3, [pc, #732]	; (8001a74 <_Z4loopv+0x384>)
 8001798:	7f1d      	ldrb	r5, [r3, #28]
 800179a:	076a      	lsls	r2, r5, #29
 800179c:	f040 87fe 	bne.w	800279c <_Z4loopv+0x10ac>
		HAL_Delay(1);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f001 fd87 	bl	80032b4 <HAL_Delay>
		ADS124x_CS_0;
 80017a6:	2200      	movs	r2, #0
 80017a8:	2110      	movs	r1, #16
 80017aa:	48b3      	ldr	r0, [pc, #716]	; (8001a78 <_Z4loopv+0x388>)
 80017ac:	f002 f84f 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80017b0:	2300      	movs	r3, #0
 80017b2:	49b2      	ldr	r1, [pc, #712]	; (8001a7c <_Z4loopv+0x38c>)
 80017b4:	4ab2      	ldr	r2, [pc, #712]	; (8001a80 <_Z4loopv+0x390>)
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	4bb2      	ldr	r3, [pc, #712]	; (8001a84 <_Z4loopv+0x394>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	0c9b      	lsrs	r3, r3, #18
 80017c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017c6:	009a      	lsls	r2, r3, #2
 80017c8:	4baf      	ldr	r3, [pc, #700]	; (8001a88 <_Z4loopv+0x398>)
 80017ca:	3a10      	subs	r2, #16
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	684b      	ldr	r3, [r1, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d8fc      	bhi.n	80017ce <_Z4loopv+0xde>
		XferByte(cmd);
 80017d4:	23fc      	movs	r3, #252	; 0xfc
 80017d6:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80017da:	4bac      	ldr	r3, [pc, #688]	; (8001a8c <_Z4loopv+0x39c>)
 80017dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d0fa      	beq.n	80017da <_Z4loopv+0xea>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80017e4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80017e8:	2301      	movs	r3, #1
 80017ea:	aa04      	add	r2, sp, #16
 80017ec:	48a7      	ldr	r0, [pc, #668]	; (8001a8c <_Z4loopv+0x39c>)
 80017ee:	f10d 010f 	add.w	r1, sp, #15
 80017f2:	9600      	str	r6, [sp, #0]
 80017f4:	f003 f974 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80017f8:	2300      	movs	r3, #0
 80017fa:	4da0      	ldr	r5, [pc, #640]	; (8001a7c <_Z4loopv+0x38c>)
 80017fc:	4aa0      	ldr	r2, [pc, #640]	; (8001a80 <_Z4loopv+0x390>)
 80017fe:	606b      	str	r3, [r5, #4]
 8001800:	4ba0      	ldr	r3, [pc, #640]	; (8001a84 <_Z4loopv+0x394>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	0c9b      	lsrs	r3, r3, #18
 800180a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800180e:	009a      	lsls	r2, r3, #2
 8001810:	4b9d      	ldr	r3, [pc, #628]	; (8001a88 <_Z4loopv+0x398>)
 8001812:	3a10      	subs	r2, #16
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	686b      	ldr	r3, [r5, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8fc      	bhi.n	8001816 <_Z4loopv+0x126>
		ADS124x_CS_1;
 800181c:	2201      	movs	r2, #1
 800181e:	2110      	movs	r1, #16
 8001820:	4895      	ldr	r0, [pc, #596]	; (8001a78 <_Z4loopv+0x388>)
 8001822:	f002 f814 	bl	800384e <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8001826:	2327      	movs	r3, #39	; 0x27
 8001828:	4e92      	ldr	r6, [pc, #584]	; (8001a74 <_Z4loopv+0x384>)
		ADS124x_CS_0;
 800182a:	2200      	movs	r2, #0
 800182c:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 800182e:	7773      	strb	r3, [r6, #29]
		ADS124x_CS_0;
 8001830:	4891      	ldr	r0, [pc, #580]	; (8001a78 <_Z4loopv+0x388>)
 8001832:	f002 f80c 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001836:	2300      	movs	r3, #0
 8001838:	606b      	str	r3, [r5, #4]
 800183a:	4b92      	ldr	r3, [pc, #584]	; (8001a84 <_Z4loopv+0x394>)
 800183c:	4a90      	ldr	r2, [pc, #576]	; (8001a80 <_Z4loopv+0x390>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	498e      	ldr	r1, [pc, #568]	; (8001a7c <_Z4loopv+0x38c>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0c9b      	lsrs	r3, r3, #18
 8001848:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800184c:	009a      	lsls	r2, r3, #2
 800184e:	4b8e      	ldr	r3, [pc, #568]	; (8001a88 <_Z4loopv+0x398>)
 8001850:	3a10      	subs	r2, #16
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	684b      	ldr	r3, [r1, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	d8fc      	bhi.n	8001854 <_Z4loopv+0x164>
		XferByte(0x50 + r);
 800185a:	2351      	movs	r3, #81	; 0x51
 800185c:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001860:	4b8a      	ldr	r3, [pc, #552]	; (8001a8c <_Z4loopv+0x39c>)
 8001862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001866:	2b02      	cmp	r3, #2
 8001868:	d0fa      	beq.n	8001860 <_Z4loopv+0x170>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800186a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800186e:	2301      	movs	r3, #1
 8001870:	4886      	ldr	r0, [pc, #536]	; (8001a8c <_Z4loopv+0x39c>)
 8001872:	aa04      	add	r2, sp, #16
 8001874:	f10d 010f 	add.w	r1, sp, #15
 8001878:	9500      	str	r5, [sp, #0]
 800187a:	f003 f931 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(0);
 800187e:	2300      	movs	r3, #0
 8001880:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001884:	4b81      	ldr	r3, [pc, #516]	; (8001a8c <_Z4loopv+0x39c>)
 8001886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800188a:	2b02      	cmp	r3, #2
 800188c:	d0fa      	beq.n	8001884 <_Z4loopv+0x194>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800188e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001892:	2301      	movs	r3, #1
 8001894:	487d      	ldr	r0, [pc, #500]	; (8001a8c <_Z4loopv+0x39c>)
 8001896:	aa04      	add	r2, sp, #16
 8001898:	f10d 010f 	add.w	r1, sp, #15
 800189c:	9500      	str	r5, [sp, #0]
 800189e:	f003 f91f 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(data);
 80018a2:	2327      	movs	r3, #39	; 0x27
 80018a4:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80018a8:	4b78      	ldr	r3, [pc, #480]	; (8001a8c <_Z4loopv+0x39c>)
 80018aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d0fa      	beq.n	80018a8 <_Z4loopv+0x1b8>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80018b2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80018b6:	2301      	movs	r3, #1
 80018b8:	aa04      	add	r2, sp, #16
 80018ba:	4874      	ldr	r0, [pc, #464]	; (8001a8c <_Z4loopv+0x39c>)
 80018bc:	f10d 010f 	add.w	r1, sp, #15
 80018c0:	9600      	str	r6, [sp, #0]
 80018c2:	f003 f90d 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80018c6:	2300      	movs	r3, #0
 80018c8:	4d6c      	ldr	r5, [pc, #432]	; (8001a7c <_Z4loopv+0x38c>)
 80018ca:	4a6d      	ldr	r2, [pc, #436]	; (8001a80 <_Z4loopv+0x390>)
 80018cc:	606b      	str	r3, [r5, #4]
 80018ce:	4b6d      	ldr	r3, [pc, #436]	; (8001a84 <_Z4loopv+0x394>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9b      	lsrs	r3, r3, #18
 80018d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018dc:	009a      	lsls	r2, r3, #2
 80018de:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <_Z4loopv+0x398>)
 80018e0:	3a10      	subs	r2, #16
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	686b      	ldr	r3, [r5, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d8fc      	bhi.n	80018e4 <_Z4loopv+0x1f4>
		ADS124x_CS_1;
 80018ea:	2201      	movs	r2, #1
 80018ec:	2110      	movs	r1, #16
 80018ee:	4862      	ldr	r0, [pc, #392]	; (8001a78 <_Z4loopv+0x388>)
 80018f0:	f001 ffad 	bl	800384e <HAL_GPIO_WritePin>
		HAL_Delay(41);
 80018f4:	2029      	movs	r0, #41	; 0x29
 80018f6:	f001 fcdd 	bl	80032b4 <HAL_Delay>
		readAllRegister();
 80018fa:	485d      	ldr	r0, [pc, #372]	; (8001a70 <_Z4loopv+0x380>)
 80018fc:	f7ff fd0a 	bl	8001314 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8001900:	495c      	ldr	r1, [pc, #368]	; (8001a74 <_Z4loopv+0x384>)
 8001902:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8001906:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 800190a:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	}

//Чтение выходного напряжения 2-7
	void readOut(void) {
		uint32_t v = adc.readADC(2, 7);
		vOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.0/2.1269 * 3.000/3.004 * 5.0/4.997;
 8001914:	4318      	orrs	r0, r3
 8001916:	460e      	mov	r6, r1
 8001918:	f7ff f9bc 	bl	8000c94 <__aeabi_ui2f>
 800191c:	495c      	ldr	r1, [pc, #368]	; (8001a90 <_Z4loopv+0x3a0>)
 800191e:	f7ff fa11 	bl	8000d44 <__aeabi_fmul>
 8001922:	f7fe fd81 	bl	8000428 <__aeabi_f2d>
 8001926:	a350      	add	r3, pc, #320	; (adr r3, 8001a68 <_Z4loopv+0x378>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fdd4 	bl	80004d8 <__aeabi_dmul>
 8001930:	f7ff f8aa 	bl	8000a88 <__aeabi_d2f>
 8001934:	4603      	mov	r3, r0
		HAL_Delay(1);
 8001936:	2001      	movs	r0, #1
 8001938:	6133      	str	r3, [r6, #16]
 800193a:	f001 fcbb 	bl	80032b4 <HAL_Delay>
		ADS124x_CS_0;
 800193e:	2200      	movs	r2, #0
 8001940:	2110      	movs	r1, #16
 8001942:	484d      	ldr	r0, [pc, #308]	; (8001a78 <_Z4loopv+0x388>)
 8001944:	f001 ff83 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001948:	2300      	movs	r3, #0
 800194a:	606b      	str	r3, [r5, #4]
 800194c:	4b4d      	ldr	r3, [pc, #308]	; (8001a84 <_Z4loopv+0x394>)
 800194e:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <_Z4loopv+0x390>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	494a      	ldr	r1, [pc, #296]	; (8001a7c <_Z4loopv+0x38c>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	0c9b      	lsrs	r3, r3, #18
 800195a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800195e:	009a      	lsls	r2, r3, #2
 8001960:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <_Z4loopv+0x398>)
 8001962:	3a10      	subs	r2, #16
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	684b      	ldr	r3, [r1, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8fc      	bhi.n	8001966 <_Z4loopv+0x276>
		XferByte(cmd);
 800196c:	23fc      	movs	r3, #252	; 0xfc
 800196e:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001972:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <_Z4loopv+0x39c>)
 8001974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001978:	2b02      	cmp	r3, #2
 800197a:	d0fa      	beq.n	8001972 <_Z4loopv+0x282>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800197c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001980:	2301      	movs	r3, #1
 8001982:	aa04      	add	r2, sp, #16
 8001984:	4841      	ldr	r0, [pc, #260]	; (8001a8c <_Z4loopv+0x39c>)
 8001986:	f10d 010f 	add.w	r1, sp, #15
 800198a:	9600      	str	r6, [sp, #0]
 800198c:	f003 f8a8 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001990:	2300      	movs	r3, #0
 8001992:	4d3a      	ldr	r5, [pc, #232]	; (8001a7c <_Z4loopv+0x38c>)
 8001994:	4a3a      	ldr	r2, [pc, #232]	; (8001a80 <_Z4loopv+0x390>)
 8001996:	606b      	str	r3, [r5, #4]
 8001998:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <_Z4loopv+0x394>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	0c9b      	lsrs	r3, r3, #18
 80019a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019a6:	009a      	lsls	r2, r3, #2
 80019a8:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <_Z4loopv+0x398>)
 80019aa:	3a10      	subs	r2, #16
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	686b      	ldr	r3, [r5, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8fc      	bhi.n	80019ae <_Z4loopv+0x2be>
		ADS124x_CS_1;
 80019b4:	2201      	movs	r2, #1
 80019b6:	2110      	movs	r1, #16
 80019b8:	482f      	ldr	r0, [pc, #188]	; (8001a78 <_Z4loopv+0x388>)
 80019ba:	f001 ff48 	bl	800384e <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 80019be:	2376      	movs	r3, #118	; 0x76
 80019c0:	4e2c      	ldr	r6, [pc, #176]	; (8001a74 <_Z4loopv+0x384>)
		ADS124x_CS_0;
 80019c2:	2200      	movs	r2, #0
 80019c4:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 80019c6:	7773      	strb	r3, [r6, #29]
		ADS124x_CS_0;
 80019c8:	482b      	ldr	r0, [pc, #172]	; (8001a78 <_Z4loopv+0x388>)
 80019ca:	f001 ff40 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80019ce:	2300      	movs	r3, #0
 80019d0:	606b      	str	r3, [r5, #4]
 80019d2:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <_Z4loopv+0x394>)
 80019d4:	4a2a      	ldr	r2, [pc, #168]	; (8001a80 <_Z4loopv+0x390>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4928      	ldr	r1, [pc, #160]	; (8001a7c <_Z4loopv+0x38c>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0c9b      	lsrs	r3, r3, #18
 80019e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019e4:	009a      	lsls	r2, r3, #2
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <_Z4loopv+0x398>)
 80019e8:	3a10      	subs	r2, #16
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	684b      	ldr	r3, [r1, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d8fc      	bhi.n	80019ec <_Z4loopv+0x2fc>
		XferByte(0x50 + r);
 80019f2:	2351      	movs	r3, #81	; 0x51
 80019f4:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <_Z4loopv+0x39c>)
 80019fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d0fa      	beq.n	80019f8 <_Z4loopv+0x308>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001a02:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001a06:	2301      	movs	r3, #1
 8001a08:	4820      	ldr	r0, [pc, #128]	; (8001a8c <_Z4loopv+0x39c>)
 8001a0a:	aa04      	add	r2, sp, #16
 8001a0c:	f10d 010f 	add.w	r1, sp, #15
 8001a10:	9500      	str	r5, [sp, #0]
 8001a12:	f003 f865 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8001a16:	2300      	movs	r3, #0
 8001a18:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <_Z4loopv+0x39c>)
 8001a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d0fa      	beq.n	8001a1c <_Z4loopv+0x32c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001a26:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	4817      	ldr	r0, [pc, #92]	; (8001a8c <_Z4loopv+0x39c>)
 8001a2e:	aa04      	add	r2, sp, #16
 8001a30:	f10d 010f 	add.w	r1, sp, #15
 8001a34:	9500      	str	r5, [sp, #0]
 8001a36:	f003 f853 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8001a3a:	2376      	movs	r3, #118	; 0x76
 8001a3c:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <_Z4loopv+0x39c>)
 8001a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d0fa      	beq.n	8001a40 <_Z4loopv+0x350>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001a4a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001a4e:	2301      	movs	r3, #1
 8001a50:	aa04      	add	r2, sp, #16
 8001a52:	f10d 010f 	add.w	r1, sp, #15
 8001a56:	480d      	ldr	r0, [pc, #52]	; (8001a8c <_Z4loopv+0x39c>)
 8001a58:	9500      	str	r5, [sp, #0]
 8001a5a:	f003 f841 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	4906      	ldr	r1, [pc, #24]	; (8001a7c <_Z4loopv+0x38c>)
 8001a62:	e017      	b.n	8001a94 <_Z4loopv+0x3a4>
 8001a64:	f3af 8000 	nop.w
 8001a68:	881d1ca2 	.word	0x881d1ca2
 8001a6c:	40168d31 	.word	0x40168d31
 8001a70:	200007e8 	.word	0x200007e8
 8001a74:	200007cc 	.word	0x200007cc
 8001a78:	40010800 	.word	0x40010800
 8001a7c:	e0001000 	.word	0xe0001000
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	2000005c 	.word	0x2000005c
 8001a88:	2000091c 	.word	0x2000091c
 8001a8c:	2000082c 	.word	0x2000082c
 8001a90:	34200000 	.word	0x34200000
 8001a94:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <_Z4loopv+0x514>)
 8001a96:	604b      	str	r3, [r1, #4]
 8001a98:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <_Z4loopv+0x518>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	0c9b      	lsrs	r3, r3, #18
 8001aa2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001aa6:	009a      	lsls	r2, r3, #2
 8001aa8:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <_Z4loopv+0x51c>)
 8001aaa:	3a10      	subs	r2, #16
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	684b      	ldr	r3, [r1, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d8fc      	bhi.n	8001aae <_Z4loopv+0x3be>
		ADS124x_CS_1;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	4855      	ldr	r0, [pc, #340]	; (8001c10 <_Z4loopv+0x520>)
 8001aba:	f001 fec8 	bl	800384e <HAL_GPIO_WritePin>
		HAL_Delay(41);
 8001abe:	2029      	movs	r0, #41	; 0x29
 8001ac0:	f001 fbf8 	bl	80032b4 <HAL_Delay>
		readAllRegister();
 8001ac4:	4853      	ldr	r0, [pc, #332]	; (8001c14 <_Z4loopv+0x524>)
 8001ac6:	f7ff fc25 	bl	8001314 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8001aca:	4953      	ldr	r1, [pc, #332]	; (8001c18 <_Z4loopv+0x528>)
 8001acc:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8001ad0:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8001ad4:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	}

//Чтение тока 7-6
	void readI(void) {
		uint32_t v = adc.readADC(7, 6);
		iOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 20000.0F - 3.5F;
 8001ade:	4318      	orrs	r0, r3
 8001ae0:	f7ff f8d8 	bl	8000c94 <__aeabi_ui2f>
		if (iOut<0) iOut = 0;
 8001ae4:	494d      	ldr	r1, [pc, #308]	; (8001c1c <_Z4loopv+0x52c>)
		iOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 20000.0F - 3.5F;
 8001ae6:	4605      	mov	r5, r0
		if (iOut<0) iOut = 0;
 8001ae8:	f7ff faca 	bl	8001080 <__aeabi_fcmplt>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	f040 854b 	bne.w	8002588 <_Z4loopv+0xe98>
		iOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 20000.0F - 3.5F;
 8001af2:	494b      	ldr	r1, [pc, #300]	; (8001c20 <_Z4loopv+0x530>)
 8001af4:	4628      	mov	r0, r5
 8001af6:	f7ff f925 	bl	8000d44 <__aeabi_fmul>
 8001afa:	494a      	ldr	r1, [pc, #296]	; (8001c24 <_Z4loopv+0x534>)
 8001afc:	f7ff f818 	bl	8000b30 <__aeabi_fsub>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f44f 110c 	mov.w	r1, #2293760	; 0x230000
 8001b06:	4d44      	ldr	r5, [pc, #272]	; (8001c18 <_Z4loopv+0x528>)
 8001b08:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001b0a:	616b      	str	r3, [r5, #20]
		sprintf(str, "vOut  %f", vOut);
 8001b0c:	6928      	ldr	r0, [r5, #16]
 8001b0e:	6151      	str	r1, [r2, #20]
 8001b10:	f7fe fc8a 	bl	8000428 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	a804      	add	r0, sp, #16
 8001b1a:	4943      	ldr	r1, [pc, #268]	; (8001c28 <_Z4loopv+0x538>)
 8001b1c:	f005 f9ec 	bl	8006ef8 <siprintf>
 8001b20:	f89d 9010 	ldrb.w	r9, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 8001b24:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8001b26:	f1b9 0f00 	cmp.w	r9, #0
 8001b2a:	d042      	beq.n	8001bb2 <_Z4loopv+0x4c2>
 8001b2c:	463b      	mov	r3, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001b2e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8001b32:	464f      	mov	r7, r9
 8001b34:	4699      	mov	r9, r3
 8001b36:	7822      	ldrb	r2, [r4, #0]
 8001b38:	f10d 0a10 	add.w	sl, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 8001b3c:	7863      	ldrb	r3, [r4, #1]
 8001b3e:	b34b      	cbz	r3, 8001b94 <_Z4loopv+0x4a4>
 8001b40:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b42:	f1a7 0820 	sub.w	r8, r7, #32
 8001b46:	fb08 6303 	mla	r3, r8, r3, r6
 8001b4a:	6861      	ldr	r1, [r4, #4]
 8001b4c:	f831 b013 	ldrh.w	fp, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b50:	b302      	cbz	r2, 8001b94 <_Z4loopv+0x4a4>
 8001b52:	2500      	movs	r5, #0
 8001b54:	e00b      	b.n	8001b6e <_Z4loopv+0x47e>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8001b56:	4648      	mov	r0, r9
 8001b58:	f8b9 3018 	ldrh.w	r3, [r9, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8001b5c:	4432      	add	r2, r6
 8001b5e:	f004 fb5b 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b62:	7822      	ldrb	r2, [r4, #0]
 8001b64:	3501      	adds	r5, #1
 8001b66:	4295      	cmp	r5, r2
 8001b68:	d20e      	bcs.n	8001b88 <_Z4loopv+0x498>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001b6a:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
			if ((b << j) & 0x8000) {
 8001b6e:	fa0b f305 	lsl.w	r3, fp, r5
 8001b72:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8001b74:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 8001b78:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 8001b7c:	d4eb      	bmi.n	8001b56 <_Z4loopv+0x466>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8001b7e:	1941      	adds	r1, r0, r5
 8001b80:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8001b84:	4648      	mov	r0, r9
 8001b86:	e7e9      	b.n	8001b5c <_Z4loopv+0x46c>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b88:	7863      	ldrb	r3, [r4, #1]
 8001b8a:	3601      	adds	r6, #1
 8001b8c:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001b8e:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8001b92:	d8d8      	bhi.n	8001b46 <_Z4loopv+0x456>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001b94:	4410      	add	r0, r2
 8001b96:	3801      	subs	r0, #1
 8001b98:	b200      	sxth	r0, r0
 8001b9a:	f8a9 0014 	strh.w	r0, [r9, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8001b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8001ba2:	42bb      	cmp	r3, r7
 8001ba4:	d103      	bne.n	8001bae <_Z4loopv+0x4be>
	while (*str) {
 8001ba6:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
 8001baa:	2f00      	cmp	r7, #0
 8001bac:	d1c6      	bne.n	8001b3c <_Z4loopv+0x44c>
		tft->GotoXY(0, 44);
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <_Z4loopv+0x528>)
 8001bb0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001bb2:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
		sprintf(str, "I  %4.1f mA", iOut);
 8001bb6:	4d18      	ldr	r5, [pc, #96]	; (8001c18 <_Z4loopv+0x528>)
 8001bb8:	6968      	ldr	r0, [r5, #20]
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	f7fe fc34 	bl	8000428 <__aeabi_f2d>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	a804      	add	r0, sp, #16
 8001bc6:	4919      	ldr	r1, [pc, #100]	; (8001c2c <_Z4loopv+0x53c>)
 8001bc8:	f005 f996 	bl	8006ef8 <siprintf>
 8001bcc:	f89d 8010 	ldrb.w	r8, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 8001bd0:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8001bd4:	f1b8 0f00 	cmp.w	r8, #0
 8001bd8:	d060      	beq.n	8001c9c <_Z4loopv+0x5ac>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001bda:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
 8001bde:	7821      	ldrb	r1, [r4, #0]
 8001be0:	f10d 0910 	add.w	r9, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 8001be4:	7863      	ldrb	r3, [r4, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d047      	beq.n	8001c7a <_Z4loopv+0x58a>
 8001bea:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001bec:	f1a8 0720 	sub.w	r7, r8, #32
 8001bf0:	fb07 6303 	mla	r3, r7, r3, r6
 8001bf4:	6862      	ldr	r2, [r4, #4]
 8001bf6:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001bfa:	2900      	cmp	r1, #0
 8001bfc:	d03d      	beq.n	8001c7a <_Z4loopv+0x58a>
 8001bfe:	2500      	movs	r5, #0
 8001c00:	e022      	b.n	8001c48 <_Z4loopv+0x558>
 8001c02:	bf00      	nop
 8001c04:	431bde83 	.word	0x431bde83
 8001c08:	2000005c 	.word	0x2000005c
 8001c0c:	2000091c 	.word	0x2000091c
 8001c10:	40010800 	.word	0x40010800
 8001c14:	200007e8 	.word	0x200007e8
 8001c18:	200007cc 	.word	0x200007cc
 8001c1c:	4492ccf7 	.word	0x4492ccf7
 8001c20:	3b435000 	.word	0x3b435000
 8001c24:	40600000 	.word	0x40600000
 8001c28:	080091b4 	.word	0x080091b4
 8001c2c:	080091c0 	.word	0x080091c0
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8001c30:	4650      	mov	r0, sl
 8001c32:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8001c36:	4432      	add	r2, r6
 8001c38:	f004 faee 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c3c:	7821      	ldrb	r1, [r4, #0]
 8001c3e:	3501      	adds	r5, #1
 8001c40:	42a9      	cmp	r1, r5
 8001c42:	d914      	bls.n	8001c6e <_Z4loopv+0x57e>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001c44:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
			if ((b << j) & 0x8000) {
 8001c48:	fa0b f305 	lsl.w	r3, fp, r5
 8001c4c:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8001c4e:	f9ba 2016 	ldrsh.w	r2, [sl, #22]
 8001c52:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 8001c56:	d4eb      	bmi.n	8001c30 <_Z4loopv+0x540>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8001c58:	1941      	adds	r1, r0, r5
 8001c5a:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 8001c5e:	4650      	mov	r0, sl
 8001c60:	4432      	add	r2, r6
 8001c62:	f004 fad9 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c66:	7821      	ldrb	r1, [r4, #0]
 8001c68:	3501      	adds	r5, #1
 8001c6a:	428d      	cmp	r5, r1
 8001c6c:	d3ea      	bcc.n	8001c44 <_Z4loopv+0x554>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c6e:	7863      	ldrb	r3, [r4, #1]
 8001c70:	3601      	adds	r6, #1
 8001c72:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001c74:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8001c78:	d8ba      	bhi.n	8001bf0 <_Z4loopv+0x500>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001c7a:	4408      	add	r0, r1
 8001c7c:	3801      	subs	r0, #1
 8001c7e:	b200      	sxth	r0, r0
 8001c80:	f8aa 0014 	strh.w	r0, [sl, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8001c84:	f899 3000 	ldrb.w	r3, [r9]
 8001c88:	4543      	cmp	r3, r8
 8001c8a:	d104      	bne.n	8001c96 <_Z4loopv+0x5a6>
	while (*str) {
 8001c8c:	f819 8f01 	ldrb.w	r8, [r9, #1]!
 8001c90:	f1b8 0f00 	cmp.w	r8, #0
 8001c94:	d1a6      	bne.n	8001be4 <_Z4loopv+0x4f4>
		tft->driver.Update();
 8001c96:	4bb8      	ldr	r3, [pc, #736]	; (8001f78 <_Z4loopv+0x888>)
 8001c98:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
			break;
		}
	}

	void Update(void) {
		switch (LCD->LCD_Driver) {
 8001c9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001ca0:	7a1b      	ldrb	r3, [r3, #8]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	f47f ad28 	bne.w	80016f8 <_Z4loopv+0x8>

#if defined(TFT_DRIVER_SSD1306)
		case SSD1306:
			SSD1306_UpdateScreen();
 8001ca8:	f10a 0004 	add.w	r0, sl, #4
 8001cac:	f004 fa90 	bl	80061d0 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
		if (screen == UI)
 8001cb0:	4bb1      	ldr	r3, [pc, #708]	; (8001f78 <_Z4loopv+0x888>)
 8001cb2:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	f43f ad24 	beq.w	8001704 <_Z4loopv+0x14>
		adc.readAllRegister();
 8001cbc:	48af      	ldr	r0, [pc, #700]	; (8001f7c <_Z4loopv+0x88c>)
 8001cbe:	f7ff fb29 	bl	8001314 <_ZN7ADS124315readAllRegisterEv>
		if (adc.ADSregister.SETUP.PGA != PGA_1) {
 8001cc2:	4bad      	ldr	r3, [pc, #692]	; (8001f78 <_Z4loopv+0x888>)
 8001cc4:	7f1d      	ldrb	r5, [r3, #28]
 8001cc6:	076a      	lsls	r2, r5, #29
 8001cc8:	f040 846c 	bne.w	80025a4 <_Z4loopv+0xeb4>
		HAL_Delay(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f001 faf1 	bl	80032b4 <HAL_Delay>
		ADS124x_CS_0;
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2110      	movs	r1, #16
 8001cd6:	48aa      	ldr	r0, [pc, #680]	; (8001f80 <_Z4loopv+0x890>)
 8001cd8:	f001 fdb9 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	49a9      	ldr	r1, [pc, #676]	; (8001f84 <_Z4loopv+0x894>)
 8001ce0:	4aa9      	ldr	r2, [pc, #676]	; (8001f88 <_Z4loopv+0x898>)
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	4ba9      	ldr	r3, [pc, #676]	; (8001f8c <_Z4loopv+0x89c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9b      	lsrs	r3, r3, #18
 8001cee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cf2:	009a      	lsls	r2, r3, #2
 8001cf4:	4ba6      	ldr	r3, [pc, #664]	; (8001f90 <_Z4loopv+0x8a0>)
 8001cf6:	3a10      	subs	r2, #16
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	684b      	ldr	r3, [r1, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8fc      	bhi.n	8001cfa <_Z4loopv+0x60a>
		XferByte(cmd);
 8001d00:	23fc      	movs	r3, #252	; 0xfc
 8001d02:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001d06:	4ba3      	ldr	r3, [pc, #652]	; (8001f94 <_Z4loopv+0x8a4>)
 8001d08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d0fa      	beq.n	8001d06 <_Z4loopv+0x616>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001d10:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001d14:	2301      	movs	r3, #1
 8001d16:	aa04      	add	r2, sp, #16
 8001d18:	489e      	ldr	r0, [pc, #632]	; (8001f94 <_Z4loopv+0x8a4>)
 8001d1a:	f10d 010f 	add.w	r1, sp, #15
 8001d1e:	9600      	str	r6, [sp, #0]
 8001d20:	f002 fede 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001d24:	2300      	movs	r3, #0
 8001d26:	4d97      	ldr	r5, [pc, #604]	; (8001f84 <_Z4loopv+0x894>)
 8001d28:	4a97      	ldr	r2, [pc, #604]	; (8001f88 <_Z4loopv+0x898>)
 8001d2a:	606b      	str	r3, [r5, #4]
 8001d2c:	4b97      	ldr	r3, [pc, #604]	; (8001f8c <_Z4loopv+0x89c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d3a:	009a      	lsls	r2, r3, #2
 8001d3c:	4b94      	ldr	r3, [pc, #592]	; (8001f90 <_Z4loopv+0x8a0>)
 8001d3e:	3a10      	subs	r2, #16
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	686b      	ldr	r3, [r5, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d8fc      	bhi.n	8001d42 <_Z4loopv+0x652>
		ADS124x_CS_1;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	488c      	ldr	r0, [pc, #560]	; (8001f80 <_Z4loopv+0x890>)
 8001d4e:	f001 fd7e 	bl	800384e <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8001d52:	2356      	movs	r3, #86	; 0x56
 8001d54:	4e88      	ldr	r6, [pc, #544]	; (8001f78 <_Z4loopv+0x888>)
		ADS124x_CS_0;
 8001d56:	2200      	movs	r2, #0
 8001d58:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 8001d5a:	7773      	strb	r3, [r6, #29]
		ADS124x_CS_0;
 8001d5c:	4888      	ldr	r0, [pc, #544]	; (8001f80 <_Z4loopv+0x890>)
 8001d5e:	f001 fd76 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001d62:	2300      	movs	r3, #0
 8001d64:	606b      	str	r3, [r5, #4]
 8001d66:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <_Z4loopv+0x89c>)
 8001d68:	4a87      	ldr	r2, [pc, #540]	; (8001f88 <_Z4loopv+0x898>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4985      	ldr	r1, [pc, #532]	; (8001f84 <_Z4loopv+0x894>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0c9b      	lsrs	r3, r3, #18
 8001d74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d78:	009a      	lsls	r2, r3, #2
 8001d7a:	4b85      	ldr	r3, [pc, #532]	; (8001f90 <_Z4loopv+0x8a0>)
 8001d7c:	3a10      	subs	r2, #16
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	684b      	ldr	r3, [r1, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d8fc      	bhi.n	8001d80 <_Z4loopv+0x690>
		XferByte(0x50 + r);
 8001d86:	2351      	movs	r3, #81	; 0x51
 8001d88:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001d8c:	4b81      	ldr	r3, [pc, #516]	; (8001f94 <_Z4loopv+0x8a4>)
 8001d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d0fa      	beq.n	8001d8c <_Z4loopv+0x69c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001d96:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	487d      	ldr	r0, [pc, #500]	; (8001f94 <_Z4loopv+0x8a4>)
 8001d9e:	aa04      	add	r2, sp, #16
 8001da0:	f10d 010f 	add.w	r1, sp, #15
 8001da4:	9500      	str	r5, [sp, #0]
 8001da6:	f002 fe9b 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8001daa:	2300      	movs	r3, #0
 8001dac:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001db0:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <_Z4loopv+0x8a4>)
 8001db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d0fa      	beq.n	8001db0 <_Z4loopv+0x6c0>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001dba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	4874      	ldr	r0, [pc, #464]	; (8001f94 <_Z4loopv+0x8a4>)
 8001dc2:	aa04      	add	r2, sp, #16
 8001dc4:	f10d 010f 	add.w	r1, sp, #15
 8001dc8:	9500      	str	r5, [sp, #0]
 8001dca:	f002 fe89 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8001dce:	2356      	movs	r3, #86	; 0x56
 8001dd0:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <_Z4loopv+0x8a4>)
 8001dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d0fa      	beq.n	8001dd4 <_Z4loopv+0x6e4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001dde:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001de2:	2301      	movs	r3, #1
 8001de4:	aa04      	add	r2, sp, #16
 8001de6:	486b      	ldr	r0, [pc, #428]	; (8001f94 <_Z4loopv+0x8a4>)
 8001de8:	f10d 010f 	add.w	r1, sp, #15
 8001dec:	9600      	str	r6, [sp, #0]
 8001dee:	f002 fe77 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001df2:	2300      	movs	r3, #0
 8001df4:	4d63      	ldr	r5, [pc, #396]	; (8001f84 <_Z4loopv+0x894>)
 8001df6:	4a64      	ldr	r2, [pc, #400]	; (8001f88 <_Z4loopv+0x898>)
 8001df8:	606b      	str	r3, [r5, #4]
 8001dfa:	4b64      	ldr	r3, [pc, #400]	; (8001f8c <_Z4loopv+0x89c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9b      	lsrs	r3, r3, #18
 8001e04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <_Z4loopv+0x8a0>)
 8001e0c:	3a10      	subs	r2, #16
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	686b      	ldr	r3, [r5, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d8fc      	bhi.n	8001e10 <_Z4loopv+0x720>
		ADS124x_CS_1;
 8001e16:	2201      	movs	r2, #1
 8001e18:	2110      	movs	r1, #16
 8001e1a:	4859      	ldr	r0, [pc, #356]	; (8001f80 <_Z4loopv+0x890>)
 8001e1c:	f001 fd17 	bl	800384e <HAL_GPIO_WritePin>
		HAL_Delay(41);
 8001e20:	2029      	movs	r0, #41	; 0x29
 8001e22:	f001 fa47 	bl	80032b4 <HAL_Delay>
		readAllRegister();
 8001e26:	4855      	ldr	r0, [pc, #340]	; (8001f7c <_Z4loopv+0x88c>)
 8001e28:	f7ff fa74 	bl	8001314 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8001e2c:	4952      	ldr	r1, [pc, #328]	; (8001f78 <_Z4loopv+0x888>)
 8001e2e:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8001e32:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8001e36:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		b1 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 4.120/2.0202 * 4.119/4.2;
 8001e40:	4318      	orrs	r0, r3
 8001e42:	460e      	mov	r6, r1
 8001e44:	f7fe ff26 	bl	8000c94 <__aeabi_ui2f>
 8001e48:	4953      	ldr	r1, [pc, #332]	; (8001f98 <_Z4loopv+0x8a8>)
 8001e4a:	f7fe ff7b 	bl	8000d44 <__aeabi_fmul>
 8001e4e:	f7fe faeb 	bl	8000428 <__aeabi_f2d>
 8001e52:	a347      	add	r3, pc, #284	; (adr r3, 8001f70 <_Z4loopv+0x880>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe fb3e 	bl	80004d8 <__aeabi_dmul>
 8001e5c:	f7fe fe14 	bl	8000a88 <__aeabi_d2f>
 8001e60:	4603      	mov	r3, r0
		HAL_Delay(1);
 8001e62:	2001      	movs	r0, #1
 8001e64:	6033      	str	r3, [r6, #0]
 8001e66:	f001 fa25 	bl	80032b4 <HAL_Delay>
		ADS124x_CS_0;
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	4844      	ldr	r0, [pc, #272]	; (8001f80 <_Z4loopv+0x890>)
 8001e70:	f001 fced 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001e74:	2300      	movs	r3, #0
 8001e76:	606b      	str	r3, [r5, #4]
 8001e78:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <_Z4loopv+0x89c>)
 8001e7a:	4a43      	ldr	r2, [pc, #268]	; (8001f88 <_Z4loopv+0x898>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4941      	ldr	r1, [pc, #260]	; (8001f84 <_Z4loopv+0x894>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	0c9b      	lsrs	r3, r3, #18
 8001e86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e8a:	009a      	lsls	r2, r3, #2
 8001e8c:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <_Z4loopv+0x8a0>)
 8001e8e:	3a10      	subs	r2, #16
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	684b      	ldr	r3, [r1, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8fc      	bhi.n	8001e92 <_Z4loopv+0x7a2>
		XferByte(cmd);
 8001e98:	23fc      	movs	r3, #252	; 0xfc
 8001e9a:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <_Z4loopv+0x8a4>)
 8001ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d0fa      	beq.n	8001e9e <_Z4loopv+0x7ae>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001ea8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001eac:	2301      	movs	r3, #1
 8001eae:	aa04      	add	r2, sp, #16
 8001eb0:	4838      	ldr	r0, [pc, #224]	; (8001f94 <_Z4loopv+0x8a4>)
 8001eb2:	f10d 010f 	add.w	r1, sp, #15
 8001eb6:	9600      	str	r6, [sp, #0]
 8001eb8:	f002 fe12 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	4d31      	ldr	r5, [pc, #196]	; (8001f84 <_Z4loopv+0x894>)
 8001ec0:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <_Z4loopv+0x898>)
 8001ec2:	606b      	str	r3, [r5, #4]
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <_Z4loopv+0x89c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	0c9b      	lsrs	r3, r3, #18
 8001ece:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ed2:	009a      	lsls	r2, r3, #2
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <_Z4loopv+0x8a0>)
 8001ed6:	3a10      	subs	r2, #16
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	686b      	ldr	r3, [r5, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8fc      	bhi.n	8001eda <_Z4loopv+0x7ea>
		ADS124x_CS_1;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2110      	movs	r1, #16
 8001ee4:	4826      	ldr	r0, [pc, #152]	; (8001f80 <_Z4loopv+0x890>)
 8001ee6:	f001 fcb2 	bl	800384e <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8001eea:	2346      	movs	r3, #70	; 0x46
 8001eec:	4e22      	ldr	r6, [pc, #136]	; (8001f78 <_Z4loopv+0x888>)
		ADS124x_CS_0;
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 8001ef2:	7773      	strb	r3, [r6, #29]
		ADS124x_CS_0;
 8001ef4:	4822      	ldr	r0, [pc, #136]	; (8001f80 <_Z4loopv+0x890>)
 8001ef6:	f001 fcaa 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001efa:	2300      	movs	r3, #0
 8001efc:	606b      	str	r3, [r5, #4]
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <_Z4loopv+0x89c>)
 8001f00:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <_Z4loopv+0x898>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	491f      	ldr	r1, [pc, #124]	; (8001f84 <_Z4loopv+0x894>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f10:	009a      	lsls	r2, r3, #2
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <_Z4loopv+0x8a0>)
 8001f14:	3a10      	subs	r2, #16
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	684b      	ldr	r3, [r1, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d8fc      	bhi.n	8001f18 <_Z4loopv+0x828>
		XferByte(0x50 + r);
 8001f1e:	2351      	movs	r3, #81	; 0x51
 8001f20:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <_Z4loopv+0x8a4>)
 8001f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d0fa      	beq.n	8001f24 <_Z4loopv+0x834>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001f2e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001f32:	2301      	movs	r3, #1
 8001f34:	4817      	ldr	r0, [pc, #92]	; (8001f94 <_Z4loopv+0x8a4>)
 8001f36:	aa04      	add	r2, sp, #16
 8001f38:	f10d 010f 	add.w	r1, sp, #15
 8001f3c:	9500      	str	r5, [sp, #0]
 8001f3e:	f002 fdcf 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8001f42:	2300      	movs	r3, #0
 8001f44:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <_Z4loopv+0x8a4>)
 8001f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d0fa      	beq.n	8001f48 <_Z4loopv+0x858>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001f52:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001f56:	2301      	movs	r3, #1
 8001f58:	480e      	ldr	r0, [pc, #56]	; (8001f94 <_Z4loopv+0x8a4>)
 8001f5a:	aa04      	add	r2, sp, #16
 8001f5c:	f10d 010f 	add.w	r1, sp, #15
 8001f60:	9500      	str	r5, [sp, #0]
 8001f62:	f002 fdbd 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8001f66:	2346      	movs	r3, #70	; 0x46
 8001f68:	f88d 300f 	strb.w	r3, [sp, #15]
 8001f6c:	e016      	b.n	8001f9c <_Z4loopv+0x8ac>
 8001f6e:	bf00      	nop
 8001f70:	131ec926 	.word	0x131ec926
 8001f74:	40000025 	.word	0x40000025
 8001f78:	200007cc 	.word	0x200007cc
 8001f7c:	200007e8 	.word	0x200007e8
 8001f80:	40010800 	.word	0x40010800
 8001f84:	e0001000 	.word	0xe0001000
 8001f88:	431bde83 	.word	0x431bde83
 8001f8c:	2000005c 	.word	0x2000005c
 8001f90:	2000091c 	.word	0x2000091c
 8001f94:	2000082c 	.word	0x2000082c
 8001f98:	34200000 	.word	0x34200000
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001f9c:	4bb6      	ldr	r3, [pc, #728]	; (8002278 <_Z4loopv+0xb88>)
 8001f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d0fa      	beq.n	8001f9c <_Z4loopv+0x8ac>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001fa6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001faa:	2301      	movs	r3, #1
 8001fac:	aa04      	add	r2, sp, #16
 8001fae:	48b2      	ldr	r0, [pc, #712]	; (8002278 <_Z4loopv+0xb88>)
 8001fb0:	f10d 010f 	add.w	r1, sp, #15
 8001fb4:	9600      	str	r6, [sp, #0]
 8001fb6:	f002 fd93 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	4daf      	ldr	r5, [pc, #700]	; (800227c <_Z4loopv+0xb8c>)
 8001fbe:	4ab0      	ldr	r2, [pc, #704]	; (8002280 <_Z4loopv+0xb90>)
 8001fc0:	606b      	str	r3, [r5, #4]
 8001fc2:	4bb0      	ldr	r3, [pc, #704]	; (8002284 <_Z4loopv+0xb94>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9b      	lsrs	r3, r3, #18
 8001fcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fd0:	009a      	lsls	r2, r3, #2
 8001fd2:	4bad      	ldr	r3, [pc, #692]	; (8002288 <_Z4loopv+0xb98>)
 8001fd4:	3a10      	subs	r2, #16
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	686b      	ldr	r3, [r5, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d8fc      	bhi.n	8001fd8 <_Z4loopv+0x8e8>
		ADS124x_CS_1;
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2110      	movs	r1, #16
 8001fe2:	48aa      	ldr	r0, [pc, #680]	; (800228c <_Z4loopv+0xb9c>)
 8001fe4:	f001 fc33 	bl	800384e <HAL_GPIO_WritePin>
		HAL_Delay(41);
 8001fe8:	2029      	movs	r0, #41	; 0x29
 8001fea:	f001 f963 	bl	80032b4 <HAL_Delay>
		readAllRegister();
 8001fee:	48a8      	ldr	r0, [pc, #672]	; (8002290 <_Z4loopv+0xba0>)
 8001ff0:	f7ff f990 	bl	8001314 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8001ff4:	49a7      	ldr	r1, [pc, #668]	; (8002294 <_Z4loopv+0xba4>)
 8001ff6:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8001ffa:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8001ffe:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		v8 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 8.197/2.1743 * 8.197/8.196 * 8.192/8.191;
 8002008:	4318      	orrs	r0, r3
 800200a:	460e      	mov	r6, r1
 800200c:	f7fe fe42 	bl	8000c94 <__aeabi_ui2f>
 8002010:	49a1      	ldr	r1, [pc, #644]	; (8002298 <_Z4loopv+0xba8>)
 8002012:	f7fe fe97 	bl	8000d44 <__aeabi_fmul>
 8002016:	f7fe fa07 	bl	8000428 <__aeabi_f2d>
 800201a:	a393      	add	r3, pc, #588	; (adr r3, 8002268 <_Z4loopv+0xb78>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fa5a 	bl	80004d8 <__aeabi_dmul>
 8002024:	f7fe fd30 	bl	8000a88 <__aeabi_d2f>
		b2 = v8 - b1;
 8002028:	6831      	ldr	r1, [r6, #0]
		v8 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 8.197/2.1743 * 8.197/8.196 * 8.192/8.191;
 800202a:	61b0      	str	r0, [r6, #24]
		b2 = v8 - b1;
 800202c:	f7fe fd80 	bl	8000b30 <__aeabi_fsub>
 8002030:	4603      	mov	r3, r0
		HAL_Delay(1);
 8002032:	2001      	movs	r0, #1
 8002034:	6073      	str	r3, [r6, #4]
 8002036:	f001 f93d 	bl	80032b4 <HAL_Delay>
		ADS124x_CS_0;
 800203a:	2200      	movs	r2, #0
 800203c:	2110      	movs	r1, #16
 800203e:	4893      	ldr	r0, [pc, #588]	; (800228c <_Z4loopv+0xb9c>)
 8002040:	f001 fc05 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002044:	2300      	movs	r3, #0
 8002046:	606b      	str	r3, [r5, #4]
 8002048:	4b8e      	ldr	r3, [pc, #568]	; (8002284 <_Z4loopv+0xb94>)
 800204a:	4a8d      	ldr	r2, [pc, #564]	; (8002280 <_Z4loopv+0xb90>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	498b      	ldr	r1, [pc, #556]	; (800227c <_Z4loopv+0xb8c>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800205a:	009a      	lsls	r2, r3, #2
 800205c:	4b8a      	ldr	r3, [pc, #552]	; (8002288 <_Z4loopv+0xb98>)
 800205e:	3a10      	subs	r2, #16
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	684b      	ldr	r3, [r1, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8fc      	bhi.n	8002062 <_Z4loopv+0x972>
		XferByte(cmd);
 8002068:	23fc      	movs	r3, #252	; 0xfc
 800206a:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800206e:	4b82      	ldr	r3, [pc, #520]	; (8002278 <_Z4loopv+0xb88>)
 8002070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002074:	2b02      	cmp	r3, #2
 8002076:	d0fa      	beq.n	800206e <_Z4loopv+0x97e>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002078:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800207c:	2301      	movs	r3, #1
 800207e:	aa04      	add	r2, sp, #16
 8002080:	487d      	ldr	r0, [pc, #500]	; (8002278 <_Z4loopv+0xb88>)
 8002082:	f10d 010f 	add.w	r1, sp, #15
 8002086:	9600      	str	r6, [sp, #0]
 8002088:	f002 fd2a 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800208c:	2300      	movs	r3, #0
 800208e:	4d7b      	ldr	r5, [pc, #492]	; (800227c <_Z4loopv+0xb8c>)
 8002090:	4a7b      	ldr	r2, [pc, #492]	; (8002280 <_Z4loopv+0xb90>)
 8002092:	606b      	str	r3, [r5, #4]
 8002094:	4b7b      	ldr	r3, [pc, #492]	; (8002284 <_Z4loopv+0xb94>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	0c9b      	lsrs	r3, r3, #18
 800209e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020a2:	009a      	lsls	r2, r3, #2
 80020a4:	4b78      	ldr	r3, [pc, #480]	; (8002288 <_Z4loopv+0xb98>)
 80020a6:	3a10      	subs	r2, #16
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	686b      	ldr	r3, [r5, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8fc      	bhi.n	80020aa <_Z4loopv+0x9ba>
		ADS124x_CS_1;
 80020b0:	2201      	movs	r2, #1
 80020b2:	2110      	movs	r1, #16
 80020b4:	4875      	ldr	r0, [pc, #468]	; (800228c <_Z4loopv+0xb9c>)
 80020b6:	f001 fbca 	bl	800384e <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 80020ba:	2316      	movs	r3, #22
 80020bc:	4e75      	ldr	r6, [pc, #468]	; (8002294 <_Z4loopv+0xba4>)
		ADS124x_CS_0;
 80020be:	2200      	movs	r2, #0
 80020c0:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 80020c2:	7773      	strb	r3, [r6, #29]
		ADS124x_CS_0;
 80020c4:	4871      	ldr	r0, [pc, #452]	; (800228c <_Z4loopv+0xb9c>)
 80020c6:	f001 fbc2 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80020ca:	2300      	movs	r3, #0
 80020cc:	606b      	str	r3, [r5, #4]
 80020ce:	4b6d      	ldr	r3, [pc, #436]	; (8002284 <_Z4loopv+0xb94>)
 80020d0:	4a6b      	ldr	r2, [pc, #428]	; (8002280 <_Z4loopv+0xb90>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4969      	ldr	r1, [pc, #420]	; (800227c <_Z4loopv+0xb8c>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0c9b      	lsrs	r3, r3, #18
 80020dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020e0:	009a      	lsls	r2, r3, #2
 80020e2:	4b69      	ldr	r3, [pc, #420]	; (8002288 <_Z4loopv+0xb98>)
 80020e4:	3a10      	subs	r2, #16
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	684b      	ldr	r3, [r1, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d8fc      	bhi.n	80020e8 <_Z4loopv+0x9f8>
		XferByte(0x50 + r);
 80020ee:	2351      	movs	r3, #81	; 0x51
 80020f0:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80020f4:	4b60      	ldr	r3, [pc, #384]	; (8002278 <_Z4loopv+0xb88>)
 80020f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d0fa      	beq.n	80020f4 <_Z4loopv+0xa04>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80020fe:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002102:	2301      	movs	r3, #1
 8002104:	485c      	ldr	r0, [pc, #368]	; (8002278 <_Z4loopv+0xb88>)
 8002106:	aa04      	add	r2, sp, #16
 8002108:	f10d 010f 	add.w	r1, sp, #15
 800210c:	9500      	str	r5, [sp, #0]
 800210e:	f002 fce7 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8002112:	2300      	movs	r3, #0
 8002114:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002118:	4b57      	ldr	r3, [pc, #348]	; (8002278 <_Z4loopv+0xb88>)
 800211a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800211e:	2b02      	cmp	r3, #2
 8002120:	d0fa      	beq.n	8002118 <_Z4loopv+0xa28>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002122:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002126:	2301      	movs	r3, #1
 8002128:	4853      	ldr	r0, [pc, #332]	; (8002278 <_Z4loopv+0xb88>)
 800212a:	aa04      	add	r2, sp, #16
 800212c:	f10d 010f 	add.w	r1, sp, #15
 8002130:	9500      	str	r5, [sp, #0]
 8002132:	f002 fcd5 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8002136:	2316      	movs	r3, #22
 8002138:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800213c:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <_Z4loopv+0xb88>)
 800213e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002142:	2b02      	cmp	r3, #2
 8002144:	d0fa      	beq.n	800213c <_Z4loopv+0xa4c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002146:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800214a:	2301      	movs	r3, #1
 800214c:	aa04      	add	r2, sp, #16
 800214e:	f10d 010f 	add.w	r1, sp, #15
 8002152:	4849      	ldr	r0, [pc, #292]	; (8002278 <_Z4loopv+0xb88>)
 8002154:	9500      	str	r5, [sp, #0]
 8002156:	f002 fcc3 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800215a:	2300      	movs	r3, #0
 800215c:	4947      	ldr	r1, [pc, #284]	; (800227c <_Z4loopv+0xb8c>)
 800215e:	4a48      	ldr	r2, [pc, #288]	; (8002280 <_Z4loopv+0xb90>)
 8002160:	604b      	str	r3, [r1, #4]
 8002162:	4b48      	ldr	r3, [pc, #288]	; (8002284 <_Z4loopv+0xb94>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0c9b      	lsrs	r3, r3, #18
 800216c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002170:	009a      	lsls	r2, r3, #2
 8002172:	4b45      	ldr	r3, [pc, #276]	; (8002288 <_Z4loopv+0xb98>)
 8002174:	3a10      	subs	r2, #16
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	684b      	ldr	r3, [r1, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	d8fc      	bhi.n	8002178 <_Z4loopv+0xa88>
		ADS124x_CS_1;
 800217e:	2201      	movs	r2, #1
 8002180:	2110      	movs	r1, #16
 8002182:	4842      	ldr	r0, [pc, #264]	; (800228c <_Z4loopv+0xb9c>)
 8002184:	f001 fb63 	bl	800384e <HAL_GPIO_WritePin>
		HAL_Delay(41);
 8002188:	2029      	movs	r0, #41	; 0x29
 800218a:	f001 f893 	bl	80032b4 <HAL_Delay>
		readAllRegister();
 800218e:	4840      	ldr	r0, [pc, #256]	; (8002290 <_Z4loopv+0xba0>)
 8002190:	f7ff f8c0 	bl	8001314 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8002194:	493f      	ldr	r1, [pc, #252]	; (8002294 <_Z4loopv+0xba4>)
 8002196:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 800219a:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 800219e:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		v12 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.292/2.1478;
 80021a8:	4318      	orrs	r0, r3
 80021aa:	460d      	mov	r5, r1
 80021ac:	f7fe fd72 	bl	8000c94 <__aeabi_ui2f>
 80021b0:	4939      	ldr	r1, [pc, #228]	; (8002298 <_Z4loopv+0xba8>)
 80021b2:	f7fe fdc7 	bl	8000d44 <__aeabi_fmul>
 80021b6:	f7fe f937 	bl	8000428 <__aeabi_f2d>
 80021ba:	a32d      	add	r3, pc, #180	; (adr r3, 8002270 <_Z4loopv+0xb80>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe f98a 	bl	80004d8 <__aeabi_dmul>
 80021c4:	f7fe fc60 	bl	8000a88 <__aeabi_d2f>
		b3 = v12 - v8;
 80021c8:	69a9      	ldr	r1, [r5, #24]
		v12 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.292/2.1478;
 80021ca:	60e8      	str	r0, [r5, #12]
		b3 = v12 - v8;
 80021cc:	f7fe fcb0 	bl	8000b30 <__aeabi_fsub>
 80021d0:	4603      	mov	r3, r0
		tft->Fill1(0);
 80021d2:	2100      	movs	r1, #0
 80021d4:	6b28      	ldr	r0, [r5, #48]	; 0x30
		b3 = v12 - v8;
 80021d6:	60ab      	str	r3, [r5, #8]
		tft->Fill1(0);
 80021d8:	f004 f84c 	bl	8006274 <_ZN3TFT5Fill1Et>
 80021dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
		sprintf(str, "v12 %f", v12);
 80021e2:	68e8      	ldr	r0, [r5, #12]
 80021e4:	615a      	str	r2, [r3, #20]
 80021e6:	f7fe f91f 	bl	8000428 <__aeabi_f2d>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	a804      	add	r0, sp, #16
 80021f0:	492a      	ldr	r1, [pc, #168]	; (800229c <_Z4loopv+0xbac>)
 80021f2:	f004 fe81 	bl	8006ef8 <siprintf>
 80021f6:	f89d 9010 	ldrb.w	r9, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 80021fa:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80021fc:	f1b9 0f00 	cmp.w	r9, #0
 8002200:	d063      	beq.n	80022ca <_Z4loopv+0xbda>
 8002202:	463b      	mov	r3, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002204:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8002208:	464f      	mov	r7, r9
 800220a:	4699      	mov	r9, r3
 800220c:	7822      	ldrb	r2, [r4, #0]
 800220e:	f10d 0a10 	add.w	sl, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 8002212:	7863      	ldrb	r3, [r4, #1]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d049      	beq.n	80022ac <_Z4loopv+0xbbc>
 8002218:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800221a:	f1a7 0820 	sub.w	r8, r7, #32
 800221e:	fb08 6303 	mla	r3, r8, r3, r6
 8002222:	6861      	ldr	r1, [r4, #4]
 8002224:	f831 b013 	ldrh.w	fp, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8002228:	2a00      	cmp	r2, #0
 800222a:	d03f      	beq.n	80022ac <_Z4loopv+0xbbc>
 800222c:	2500      	movs	r5, #0
 800222e:	e00b      	b.n	8002248 <_Z4loopv+0xb58>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002230:	4648      	mov	r0, r9
 8002232:	f8b9 3018 	ldrh.w	r3, [r9, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002236:	4432      	add	r2, r6
 8002238:	f003 ffee 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 800223c:	7822      	ldrb	r2, [r4, #0]
 800223e:	3501      	adds	r5, #1
 8002240:	4295      	cmp	r5, r2
 8002242:	d22d      	bcs.n	80022a0 <_Z4loopv+0xbb0>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002244:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
			if ((b << j) & 0x8000) {
 8002248:	fa0b f305 	lsl.w	r3, fp, r5
 800224c:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800224e:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 8002252:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 8002256:	d4eb      	bmi.n	8002230 <_Z4loopv+0xb40>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002258:	1941      	adds	r1, r0, r5
 800225a:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800225e:	4648      	mov	r0, r9
 8002260:	e7e9      	b.n	8002236 <_Z4loopv+0xb46>
 8002262:	bf00      	nop
 8002264:	f3af 8000 	nop.w
 8002268:	7d3e21a7 	.word	0x7d3e21a7
 800226c:	400e2abd 	.word	0x400e2abd
 8002270:	45c65bdf 	.word	0x45c65bdf
 8002274:	4016e46b 	.word	0x4016e46b
 8002278:	2000082c 	.word	0x2000082c
 800227c:	e0001000 	.word	0xe0001000
 8002280:	431bde83 	.word	0x431bde83
 8002284:	2000005c 	.word	0x2000005c
 8002288:	2000091c 	.word	0x2000091c
 800228c:	40010800 	.word	0x40010800
 8002290:	200007e8 	.word	0x200007e8
 8002294:	200007cc 	.word	0x200007cc
 8002298:	34200000 	.word	0x34200000
 800229c:	080091cc 	.word	0x080091cc
	for (i = 0; i < Font->FontHeight; i++) {
 80022a0:	7863      	ldrb	r3, [r4, #1]
 80022a2:	3601      	adds	r6, #1
 80022a4:	429e      	cmp	r6, r3
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80022a6:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 80022aa:	d3b8      	bcc.n	800221e <_Z4loopv+0xb2e>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80022ac:	4410      	add	r0, r2
 80022ae:	3801      	subs	r0, #1
 80022b0:	b200      	sxth	r0, r0
 80022b2:	f8a9 0014 	strh.w	r0, [r9, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 80022b6:	f89a 3000 	ldrb.w	r3, [sl]
 80022ba:	42bb      	cmp	r3, r7
 80022bc:	d103      	bne.n	80022c6 <_Z4loopv+0xbd6>
	while (*str) {
 80022be:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
 80022c2:	2f00      	cmp	r7, #0
 80022c4:	d1a5      	bne.n	8002212 <_Z4loopv+0xb22>
		tft->GotoXY(0, 17);
 80022c6:	4bb2      	ldr	r3, [pc, #712]	; (8002590 <_Z4loopv+0xea0>)
 80022c8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80022ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
		sprintf(str, "b3  %f", b3);
 80022ce:	4db0      	ldr	r5, [pc, #704]	; (8002590 <_Z4loopv+0xea0>)
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	68a8      	ldr	r0, [r5, #8]
 80022d4:	f7fe f8a8 	bl	8000428 <__aeabi_f2d>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	a804      	add	r0, sp, #16
 80022de:	49ad      	ldr	r1, [pc, #692]	; (8002594 <_Z4loopv+0xea4>)
 80022e0:	f004 fe0a 	bl	8006ef8 <siprintf>
 80022e4:	f89d 9010 	ldrb.w	r9, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 80022e8:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80022ea:	f1b9 0f00 	cmp.w	r9, #0
 80022ee:	d042      	beq.n	8002376 <_Z4loopv+0xc86>
 80022f0:	463b      	mov	r3, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80022f2:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80022f6:	464f      	mov	r7, r9
 80022f8:	4699      	mov	r9, r3
 80022fa:	7822      	ldrb	r2, [r4, #0]
 80022fc:	f10d 0a10 	add.w	sl, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 8002300:	7863      	ldrb	r3, [r4, #1]
 8002302:	b34b      	cbz	r3, 8002358 <_Z4loopv+0xc68>
 8002304:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002306:	f1a7 0820 	sub.w	r8, r7, #32
 800230a:	fb08 6303 	mla	r3, r8, r3, r6
 800230e:	6861      	ldr	r1, [r4, #4]
 8002310:	f831 b013 	ldrh.w	fp, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8002314:	b302      	cbz	r2, 8002358 <_Z4loopv+0xc68>
 8002316:	2500      	movs	r5, #0
 8002318:	e00b      	b.n	8002332 <_Z4loopv+0xc42>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800231a:	4648      	mov	r0, r9
 800231c:	f8b9 3018 	ldrh.w	r3, [r9, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002320:	4432      	add	r2, r6
 8002322:	f003 ff79 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8002326:	7822      	ldrb	r2, [r4, #0]
 8002328:	3501      	adds	r5, #1
 800232a:	4295      	cmp	r5, r2
 800232c:	d20e      	bcs.n	800234c <_Z4loopv+0xc5c>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800232e:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
			if ((b << j) & 0x8000) {
 8002332:	fa0b f305 	lsl.w	r3, fp, r5
 8002336:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002338:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 800233c:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 8002340:	d4eb      	bmi.n	800231a <_Z4loopv+0xc2a>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002342:	1941      	adds	r1, r0, r5
 8002344:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8002348:	4648      	mov	r0, r9
 800234a:	e7e9      	b.n	8002320 <_Z4loopv+0xc30>
	for (i = 0; i < Font->FontHeight; i++) {
 800234c:	7863      	ldrb	r3, [r4, #1]
 800234e:	3601      	adds	r6, #1
 8002350:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002352:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8002356:	d8d8      	bhi.n	800230a <_Z4loopv+0xc1a>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002358:	4410      	add	r0, r2
 800235a:	3801      	subs	r0, #1
 800235c:	b200      	sxth	r0, r0
 800235e:	f8a9 0014 	strh.w	r0, [r9, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8002362:	f89a 3000 	ldrb.w	r3, [sl]
 8002366:	42bb      	cmp	r3, r7
 8002368:	d103      	bne.n	8002372 <_Z4loopv+0xc82>
	while (*str) {
 800236a:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
 800236e:	2f00      	cmp	r7, #0
 8002370:	d1c6      	bne.n	8002300 <_Z4loopv+0xc10>
		tft->GotoXY(0, 26);
 8002372:	4b87      	ldr	r3, [pc, #540]	; (8002590 <_Z4loopv+0xea0>)
 8002374:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8002376:	f44f 13d0 	mov.w	r3, #1703936	; 0x1a0000
		sprintf(str, "b2  %f", b2);
 800237a:	4d85      	ldr	r5, [pc, #532]	; (8002590 <_Z4loopv+0xea0>)
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	6868      	ldr	r0, [r5, #4]
 8002380:	f7fe f852 	bl	8000428 <__aeabi_f2d>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	a804      	add	r0, sp, #16
 800238a:	4983      	ldr	r1, [pc, #524]	; (8002598 <_Z4loopv+0xea8>)
 800238c:	f004 fdb4 	bl	8006ef8 <siprintf>
 8002390:	f89d 9010 	ldrb.w	r9, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 8002394:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8002396:	f1b9 0f00 	cmp.w	r9, #0
 800239a:	d042      	beq.n	8002422 <_Z4loopv+0xd32>
 800239c:	463b      	mov	r3, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800239e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80023a2:	464f      	mov	r7, r9
 80023a4:	4699      	mov	r9, r3
 80023a6:	7822      	ldrb	r2, [r4, #0]
 80023a8:	f10d 0a10 	add.w	sl, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 80023ac:	7863      	ldrb	r3, [r4, #1]
 80023ae:	b34b      	cbz	r3, 8002404 <_Z4loopv+0xd14>
 80023b0:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80023b2:	f1a7 0820 	sub.w	r8, r7, #32
 80023b6:	fb08 6303 	mla	r3, r8, r3, r6
 80023ba:	6861      	ldr	r1, [r4, #4]
 80023bc:	f831 b013 	ldrh.w	fp, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80023c0:	b302      	cbz	r2, 8002404 <_Z4loopv+0xd14>
 80023c2:	2500      	movs	r5, #0
 80023c4:	e00b      	b.n	80023de <_Z4loopv+0xcee>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80023c6:	4648      	mov	r0, r9
 80023c8:	f8b9 3018 	ldrh.w	r3, [r9, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80023cc:	4432      	add	r2, r6
 80023ce:	f003 ff23 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 80023d2:	7822      	ldrb	r2, [r4, #0]
 80023d4:	3501      	adds	r5, #1
 80023d6:	4295      	cmp	r5, r2
 80023d8:	d20e      	bcs.n	80023f8 <_Z4loopv+0xd08>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80023da:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
			if ((b << j) & 0x8000) {
 80023de:	fa0b f305 	lsl.w	r3, fp, r5
 80023e2:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80023e4:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 80023e8:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 80023ec:	d4eb      	bmi.n	80023c6 <_Z4loopv+0xcd6>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80023ee:	1941      	adds	r1, r0, r5
 80023f0:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80023f4:	4648      	mov	r0, r9
 80023f6:	e7e9      	b.n	80023cc <_Z4loopv+0xcdc>
	for (i = 0; i < Font->FontHeight; i++) {
 80023f8:	7863      	ldrb	r3, [r4, #1]
 80023fa:	3601      	adds	r6, #1
 80023fc:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80023fe:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8002402:	d8d8      	bhi.n	80023b6 <_Z4loopv+0xcc6>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002404:	4410      	add	r0, r2
 8002406:	3801      	subs	r0, #1
 8002408:	b200      	sxth	r0, r0
 800240a:	f8a9 0014 	strh.w	r0, [r9, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 800240e:	f89a 3000 	ldrb.w	r3, [sl]
 8002412:	42bb      	cmp	r3, r7
 8002414:	d103      	bne.n	800241e <_Z4loopv+0xd2e>
	while (*str) {
 8002416:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
 800241a:	2f00      	cmp	r7, #0
 800241c:	d1c6      	bne.n	80023ac <_Z4loopv+0xcbc>
		tft->GotoXY(0, 35);
 800241e:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <_Z4loopv+0xea0>)
 8002420:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8002422:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
		sprintf(str, "b1  %f", b1);
 8002426:	4d5a      	ldr	r5, [pc, #360]	; (8002590 <_Z4loopv+0xea0>)
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	6828      	ldr	r0, [r5, #0]
 800242c:	f7fd fffc 	bl	8000428 <__aeabi_f2d>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	a804      	add	r0, sp, #16
 8002436:	4959      	ldr	r1, [pc, #356]	; (800259c <_Z4loopv+0xeac>)
 8002438:	f004 fd5e 	bl	8006ef8 <siprintf>
 800243c:	f89d 9010 	ldrb.w	r9, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 8002440:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8002442:	f1b9 0f00 	cmp.w	r9, #0
 8002446:	d042      	beq.n	80024ce <_Z4loopv+0xdde>
 8002448:	463b      	mov	r3, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800244a:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800244e:	464f      	mov	r7, r9
 8002450:	4699      	mov	r9, r3
 8002452:	7822      	ldrb	r2, [r4, #0]
 8002454:	f10d 0a10 	add.w	sl, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 8002458:	7863      	ldrb	r3, [r4, #1]
 800245a:	b34b      	cbz	r3, 80024b0 <_Z4loopv+0xdc0>
 800245c:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800245e:	f1a7 0820 	sub.w	r8, r7, #32
 8002462:	fb08 6303 	mla	r3, r8, r3, r6
 8002466:	6861      	ldr	r1, [r4, #4]
 8002468:	f831 b013 	ldrh.w	fp, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 800246c:	b302      	cbz	r2, 80024b0 <_Z4loopv+0xdc0>
 800246e:	2500      	movs	r5, #0
 8002470:	e00b      	b.n	800248a <_Z4loopv+0xd9a>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002472:	4648      	mov	r0, r9
 8002474:	f8b9 3018 	ldrh.w	r3, [r9, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002478:	4432      	add	r2, r6
 800247a:	f003 fecd 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 800247e:	7822      	ldrb	r2, [r4, #0]
 8002480:	3501      	adds	r5, #1
 8002482:	4295      	cmp	r5, r2
 8002484:	d20e      	bcs.n	80024a4 <_Z4loopv+0xdb4>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002486:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
			if ((b << j) & 0x8000) {
 800248a:	fa0b f305 	lsl.w	r3, fp, r5
 800248e:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002490:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 8002494:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 8002498:	d4eb      	bmi.n	8002472 <_Z4loopv+0xd82>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 800249a:	1941      	adds	r1, r0, r5
 800249c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80024a0:	4648      	mov	r0, r9
 80024a2:	e7e9      	b.n	8002478 <_Z4loopv+0xd88>
	for (i = 0; i < Font->FontHeight; i++) {
 80024a4:	7863      	ldrb	r3, [r4, #1]
 80024a6:	3601      	adds	r6, #1
 80024a8:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80024aa:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 80024ae:	d8d8      	bhi.n	8002462 <_Z4loopv+0xd72>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80024b0:	4410      	add	r0, r2
 80024b2:	3801      	subs	r0, #1
 80024b4:	b200      	sxth	r0, r0
 80024b6:	f8a9 0014 	strh.w	r0, [r9, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 80024ba:	f89a 3000 	ldrb.w	r3, [sl]
 80024be:	42bb      	cmp	r3, r7
 80024c0:	d103      	bne.n	80024ca <_Z4loopv+0xdda>
	while (*str) {
 80024c2:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
 80024c6:	2f00      	cmp	r7, #0
 80024c8:	d1c6      	bne.n	8002458 <_Z4loopv+0xd68>
		tft->GotoXY(0, 44);
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <_Z4loopv+0xea0>)
 80024cc:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80024ce:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
		sprintf(str, "v8  %f", v8);
 80024d2:	4d2f      	ldr	r5, [pc, #188]	; (8002590 <_Z4loopv+0xea0>)
 80024d4:	69a8      	ldr	r0, [r5, #24]
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	f7fd ffa6 	bl	8000428 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	a804      	add	r0, sp, #16
 80024e2:	492f      	ldr	r1, [pc, #188]	; (80025a0 <_Z4loopv+0xeb0>)
 80024e4:	f004 fd08 	bl	8006ef8 <siprintf>
 80024e8:	f89d 8010 	ldrb.w	r8, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 80024ec:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80024f0:	f1b8 0f00 	cmp.w	r8, #0
 80024f4:	f43f abd2 	beq.w	8001c9c <_Z4loopv+0x5ac>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80024f8:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
 80024fc:	7821      	ldrb	r1, [r4, #0]
 80024fe:	f10d 0910 	add.w	r9, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 8002502:	7863      	ldrb	r3, [r4, #1]
 8002504:	b37b      	cbz	r3, 8002566 <_Z4loopv+0xe76>
 8002506:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002508:	f1a8 0720 	sub.w	r7, r8, #32
 800250c:	fb07 6303 	mla	r3, r7, r3, r6
 8002510:	6862      	ldr	r2, [r4, #4]
 8002512:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8002516:	b331      	cbz	r1, 8002566 <_Z4loopv+0xe76>
 8002518:	2500      	movs	r5, #0
 800251a:	e00b      	b.n	8002534 <_Z4loopv+0xe44>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800251c:	4650      	mov	r0, sl
 800251e:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8002522:	4432      	add	r2, r6
 8002524:	f003 fe78 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8002528:	7821      	ldrb	r1, [r4, #0]
 800252a:	3501      	adds	r5, #1
 800252c:	42a9      	cmp	r1, r5
 800252e:	d914      	bls.n	800255a <_Z4loopv+0xe6a>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002530:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
			if ((b << j) & 0x8000) {
 8002534:	fa0b f305 	lsl.w	r3, fp, r5
 8002538:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800253a:	f9ba 2016 	ldrsh.w	r2, [sl, #22]
 800253e:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 8002542:	d4eb      	bmi.n	800251c <_Z4loopv+0xe2c>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002544:	1941      	adds	r1, r0, r5
 8002546:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 800254a:	4650      	mov	r0, sl
 800254c:	4432      	add	r2, r6
 800254e:	f003 fe63 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8002552:	7821      	ldrb	r1, [r4, #0]
 8002554:	3501      	adds	r5, #1
 8002556:	428d      	cmp	r5, r1
 8002558:	d3ea      	bcc.n	8002530 <_Z4loopv+0xe40>
	for (i = 0; i < Font->FontHeight; i++) {
 800255a:	7863      	ldrb	r3, [r4, #1]
 800255c:	3601      	adds	r6, #1
 800255e:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002560:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8002564:	d8d2      	bhi.n	800250c <_Z4loopv+0xe1c>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002566:	4408      	add	r0, r1
 8002568:	3801      	subs	r0, #1
 800256a:	b200      	sxth	r0, r0
 800256c:	f8aa 0014 	strh.w	r0, [sl, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8002570:	f899 3000 	ldrb.w	r3, [r9]
 8002574:	4543      	cmp	r3, r8
 8002576:	f47f ab8e 	bne.w	8001c96 <_Z4loopv+0x5a6>
	while (*str) {
 800257a:	f819 8f01 	ldrb.w	r8, [r9, #1]!
 800257e:	f1b8 0f00 	cmp.w	r8, #0
 8002582:	d1be      	bne.n	8002502 <_Z4loopv+0xe12>
 8002584:	f7ff bb87 	b.w	8001c96 <_Z4loopv+0x5a6>
		if (iOut<0) iOut = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	f7ff baba 	b.w	8001b02 <_Z4loopv+0x412>
 800258e:	bf00      	nop
 8002590:	200007cc 	.word	0x200007cc
 8002594:	080091d4 	.word	0x080091d4
 8002598:	080091dc 	.word	0x080091dc
 800259c:	080091e4 	.word	0x080091e4
 80025a0:	080091ec 	.word	0x080091ec
		ADSregister.SETUP.PGA = pga;
 80025a4:	f36f 0502 	bfc	r5, #0, #3
 80025a8:	771d      	strb	r5, [r3, #28]
		ADS124x_CS_0;
 80025aa:	2200      	movs	r2, #0
 80025ac:	2110      	movs	r1, #16
 80025ae:	4875      	ldr	r0, [pc, #468]	; (8002784 <_Z4loopv+0x1094>)
 80025b0:	f001 f94d 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80025b4:	2300      	movs	r3, #0
 80025b6:	4974      	ldr	r1, [pc, #464]	; (8002788 <_Z4loopv+0x1098>)
 80025b8:	4a74      	ldr	r2, [pc, #464]	; (800278c <_Z4loopv+0x109c>)
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	4b74      	ldr	r3, [pc, #464]	; (8002790 <_Z4loopv+0x10a0>)
	    uint8_t p = (ADSregister.SETUP.ID << 4) | (ADSregister.SETUP.BOCS << 3) |  ADSregister.SETUP.PGA;
 80025be:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
		delayMicroseconds(20);
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	0c9b      	lsrs	r3, r3, #18
 80025ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025ce:	4a71      	ldr	r2, [pc, #452]	; (8002794 <_Z4loopv+0x10a4>)
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	3b10      	subs	r3, #16
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	684a      	ldr	r2, [r1, #4]
 80025d8:	4293      	cmp	r3, r2
 80025da:	d8fc      	bhi.n	80025d6 <_Z4loopv+0xee6>
		XferByte(0x50 + r);
 80025dc:	2350      	movs	r3, #80	; 0x50
 80025de:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80025e2:	4b6d      	ldr	r3, [pc, #436]	; (8002798 <_Z4loopv+0x10a8>)
 80025e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d0fa      	beq.n	80025e2 <_Z4loopv+0xef2>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80025ec:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80025f0:	2301      	movs	r3, #1
 80025f2:	4869      	ldr	r0, [pc, #420]	; (8002798 <_Z4loopv+0x10a8>)
 80025f4:	aa04      	add	r2, sp, #16
 80025f6:	f10d 010f 	add.w	r1, sp, #15
 80025fa:	9600      	str	r6, [sp, #0]
 80025fc:	f002 fa70 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8002600:	2300      	movs	r3, #0
 8002602:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002606:	4b64      	ldr	r3, [pc, #400]	; (8002798 <_Z4loopv+0x10a8>)
 8002608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800260c:	2b02      	cmp	r3, #2
 800260e:	d0fa      	beq.n	8002606 <_Z4loopv+0xf16>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002610:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002614:	2301      	movs	r3, #1
 8002616:	4860      	ldr	r0, [pc, #384]	; (8002798 <_Z4loopv+0x10a8>)
 8002618:	aa04      	add	r2, sp, #16
 800261a:	f10d 010f 	add.w	r1, sp, #15
 800261e:	9600      	str	r6, [sp, #0]
 8002620:	f002 fa5e 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8002624:	f88d 500f 	strb.w	r5, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002628:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <_Z4loopv+0x10a8>)
 800262a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800262e:	2b02      	cmp	r3, #2
 8002630:	d0fa      	beq.n	8002628 <_Z4loopv+0xf38>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002632:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002636:	2301      	movs	r3, #1
 8002638:	aa04      	add	r2, sp, #16
 800263a:	4857      	ldr	r0, [pc, #348]	; (8002798 <_Z4loopv+0x10a8>)
 800263c:	f10d 010f 	add.w	r1, sp, #15
 8002640:	9600      	str	r6, [sp, #0]
 8002642:	f002 fa4d 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002646:	2300      	movs	r3, #0
 8002648:	4d4f      	ldr	r5, [pc, #316]	; (8002788 <_Z4loopv+0x1098>)
 800264a:	4a50      	ldr	r2, [pc, #320]	; (800278c <_Z4loopv+0x109c>)
 800264c:	606b      	str	r3, [r5, #4]
 800264e:	4b50      	ldr	r3, [pc, #320]	; (8002790 <_Z4loopv+0x10a0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0c9b      	lsrs	r3, r3, #18
 8002658:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800265c:	4a4d      	ldr	r2, [pc, #308]	; (8002794 <_Z4loopv+0x10a4>)
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	3b10      	subs	r3, #16
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	686a      	ldr	r2, [r5, #4]
 8002666:	4293      	cmp	r3, r2
 8002668:	d8fc      	bhi.n	8002664 <_Z4loopv+0xf74>
		ADS124x_CS_1;
 800266a:	2201      	movs	r2, #1
 800266c:	2110      	movs	r1, #16
 800266e:	4845      	ldr	r0, [pc, #276]	; (8002784 <_Z4loopv+0x1094>)
 8002670:	f001 f8ed 	bl	800384e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8002674:	2001      	movs	r0, #1
 8002676:	f000 fe1d 	bl	80032b4 <HAL_Delay>
		ADS124x_CS_0;
 800267a:	2200      	movs	r2, #0
 800267c:	2110      	movs	r1, #16
 800267e:	4841      	ldr	r0, [pc, #260]	; (8002784 <_Z4loopv+0x1094>)
 8002680:	f001 f8e5 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002684:	2300      	movs	r3, #0
 8002686:	606b      	str	r3, [r5, #4]
 8002688:	4b41      	ldr	r3, [pc, #260]	; (8002790 <_Z4loopv+0x10a0>)
 800268a:	4a40      	ldr	r2, [pc, #256]	; (800278c <_Z4loopv+0x109c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	493e      	ldr	r1, [pc, #248]	; (8002788 <_Z4loopv+0x1098>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	0c9b      	lsrs	r3, r3, #18
 8002696:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800269a:	4a3e      	ldr	r2, [pc, #248]	; (8002794 <_Z4loopv+0x10a4>)
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	3b10      	subs	r3, #16
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	684a      	ldr	r2, [r1, #4]
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d8fc      	bhi.n	80026a2 <_Z4loopv+0xfb2>
		XferByte(cmd);
 80026a8:	23f0      	movs	r3, #240	; 0xf0
 80026aa:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <_Z4loopv+0x10a8>)
 80026b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d0fa      	beq.n	80026ae <_Z4loopv+0xfbe>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80026b8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80026bc:	2301      	movs	r3, #1
 80026be:	aa04      	add	r2, sp, #16
 80026c0:	4835      	ldr	r0, [pc, #212]	; (8002798 <_Z4loopv+0x10a8>)
 80026c2:	f10d 010f 	add.w	r1, sp, #15
 80026c6:	9600      	str	r6, [sp, #0]
 80026c8:	f002 fa0a 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80026cc:	2300      	movs	r3, #0
 80026ce:	4d2e      	ldr	r5, [pc, #184]	; (8002788 <_Z4loopv+0x1098>)
 80026d0:	4a2e      	ldr	r2, [pc, #184]	; (800278c <_Z4loopv+0x109c>)
 80026d2:	606b      	str	r3, [r5, #4]
 80026d4:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <_Z4loopv+0x10a0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	0c9b      	lsrs	r3, r3, #18
 80026de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026e2:	4a2c      	ldr	r2, [pc, #176]	; (8002794 <_Z4loopv+0x10a4>)
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	3b10      	subs	r3, #16
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	686a      	ldr	r2, [r5, #4]
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d8fc      	bhi.n	80026ea <_Z4loopv+0xffa>
		ADS124x_CS_1;
 80026f0:	2201      	movs	r2, #1
 80026f2:	2110      	movs	r1, #16
 80026f4:	4823      	ldr	r0, [pc, #140]	; (8002784 <_Z4loopv+0x1094>)
 80026f6:	f001 f8aa 	bl	800384e <HAL_GPIO_WritePin>
		ADS124x_CS_0;
 80026fa:	2200      	movs	r2, #0
 80026fc:	2110      	movs	r1, #16
 80026fe:	4821      	ldr	r0, [pc, #132]	; (8002784 <_Z4loopv+0x1094>)
 8002700:	f001 f8a5 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002704:	2300      	movs	r3, #0
 8002706:	606b      	str	r3, [r5, #4]
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <_Z4loopv+0x10a0>)
 800270a:	4a20      	ldr	r2, [pc, #128]	; (800278c <_Z4loopv+0x109c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	491e      	ldr	r1, [pc, #120]	; (8002788 <_Z4loopv+0x1098>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	0c9b      	lsrs	r3, r3, #18
 8002716:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800271a:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <_Z4loopv+0x10a4>)
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	3b10      	subs	r3, #16
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	684a      	ldr	r2, [r1, #4]
 8002724:	4293      	cmp	r3, r2
 8002726:	d8fc      	bhi.n	8002722 <_Z4loopv+0x1032>
		XferByte(cmd);
 8002728:	23fc      	movs	r3, #252	; 0xfc
 800272a:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <_Z4loopv+0x10a8>)
 8002730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002734:	2b02      	cmp	r3, #2
 8002736:	d0fa      	beq.n	800272e <_Z4loopv+0x103e>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002738:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800273c:	2301      	movs	r3, #1
 800273e:	aa04      	add	r2, sp, #16
 8002740:	f10d 010f 	add.w	r1, sp, #15
 8002744:	4814      	ldr	r0, [pc, #80]	; (8002798 <_Z4loopv+0x10a8>)
 8002746:	9500      	str	r5, [sp, #0]
 8002748:	f002 f9ca 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800274c:	2300      	movs	r3, #0
 800274e:	490e      	ldr	r1, [pc, #56]	; (8002788 <_Z4loopv+0x1098>)
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <_Z4loopv+0x109c>)
 8002752:	604b      	str	r3, [r1, #4]
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <_Z4loopv+0x10a0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	0c9b      	lsrs	r3, r3, #18
 800275e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002762:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <_Z4loopv+0x10a4>)
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	3b10      	subs	r3, #16
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	684a      	ldr	r2, [r1, #4]
 800276c:	4293      	cmp	r3, r2
 800276e:	d8fc      	bhi.n	800276a <_Z4loopv+0x107a>
		ADS124x_CS_1;
 8002770:	2201      	movs	r2, #1
 8002772:	2110      	movs	r1, #16
 8002774:	4803      	ldr	r0, [pc, #12]	; (8002784 <_Z4loopv+0x1094>)
 8002776:	f001 f86a 	bl	800384e <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800277a:	2064      	movs	r0, #100	; 0x64
 800277c:	f000 fd9a 	bl	80032b4 <HAL_Delay>
 8002780:	f7ff baa4 	b.w	8001ccc <_Z4loopv+0x5dc>
 8002784:	40010800 	.word	0x40010800
 8002788:	e0001000 	.word	0xe0001000
 800278c:	431bde83 	.word	0x431bde83
 8002790:	2000005c 	.word	0x2000005c
 8002794:	2000091c 	.word	0x2000091c
 8002798:	2000082c 	.word	0x2000082c
		ADSregister.SETUP.PGA = pga;
 800279c:	f366 0502 	bfi	r5, r6, #0, #3
 80027a0:	771d      	strb	r5, [r3, #28]
		ADS124x_CS_0;
 80027a2:	4632      	mov	r2, r6
 80027a4:	2110      	movs	r1, #16
 80027a6:	4875      	ldr	r0, [pc, #468]	; (800297c <_Z4loopv+0x128c>)
 80027a8:	f001 f851 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80027ac:	4974      	ldr	r1, [pc, #464]	; (8002980 <_Z4loopv+0x1290>)
 80027ae:	4b75      	ldr	r3, [pc, #468]	; (8002984 <_Z4loopv+0x1294>)
 80027b0:	604e      	str	r6, [r1, #4]
 80027b2:	4a75      	ldr	r2, [pc, #468]	; (8002988 <_Z4loopv+0x1298>)
 80027b4:	681b      	ldr	r3, [r3, #0]
	    uint8_t p = (ADSregister.SETUP.ID << 4) | (ADSregister.SETUP.BOCS << 3) |  ADSregister.SETUP.PGA;
 80027b6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
		delayMicroseconds(20);
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0c9b      	lsrs	r3, r3, #18
 80027c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027c4:	4a71      	ldr	r2, [pc, #452]	; (800298c <_Z4loopv+0x129c>)
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	3b10      	subs	r3, #16
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	684a      	ldr	r2, [r1, #4]
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d8fc      	bhi.n	80027cc <_Z4loopv+0x10dc>
		XferByte(0x50 + r);
 80027d2:	2350      	movs	r3, #80	; 0x50
 80027d4:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80027d8:	4b6d      	ldr	r3, [pc, #436]	; (8002990 <_Z4loopv+0x12a0>)
 80027da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d0fa      	beq.n	80027d8 <_Z4loopv+0x10e8>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80027e2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80027e6:	2301      	movs	r3, #1
 80027e8:	4869      	ldr	r0, [pc, #420]	; (8002990 <_Z4loopv+0x12a0>)
 80027ea:	aa04      	add	r2, sp, #16
 80027ec:	f10d 010f 	add.w	r1, sp, #15
 80027f0:	9600      	str	r6, [sp, #0]
 80027f2:	f002 f975 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(0);
 80027f6:	2300      	movs	r3, #0
 80027f8:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80027fc:	4b64      	ldr	r3, [pc, #400]	; (8002990 <_Z4loopv+0x12a0>)
 80027fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002802:	2b02      	cmp	r3, #2
 8002804:	d0fa      	beq.n	80027fc <_Z4loopv+0x110c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002806:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800280a:	2301      	movs	r3, #1
 800280c:	4860      	ldr	r0, [pc, #384]	; (8002990 <_Z4loopv+0x12a0>)
 800280e:	aa04      	add	r2, sp, #16
 8002810:	f10d 010f 	add.w	r1, sp, #15
 8002814:	9600      	str	r6, [sp, #0]
 8002816:	f002 f963 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(data);
 800281a:	f88d 500f 	strb.w	r5, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800281e:	4b5c      	ldr	r3, [pc, #368]	; (8002990 <_Z4loopv+0x12a0>)
 8002820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002824:	2b02      	cmp	r3, #2
 8002826:	d0fa      	beq.n	800281e <_Z4loopv+0x112e>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002828:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800282c:	2301      	movs	r3, #1
 800282e:	aa04      	add	r2, sp, #16
 8002830:	4857      	ldr	r0, [pc, #348]	; (8002990 <_Z4loopv+0x12a0>)
 8002832:	f10d 010f 	add.w	r1, sp, #15
 8002836:	9600      	str	r6, [sp, #0]
 8002838:	f002 f952 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800283c:	2300      	movs	r3, #0
 800283e:	4d50      	ldr	r5, [pc, #320]	; (8002980 <_Z4loopv+0x1290>)
 8002840:	4a51      	ldr	r2, [pc, #324]	; (8002988 <_Z4loopv+0x1298>)
 8002842:	606b      	str	r3, [r5, #4]
 8002844:	4b4f      	ldr	r3, [pc, #316]	; (8002984 <_Z4loopv+0x1294>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	0c9b      	lsrs	r3, r3, #18
 800284e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002852:	4a4e      	ldr	r2, [pc, #312]	; (800298c <_Z4loopv+0x129c>)
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	3b10      	subs	r3, #16
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	686a      	ldr	r2, [r5, #4]
 800285c:	4293      	cmp	r3, r2
 800285e:	d8fc      	bhi.n	800285a <_Z4loopv+0x116a>
		ADS124x_CS_1;
 8002860:	2201      	movs	r2, #1
 8002862:	2110      	movs	r1, #16
 8002864:	4845      	ldr	r0, [pc, #276]	; (800297c <_Z4loopv+0x128c>)
 8002866:	f000 fff2 	bl	800384e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800286a:	2001      	movs	r0, #1
 800286c:	f000 fd22 	bl	80032b4 <HAL_Delay>
		ADS124x_CS_0;
 8002870:	2200      	movs	r2, #0
 8002872:	2110      	movs	r1, #16
 8002874:	4841      	ldr	r0, [pc, #260]	; (800297c <_Z4loopv+0x128c>)
 8002876:	f000 ffea 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 800287a:	2300      	movs	r3, #0
 800287c:	606b      	str	r3, [r5, #4]
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <_Z4loopv+0x1294>)
 8002880:	4a41      	ldr	r2, [pc, #260]	; (8002988 <_Z4loopv+0x1298>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	493e      	ldr	r1, [pc, #248]	; (8002980 <_Z4loopv+0x1290>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002890:	4a3e      	ldr	r2, [pc, #248]	; (800298c <_Z4loopv+0x129c>)
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	3b10      	subs	r3, #16
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	684a      	ldr	r2, [r1, #4]
 800289a:	4293      	cmp	r3, r2
 800289c:	d8fc      	bhi.n	8002898 <_Z4loopv+0x11a8>
		XferByte(cmd);
 800289e:	23f0      	movs	r3, #240	; 0xf0
 80028a0:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80028a4:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <_Z4loopv+0x12a0>)
 80028a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d0fa      	beq.n	80028a4 <_Z4loopv+0x11b4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80028ae:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80028b2:	2301      	movs	r3, #1
 80028b4:	aa04      	add	r2, sp, #16
 80028b6:	4836      	ldr	r0, [pc, #216]	; (8002990 <_Z4loopv+0x12a0>)
 80028b8:	f10d 010f 	add.w	r1, sp, #15
 80028bc:	9600      	str	r6, [sp, #0]
 80028be:	f002 f90f 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80028c2:	2300      	movs	r3, #0
 80028c4:	4d2e      	ldr	r5, [pc, #184]	; (8002980 <_Z4loopv+0x1290>)
 80028c6:	4a30      	ldr	r2, [pc, #192]	; (8002988 <_Z4loopv+0x1298>)
 80028c8:	606b      	str	r3, [r5, #4]
 80028ca:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <_Z4loopv+0x1294>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80028d8:	4a2c      	ldr	r2, [pc, #176]	; (800298c <_Z4loopv+0x129c>)
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	3b10      	subs	r3, #16
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	686a      	ldr	r2, [r5, #4]
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d8fc      	bhi.n	80028e0 <_Z4loopv+0x11f0>
		ADS124x_CS_1;
 80028e6:	2201      	movs	r2, #1
 80028e8:	2110      	movs	r1, #16
 80028ea:	4824      	ldr	r0, [pc, #144]	; (800297c <_Z4loopv+0x128c>)
 80028ec:	f000 ffaf 	bl	800384e <HAL_GPIO_WritePin>
		ADS124x_CS_0;
 80028f0:	2200      	movs	r2, #0
 80028f2:	2110      	movs	r1, #16
 80028f4:	4821      	ldr	r0, [pc, #132]	; (800297c <_Z4loopv+0x128c>)
 80028f6:	f000 ffaa 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80028fa:	2300      	movs	r3, #0
 80028fc:	606b      	str	r3, [r5, #4]
 80028fe:	4b21      	ldr	r3, [pc, #132]	; (8002984 <_Z4loopv+0x1294>)
 8002900:	4a21      	ldr	r2, [pc, #132]	; (8002988 <_Z4loopv+0x1298>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	491e      	ldr	r1, [pc, #120]	; (8002980 <_Z4loopv+0x1290>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0c9b      	lsrs	r3, r3, #18
 800290c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002910:	4a1e      	ldr	r2, [pc, #120]	; (800298c <_Z4loopv+0x129c>)
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	3b10      	subs	r3, #16
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	684a      	ldr	r2, [r1, #4]
 800291a:	4293      	cmp	r3, r2
 800291c:	d8fc      	bhi.n	8002918 <_Z4loopv+0x1228>
		XferByte(cmd);
 800291e:	23fc      	movs	r3, #252	; 0xfc
 8002920:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <_Z4loopv+0x12a0>)
 8002926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800292a:	2b02      	cmp	r3, #2
 800292c:	d0fa      	beq.n	8002924 <_Z4loopv+0x1234>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800292e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002932:	2301      	movs	r3, #1
 8002934:	aa04      	add	r2, sp, #16
 8002936:	f10d 010f 	add.w	r1, sp, #15
 800293a:	4815      	ldr	r0, [pc, #84]	; (8002990 <_Z4loopv+0x12a0>)
 800293c:	9500      	str	r5, [sp, #0]
 800293e:	f002 f8cf 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002942:	2300      	movs	r3, #0
 8002944:	490e      	ldr	r1, [pc, #56]	; (8002980 <_Z4loopv+0x1290>)
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <_Z4loopv+0x1298>)
 8002948:	604b      	str	r3, [r1, #4]
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <_Z4loopv+0x1294>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002958:	4a0c      	ldr	r2, [pc, #48]	; (800298c <_Z4loopv+0x129c>)
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	3b10      	subs	r3, #16
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	684a      	ldr	r2, [r1, #4]
 8002962:	4293      	cmp	r3, r2
 8002964:	d8fc      	bhi.n	8002960 <_Z4loopv+0x1270>
		ADS124x_CS_1;
 8002966:	2201      	movs	r2, #1
 8002968:	2110      	movs	r1, #16
 800296a:	4804      	ldr	r0, [pc, #16]	; (800297c <_Z4loopv+0x128c>)
 800296c:	f000 ff6f 	bl	800384e <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8002970:	2064      	movs	r0, #100	; 0x64
 8002972:	f000 fc9f 	bl	80032b4 <HAL_Delay>
 8002976:	f7fe bf13 	b.w	80017a0 <_Z4loopv+0xb0>
 800297a:	bf00      	nop
 800297c:	40010800 	.word	0x40010800
 8002980:	e0001000 	.word	0xe0001000
 8002984:	2000005c 	.word	0x2000005c
 8002988:	431bde83 	.word	0x431bde83
 800298c:	2000091c 	.word	0x2000091c
 8002990:	2000082c 	.word	0x2000082c

08002994 <setup>:
extern "C" void setup() {
 8002994:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	HAL_Delay(100);
 8002998:	2064      	movs	r0, #100	; 0x64
extern "C" void setup() {
 800299a:	b085      	sub	sp, #20
	HAL_Delay(100);
 800299c:	f000 fc8a 	bl	80032b4 <HAL_Delay>
	DWT_Init();
 80029a0:	f003 fa24 	bl	8005dec <_Z8DWT_Initv>
		LCD = _LCD;
 80029a4:	4b72      	ldr	r3, [pc, #456]	; (8002b70 <setup+0x1dc>)
 80029a6:	4e73      	ldr	r6, [pc, #460]	; (8002b74 <setup+0x1e0>)
		switch (LCD->LCD_Driver) {
 80029a8:	7a1a      	ldrb	r2, [r3, #8]
		LCD = _LCD;
 80029aa:	e9c6 3300 	strd	r3, r3, [r6]
		switch (LCD->LCD_Driver) {
 80029ae:	2a03      	cmp	r2, #3
 80029b0:	f000 80d2 	beq.w	8002b58 <setup+0x1c4>
	tft.Fill1(0);
 80029b4:	2100      	movs	r1, #0
 80029b6:	486f      	ldr	r0, [pc, #444]	; (8002b74 <setup+0x1e0>)
 80029b8:	f003 fc5c 	bl	8006274 <_ZN3TFT5Fill1Et>
		switch (LCD->LCD_Driver) {
 80029bc:	6873      	ldr	r3, [r6, #4]
 80029be:	7a1b      	ldrb	r3, [r3, #8]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	f000 80d1 	beq.w	8002b68 <setup+0x1d4>
		uTFT.Color = Color;
 80029c6:	2501      	movs	r5, #1
		uTFT.CurrentX = x;
 80029c8:	f04f 1214 	mov.w	r2, #1310740	; 0x140014
	for (i = 0; i < Font->FontHeight; i++) {
 80029cc:	2114      	movs	r1, #20
	while (*str) {
 80029ce:	2331      	movs	r3, #49	; 0x31
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80029d0:	4f69      	ldr	r7, [pc, #420]	; (8002b78 <setup+0x1e4>)
 80029d2:	e9c6 2505 	strd	r2, r5, [r6, #20]
 80029d6:	7838      	ldrb	r0, [r7, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 80029d8:	787c      	ldrb	r4, [r7, #1]
 80029da:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8002b7c <setup+0x1e8>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80029de:	f8df a194 	ldr.w	sl, [pc, #404]	; 8002b74 <setup+0x1e0>
	for (i = 0; i < Font->FontHeight; i++) {
 80029e2:	b31c      	cbz	r4, 8002a2c <setup+0x98>
 80029e4:	2500      	movs	r5, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80029e6:	f1a3 0820 	sub.w	r8, r3, #32
 80029ea:	fb08 5304 	mla	r3, r8, r4, r5
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80029f4:	b1d0      	cbz	r0, 8002a2c <setup+0x98>
 80029f6:	2400      	movs	r4, #0
 80029f8:	e001      	b.n	80029fe <setup+0x6a>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80029fa:	f9b6 1014 	ldrsh.w	r1, [r6, #20]
			if ((b << j) & 0x8000) {
 80029fe:	fa0b f304 	lsl.w	r3, fp, r4
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002a02:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
			if ((b << j) & 0x8000) {
 8002a06:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002a08:	4650      	mov	r0, sl
 8002a0a:	bf4c      	ite	mi
 8002a0c:	8b33      	ldrhmi	r3, [r6, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002a0e:	8b73      	ldrhpl	r3, [r6, #26]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002a10:	4421      	add	r1, r4
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002a12:	442a      	add	r2, r5
 8002a14:	f003 fc00 	bl	8006218 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8002a18:	7838      	ldrb	r0, [r7, #0]
 8002a1a:	3401      	adds	r4, #1
 8002a1c:	4284      	cmp	r4, r0
 8002a1e:	d3ec      	bcc.n	80029fa <setup+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8002a20:	787c      	ldrb	r4, [r7, #1]
 8002a22:	3501      	adds	r5, #1
 8002a24:	42ac      	cmp	r4, r5
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002a26:	f9b6 1014 	ldrsh.w	r1, [r6, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8002a2a:	d8de      	bhi.n	80029ea <setup+0x56>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002a2c:	4401      	add	r1, r0
 8002a2e:	3901      	subs	r1, #1
	while (*str) {
 8002a30:	f819 3f01 	ldrb.w	r3, [r9, #1]!
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002a34:	b209      	sxth	r1, r1
 8002a36:	82b1      	strh	r1, [r6, #20]
	while (*str) {
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1d2      	bne.n	80029e2 <setup+0x4e>
	tft.LineH(10, 10, 50, 1);
 8002a3c:	220a      	movs	r2, #10
 8002a3e:	2401      	movs	r4, #1
 8002a40:	2332      	movs	r3, #50	; 0x32
 8002a42:	4611      	mov	r1, r2
 8002a44:	484b      	ldr	r0, [pc, #300]	; (8002b74 <setup+0x1e0>)
 8002a46:	9400      	str	r4, [sp, #0]
 8002a48:	f003 fc38 	bl	80062bc <_ZN3TFT5LineHElllt>
 8002a4c:	6873      	ldr	r3, [r6, #4]
 8002a4e:	7a1b      	ldrb	r3, [r3, #8]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	f000 8085 	beq.w	8002b60 <setup+0x1cc>
#define COLOR_RESET   "\33[0m"

class classLog {
public:

	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8002a56:	484a      	ldr	r0, [pc, #296]	; (8002b80 <setup+0x1ec>)
 8002a58:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <setup+0x1f0>)

	UART_HandleTypeDef *huart;

	void w(char const *const format) {colorStringln(11, format);}
	void e(char const *const format) {colorStringln(9, format);}
	void i(char const *const format) {colorStringln(45, format);}
 8002a5a:	212d      	movs	r1, #45	; 0x2d
 8002a5c:	4a4a      	ldr	r2, [pc, #296]	; (8002b88 <setup+0x1f4>)
	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8002a5e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
	void i(char const *const format) {colorStringln(45, format);}
 8002a62:	f003 f9d3 	bl	8005e0c <_ZN8classLog13colorStringlnEiPKc>
	power.tft = &tft;
 8002a66:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <setup+0x1f8>)
	power.adc.sendCommand(RESET);
 8002a68:	20fe      	movs	r0, #254	; 0xfe
	power.tft = &tft;
 8002a6a:	631e      	str	r6, [r3, #48]	; 0x30
	power.adc.sendCommand(RESET);
 8002a6c:	f7fe fc02 	bl	8001274 <_ZN7ADS124311sendCommandEh.isra.0>
	power.adc.sendCommand(STOPC);
 8002a70:	200f      	movs	r0, #15
 8002a72:	f7fe fbff 	bl	8001274 <_ZN7ADS124311sendCommandEh.isra.0>
	power.adc.sendCommand(SELFCAL);
 8002a76:	20f0      	movs	r0, #240	; 0xf0
 8002a78:	f7fe fbfc 	bl	8001274 <_ZN7ADS124311sendCommandEh.isra.0>
	power.adc.sendCommand(DSYNC);
 8002a7c:	20fc      	movs	r0, #252	; 0xfc
 8002a7e:	f7fe fbf9 	bl	8001274 <_ZN7ADS124311sendCommandEh.isra.0>
	HAL_Delay(100);
 8002a82:	2064      	movs	r0, #100	; 0x64
 8002a84:	f000 fc16 	bl	80032b4 <HAL_Delay>
		ADS124x_CS_0;
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	4840      	ldr	r0, [pc, #256]	; (8002b90 <setup+0x1fc>)
 8002a8e:	f000 fede 	bl	800384e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002a92:	2300      	movs	r3, #0
 8002a94:	493f      	ldr	r1, [pc, #252]	; (8002b94 <setup+0x200>)
 8002a96:	4e40      	ldr	r6, [pc, #256]	; (8002b98 <setup+0x204>)
 8002a98:	604b      	str	r3, [r1, #4]
 8002a9a:	4a40      	ldr	r2, [pc, #256]	; (8002b9c <setup+0x208>)
 8002a9c:	6833      	ldr	r3, [r6, #0]
 8002a9e:	4d40      	ldr	r5, [pc, #256]	; (8002ba0 <setup+0x20c>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	0c9b      	lsrs	r3, r3, #18
 8002aa6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	3a10      	subs	r2, #16
 8002aae:	602a      	str	r2, [r5, #0]
 8002ab0:	684b      	ldr	r3, [r1, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d8fc      	bhi.n	8002ab0 <setup+0x11c>
		XferByte(0x50 + r);
 8002ab6:	2352      	movs	r3, #82	; 0x52
 8002ab8:	4c3a      	ldr	r4, [pc, #232]	; (8002ba4 <setup+0x210>)
 8002aba:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002abe:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d0fb      	beq.n	8002abe <setup+0x12a>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aca:	4836      	ldr	r0, [pc, #216]	; (8002ba4 <setup+0x210>)
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	f10d 020f 	add.w	r2, sp, #15
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f10d 010e 	add.w	r1, sp, #14
 8002ad8:	f002 f802 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8002adc:	2300      	movs	r3, #0
 8002ade:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002ae2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d0fb      	beq.n	8002ae2 <setup+0x14e>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aee:	482d      	ldr	r0, [pc, #180]	; (8002ba4 <setup+0x210>)
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f10d 020f 	add.w	r2, sp, #15
 8002af6:	2301      	movs	r3, #1
 8002af8:	f10d 010e 	add.w	r1, sp, #14
 8002afc:	f001 fff0 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8002b00:	2340      	movs	r3, #64	; 0x40
 8002b02:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002b06:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d0fb      	beq.n	8002b06 <setup+0x172>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002b0e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002b12:	2301      	movs	r3, #1
 8002b14:	f10d 020f 	add.w	r2, sp, #15
 8002b18:	f10d 010e 	add.w	r1, sp, #14
 8002b1c:	4821      	ldr	r0, [pc, #132]	; (8002ba4 <setup+0x210>)
 8002b1e:	9400      	str	r4, [sp, #0]
 8002b20:	f001 ffde 	bl	8004ae0 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002b24:	2300      	movs	r3, #0
 8002b26:	491b      	ldr	r1, [pc, #108]	; (8002b94 <setup+0x200>)
 8002b28:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <setup+0x208>)
 8002b2a:	604b      	str	r3, [r1, #4]
 8002b2c:	6833      	ldr	r3, [r6, #0]
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0c9b      	lsrs	r3, r3, #18
 8002b34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b38:	009a      	lsls	r2, r3, #2
 8002b3a:	3a10      	subs	r2, #16
 8002b3c:	602a      	str	r2, [r5, #0]
 8002b3e:	684b      	ldr	r3, [r1, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d8fc      	bhi.n	8002b3e <setup+0x1aa>
		ADS124x_CS_1;
 8002b44:	2201      	movs	r2, #1
 8002b46:	2110      	movs	r1, #16
 8002b48:	4811      	ldr	r0, [pc, #68]	; (8002b90 <setup+0x1fc>)
 8002b4a:	f000 fe80 	bl	800384e <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8002b4e:	4816      	ldr	r0, [pc, #88]	; (8002ba8 <setup+0x214>)
 8002b50:	f002 fa6c 	bl	800502c <HAL_TIM_Base_Start_IT>
	loop();
 8002b54:	f7fe fdcc 	bl	80016f0 <_Z4loopv>
			SSD1306_Init();
 8002b58:	1d30      	adds	r0, r6, #4
 8002b5a:	f003 f987 	bl	8005e6c <_ZN10TFT_Driver12SSD1306_InitEv>
			break;
 8002b5e:	e729      	b.n	80029b4 <setup+0x20>
			SSD1306_UpdateScreen();
 8002b60:	4812      	ldr	r0, [pc, #72]	; (8002bac <setup+0x218>)
 8002b62:	f003 fb35 	bl	80061d0 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
			break;
 8002b66:	e776      	b.n	8002a56 <setup+0xc2>
			SSD1306_UpdateScreen();
 8002b68:	4810      	ldr	r0, [pc, #64]	; (8002bac <setup+0x218>)
 8002b6a:	f003 fb31 	bl	80061d0 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
			break;
 8002b6e:	e72a      	b.n	80029c6 <setup+0x32>
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000804 	.word	0x20000804
 8002b78:	20000068 	.word	0x20000068
 8002b7c:	080091f4 	.word	0x080091f4
 8002b80:	200006a8 	.word	0x200006a8
 8002b84:	200008d0 	.word	0x200008d0
 8002b88:	080091fc 	.word	0x080091fc
 8002b8c:	200007cc 	.word	0x200007cc
 8002b90:	40010800 	.word	0x40010800
 8002b94:	e0001000 	.word	0xe0001000
 8002b98:	2000005c 	.word	0x2000005c
 8002b9c:	431bde83 	.word	0x431bde83
 8002ba0:	2000091c 	.word	0x2000091c
 8002ba4:	2000082c 	.word	0x2000082c
 8002ba8:	20000888 	.word	0x20000888
 8002bac:	20000808 	.word	0x20000808

08002bb0 <_GLOBAL__sub_I_key>:
GButton key(KEY_GPIO_Port, GPIO_PIN_6);
 8002bb0:	2300      	movs	r3, #0
//		tft.driver.Update();


	}

}
 8002bb2:	b500      	push	{lr}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	2240      	movs	r2, #64	; 0x40
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <_GLOBAL__sub_I_key+0x18>)
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4803      	ldr	r0, [pc, #12]	; (8002bcc <_GLOBAL__sub_I_key+0x1c>)
 8002bbe:	f002 ffbb 	bl	8005b38 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>
 8002bc2:	b003      	add	sp, #12
 8002bc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bc8:	40010c00 	.word	0x40010c00
 8002bcc:	200007ac 	.word	0x200007ac

08002bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bd4:	f000 fb0c 	bl	80031f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bd8:	f000 f80d 	bl	8002bf6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bdc:	f7fe fa78 	bl	80010d0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002be0:	f7fe fada 	bl	8001198 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002be4:	f000 f852 	bl	8002c8c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002be8:	f000 fa66 	bl	80030b8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002bec:	f000 f9ee 	bl	8002fcc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8002bf0:	f7ff fed0 	bl	8002994 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <main+0x24>

08002bf6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b090      	sub	sp, #64	; 0x40
 8002bfa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfc:	f107 0318 	add.w	r3, r7, #24
 8002c00:	2228      	movs	r2, #40	; 0x28
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f004 f9da 	bl	8006fbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c20:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c26:	2301      	movs	r3, #1
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3a:	f107 0318 	add.w	r3, r7, #24
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 faba 	bl	80041b8 <HAL_RCC_OscConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002c4a:	f000 f819 	bl	8002c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4e:	230f      	movs	r3, #15
 8002c50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c52:	2302      	movs	r3, #2
 8002c54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	2102      	movs	r1, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 fd27 	bl	80046bc <HAL_RCC_ClockConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002c74:	f000 f804 	bl	8002c80 <Error_Handler>
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3740      	adds	r7, #64	; 0x40
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c84:	b672      	cpsid	i
}
 8002c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <Error_Handler+0x8>
	...

08002c8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002c92:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <MX_SPI1_Init+0x68>)
 8002c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002c98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002cd8:	220a      	movs	r2, #10
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cdc:	4804      	ldr	r0, [pc, #16]	; (8002cf0 <MX_SPI1_Init+0x64>)
 8002cde:	f001 fe7b 	bl	80049d8 <HAL_SPI_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ce8:	f7ff ffca 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2000082c 	.word	0x2000082c
 8002cf4:	40013000 	.word	0x40013000

08002cf8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <HAL_SPI_MspInit+0x88>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d12f      	bne.n	8002d78 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d22:	6193      	str	r3, [r2, #24]
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6193      	str	r3, [r2, #24]
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d48:	23a0      	movs	r3, #160	; 0xa0
 8002d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	4619      	mov	r1, r3
 8002d5a:	480b      	ldr	r0, [pc, #44]	; (8002d88 <HAL_SPI_MspInit+0x90>)
 8002d5c:	f000 fbdc 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d60:	2340      	movs	r3, #64	; 0x40
 8002d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	4619      	mov	r1, r3
 8002d72:	4805      	ldr	r0, [pc, #20]	; (8002d88 <HAL_SPI_MspInit+0x90>)
 8002d74:	f000 fbd0 	bl	8003518 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d78:	bf00      	nop
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40013000 	.word	0x40013000
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40010800 	.word	0x40010800

08002d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_MspInit+0x5c>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <HAL_MspInit+0x5c>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6193      	str	r3, [r2, #24]
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_MspInit+0x5c>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_MspInit+0x5c>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_MspInit+0x5c>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	61d3      	str	r3, [r2, #28]
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_MspInit+0x5c>)
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_MspInit+0x60>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_MspInit+0x60>)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40010000 	.word	0x40010000

08002df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <NMI_Handler+0x4>

08002df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dfa:	e7fe      	b.n	8002dfa <HardFault_Handler+0x4>

08002dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e00:	e7fe      	b.n	8002e00 <MemManage_Handler+0x4>

08002e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e06:	e7fe      	b.n	8002e06 <BusFault_Handler+0x4>

08002e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e0c:	e7fe      	b.n	8002e0c <UsageFault_Handler+0x4>

08002e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e36:	f000 fa21 	bl	800327c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  return 1;
 8002e42:	2301      	movs	r3, #1
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <_kill>:

int _kill(int pid, int sig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e56:	f004 f905 	bl	8007064 <__errno>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2216      	movs	r2, #22
 8002e5e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <_exit>:

void _exit (int status)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ffe7 	bl	8002e4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e7e:	e7fe      	b.n	8002e7e <_exit+0x12>

08002e80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	e00a      	b.n	8002ea8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e92:	f3af 8000 	nop.w
 8002e96:	4601      	mov	r1, r0
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	60ba      	str	r2, [r7, #8]
 8002e9e:	b2ca      	uxtb	r2, r1
 8002ea0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	dbf0      	blt.n	8002e92 <_read+0x12>
  }

  return len;
 8002eb0:	687b      	ldr	r3, [r7, #4]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e009      	b.n	8002ee0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	60ba      	str	r2, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	dbf1      	blt.n	8002ecc <_write+0x12>
  }
  return len;
 8002ee8:	687b      	ldr	r3, [r7, #4]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <_close>:

int _close(int file)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f18:	605a      	str	r2, [r3, #4]
  return 0;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <_isatty>:

int _isatty(int file)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f2e:	2301      	movs	r3, #1
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
	...

08002f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <_sbrk+0x5c>)
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <_sbrk+0x60>)
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <_sbrk+0x64>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <_sbrk+0x64>)
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <_sbrk+0x68>)
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <_sbrk+0x64>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d207      	bcs.n	8002f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f84:	f004 f86e 	bl	8007064 <__errno>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	e009      	b.n	8002fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <_sbrk+0x64>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <_sbrk+0x64>)
 8002fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20005000 	.word	0x20005000
 8002fb4:	00000400 	.word	0x00000400
 8002fb8:	20000884 	.word	0x20000884
 8002fbc:	20000a70 	.word	0x20000a70

08002fc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fd2:	f107 0308 	add.w	r3, r7, #8
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <MX_TIM1_Init+0x98>)
 8002fea:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <MX_TIM1_Init+0x9c>)
 8002fec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <MX_TIM1_Init+0x98>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <MX_TIM1_Init+0x98>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <MX_TIM1_Init+0x98>)
 8002ffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003000:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <MX_TIM1_Init+0x98>)
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <MX_TIM1_Init+0x98>)
 800300a:	2200      	movs	r2, #0
 800300c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <MX_TIM1_Init+0x98>)
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003014:	4813      	ldr	r0, [pc, #76]	; (8003064 <MX_TIM1_Init+0x98>)
 8003016:	f001 ffb9 	bl	8004f8c <HAL_TIM_Base_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003020:	f7ff fe2e 	bl	8002c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800302a:	f107 0308 	add.w	r3, r7, #8
 800302e:	4619      	mov	r1, r3
 8003030:	480c      	ldr	r0, [pc, #48]	; (8003064 <MX_TIM1_Init+0x98>)
 8003032:	f002 f955 	bl	80052e0 <HAL_TIM_ConfigClockSource>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800303c:	f7ff fe20 	bl	8002c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003040:	2310      	movs	r3, #16
 8003042:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003048:	463b      	mov	r3, r7
 800304a:	4619      	mov	r1, r3
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <MX_TIM1_Init+0x98>)
 800304e:	f002 fb33 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003058:	f7ff fe12 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800305c:	bf00      	nop
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000888 	.word	0x20000888
 8003068:	40012c00 	.word	0x40012c00

0800306c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_TIM_Base_MspInit+0x44>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d113      	bne.n	80030a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <HAL_TIM_Base_MspInit+0x48>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <HAL_TIM_Base_MspInit+0x48>)
 8003084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003088:	6193      	str	r3, [r2, #24]
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_TIM_Base_MspInit+0x48>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003096:	2200      	movs	r2, #0
 8003098:	2100      	movs	r1, #0
 800309a:	2019      	movs	r0, #25
 800309c:	f000 fa05 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80030a0:	2019      	movs	r0, #25
 80030a2:	f000 fa1e 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40021000 	.word	0x40021000

080030b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <MX_USART1_UART_Init+0x48>)
 80030be:	4a11      	ldr	r2, [pc, #68]	; (8003104 <MX_USART1_UART_Init+0x4c>)
 80030c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <MX_USART1_UART_Init+0x48>)
 80030c4:	4a10      	ldr	r2, [pc, #64]	; (8003108 <MX_USART1_UART_Init+0x50>)
 80030c6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030c8:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <MX_USART1_UART_Init+0x48>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <MX_USART1_UART_Init+0x48>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <MX_USART1_UART_Init+0x48>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <MX_USART1_UART_Init+0x48>)
 80030dc:	220c      	movs	r2, #12
 80030de:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <MX_USART1_UART_Init+0x48>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <MX_USART1_UART_Init+0x48>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030ec:	4804      	ldr	r0, [pc, #16]	; (8003100 <MX_USART1_UART_Init+0x48>)
 80030ee:	f002 fb53 	bl	8005798 <HAL_UART_Init>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80030f8:	f7ff fdc2 	bl	8002c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	200008d0 	.word	0x200008d0
 8003104:	40013800 	.word	0x40013800
 8003108:	001e8480 	.word	0x001e8480

0800310c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 0310 	add.w	r3, r7, #16
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <HAL_UART_MspInit+0x8c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d131      	bne.n	8003190 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_UART_MspInit+0x90>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	4a1a      	ldr	r2, [pc, #104]	; (800319c <HAL_UART_MspInit+0x90>)
 8003132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003136:	6193      	str	r3, [r2, #24]
 8003138:	4b18      	ldr	r3, [pc, #96]	; (800319c <HAL_UART_MspInit+0x90>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003144:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_UART_MspInit+0x90>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <HAL_UART_MspInit+0x90>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	6193      	str	r3, [r2, #24]
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_UART_MspInit+0x90>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800315c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003160:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003166:	2303      	movs	r3, #3
 8003168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316a:	f107 0310 	add.w	r3, r7, #16
 800316e:	4619      	mov	r1, r3
 8003170:	480b      	ldr	r0, [pc, #44]	; (80031a0 <HAL_UART_MspInit+0x94>)
 8003172:	f000 f9d1 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	4619      	mov	r1, r3
 800318a:	4805      	ldr	r0, [pc, #20]	; (80031a0 <HAL_UART_MspInit+0x94>)
 800318c:	f000 f9c4 	bl	8003518 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003190:	bf00      	nop
 8003192:	3720      	adds	r7, #32
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40013800 	.word	0x40013800
 800319c:	40021000 	.word	0x40021000
 80031a0:	40010800 	.word	0x40010800

080031a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031a4:	f7ff ff0c 	bl	8002fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031a8:	480b      	ldr	r0, [pc, #44]	; (80031d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80031aa:	490c      	ldr	r1, [pc, #48]	; (80031dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80031ac:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b0:	e002      	b.n	80031b8 <LoopCopyDataInit>

080031b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b6:	3304      	adds	r3, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031bc:	d3f9      	bcc.n	80031b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80031c0:	4c09      	ldr	r4, [pc, #36]	; (80031e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c4:	e001      	b.n	80031ca <LoopFillZerobss>

080031c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c8:	3204      	adds	r2, #4

080031ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031cc:	d3fb      	bcc.n	80031c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ce:	f003 ff4f 	bl	8007070 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031d2:	f7ff fcfd 	bl	8002bd0 <main>
  bx lr
 80031d6:	4770      	bx	lr
  ldr r0, =_sdata
 80031d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031dc:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 80031e0:	08009d30 	.word	0x08009d30
  ldr r2, =_sbss
 80031e4:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80031e8:	20000a70 	.word	0x20000a70

080031ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031ec:	e7fe      	b.n	80031ec <ADC1_2_IRQHandler>
	...

080031f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_Init+0x28>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <HAL_Init+0x28>)
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003200:	2003      	movs	r0, #3
 8003202:	f000 f947 	bl	8003494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003206:	200f      	movs	r0, #15
 8003208:	f000 f808 	bl	800321c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800320c:	f7ff fdbe 	bl	8002d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40022000 	.word	0x40022000

0800321c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_InitTick+0x54>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_InitTick+0x58>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	4619      	mov	r1, r3
 800322e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003232:	fbb3 f3f1 	udiv	r3, r3, r1
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f95f 	bl	80034fe <HAL_SYSTICK_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e00e      	b.n	8003268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b0f      	cmp	r3, #15
 800324e:	d80a      	bhi.n	8003266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003250:	2200      	movs	r2, #0
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	f000 f927 	bl	80034aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <HAL_InitTick+0x5c>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	2000005c 	.word	0x2000005c
 8003274:	20000064 	.word	0x20000064
 8003278:	20000060 	.word	0x20000060

0800327c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_IncTick+0x1c>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_IncTick+0x20>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4413      	add	r3, r2
 800328c:	4a03      	ldr	r2, [pc, #12]	; (800329c <HAL_IncTick+0x20>)
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	20000064 	.word	0x20000064
 800329c:	20000918 	.word	0x20000918

080032a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return uwTick;
 80032a4:	4b02      	ldr	r3, [pc, #8]	; (80032b0 <HAL_GetTick+0x10>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	20000918 	.word	0x20000918

080032b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032bc:	f7ff fff0 	bl	80032a0 <HAL_GetTick>
 80032c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d005      	beq.n	80032da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <HAL_Delay+0x44>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032da:	bf00      	nop
 80032dc:	f7ff ffe0 	bl	80032a0 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d8f7      	bhi.n	80032dc <HAL_Delay+0x28>
  {
  }
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000064 	.word	0x20000064

080032fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4906      	ldr	r1, [pc, #24]	; (8003394 <__NVIC_EnableIRQ+0x34>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100

08003398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db0a      	blt.n	80033c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	490c      	ldr	r1, [pc, #48]	; (80033e4 <__NVIC_SetPriority+0x4c>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	440b      	add	r3, r1
 80033bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c0:	e00a      	b.n	80033d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4908      	ldr	r1, [pc, #32]	; (80033e8 <__NVIC_SetPriority+0x50>)
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	3b04      	subs	r3, #4
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	440b      	add	r3, r1
 80033d6:	761a      	strb	r2, [r3, #24]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f1c3 0307 	rsb	r3, r3, #7
 8003406:	2b04      	cmp	r3, #4
 8003408:	bf28      	it	cs
 800340a:	2304      	movcs	r3, #4
 800340c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3304      	adds	r3, #4
 8003412:	2b06      	cmp	r3, #6
 8003414:	d902      	bls.n	800341c <NVIC_EncodePriority+0x30>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3b03      	subs	r3, #3
 800341a:	e000      	b.n	800341e <NVIC_EncodePriority+0x32>
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	43d9      	mvns	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	4313      	orrs	r3, r2
         );
}
 8003446:	4618      	mov	r0, r3
 8003448:	3724      	adds	r7, #36	; 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003460:	d301      	bcc.n	8003466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003462:	2301      	movs	r3, #1
 8003464:	e00f      	b.n	8003486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <SysTick_Config+0x40>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346e:	210f      	movs	r1, #15
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	f7ff ff90 	bl	8003398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <SysTick_Config+0x40>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347e:	4b04      	ldr	r3, [pc, #16]	; (8003490 <SysTick_Config+0x40>)
 8003480:	2207      	movs	r2, #7
 8003482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff2d 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034bc:	f7ff ff42 	bl	8003344 <__NVIC_GetPriorityGrouping>
 80034c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f7ff ff90 	bl	80033ec <NVIC_EncodePriority>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff5f 	bl	8003398 <__NVIC_SetPriority>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff35 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffa2 	bl	8003450 <SysTick_Config>
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003518:	b480      	push	{r7}
 800351a:	b08b      	sub	sp, #44	; 0x2c
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352a:	e169      	b.n	8003800 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800352c:	2201      	movs	r2, #1
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	429a      	cmp	r2, r3
 8003546:	f040 8158 	bne.w	80037fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4a9a      	ldr	r2, [pc, #616]	; (80037b8 <HAL_GPIO_Init+0x2a0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d05e      	beq.n	8003612 <HAL_GPIO_Init+0xfa>
 8003554:	4a98      	ldr	r2, [pc, #608]	; (80037b8 <HAL_GPIO_Init+0x2a0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d875      	bhi.n	8003646 <HAL_GPIO_Init+0x12e>
 800355a:	4a98      	ldr	r2, [pc, #608]	; (80037bc <HAL_GPIO_Init+0x2a4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d058      	beq.n	8003612 <HAL_GPIO_Init+0xfa>
 8003560:	4a96      	ldr	r2, [pc, #600]	; (80037bc <HAL_GPIO_Init+0x2a4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d86f      	bhi.n	8003646 <HAL_GPIO_Init+0x12e>
 8003566:	4a96      	ldr	r2, [pc, #600]	; (80037c0 <HAL_GPIO_Init+0x2a8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d052      	beq.n	8003612 <HAL_GPIO_Init+0xfa>
 800356c:	4a94      	ldr	r2, [pc, #592]	; (80037c0 <HAL_GPIO_Init+0x2a8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d869      	bhi.n	8003646 <HAL_GPIO_Init+0x12e>
 8003572:	4a94      	ldr	r2, [pc, #592]	; (80037c4 <HAL_GPIO_Init+0x2ac>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d04c      	beq.n	8003612 <HAL_GPIO_Init+0xfa>
 8003578:	4a92      	ldr	r2, [pc, #584]	; (80037c4 <HAL_GPIO_Init+0x2ac>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d863      	bhi.n	8003646 <HAL_GPIO_Init+0x12e>
 800357e:	4a92      	ldr	r2, [pc, #584]	; (80037c8 <HAL_GPIO_Init+0x2b0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d046      	beq.n	8003612 <HAL_GPIO_Init+0xfa>
 8003584:	4a90      	ldr	r2, [pc, #576]	; (80037c8 <HAL_GPIO_Init+0x2b0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d85d      	bhi.n	8003646 <HAL_GPIO_Init+0x12e>
 800358a:	2b12      	cmp	r3, #18
 800358c:	d82a      	bhi.n	80035e4 <HAL_GPIO_Init+0xcc>
 800358e:	2b12      	cmp	r3, #18
 8003590:	d859      	bhi.n	8003646 <HAL_GPIO_Init+0x12e>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <HAL_GPIO_Init+0x80>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	08003613 	.word	0x08003613
 800359c:	080035ed 	.word	0x080035ed
 80035a0:	080035ff 	.word	0x080035ff
 80035a4:	08003641 	.word	0x08003641
 80035a8:	08003647 	.word	0x08003647
 80035ac:	08003647 	.word	0x08003647
 80035b0:	08003647 	.word	0x08003647
 80035b4:	08003647 	.word	0x08003647
 80035b8:	08003647 	.word	0x08003647
 80035bc:	08003647 	.word	0x08003647
 80035c0:	08003647 	.word	0x08003647
 80035c4:	08003647 	.word	0x08003647
 80035c8:	08003647 	.word	0x08003647
 80035cc:	08003647 	.word	0x08003647
 80035d0:	08003647 	.word	0x08003647
 80035d4:	08003647 	.word	0x08003647
 80035d8:	08003647 	.word	0x08003647
 80035dc:	080035f5 	.word	0x080035f5
 80035e0:	08003609 	.word	0x08003609
 80035e4:	4a79      	ldr	r2, [pc, #484]	; (80037cc <HAL_GPIO_Init+0x2b4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035ea:	e02c      	b.n	8003646 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	623b      	str	r3, [r7, #32]
          break;
 80035f2:	e029      	b.n	8003648 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	3304      	adds	r3, #4
 80035fa:	623b      	str	r3, [r7, #32]
          break;
 80035fc:	e024      	b.n	8003648 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	3308      	adds	r3, #8
 8003604:	623b      	str	r3, [r7, #32]
          break;
 8003606:	e01f      	b.n	8003648 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	330c      	adds	r3, #12
 800360e:	623b      	str	r3, [r7, #32]
          break;
 8003610:	e01a      	b.n	8003648 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800361a:	2304      	movs	r3, #4
 800361c:	623b      	str	r3, [r7, #32]
          break;
 800361e:	e013      	b.n	8003648 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d105      	bne.n	8003634 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003628:	2308      	movs	r3, #8
 800362a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	611a      	str	r2, [r3, #16]
          break;
 8003632:	e009      	b.n	8003648 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003634:	2308      	movs	r3, #8
 8003636:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	615a      	str	r2, [r3, #20]
          break;
 800363e:	e003      	b.n	8003648 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003640:	2300      	movs	r3, #0
 8003642:	623b      	str	r3, [r7, #32]
          break;
 8003644:	e000      	b.n	8003648 <HAL_GPIO_Init+0x130>
          break;
 8003646:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2bff      	cmp	r3, #255	; 0xff
 800364c:	d801      	bhi.n	8003652 <HAL_GPIO_Init+0x13a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	e001      	b.n	8003656 <HAL_GPIO_Init+0x13e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2bff      	cmp	r3, #255	; 0xff
 800365c:	d802      	bhi.n	8003664 <HAL_GPIO_Init+0x14c>
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	e002      	b.n	800366a <HAL_GPIO_Init+0x152>
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	3b08      	subs	r3, #8
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	210f      	movs	r1, #15
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	6a39      	ldr	r1, [r7, #32]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	431a      	orrs	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80b1 	beq.w	80037fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003698:	4b4d      	ldr	r3, [pc, #308]	; (80037d0 <HAL_GPIO_Init+0x2b8>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	4a4c      	ldr	r2, [pc, #304]	; (80037d0 <HAL_GPIO_Init+0x2b8>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6193      	str	r3, [r2, #24]
 80036a4:	4b4a      	ldr	r3, [pc, #296]	; (80037d0 <HAL_GPIO_Init+0x2b8>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036b0:	4a48      	ldr	r2, [pc, #288]	; (80037d4 <HAL_GPIO_Init+0x2bc>)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	3302      	adds	r3, #2
 80036b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	220f      	movs	r2, #15
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a40      	ldr	r2, [pc, #256]	; (80037d8 <HAL_GPIO_Init+0x2c0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_GPIO_Init+0x1ec>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a3f      	ldr	r2, [pc, #252]	; (80037dc <HAL_GPIO_Init+0x2c4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00d      	beq.n	8003700 <HAL_GPIO_Init+0x1e8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a3e      	ldr	r2, [pc, #248]	; (80037e0 <HAL_GPIO_Init+0x2c8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <HAL_GPIO_Init+0x1e4>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a3d      	ldr	r2, [pc, #244]	; (80037e4 <HAL_GPIO_Init+0x2cc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_GPIO_Init+0x1e0>
 80036f4:	2303      	movs	r3, #3
 80036f6:	e006      	b.n	8003706 <HAL_GPIO_Init+0x1ee>
 80036f8:	2304      	movs	r3, #4
 80036fa:	e004      	b.n	8003706 <HAL_GPIO_Init+0x1ee>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e002      	b.n	8003706 <HAL_GPIO_Init+0x1ee>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_GPIO_Init+0x1ee>
 8003704:	2300      	movs	r3, #0
 8003706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003708:	f002 0203 	and.w	r2, r2, #3
 800370c:	0092      	lsls	r2, r2, #2
 800370e:	4093      	lsls	r3, r2
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003716:	492f      	ldr	r1, [pc, #188]	; (80037d4 <HAL_GPIO_Init+0x2bc>)
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	3302      	adds	r3, #2
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d006      	beq.n	800373e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003730:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	492c      	ldr	r1, [pc, #176]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	608b      	str	r3, [r1, #8]
 800373c:	e006      	b.n	800374c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	43db      	mvns	r3, r3
 8003746:	4928      	ldr	r1, [pc, #160]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003748:	4013      	ands	r3, r2
 800374a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d006      	beq.n	8003766 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003758:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	4922      	ldr	r1, [pc, #136]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	60cb      	str	r3, [r1, #12]
 8003764:	e006      	b.n	8003774 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	43db      	mvns	r3, r3
 800376e:	491e      	ldr	r1, [pc, #120]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003770:	4013      	ands	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d006      	beq.n	800378e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003780:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4918      	ldr	r1, [pc, #96]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
 800378c:	e006      	b.n	800379c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800378e:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	43db      	mvns	r3, r3
 8003796:	4914      	ldr	r1, [pc, #80]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 8003798:	4013      	ands	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d021      	beq.n	80037ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	490e      	ldr	r1, [pc, #56]	; (80037e8 <HAL_GPIO_Init+0x2d0>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]
 80037b4:	e021      	b.n	80037fa <HAL_GPIO_Init+0x2e2>
 80037b6:	bf00      	nop
 80037b8:	10320000 	.word	0x10320000
 80037bc:	10310000 	.word	0x10310000
 80037c0:	10220000 	.word	0x10220000
 80037c4:	10210000 	.word	0x10210000
 80037c8:	10120000 	.word	0x10120000
 80037cc:	10110000 	.word	0x10110000
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40010800 	.word	0x40010800
 80037dc:	40010c00 	.word	0x40010c00
 80037e0:	40011000 	.word	0x40011000
 80037e4:	40011400 	.word	0x40011400
 80037e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_GPIO_Init+0x304>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	4909      	ldr	r1, [pc, #36]	; (800381c <HAL_GPIO_Init+0x304>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	3301      	adds	r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	f47f ae8e 	bne.w	800352c <HAL_GPIO_Init+0x14>
  }
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	372c      	adds	r7, #44	; 0x2c
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40010400 	.word	0x40010400

08003820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	887b      	ldrh	r3, [r7, #2]
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	e001      	b.n	8003842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	460b      	mov	r3, r1
 8003858:	807b      	strh	r3, [r7, #2]
 800385a:	4613      	mov	r3, r2
 800385c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800385e:	787b      	ldrb	r3, [r7, #1]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003864:	887a      	ldrh	r2, [r7, #2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800386a:	e003      	b.n	8003874 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	041a      	lsls	r2, r3, #16
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	611a      	str	r2, [r3, #16]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
	...

08003880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e12b      	b.n	8003aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd fca4 	bl	80011f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2224      	movs	r2, #36	; 0x24
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e4:	f001 f832 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 80038e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a81      	ldr	r2, [pc, #516]	; (8003af4 <HAL_I2C_Init+0x274>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d807      	bhi.n	8003904 <HAL_I2C_Init+0x84>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a80      	ldr	r2, [pc, #512]	; (8003af8 <HAL_I2C_Init+0x278>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	bf94      	ite	ls
 80038fc:	2301      	movls	r3, #1
 80038fe:	2300      	movhi	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e006      	b.n	8003912 <HAL_I2C_Init+0x92>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a7d      	ldr	r2, [pc, #500]	; (8003afc <HAL_I2C_Init+0x27c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0e7      	b.n	8003aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a78      	ldr	r2, [pc, #480]	; (8003b00 <HAL_I2C_Init+0x280>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0c9b      	lsrs	r3, r3, #18
 8003924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a6a      	ldr	r2, [pc, #424]	; (8003af4 <HAL_I2C_Init+0x274>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d802      	bhi.n	8003954 <HAL_I2C_Init+0xd4>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3301      	adds	r3, #1
 8003952:	e009      	b.n	8003968 <HAL_I2C_Init+0xe8>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	4a69      	ldr	r2, [pc, #420]	; (8003b04 <HAL_I2C_Init+0x284>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	3301      	adds	r3, #1
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	430b      	orrs	r3, r1
 800396e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800397a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	495c      	ldr	r1, [pc, #368]	; (8003af4 <HAL_I2C_Init+0x274>)
 8003984:	428b      	cmp	r3, r1
 8003986:	d819      	bhi.n	80039bc <HAL_I2C_Init+0x13c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e59      	subs	r1, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fbb1 f3f3 	udiv	r3, r1, r3
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	f640 73fc 	movw	r3, #4092	; 0xffc
 800399c:	400b      	ands	r3, r1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_I2C_Init+0x138>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e59      	subs	r1, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b6:	e051      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039b8:	2304      	movs	r3, #4
 80039ba:	e04f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d111      	bne.n	80039e8 <HAL_I2C_Init+0x168>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e012      	b.n	8003a0e <HAL_I2C_Init+0x18e>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Init+0x196>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10e      	bne.n	8003a3c <HAL_I2C_Init+0x1bc>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e58      	subs	r0, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	440b      	add	r3, r1
 8003a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3a:	e00f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	0099      	lsls	r1, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	6809      	ldr	r1, [r1, #0]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6911      	ldr	r1, [r2, #16]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68d2      	ldr	r2, [r2, #12]
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	000186a0 	.word	0x000186a0
 8003af8:	001e847f 	.word	0x001e847f
 8003afc:	003d08ff 	.word	0x003d08ff
 8003b00:	431bde83 	.word	0x431bde83
 8003b04:	10624dd3 	.word	0x10624dd3

08003b08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	461a      	mov	r2, r3
 8003b14:	460b      	mov	r3, r1
 8003b16:	817b      	strh	r3, [r7, #10]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7ff fbc0 	bl	80032a0 <HAL_GetTick>
 8003b20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	f040 80e0 	bne.w	8003cf0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2319      	movs	r3, #25
 8003b36:	2201      	movs	r2, #1
 8003b38:	4970      	ldr	r1, [pc, #448]	; (8003cfc <HAL_I2C_Master_Transmit+0x1f4>)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f964 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0d3      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_I2C_Master_Transmit+0x50>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e0cc      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d007      	beq.n	8003b7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2221      	movs	r2, #33	; 0x21
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2210      	movs	r2, #16
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	893a      	ldrh	r2, [r7, #8]
 8003bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a50      	ldr	r2, [pc, #320]	; (8003d00 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bc0:	8979      	ldrh	r1, [r7, #10]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	6a3a      	ldr	r2, [r7, #32]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f89c 	bl	8003d04 <I2C_MasterRequestWrite>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e08d      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bec:	e066      	b.n	8003cbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fa22 	bl	800403c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e06b      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	781a      	ldrb	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d11b      	bne.n	8003c90 <HAL_I2C_Master_Transmit+0x188>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d017      	beq.n	8003c90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	6a39      	ldr	r1, [r7, #32]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fa19 	bl	80040cc <I2C_WaitOnBTFFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d107      	bne.n	8003cb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e01a      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d194      	bne.n	8003bee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
  }
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	00100002 	.word	0x00100002
 8003d00:	ffff0000 	.word	0xffff0000

08003d04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	460b      	mov	r3, r1
 8003d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d006      	beq.n	8003d2e <I2C_MasterRequestWrite+0x2a>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d003      	beq.n	8003d2e <I2C_MasterRequestWrite+0x2a>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d2c:	d108      	bne.n	8003d40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e00b      	b.n	8003d58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	2b12      	cmp	r3, #18
 8003d46:	d107      	bne.n	8003d58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f84f 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7e:	d103      	bne.n	8003d88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e035      	b.n	8003df8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d94:	d108      	bne.n	8003da8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d96:	897b      	ldrh	r3, [r7, #10]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	e01b      	b.n	8003de0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003da8:	897b      	ldrh	r3, [r7, #10]
 8003daa:	11db      	asrs	r3, r3, #7
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0306 	and.w	r3, r3, #6
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f063 030f 	orn	r3, r3, #15
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	490e      	ldr	r1, [pc, #56]	; (8003e00 <I2C_MasterRequestWrite+0xfc>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f898 	bl	8003efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e010      	b.n	8003df8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4907      	ldr	r1, [pc, #28]	; (8003e04 <I2C_MasterRequestWrite+0x100>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f888 	bl	8003efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	00010008 	.word	0x00010008
 8003e04:	00010002 	.word	0x00010002

08003e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e18:	e048      	b.n	8003eac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d044      	beq.n	8003eac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7ff fa3d 	bl	80032a0 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d139      	bne.n	8003eac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	0c1b      	lsrs	r3, r3, #16
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d10d      	bne.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	43da      	mvns	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bf0c      	ite	eq
 8003e54:	2301      	moveq	r3, #1
 8003e56:	2300      	movne	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	e00c      	b.n	8003e78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	43da      	mvns	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d116      	bne.n	8003eac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e023      	b.n	8003ef4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	0c1b      	lsrs	r3, r3, #16
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d10d      	bne.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	e00c      	b.n	8003eec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4013      	ands	r3, r2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d093      	beq.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f0a:	e071      	b.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d123      	bne.n	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f043 0204 	orr.w	r2, r3, #4
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e067      	b.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d041      	beq.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6c:	f7ff f998 	bl	80032a0 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d302      	bcc.n	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d136      	bne.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d10c      	bne.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	43da      	mvns	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4013      	ands	r3, r2
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	e00b      	b.n	8003fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	43da      	mvns	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e021      	b.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10c      	bne.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	43da      	mvns	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e00b      	b.n	800402c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	43da      	mvns	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4013      	ands	r3, r2
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	f47f af6d 	bne.w	8003f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004048:	e034      	b.n	80040b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f886 	bl	800415c <I2C_IsAcknowledgeFailed>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e034      	b.n	80040c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d028      	beq.n	80040b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004062:	f7ff f91d 	bl	80032a0 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11d      	bne.n	80040b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b80      	cmp	r3, #128	; 0x80
 8004084:	d016      	beq.n	80040b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e007      	b.n	80040c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b80      	cmp	r3, #128	; 0x80
 80040c0:	d1c3      	bne.n	800404a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d8:	e034      	b.n	8004144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f83e 	bl	800415c <I2C_IsAcknowledgeFailed>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e034      	b.n	8004154 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d028      	beq.n	8004144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f2:	f7ff f8d5 	bl	80032a0 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d11d      	bne.n	8004144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b04      	cmp	r3, #4
 8004114:	d016      	beq.n	8004144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	f043 0220 	orr.w	r2, r3, #32
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e007      	b.n	8004154 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b04      	cmp	r3, #4
 8004150:	d1c3      	bne.n	80040da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	d11b      	bne.n	80041ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800417c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	f043 0204 	orr.w	r2, r3, #4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e272      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8087 	beq.w	80042e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041d8:	4b92      	ldr	r3, [pc, #584]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 030c 	and.w	r3, r3, #12
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d00c      	beq.n	80041fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041e4:	4b8f      	ldr	r3, [pc, #572]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d112      	bne.n	8004216 <HAL_RCC_OscConfig+0x5e>
 80041f0:	4b8c      	ldr	r3, [pc, #560]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fc:	d10b      	bne.n	8004216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fe:	4b89      	ldr	r3, [pc, #548]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d06c      	beq.n	80042e4 <HAL_RCC_OscConfig+0x12c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d168      	bne.n	80042e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e24c      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x76>
 8004220:	4b80      	ldr	r3, [pc, #512]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a7f      	ldr	r2, [pc, #508]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	e02e      	b.n	800428c <HAL_RCC_OscConfig+0xd4>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0x98>
 8004236:	4b7b      	ldr	r3, [pc, #492]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7a      	ldr	r2, [pc, #488]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 800423c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b78      	ldr	r3, [pc, #480]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a77      	ldr	r2, [pc, #476]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e01d      	b.n	800428c <HAL_RCC_OscConfig+0xd4>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0xbc>
 800425a:	4b72      	ldr	r3, [pc, #456]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a71      	ldr	r2, [pc, #452]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	4b6f      	ldr	r3, [pc, #444]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6e      	ldr	r2, [pc, #440]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	e00b      	b.n	800428c <HAL_RCC_OscConfig+0xd4>
 8004274:	4b6b      	ldr	r3, [pc, #428]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a6a      	ldr	r2, [pc, #424]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 800427a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	4b68      	ldr	r3, [pc, #416]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a67      	ldr	r2, [pc, #412]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d013      	beq.n	80042bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7ff f804 	bl	80032a0 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800429c:	f7ff f800 	bl	80032a0 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e200      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0xe4>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fe fff0 	bl	80032a0 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fe ffec 	bl	80032a0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1ec      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d6:	4b53      	ldr	r3, [pc, #332]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x10c>
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d063      	beq.n	80043ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042f2:	4b4c      	ldr	r3, [pc, #304]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042fe:	4b49      	ldr	r3, [pc, #292]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b08      	cmp	r3, #8
 8004308:	d11c      	bne.n	8004344 <HAL_RCC_OscConfig+0x18c>
 800430a:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d116      	bne.n	8004344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004316:	4b43      	ldr	r3, [pc, #268]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_RCC_OscConfig+0x176>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d001      	beq.n	800432e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e1c0      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432e:	4b3d      	ldr	r3, [pc, #244]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4939      	ldr	r1, [pc, #228]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	e03a      	b.n	80043ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d020      	beq.n	800438e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800434c:	4b36      	ldr	r3, [pc, #216]	; (8004428 <HAL_RCC_OscConfig+0x270>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004352:	f7fe ffa5 	bl	80032a0 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435a:	f7fe ffa1 	bl	80032a0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e1a1      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004378:	4b2a      	ldr	r3, [pc, #168]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4927      	ldr	r1, [pc, #156]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]
 800438c:	e015      	b.n	80043ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438e:	4b26      	ldr	r3, [pc, #152]	; (8004428 <HAL_RCC_OscConfig+0x270>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fe ff84 	bl	80032a0 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439c:	f7fe ff80 	bl	80032a0 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e180      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d03a      	beq.n	800443c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d019      	beq.n	8004402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ce:	4b17      	ldr	r3, [pc, #92]	; (800442c <HAL_RCC_OscConfig+0x274>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d4:	f7fe ff64 	bl	80032a0 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043dc:	f7fe ff60 	bl	80032a0 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e160      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043fa:	2001      	movs	r0, #1
 80043fc:	f000 face 	bl	800499c <RCC_Delay>
 8004400:	e01c      	b.n	800443c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_RCC_OscConfig+0x274>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004408:	f7fe ff4a 	bl	80032a0 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440e:	e00f      	b.n	8004430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004410:	f7fe ff46 	bl	80032a0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d908      	bls.n	8004430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e146      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
 8004428:	42420000 	.word	0x42420000
 800442c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004430:	4b92      	ldr	r3, [pc, #584]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e9      	bne.n	8004410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a6 	beq.w	8004596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444e:	4b8b      	ldr	r3, [pc, #556]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10d      	bne.n	8004476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	4b88      	ldr	r3, [pc, #544]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	4a87      	ldr	r2, [pc, #540]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004464:	61d3      	str	r3, [r2, #28]
 8004466:	4b85      	ldr	r3, [pc, #532]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004476:	4b82      	ldr	r3, [pc, #520]	; (8004680 <HAL_RCC_OscConfig+0x4c8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d118      	bne.n	80044b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004482:	4b7f      	ldr	r3, [pc, #508]	; (8004680 <HAL_RCC_OscConfig+0x4c8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a7e      	ldr	r2, [pc, #504]	; (8004680 <HAL_RCC_OscConfig+0x4c8>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448e:	f7fe ff07 	bl	80032a0 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7fe ff03 	bl	80032a0 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b64      	cmp	r3, #100	; 0x64
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e103      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b75      	ldr	r3, [pc, #468]	; (8004680 <HAL_RCC_OscConfig+0x4c8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x312>
 80044bc:	4b6f      	ldr	r3, [pc, #444]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	4a6e      	ldr	r2, [pc, #440]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6213      	str	r3, [r2, #32]
 80044c8:	e02d      	b.n	8004526 <HAL_RCC_OscConfig+0x36e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0x334>
 80044d2:	4b6a      	ldr	r3, [pc, #424]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	4a69      	ldr	r2, [pc, #420]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	6213      	str	r3, [r2, #32]
 80044de:	4b67      	ldr	r3, [pc, #412]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	4a66      	ldr	r2, [pc, #408]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	6213      	str	r3, [r2, #32]
 80044ea:	e01c      	b.n	8004526 <HAL_RCC_OscConfig+0x36e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d10c      	bne.n	800450e <HAL_RCC_OscConfig+0x356>
 80044f4:	4b61      	ldr	r3, [pc, #388]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	4a60      	ldr	r2, [pc, #384]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	6213      	str	r3, [r2, #32]
 8004500:	4b5e      	ldr	r3, [pc, #376]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	4a5d      	ldr	r2, [pc, #372]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6213      	str	r3, [r2, #32]
 800450c:	e00b      	b.n	8004526 <HAL_RCC_OscConfig+0x36e>
 800450e:	4b5b      	ldr	r3, [pc, #364]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	4a5a      	ldr	r2, [pc, #360]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	6213      	str	r3, [r2, #32]
 800451a:	4b58      	ldr	r3, [pc, #352]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4a57      	ldr	r2, [pc, #348]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d015      	beq.n	800455a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452e:	f7fe feb7 	bl	80032a0 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fe feb3 	bl	80032a0 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0b1      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	4b4b      	ldr	r3, [pc, #300]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ee      	beq.n	8004536 <HAL_RCC_OscConfig+0x37e>
 8004558:	e014      	b.n	8004584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7fe fea1 	bl	80032a0 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fe fe9d 	bl	80032a0 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e09b      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004578:	4b40      	ldr	r3, [pc, #256]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ee      	bne.n	8004562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458a:	4b3c      	ldr	r3, [pc, #240]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	4a3b      	ldr	r2, [pc, #236]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 8087 	beq.w	80046ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045a0:	4b36      	ldr	r3, [pc, #216]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d061      	beq.n	8004670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d146      	bne.n	8004642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b4:	4b33      	ldr	r3, [pc, #204]	; (8004684 <HAL_RCC_OscConfig+0x4cc>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7fe fe71 	bl	80032a0 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fe fe6d 	bl	80032a0 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e06d      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d4:	4b29      	ldr	r3, [pc, #164]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e8:	d108      	bne.n	80045fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ea:	4b24      	ldr	r3, [pc, #144]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	4921      	ldr	r1, [pc, #132]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045fc:	4b1f      	ldr	r3, [pc, #124]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a19      	ldr	r1, [r3, #32]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	430b      	orrs	r3, r1
 800460e:	491b      	ldr	r1, [pc, #108]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004614:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <HAL_RCC_OscConfig+0x4cc>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fe fe41 	bl	80032a0 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004622:	f7fe fe3d 	bl	80032a0 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e03d      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x46a>
 8004640:	e035      	b.n	80046ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_RCC_OscConfig+0x4cc>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fe fe2a 	bl	80032a0 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fe fe26 	bl	80032a0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e026      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_RCC_OscConfig+0x4c4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x498>
 800466e:	e01e      	b.n	80046ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d107      	bne.n	8004688 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e019      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
 800467c:	40021000 	.word	0x40021000
 8004680:	40007000 	.word	0x40007000
 8004684:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_OscConfig+0x500>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	429a      	cmp	r2, r3
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d001      	beq.n	80046ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000

080046bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0d0      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b6a      	ldr	r3, [pc, #424]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d910      	bls.n	8004700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b67      	ldr	r3, [pc, #412]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 0207 	bic.w	r2, r3, #7
 80046e6:	4965      	ldr	r1, [pc, #404]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b63      	ldr	r3, [pc, #396]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0b8      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d020      	beq.n	800474e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004718:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a58      	ldr	r2, [pc, #352]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800471e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004730:	4b53      	ldr	r3, [pc, #332]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4a52      	ldr	r2, [pc, #328]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800473a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800473c:	4b50      	ldr	r3, [pc, #320]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	494d      	ldr	r1, [pc, #308]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d040      	beq.n	80047dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d107      	bne.n	8004772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d115      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07f      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e073      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478a:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e06b      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479a:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4936      	ldr	r1, [pc, #216]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ac:	f7fe fd78 	bl	80032a0 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fe fd74 	bl	80032a0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e053      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 020c 	and.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1eb      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b27      	ldr	r3, [pc, #156]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d210      	bcs.n	800480c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 0207 	bic.w	r2, r3, #7
 80047f2:	4922      	ldr	r1, [pc, #136]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b20      	ldr	r3, [pc, #128]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e032      	b.n	8004872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4916      	ldr	r1, [pc, #88]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	490e      	ldr	r1, [pc, #56]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800484a:	f000 f821 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 800484e:	4602      	mov	r2, r0
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	490a      	ldr	r1, [pc, #40]	; (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 800485c:	5ccb      	ldrb	r3, [r1, r3]
 800485e:	fa22 f303 	lsr.w	r3, r2, r3
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <HAL_RCC_ClockConfig+0x1cc>)
 8004864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x1d0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe fcd6 	bl	800321c <HAL_InitTick>

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40022000 	.word	0x40022000
 8004880:	40021000 	.word	0x40021000
 8004884:	08009204 	.word	0x08009204
 8004888:	2000005c 	.word	0x2000005c
 800488c:	20000060 	.word	0x20000060

08004890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048aa:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <HAL_RCC_GetSysClockFreq+0x94>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d002      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x30>
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d003      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x36>
 80048be:	e027      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCC_GetSysClockFreq+0x98>)
 80048c2:	613b      	str	r3, [r7, #16]
      break;
 80048c4:	e027      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	0c9b      	lsrs	r3, r3, #18
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	4a17      	ldr	r2, [pc, #92]	; (800492c <HAL_RCC_GetSysClockFreq+0x9c>)
 80048d0:	5cd3      	ldrb	r3, [r2, r3]
 80048d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048de:	4b11      	ldr	r3, [pc, #68]	; (8004924 <HAL_RCC_GetSysClockFreq+0x94>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	0c5b      	lsrs	r3, r3, #17
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	4a11      	ldr	r2, [pc, #68]	; (8004930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048ea:	5cd3      	ldrb	r3, [r2, r3]
 80048ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a0d      	ldr	r2, [pc, #52]	; (8004928 <HAL_RCC_GetSysClockFreq+0x98>)
 80048f2:	fb03 f202 	mul.w	r2, r3, r2
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	e004      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a0c      	ldr	r2, [pc, #48]	; (8004934 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	613b      	str	r3, [r7, #16]
      break;
 800490e:	e002      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCC_GetSysClockFreq+0x98>)
 8004912:	613b      	str	r3, [r7, #16]
      break;
 8004914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004916:	693b      	ldr	r3, [r7, #16]
}
 8004918:	4618      	mov	r0, r3
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000
 8004928:	007a1200 	.word	0x007a1200
 800492c:	0800921c 	.word	0x0800921c
 8004930:	0800922c 	.word	0x0800922c
 8004934:	003d0900 	.word	0x003d0900

08004938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800493c:	4b02      	ldr	r3, [pc, #8]	; (8004948 <HAL_RCC_GetHCLKFreq+0x10>)
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	2000005c 	.word	0x2000005c

0800494c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004950:	f7ff fff2 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000
 8004970:	08009214 	.word	0x08009214

08004974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004978:	f7ff ffde 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	0adb      	lsrs	r3, r3, #11
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021000 	.word	0x40021000
 8004998:	08009214 	.word	0x08009214

0800499c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <RCC_Delay+0x34>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <RCC_Delay+0x38>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	0a5b      	lsrs	r3, r3, #9
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049b8:	bf00      	nop
  }
  while (Delay --);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1e5a      	subs	r2, r3, #1
 80049be:	60fa      	str	r2, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f9      	bne.n	80049b8 <RCC_Delay+0x1c>
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr
 80049d0:	2000005c 	.word	0x2000005c
 80049d4:	10624dd3 	.word	0x10624dd3

080049d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e076      	b.n	8004ad8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fa:	d009      	beq.n	8004a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	61da      	str	r2, [r3, #28]
 8004a02:	e005      	b.n	8004a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe f964 	bl	8002cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a94:	ea42 0103 	orr.w	r1, r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	0c1a      	lsrs	r2, r3, #16
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f002 0204 	and.w	r2, r2, #4
 8004ab6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08c      	sub	sp, #48	; 0x30
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004aee:	2301      	movs	r3, #1
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x26>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e198      	b.n	8004e38 <HAL_SPI_TransmitReceive+0x358>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b0e:	f7fe fbc7 	bl	80032a0 <HAL_GetTick>
 8004b12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b24:	887b      	ldrh	r3, [r7, #2]
 8004b26:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d00f      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x70>
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b36:	d107      	bne.n	8004b48 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <HAL_SPI_TransmitReceive+0x68>
 8004b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d003      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b4e:	e16d      	b.n	8004e2c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_SPI_TransmitReceive+0x82>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_TransmitReceive+0x82>
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b68:	e160      	b.n	8004e2c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d003      	beq.n	8004b7e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2205      	movs	r2, #5
 8004b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	887a      	ldrh	r2, [r7, #2]
 8004b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	887a      	ldrh	r2, [r7, #2]
 8004b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	887a      	ldrh	r2, [r7, #2]
 8004ba6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	d007      	beq.n	8004bd2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bda:	d17c      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_SPI_TransmitReceive+0x10a>
 8004be4:	8b7b      	ldrh	r3, [r7, #26]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d16a      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	881a      	ldrh	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c0e:	e057      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d11b      	bne.n	8004c56 <HAL_SPI_TransmitReceive+0x176>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d016      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x176>
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d113      	bne.n	8004c56 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	881a      	ldrh	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	1c9a      	adds	r2, r3, #2
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d119      	bne.n	8004c98 <HAL_SPI_TransmitReceive+0x1b8>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d014      	beq.n	8004c98 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	b292      	uxth	r2, r2
 8004c7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	1c9a      	adds	r2, r3, #2
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c94:	2301      	movs	r3, #1
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c98:	f7fe fb02 	bl	80032a0 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d80b      	bhi.n	8004cc0 <HAL_SPI_TransmitReceive+0x1e0>
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cae:	d007      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004cbe:	e0b5      	b.n	8004e2c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1a2      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x130>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d19d      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x130>
 8004cd4:	e080      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_SPI_TransmitReceive+0x204>
 8004cde:	8b7b      	ldrh	r3, [r7, #26]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d16f      	bne.n	8004dc4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	7812      	ldrb	r2, [r2, #0]
 8004cf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d0a:	e05b      	b.n	8004dc4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d11c      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x274>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d017      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x274>
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d114      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d119      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x2b6>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d014      	beq.n	8004d96 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d92:	2301      	movs	r3, #1
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d96:	f7fe fa83 	bl	80032a0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d803      	bhi.n	8004dae <HAL_SPI_TransmitReceive+0x2ce>
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d102      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x2d4>
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004dc2:	e033      	b.n	8004e2c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d19e      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x22c>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d199      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f8b7 	bl	8004f50 <SPI_EndRxTxTransaction>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d006      	beq.n	8004df6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004df4:	e01a      	b.n	8004e2c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e22:	e003      	b.n	8004e2c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3730      	adds	r7, #48	; 0x30
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e50:	f7fe fa26 	bl	80032a0 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e60:	f7fe fa1e 	bl	80032a0 <HAL_GetTick>
 8004e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e66:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	015b      	lsls	r3, r3, #5
 8004e6c:	0d1b      	lsrs	r3, r3, #20
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	fb02 f303 	mul.w	r3, r2, r3
 8004e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e76:	e054      	b.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d050      	beq.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e80:	f7fe fa0e 	bl	80032a0 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d902      	bls.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d13d      	bne.n	8004f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eae:	d111      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb8:	d004      	beq.n	8004ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec2:	d107      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004edc:	d10f      	bne.n	8004efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e017      	b.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	bf0c      	ite	eq
 8004f32:	2301      	moveq	r3, #1
 8004f34:	2300      	movne	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d19b      	bne.n	8004e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	2000005c 	.word	0x2000005c

08004f50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2200      	movs	r2, #0
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff ff6a 	bl	8004e40 <SPI_WaitFlagStateUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e000      	b.n	8004f84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e041      	b.n	8005022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fe f85a 	bl	800306c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f000 fa7c 	bl	80054c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d001      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e03a      	b.n	80050ba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <HAL_TIM_Base_Start_IT+0x98>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x58>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506e:	d009      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x58>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x58>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a13      	ldr	r2, [pc, #76]	; (80050cc <HAL_TIM_Base_Start_IT+0xa0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d111      	bne.n	80050a8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b06      	cmp	r3, #6
 8005094:	d010      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	e007      	b.n	80050b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800

080050d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d122      	bne.n	800512c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d11b      	bne.n	800512c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0202 	mvn.w	r2, #2
 80050fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f9bd 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f9b0 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f9bf 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b04      	cmp	r3, #4
 8005138:	d122      	bne.n	8005180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d11b      	bne.n	8005180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0204 	mvn.w	r2, #4
 8005150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f993 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f986 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f995 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b08      	cmp	r3, #8
 800518c:	d122      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b08      	cmp	r3, #8
 800519a:	d11b      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0208 	mvn.w	r2, #8
 80051a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2204      	movs	r2, #4
 80051aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f969 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f95c 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f96b 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d122      	bne.n	8005228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d11b      	bne.n	8005228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0210 	mvn.w	r2, #16
 80051f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2208      	movs	r2, #8
 80051fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f93f 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f932 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f941 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10e      	bne.n	8005254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d107      	bne.n	8005254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0201 	mvn.w	r2, #1
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f90d 	bl	800546e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525e:	2b80      	cmp	r3, #128	; 0x80
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa83 	bl	8005786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d10e      	bne.n	80052ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d107      	bne.n	80052ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f905 	bl	80054b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d10e      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d107      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0220 	mvn.w	r2, #32
 80052d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa4e 	bl	8005774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_TIM_ConfigClockSource+0x1c>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e0b4      	b.n	8005466 <HAL_TIM_ConfigClockSource+0x186>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800531a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005334:	d03e      	beq.n	80053b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533a:	f200 8087 	bhi.w	800544c <HAL_TIM_ConfigClockSource+0x16c>
 800533e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005342:	f000 8086 	beq.w	8005452 <HAL_TIM_ConfigClockSource+0x172>
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534a:	d87f      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x16c>
 800534c:	2b70      	cmp	r3, #112	; 0x70
 800534e:	d01a      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0xa6>
 8005350:	2b70      	cmp	r3, #112	; 0x70
 8005352:	d87b      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x16c>
 8005354:	2b60      	cmp	r3, #96	; 0x60
 8005356:	d050      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x11a>
 8005358:	2b60      	cmp	r3, #96	; 0x60
 800535a:	d877      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x16c>
 800535c:	2b50      	cmp	r3, #80	; 0x50
 800535e:	d03c      	beq.n	80053da <HAL_TIM_ConfigClockSource+0xfa>
 8005360:	2b50      	cmp	r3, #80	; 0x50
 8005362:	d873      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x16c>
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d058      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x13a>
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d86f      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x16c>
 800536c:	2b30      	cmp	r3, #48	; 0x30
 800536e:	d064      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x15a>
 8005370:	2b30      	cmp	r3, #48	; 0x30
 8005372:	d86b      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b20      	cmp	r3, #32
 8005376:	d060      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x15a>
 8005378:	2b20      	cmp	r3, #32
 800537a:	d867      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d05c      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x15a>
 8005380:	2b10      	cmp	r3, #16
 8005382:	d05a      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x15a>
 8005384:	e062      	b.n	800544c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005396:	f000 f970 	bl	800567a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	609a      	str	r2, [r3, #8]
      break;
 80053b2:	e04f      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c4:	f000 f959 	bl	800567a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053d6:	609a      	str	r2, [r3, #8]
      break;
 80053d8:	e03c      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	461a      	mov	r2, r3
 80053e8:	f000 f8d0 	bl	800558c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2150      	movs	r1, #80	; 0x50
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f927 	bl	8005646 <TIM_ITRx_SetConfig>
      break;
 80053f8:	e02c      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005406:	461a      	mov	r2, r3
 8005408:	f000 f8ee 	bl	80055e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2160      	movs	r1, #96	; 0x60
 8005412:	4618      	mov	r0, r3
 8005414:	f000 f917 	bl	8005646 <TIM_ITRx_SetConfig>
      break;
 8005418:	e01c      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005426:	461a      	mov	r2, r3
 8005428:	f000 f8b0 	bl	800558c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2140      	movs	r1, #64	; 0x40
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f907 	bl	8005646 <TIM_ITRx_SetConfig>
      break;
 8005438:	e00c      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f000 f8fe 	bl	8005646 <TIM_ITRx_SetConfig>
      break;
 800544a:	e003      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
      break;
 8005450:	e000      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	bc80      	pop	{r7}
 8005490:	4770      	bx	lr

08005492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a29      	ldr	r2, [pc, #164]	; (8005580 <TIM_Base_SetConfig+0xb8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00b      	beq.n	80054f8 <TIM_Base_SetConfig+0x30>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e6:	d007      	beq.n	80054f8 <TIM_Base_SetConfig+0x30>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <TIM_Base_SetConfig+0xbc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_Base_SetConfig+0x30>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a25      	ldr	r2, [pc, #148]	; (8005588 <TIM_Base_SetConfig+0xc0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d108      	bne.n	800550a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1c      	ldr	r2, [pc, #112]	; (8005580 <TIM_Base_SetConfig+0xb8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_Base_SetConfig+0x62>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005518:	d007      	beq.n	800552a <TIM_Base_SetConfig+0x62>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a19      	ldr	r2, [pc, #100]	; (8005584 <TIM_Base_SetConfig+0xbc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_Base_SetConfig+0x62>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a18      	ldr	r2, [pc, #96]	; (8005588 <TIM_Base_SetConfig+0xc0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d108      	bne.n	800553c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a07      	ldr	r2, [pc, #28]	; (8005580 <TIM_Base_SetConfig+0xb8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d103      	bne.n	8005570 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	615a      	str	r2, [r3, #20]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800

0800558c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f023 0201 	bic.w	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 030a 	bic.w	r3, r3, #10
 80055c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr

080055e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f023 0210 	bic.w	r2, r3, #16
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	031b      	lsls	r3, r3, #12
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005624:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	f043 0307 	orr.w	r3, r3, #7
 8005668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	609a      	str	r2, [r3, #8]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800567a:	b480      	push	{r7}
 800567c:	b087      	sub	sp, #28
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005694:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	021a      	lsls	r2, r3, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	431a      	orrs	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	609a      	str	r2, [r3, #8]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e046      	b.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a16      	ldr	r2, [pc, #88]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d009      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a12      	ldr	r2, [pc, #72]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a10      	ldr	r2, [pc, #64]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d10c      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4313      	orrs	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800

08005774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr

08005786 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr

08005798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e042      	b.n	8005830 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fd fca4 	bl	800310c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2224      	movs	r2, #36	; 0x24
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f91d 	bl	8005a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695a      	ldr	r2, [r3, #20]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b20      	cmp	r3, #32
 8005856:	d16d      	bne.n	8005934 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_UART_Transmit+0x2c>
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e066      	b.n	8005936 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2221      	movs	r2, #33	; 0x21
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005876:	f7fd fd13 	bl	80032a0 <HAL_GetTick>
 800587a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	88fa      	ldrh	r2, [r7, #6]
 8005886:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005890:	d108      	bne.n	80058a4 <HAL_UART_Transmit+0x6c>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800589a:	2300      	movs	r3, #0
 800589c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	61bb      	str	r3, [r7, #24]
 80058a2:	e003      	b.n	80058ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058ac:	e02a      	b.n	8005904 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	2180      	movs	r1, #128	; 0x80
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 f840 	bl	800593e <UART_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e036      	b.n	8005936 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	3302      	adds	r3, #2
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e007      	b.n	80058f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	781a      	ldrb	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	3301      	adds	r3, #1
 80058f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1cf      	bne.n	80058ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	2140      	movs	r1, #64	; 0x40
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f810 	bl	800593e <UART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e006      	b.n	8005936 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e000      	b.n	8005936 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005934:	2302      	movs	r3, #2
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b090      	sub	sp, #64	; 0x40
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	4613      	mov	r3, r2
 800594c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594e:	e050      	b.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005956:	d04c      	beq.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <UART_WaitOnFlagUntilTimeout+0x30>
 800595e:	f7fd fc9f 	bl	80032a0 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800596a:	429a      	cmp	r2, r3
 800596c:	d241      	bcs.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	330c      	adds	r3, #12
 800598c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800598e:	637a      	str	r2, [r7, #52]	; 0x34
 8005990:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e5      	bne.n	800596e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3314      	adds	r3, #20
 80059a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	613b      	str	r3, [r7, #16]
   return(result);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f023 0301 	bic.w	r3, r3, #1
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3314      	adds	r3, #20
 80059c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059c2:	623a      	str	r2, [r7, #32]
 80059c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	69f9      	ldr	r1, [r7, #28]
 80059c8:	6a3a      	ldr	r2, [r7, #32]
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e5      	bne.n	80059a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e00f      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4013      	ands	r3, r2
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	bf0c      	ite	eq
 8005a02:	2301      	moveq	r3, #1
 8005a04:	2300      	movne	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d09f      	beq.n	8005950 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3740      	adds	r7, #64	; 0x40
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a56:	f023 030c 	bic.w	r3, r3, #12
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	430b      	orrs	r3, r1
 8005a62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a2c      	ldr	r2, [pc, #176]	; (8005b30 <UART_SetConfig+0x114>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d103      	bne.n	8005a8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a84:	f7fe ff76 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	e002      	b.n	8005a92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a8c:	f7fe ff5e 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8005a90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009a      	lsls	r2, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	4a22      	ldr	r2, [pc, #136]	; (8005b34 <UART_SetConfig+0x118>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	0119      	lsls	r1, r3, #4
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009a      	lsls	r2, r3, #2
 8005abc:	441a      	add	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ac8:	4b1a      	ldr	r3, [pc, #104]	; (8005b34 <UART_SetConfig+0x118>)
 8005aca:	fba3 0302 	umull	r0, r3, r3, r2
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	2064      	movs	r0, #100	; 0x64
 8005ad2:	fb00 f303 	mul.w	r3, r0, r3
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	3332      	adds	r3, #50	; 0x32
 8005adc:	4a15      	ldr	r2, [pc, #84]	; (8005b34 <UART_SetConfig+0x118>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ae8:	4419      	add	r1, r3
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009a      	lsls	r2, r3, #2
 8005af4:	441a      	add	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b00:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <UART_SetConfig+0x118>)
 8005b02:	fba3 0302 	umull	r0, r3, r3, r2
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	2064      	movs	r0, #100	; 0x64
 8005b0a:	fb00 f303 	mul.w	r3, r0, r3
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	3332      	adds	r3, #50	; 0x32
 8005b14:	4a07      	ldr	r2, [pc, #28]	; (8005b34 <UART_SetConfig+0x118>)
 8005b16:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	f003 020f 	and.w	r2, r3, #15
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	440a      	add	r2, r1
 8005b26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40013800 	.word	0x40013800
 8005b34:	51eb851f 	.word	0x51eb851f

08005b38 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>:
//value++;                                            // увеличивать/уменьшать переменную value с шагом и интервалом
//Serial.println(value);                              // для примера выведем в порт
//}

// ==================== CONSTRUCTOR ====================
GButton::GButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool type, bool dir) {
 8005b38:	b410      	push	{r4}
 8005b3a:	2400      	movs	r4, #0
 8005b3c:	f89d c004 	ldrb.w	ip, [sp, #4]

	flags.GPIOx = GPIOx;
 8005b40:	f8c0 1002 	str.w	r1, [r0, #2]
	flags.GPIO_Pin = GPIO_Pin;

	setType(type);
	flags.mode = false;
	flags.tickMode = false;
	flags.inv_state = dir;
 8005b44:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005b48:	7841      	ldrb	r1, [r0, #1]
 8005b4a:	ea4c 03c3 	orr.w	r3, ip, r3, lsl #3
 8005b4e:	f003 031e 	and.w	r3, r3, #30
 8005b52:	f021 011e 	bic.w	r1, r1, #30
 8005b56:	430b      	orrs	r3, r1
	flags.GPIO_Pin = GPIO_Pin;
 8005b58:	80c2      	strh	r2, [r0, #6]
	flags.inv_state = dir;
 8005b5a:	7043      	strb	r3, [r0, #1]
GButton::GButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool type, bool dir) {
 8005b5c:	4a06      	ldr	r2, [pc, #24]	; (8005b78 <_ZN7GButtonC1EP12GPIO_TypeDeftbb+0x40>)
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <_ZN7GButtonC1EP12GPIO_TypeDeftbb+0x44>)
 8005b60:	7204      	strb	r4, [r0, #8]
 8005b62:	8244      	strh	r4, [r0, #18]
 8005b64:	7504      	strb	r4, [r0, #20]
 8005b66:	6184      	str	r4, [r0, #24]
 8005b68:	8384      	strh	r4, [r0, #28]
 8005b6a:	f8c0 200a 	str.w	r2, [r0, #10]
}
 8005b6e:	bc10      	pop	{r4}
GButton::GButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool type, bool dir) {
 8005b70:	f8c0 300e 	str.w	r3, [r0, #14]
}
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	01f4000a 	.word	0x01f4000a
 8005b7c:	019001f4 	.word	0x019001f4

08005b80 <_ZN7GButton7isPressEv>:
void GButton::setTickMode(bool tickMode) {
	flags.tickMode = tickMode;
}

// ==================== IS ====================
bool GButton::isPress() {
 8005b80:	b538      	push	{r3, r4, r5, lr}
	if (flags.tickMode)
 8005b82:	7843      	ldrb	r3, [r0, #1]
bool GButton::isPress() {
 8005b84:	4604      	mov	r4, r0
	if (flags.tickMode)
 8005b86:	06d8      	lsls	r0, r3, #27
 8005b88:	d408      	bmi.n	8005b9c <_ZN7GButton7isPressEv+0x1c>
		GButton::tick();
	if (flags.isPress_f) {
 8005b8a:	7823      	ldrb	r3, [r4, #0]
 8005b8c:	069a      	lsls	r2, r3, #26
 8005b8e:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8005b92:	d502      	bpl.n	8005b9a <_ZN7GButton7isPressEv+0x1a>
		flags.isPress_f = false;
 8005b94:	f36f 1345 	bfc	r3, #5, #1
 8005b98:	7023      	strb	r3, [r4, #0]
		return true;
	} else
		return false;
}
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}

void GButton::tick() {
	// читаем пин
	//if (!flags.mode && !flags.noPin) btn_state = !_buttonRead() ^ (flags.inv_state ^ flags.type);

	if (!flags.mode)	// && !flags.noPin)
 8005b9c:	0759      	lsls	r1, r3, #29
 8005b9e:	d531      	bpl.n	8005c04 <_ZN7GButton7isPressEv+0x84>

	uint32_t thisMls = uwTick;
	//uint32_t thisMls = millis();

	// нажатие
	if (btn_state && !btn_flag) {
 8005ba0:	7f21      	ldrb	r1, [r4, #28]
	uint32_t thisMls = uwTick;
 8005ba2:	4a45      	ldr	r2, [pc, #276]	; (8005cb8 <_ZN7GButton7isPressEv+0x138>)
 8005ba4:	6815      	ldr	r5, [r2, #0]
	if (btn_state && !btn_flag) {
 8005ba6:	b9d1      	cbnz	r1, 8005bde <_ZN7GButton7isPressEv+0x5e>
				flags.isPress_f = true;
				flags.oneClick_f = true;
			}
		}
	} else {
		flags.btn_deb = false;
 8005ba8:	7822      	ldrb	r2, [r4, #0]
 8005baa:	f361 0200 	bfi	r2, r1, #0, #1
 8005bae:	7022      	strb	r2, [r4, #0]
	}

	// отпускание
	if (!btn_state && btn_flag) {
 8005bb0:	7f62      	ldrb	r2, [r4, #29]
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	d138      	bne.n	8005c28 <_ZN7GButton7isPressEv+0xa8>
			if (thisMls - btn_timer >= _debounce) {
 8005bb6:	69a2      	ldr	r2, [r4, #24]
 8005bb8:	1aaa      	subs	r2, r5, r2
		flags.oneClick_f = false;
		btn_timer = thisMls;
	}

	// обработка накликивания
	if ((thisMls - btn_timer >= _click_timeout) && (btn_counter != 0)
 8005bba:	89e0      	ldrh	r0, [r4, #14]
 8005bbc:	4290      	cmp	r0, r2
 8005bbe:	d803      	bhi.n	8005bc8 <_ZN7GButton7isPressEv+0x48>
 8005bc0:	7ca2      	ldrb	r2, [r4, #18]
 8005bc2:	b10a      	cbz	r2, 8005bc8 <_ZN7GButton7isPressEv+0x48>
			&& !btn_state) {    //И здесь еще добавлен !btn_state
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	d070      	beq.n	8005caa <_ZN7GButton7isPressEv+0x12a>
		btn_counter = 0;
		flags.counter_flag = true;
	}

	// сброс накликивания						//Добавлено
	if (flags.counter_reset) {
 8005bc8:	0659      	lsls	r1, r3, #25
 8005bca:	d5de      	bpl.n	8005b8a <_ZN7GButton7isPressEv+0xa>
		last_counter = 0;
 8005bcc:	2200      	movs	r2, #0
		flags.counter_flag = false;
 8005bce:	8823      	ldrh	r3, [r4, #0]
		last_counter = 0;
 8005bd0:	74e2      	strb	r2, [r4, #19]
		flags.counter_flag = false;
 8005bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bd6:	f023 0304 	bic.w	r3, r3, #4
 8005bda:	8023      	strh	r3, [r4, #0]
 8005bdc:	e7d5      	b.n	8005b8a <_ZN7GButton7isPressEv+0xa>
	if (btn_state && !btn_flag) {
 8005bde:	7f62      	ldrb	r2, [r4, #29]
 8005be0:	2a00      	cmp	r2, #0
 8005be2:	d144      	bne.n	8005c6e <_ZN7GButton7isPressEv+0xee>
		if (!flags.btn_deb) {
 8005be4:	7820      	ldrb	r0, [r4, #0]
 8005be6:	f010 0201 	ands.w	r2, r0, #1
 8005bea:	d059      	beq.n	8005ca0 <_ZN7GButton7isPressEv+0x120>
			if (thisMls - btn_timer >= _debounce) {
 8005bec:	69a2      	ldr	r2, [r4, #24]
 8005bee:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 8005bf2:	1aaa      	subs	r2, r5, r2
 8005bf4:	4562      	cmp	r2, ip
 8005bf6:	d3e0      	bcc.n	8005bba <_ZN7GButton7isPressEv+0x3a>
				flags.isPress_f = true;
 8005bf8:	f060 005f 	orn	r0, r0, #95	; 0x5f
 8005bfc:	7020      	strb	r0, [r4, #0]
				btn_flag = true;
 8005bfe:	2001      	movs	r0, #1
 8005c00:	7760      	strb	r0, [r4, #29]
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8005c02:	e03a      	b.n	8005c7a <_ZN7GButton7isPressEv+0xfa>
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8005c04:	88e1      	ldrh	r1, [r4, #6]
 8005c06:	f8d4 0002 	ldr.w	r0, [r4, #2]
 8005c0a:	f7fd fe09 	bl	8003820 <HAL_GPIO_ReadPin>
				^ (flags.inv_state ^ flags.type);
 8005c0e:	7863      	ldrb	r3, [r4, #1]
 8005c10:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8005c14:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8005c18:	4051      	eors	r1, r2
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	bf08      	it	eq
 8005c1e:	f081 0101 	eoreq.w	r1, r1, #1
 8005c22:	b2c9      	uxtb	r1, r1
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8005c24:	7721      	strb	r1, [r4, #28]
 8005c26:	e7bc      	b.n	8005ba2 <_ZN7GButton7isPressEv+0x22>
		if (!flags.hold_flag)
 8005c28:	7822      	ldrb	r2, [r4, #0]
		btn_flag = false;
 8005c2a:	7761      	strb	r1, [r4, #29]
		if (!flags.hold_flag)
 8005c2c:	0792      	lsls	r2, r2, #30
 8005c2e:	d402      	bmi.n	8005c36 <_ZN7GButton7isPressEv+0xb6>
			btn_counter++;
 8005c30:	7ca2      	ldrb	r2, [r4, #18]
 8005c32:	3201      	adds	r2, #1
 8005c34:	74a2      	strb	r2, [r4, #18]
		flags.hold_flag = false;
 8005c36:	7820      	ldrb	r0, [r4, #0]
		btn_timer = thisMls;
 8005c38:	61a5      	str	r5, [r4, #24]
		flags.hold_flag = false;
 8005c3a:	f020 0012 	bic.w	r0, r0, #18
 8005c3e:	f040 0010 	orr.w	r0, r0, #16
		if (flags.step_flag) {
 8005c42:	4602      	mov	r2, r0
		flags.hold_flag = false;
 8005c44:	7020      	strb	r0, [r4, #0]
		if (flags.step_flag) {
 8005c46:	0650      	lsls	r0, r2, #25
 8005c48:	d505      	bpl.n	8005c56 <_ZN7GButton7isPressEv+0xd6>
			btn_counter = 0;
 8005c4a:	2000      	movs	r0, #0
			flags.step_flag = false;
 8005c4c:	f360 1286 	bfi	r2, r0, #6, #1
 8005c50:	7022      	strb	r2, [r4, #0]
			btn_counter = 0;
 8005c52:	8260      	strh	r0, [r4, #18]
			flags.step_flag = false;
 8005c54:	b2d2      	uxtb	r2, r2
		if (flags.oneClick_f) {
 8005c56:	09d2      	lsrs	r2, r2, #7
 8005c58:	d0af      	beq.n	8005bba <_ZN7GButton7isPressEv+0x3a>
			flags.oneClick_f = false;
 8005c5a:	8823      	ldrh	r3, [r4, #0]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8005c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c66:	8023      	strh	r3, [r4, #0]
 8005c68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005c6c:	e7a5      	b.n	8005bba <_ZN7GButton7isPressEv+0x3a>
		flags.btn_deb = false;
 8005c6e:	7822      	ldrb	r2, [r4, #0]
 8005c70:	f36f 0200 	bfc	r2, #0, #1
 8005c74:	7022      	strb	r2, [r4, #0]
			if (thisMls - btn_timer >= _debounce) {
 8005c76:	69a2      	ldr	r2, [r4, #24]
 8005c78:	1aaa      	subs	r2, r5, r2
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8005c7a:	89a0      	ldrh	r0, [r4, #12]
 8005c7c:	4290      	cmp	r0, r2
 8005c7e:	d89c      	bhi.n	8005bba <_ZN7GButton7isPressEv+0x3a>
			&& !flags.hold_flag) {
 8005c80:	7820      	ldrb	r0, [r4, #0]
 8005c82:	f010 0f02 	tst.w	r0, #2
 8005c86:	f3c0 0c40 	ubfx	ip, r0, #1, #1
 8005c8a:	d196      	bne.n	8005bba <_ZN7GButton7isPressEv+0x3a>
		flags.hold_flag = true;
 8005c8c:	f000 0035 	and.w	r0, r0, #53	; 0x35
 8005c90:	f040 004a 	orr.w	r0, r0, #74	; 0x4a
 8005c94:	7020      	strb	r0, [r4, #0]
		last_hold_counter = btn_counter;
 8005c96:	7ca0      	ldrb	r0, [r4, #18]
 8005c98:	4662      	mov	r2, ip
		btn_timer = thisMls;
 8005c9a:	61a5      	str	r5, [r4, #24]
		last_hold_counter = btn_counter;
 8005c9c:	7520      	strb	r0, [r4, #20]
		btn_timer = thisMls;
 8005c9e:	e78c      	b.n	8005bba <_ZN7GButton7isPressEv+0x3a>
			flags.btn_deb = true;
 8005ca0:	f040 0001 	orr.w	r0, r0, #1
			btn_timer = thisMls;
 8005ca4:	61a5      	str	r5, [r4, #24]
			flags.btn_deb = true;
 8005ca6:	7020      	strb	r0, [r4, #0]
			btn_timer = thisMls;
 8005ca8:	e787      	b.n	8005bba <_ZN7GButton7isPressEv+0x3a>
		flags.counter_flag = true;
 8005caa:	7820      	ldrb	r0, [r4, #0]
		last_counter = btn_counter;
 8005cac:	74e2      	strb	r2, [r4, #19]
		flags.counter_flag = true;
 8005cae:	f040 0204 	orr.w	r2, r0, #4
		btn_counter = 0;
 8005cb2:	74a1      	strb	r1, [r4, #18]
		flags.counter_flag = true;
 8005cb4:	7022      	strb	r2, [r4, #0]
 8005cb6:	e787      	b.n	8005bc8 <_ZN7GButton7isPressEv+0x48>
 8005cb8:	20000918 	.word	0x20000918

08005cbc <_ZN7GButton4tickEv>:
	if (!flags.mode)	// && !flags.noPin)
 8005cbc:	f890 c001 	ldrb.w	ip, [r0, #1]
void GButton::tick() {
 8005cc0:	b510      	push	{r4, lr}
	if (!flags.mode)	// && !flags.noPin)
 8005cc2:	f01c 0f04 	tst.w	ip, #4
void GButton::tick() {
 8005cc6:	4604      	mov	r4, r0
	if (!flags.mode)	// && !flags.noPin)
 8005cc8:	d06f      	beq.n	8005daa <_ZN7GButton4tickEv+0xee>
	if (btn_state && !btn_flag) {
 8005cca:	7f02      	ldrb	r2, [r0, #28]
	uint32_t thisMls = uwTick;
 8005ccc:	4b46      	ldr	r3, [pc, #280]	; (8005de8 <_ZN7GButton4tickEv+0x12c>)
 8005cce:	6818      	ldr	r0, [r3, #0]
	if (btn_state && !btn_flag) {
 8005cd0:	b1da      	cbz	r2, 8005d0a <_ZN7GButton4tickEv+0x4e>
 8005cd2:	7f63      	ldrb	r3, [r4, #29]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d058      	beq.n	8005d8a <_ZN7GButton4tickEv+0xce>
		flags.btn_deb = false;
 8005cd8:	7823      	ldrb	r3, [r4, #0]
 8005cda:	f36f 0300 	bfc	r3, #0, #1
 8005cde:	7023      	strb	r3, [r4, #0]
			if (thisMls - btn_timer >= _debounce) {
 8005ce0:	69a3      	ldr	r3, [r4, #24]
 8005ce2:	1ac3      	subs	r3, r0, r3
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8005ce4:	89a1      	ldrh	r1, [r4, #12]
 8005ce6:	4299      	cmp	r1, r3
 8005ce8:	d817      	bhi.n	8005d1a <_ZN7GButton4tickEv+0x5e>
			&& !flags.hold_flag) {
 8005cea:	7821      	ldrb	r1, [r4, #0]
 8005cec:	f011 0f02 	tst.w	r1, #2
 8005cf0:	f3c1 0e40 	ubfx	lr, r1, #1, #1
 8005cf4:	d111      	bne.n	8005d1a <_ZN7GButton4tickEv+0x5e>
		flags.hold_flag = true;
 8005cf6:	f001 0135 	and.w	r1, r1, #53	; 0x35
 8005cfa:	f041 014a 	orr.w	r1, r1, #74	; 0x4a
 8005cfe:	7021      	strb	r1, [r4, #0]
		last_hold_counter = btn_counter;
 8005d00:	7ca1      	ldrb	r1, [r4, #18]
 8005d02:	4673      	mov	r3, lr
		btn_timer = thisMls;
 8005d04:	61a0      	str	r0, [r4, #24]
		last_hold_counter = btn_counter;
 8005d06:	7521      	strb	r1, [r4, #20]
		btn_timer = thisMls;
 8005d08:	e007      	b.n	8005d1a <_ZN7GButton4tickEv+0x5e>
		flags.btn_deb = false;
 8005d0a:	7823      	ldrb	r3, [r4, #0]
 8005d0c:	f362 0300 	bfi	r3, r2, #0, #1
 8005d10:	7023      	strb	r3, [r4, #0]
	if (!btn_state && btn_flag) {
 8005d12:	7f63      	ldrb	r3, [r4, #29]
 8005d14:	b9a3      	cbnz	r3, 8005d40 <_ZN7GButton4tickEv+0x84>
			if (thisMls - btn_timer >= _debounce) {
 8005d16:	69a3      	ldr	r3, [r4, #24]
 8005d18:	1ac3      	subs	r3, r0, r3
	if ((thisMls - btn_timer >= _click_timeout) && (btn_counter != 0)
 8005d1a:	89e1      	ldrh	r1, [r4, #14]
 8005d1c:	4299      	cmp	r1, r3
 8005d1e:	d803      	bhi.n	8005d28 <_ZN7GButton4tickEv+0x6c>
 8005d20:	7ca3      	ldrb	r3, [r4, #18]
 8005d22:	b10b      	cbz	r3, 8005d28 <_ZN7GButton4tickEv+0x6c>
			&& !btn_state) {    //И здесь еще добавлен !btn_state
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	d058      	beq.n	8005dda <_ZN7GButton4tickEv+0x11e>
	if (flags.counter_reset) {
 8005d28:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005d2c:	d007      	beq.n	8005d3e <_ZN7GButton4tickEv+0x82>
		last_counter = 0;
 8005d2e:	2200      	movs	r2, #0
		flags.counter_flag = false;
 8005d30:	8823      	ldrh	r3, [r4, #0]
		last_counter = 0;
 8005d32:	74e2      	strb	r2, [r4, #19]
		flags.counter_flag = false;
 8005d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d38:	f023 0304 	bic.w	r3, r3, #4
 8005d3c:	8023      	strh	r3, [r4, #0]
		flags.counter_reset = false;
	}
}
 8005d3e:	bd10      	pop	{r4, pc}
		if (!flags.hold_flag)
 8005d40:	7823      	ldrb	r3, [r4, #0]
		btn_flag = false;
 8005d42:	7762      	strb	r2, [r4, #29]
		if (!flags.hold_flag)
 8005d44:	079b      	lsls	r3, r3, #30
 8005d46:	d402      	bmi.n	8005d4e <_ZN7GButton4tickEv+0x92>
			btn_counter++;
 8005d48:	7ca3      	ldrb	r3, [r4, #18]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	74a3      	strb	r3, [r4, #18]
		flags.hold_flag = false;
 8005d4e:	7821      	ldrb	r1, [r4, #0]
		btn_timer = thisMls;
 8005d50:	61a0      	str	r0, [r4, #24]
		flags.hold_flag = false;
 8005d52:	f021 0112 	bic.w	r1, r1, #18
 8005d56:	f041 0110 	orr.w	r1, r1, #16
		if (flags.step_flag) {
 8005d5a:	460b      	mov	r3, r1
		flags.hold_flag = false;
 8005d5c:	7021      	strb	r1, [r4, #0]
		if (flags.step_flag) {
 8005d5e:	0659      	lsls	r1, r3, #25
 8005d60:	d505      	bpl.n	8005d6e <_ZN7GButton4tickEv+0xb2>
			btn_counter = 0;
 8005d62:	2100      	movs	r1, #0
			flags.step_flag = false;
 8005d64:	f361 1386 	bfi	r3, r1, #6, #1
 8005d68:	7023      	strb	r3, [r4, #0]
			btn_counter = 0;
 8005d6a:	8261      	strh	r1, [r4, #18]
			flags.step_flag = false;
 8005d6c:	b2db      	uxtb	r3, r3
		if (flags.oneClick_f) {
 8005d6e:	09db      	lsrs	r3, r3, #7
 8005d70:	d0d3      	beq.n	8005d1a <_ZN7GButton4tickEv+0x5e>
			flags.oneClick_f = false;
 8005d72:	f8b4 c000 	ldrh.w	ip, [r4]
 8005d76:	2300      	movs	r3, #0
 8005d78:	f42c 7cc0 	bic.w	ip, ip, #384	; 0x180
 8005d7c:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8005d80:	f8a4 c000 	strh.w	ip, [r4]
 8005d84:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8005d88:	e7c7      	b.n	8005d1a <_ZN7GButton4tickEv+0x5e>
		if (!flags.btn_deb) {
 8005d8a:	7821      	ldrb	r1, [r4, #0]
 8005d8c:	f011 0301 	ands.w	r3, r1, #1
 8005d90:	d01e      	beq.n	8005dd0 <_ZN7GButton4tickEv+0x114>
			if (thisMls - btn_timer >= _debounce) {
 8005d92:	69a3      	ldr	r3, [r4, #24]
 8005d94:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
 8005d98:	1ac3      	subs	r3, r0, r3
 8005d9a:	4573      	cmp	r3, lr
 8005d9c:	d3bd      	bcc.n	8005d1a <_ZN7GButton4tickEv+0x5e>
				flags.isPress_f = true;
 8005d9e:	f061 015f 	orn	r1, r1, #95	; 0x5f
 8005da2:	7021      	strb	r1, [r4, #0]
				btn_flag = true;
 8005da4:	2101      	movs	r1, #1
 8005da6:	7761      	strb	r1, [r4, #29]
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8005da8:	e79c      	b.n	8005ce4 <_ZN7GButton4tickEv+0x28>
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8005daa:	88c1      	ldrh	r1, [r0, #6]
 8005dac:	f8d0 0002 	ldr.w	r0, [r0, #2]
 8005db0:	f7fd fd36 	bl	8003820 <HAL_GPIO_ReadPin>
				^ (flags.inv_state ^ flags.type);
 8005db4:	f894 c001 	ldrb.w	ip, [r4, #1]
 8005db8:	f3cc 0240 	ubfx	r2, ip, #1, #1
 8005dbc:	f3cc 03c0 	ubfx	r3, ip, #3, #1
 8005dc0:	405a      	eors	r2, r3
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	bf08      	it	eq
 8005dc6:	f082 0201 	eoreq.w	r2, r2, #1
 8005dca:	b2d2      	uxtb	r2, r2
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8005dcc:	7722      	strb	r2, [r4, #28]
 8005dce:	e77d      	b.n	8005ccc <_ZN7GButton4tickEv+0x10>
			flags.btn_deb = true;
 8005dd0:	f041 0101 	orr.w	r1, r1, #1
			btn_timer = thisMls;
 8005dd4:	61a0      	str	r0, [r4, #24]
			flags.btn_deb = true;
 8005dd6:	7021      	strb	r1, [r4, #0]
			btn_timer = thisMls;
 8005dd8:	e79f      	b.n	8005d1a <_ZN7GButton4tickEv+0x5e>
		flags.counter_flag = true;
 8005dda:	7821      	ldrb	r1, [r4, #0]
		last_counter = btn_counter;
 8005ddc:	74e3      	strb	r3, [r4, #19]
		flags.counter_flag = true;
 8005dde:	f041 0304 	orr.w	r3, r1, #4
		btn_counter = 0;
 8005de2:	74a2      	strb	r2, [r4, #18]
		flags.counter_flag = true;
 8005de4:	7023      	strb	r3, [r4, #0]
 8005de6:	e79f      	b.n	8005d28 <_ZN7GButton4tickEv+0x6c>
 8005de8:	20000918 	.word	0x20000918

08005dec <_Z8DWT_Initv>:

uint32_t us_count_tic;

void DWT_Init(void)
{
    SCB_DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8005dec:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8005df0:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;     // запускаем счётчик
 8005df4:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <_Z8DWT_Initv+0x1c>)
    SCB_DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8005df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dfa:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;     // запускаем счётчик
 8005dfe:	6813      	ldr	r3, [r2, #0]
 8005e00:	f043 0301 	orr.w	r3, r3, #1
 8005e04:	6013      	str	r3, [r2, #0]
}
 8005e06:	4770      	bx	lr
 8005e08:	e0001000 	.word	0xe0001000

08005e0c <_ZN8classLog13colorStringlnEiPKc>:
	print(s);
	print(format);
	print("\33[0m");
}
void classLog::colorStringln(int c, char const *const format)
{
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	b530      	push	{r4, r5, lr}
 8005e10:	b085      	sub	sp, #20
 8005e12:	4604      	mov	r4, r0
 8005e14:	4615      	mov	r5, r2
	sprintf(s, "\33[38;05;%dm",color);
 8005e16:	4913      	ldr	r1, [pc, #76]	; (8005e64 <_ZN8classLog13colorStringlnEiPKc+0x58>)
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4668      	mov	r0, sp
 8005e1c:	f001 f86c 	bl	8006ef8 <siprintf>
			HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8005e20:	4668      	mov	r0, sp
 8005e22:	f7fa f995 	bl	8000150 <strlen>
 8005e26:	4669      	mov	r1, sp
 8005e28:	b282      	uxth	r2, r0
 8005e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e2e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8005e32:	f7ff fd01 	bl	8005838 <HAL_UART_Transmit>
 8005e36:	4628      	mov	r0, r5
 8005e38:	f7fa f98a 	bl	8000150 <strlen>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	4629      	mov	r1, r5
 8005e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e44:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8005e48:	b292      	uxth	r2, r2
 8005e4a:	f7ff fcf5 	bl	8005838 <HAL_UART_Transmit>
 8005e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e52:	2205      	movs	r2, #5
 8005e54:	4904      	ldr	r1, [pc, #16]	; (8005e68 <_ZN8classLog13colorStringlnEiPKc+0x5c>)
 8005e56:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
	color(c);
	print(format);
	print("\33[0m\n");
}
 8005e5a:	b005      	add	sp, #20
 8005e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e60:	f7ff bcea 	b.w	8005838 <HAL_UART_Transmit>
 8005e64:	08009230 	.word	0x08009230
 8005e68:	0800923c 	.word	0x0800923c

08005e6c <_ZN10TFT_Driver12SSD1306_InitEv>:
	}

}

//Инициализация первого экрана
void TFT_Driver::SSD1306_Init(void) {
 8005e6c:	b570      	push	{r4, r5, r6, lr}
	if (LCD->hi2c)  //I2C
 8005e6e:	6801      	ldr	r1, [r0, #0]
void TFT_Driver::SSD1306_Init(void) {
 8005e70:	4604      	mov	r4, r0
	if (LCD->hi2c)  //I2C
 8005e72:	6908      	ldr	r0, [r1, #16]
void TFT_Driver::SSD1306_Init(void) {
 8005e74:	b084      	sub	sp, #16
	if (LCD->hi2c)  //I2C
 8005e76:	2800      	cmp	r0, #0
 8005e78:	f000 819e 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005e7c:	f44f 462e 	mov.w	r6, #44544	; 0xae00
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005e80:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 8005e84:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005e88:	2302      	movs	r3, #2
 8005e8a:	7d09      	ldrb	r1, [r1, #20]
 8005e8c:	aa03      	add	r2, sp, #12
 8005e8e:	9500      	str	r5, [sp, #0]
 8005e90:	f7fd fe3a 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	6918      	ldr	r0, [r3, #16]
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f000 818d 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ea2:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005ea6:	7d19      	ldrb	r1, [r3, #20]
 8005ea8:	aa03      	add	r2, sp, #12
 8005eaa:	2302      	movs	r3, #2
 8005eac:	9500      	str	r5, [sp, #0]
 8005eae:	f7fd fe2b 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005eb2:	6821      	ldr	r1, [r4, #0]
 8005eb4:	6908      	ldr	r0, [r1, #16]
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	f000 817e 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005ebc:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8005ec0:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	7d09      	ldrb	r1, [r1, #20]
 8005ec8:	aa03      	add	r2, sp, #12
 8005eca:	9500      	str	r5, [sp, #0]
 8005ecc:	f7fd fe1c 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	6918      	ldr	r0, [r3, #16]
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	f000 816f 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005eda:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 8005ede:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005ee2:	7d19      	ldrb	r1, [r3, #20]
 8005ee4:	aa03      	add	r2, sp, #12
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	9500      	str	r5, [sp, #0]
 8005eea:	f7fd fe0d 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	6918      	ldr	r0, [r3, #16]
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	f000 8160 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005ef8:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8005efc:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f00:	7d19      	ldrb	r1, [r3, #20]
 8005f02:	aa03      	add	r2, sp, #12
 8005f04:	2302      	movs	r3, #2
 8005f06:	9500      	str	r5, [sp, #0]
 8005f08:	f7fd fdfe 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	6918      	ldr	r0, [r3, #16]
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f000 8151 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f1c:	7d19      	ldrb	r1, [r3, #20]
 8005f1e:	aa03      	add	r2, sp, #12
 8005f20:	2302      	movs	r3, #2
 8005f22:	9500      	str	r5, [sp, #0]
 8005f24:	f7fd fdf0 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	6918      	ldr	r0, [r3, #16]
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	f000 8143 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005f32:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f36:	7d19      	ldrb	r1, [r3, #20]
 8005f38:	aa03      	add	r2, sp, #12
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	9500      	str	r5, [sp, #0]
 8005f3e:	f7fd fde3 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	6918      	ldr	r0, [r3, #16]
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f000 8136 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f50:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f54:	7d19      	ldrb	r1, [r3, #20]
 8005f56:	aa03      	add	r2, sp, #12
 8005f58:	2302      	movs	r3, #2
 8005f5a:	9500      	str	r5, [sp, #0]
 8005f5c:	f7fd fdd4 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	6918      	ldr	r0, [r3, #16]
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f000 8127 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005f6a:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8005f6e:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f72:	7d19      	ldrb	r1, [r3, #20]
 8005f74:	aa03      	add	r2, sp, #12
 8005f76:	2302      	movs	r3, #2
 8005f78:	9500      	str	r5, [sp, #0]
 8005f7a:	f7fd fdc5 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f7e:	6821      	ldr	r1, [r4, #0]
 8005f80:	6908      	ldr	r0, [r1, #16]
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f000 8118 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005f88:	f44f 467f 	mov.w	r6, #65280	; 0xff00
 8005f8c:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f90:	2302      	movs	r3, #2
 8005f92:	7d09      	ldrb	r1, [r1, #20]
 8005f94:	aa03      	add	r2, sp, #12
 8005f96:	9500      	str	r5, [sp, #0]
 8005f98:	f7fd fdb6 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	6918      	ldr	r0, [r3, #16]
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f000 8109 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005fa6:	f44f 4221 	mov.w	r2, #41216	; 0xa100
 8005faa:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005fae:	7d19      	ldrb	r1, [r3, #20]
 8005fb0:	aa03      	add	r2, sp, #12
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	9500      	str	r5, [sp, #0]
 8005fb6:	f7fd fda7 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	6918      	ldr	r0, [r3, #16]
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f000 80fa 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005fc4:	f44f 4226 	mov.w	r2, #42496	; 0xa600
 8005fc8:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005fcc:	7d19      	ldrb	r1, [r3, #20]
 8005fce:	aa03      	add	r2, sp, #12
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	9500      	str	r5, [sp, #0]
 8005fd4:	f7fd fd98 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	6918      	ldr	r0, [r3, #16]
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	f000 80eb 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005fe2:	f44f 4228 	mov.w	r2, #43008	; 0xa800
 8005fe6:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005fea:	7d19      	ldrb	r1, [r3, #20]
 8005fec:	aa03      	add	r2, sp, #12
 8005fee:	2302      	movs	r3, #2
 8005ff0:	9500      	str	r5, [sp, #0]
 8005ff2:	f7fd fd89 	bl	8003b08 <HAL_I2C_Master_Transmit>
	SSD1306_WRITECOMMAND(0xFF);
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)

	if (LCD->TFT_HEIGHT == 64)
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
	if (LCD->hi2c)  //I2C
 8005ffa:	6918      	ldr	r0, [r3, #16]
	if (LCD->TFT_HEIGHT == 64)
 8005ffc:	2a40      	cmp	r2, #64	; 0x40
 8005ffe:	f000 80dd 	beq.w	80061bc <_ZN10TFT_Driver12SSD1306_InitEv+0x350>
	if (LCD->hi2c)  //I2C
 8006002:	2800      	cmp	r0, #0
 8006004:	f000 80d8 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006008:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800600c:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006010:	7d19      	ldrb	r1, [r3, #20]
 8006012:	aa03      	add	r2, sp, #12
 8006014:	2302      	movs	r3, #2
 8006016:	9500      	str	r5, [sp, #0]
 8006018:	f7fd fd76 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 800601c:	6821      	ldr	r1, [r4, #0]
 800601e:	6908      	ldr	r0, [r1, #16]
 8006020:	2800      	cmp	r0, #0
 8006022:	f000 80c9 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006026:	f44f 4624 	mov.w	r6, #41984	; 0xa400
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 800602a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 800602e:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006032:	2302      	movs	r3, #2
 8006034:	7d09      	ldrb	r1, [r1, #20]
 8006036:	aa03      	add	r2, sp, #12
 8006038:	9500      	str	r5, [sp, #0]
 800603a:	f7fd fd65 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	6918      	ldr	r0, [r3, #16]
 8006042:	2800      	cmp	r0, #0
 8006044:	f000 80b8 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006048:	f44f 4253 	mov.w	r2, #54016	; 0xd300
 800604c:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006050:	7d19      	ldrb	r1, [r3, #20]
 8006052:	aa03      	add	r2, sp, #12
 8006054:	2302      	movs	r3, #2
 8006056:	9500      	str	r5, [sp, #0]
 8006058:	f7fd fd56 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	6918      	ldr	r0, [r3, #16]
 8006060:	2800      	cmp	r0, #0
 8006062:	f000 80a9 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006066:	2200      	movs	r2, #0
 8006068:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 800606c:	7d19      	ldrb	r1, [r3, #20]
 800606e:	aa03      	add	r2, sp, #12
 8006070:	2302      	movs	r3, #2
 8006072:	9500      	str	r5, [sp, #0]
 8006074:	f7fd fd48 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	6918      	ldr	r0, [r3, #16]
 800607c:	2800      	cmp	r0, #0
 800607e:	f000 809b 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006082:	f44f 4255 	mov.w	r2, #54528	; 0xd500
 8006086:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 800608a:	7d19      	ldrb	r1, [r3, #20]
 800608c:	aa03      	add	r2, sp, #12
 800608e:	2302      	movs	r3, #2
 8006090:	9500      	str	r5, [sp, #0]
 8006092:	f7fd fd39 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	6918      	ldr	r0, [r3, #16]
 800609a:	2800      	cmp	r0, #0
 800609c:	f000 808c 	beq.w	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80060a0:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80060a4:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80060a8:	7d19      	ldrb	r1, [r3, #20]
 80060aa:	aa03      	add	r2, sp, #12
 80060ac:	2302      	movs	r3, #2
 80060ae:	9500      	str	r5, [sp, #0]
 80060b0:	f7fd fd2a 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	6918      	ldr	r0, [r3, #16]
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d07d      	beq.n	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80060bc:	f44f 4259 	mov.w	r2, #55552	; 0xd900
 80060c0:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80060c4:	7d19      	ldrb	r1, [r3, #20]
 80060c6:	aa03      	add	r2, sp, #12
 80060c8:	2302      	movs	r3, #2
 80060ca:	9500      	str	r5, [sp, #0]
 80060cc:	f7fd fd1c 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	6918      	ldr	r0, [r3, #16]
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d06f      	beq.n	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80060d8:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80060dc:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80060e0:	7d19      	ldrb	r1, [r3, #20]
 80060e2:	aa03      	add	r2, sp, #12
 80060e4:	2302      	movs	r3, #2
 80060e6:	9500      	str	r5, [sp, #0]
 80060e8:	f7fd fd0e 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	6918      	ldr	r0, [r3, #16]
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d061      	beq.n	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80060f4:	f44f 425a 	mov.w	r2, #55808	; 0xda00
 80060f8:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80060fc:	7d19      	ldrb	r1, [r3, #20]
 80060fe:	aa03      	add	r2, sp, #12
 8006100:	2302      	movs	r3, #2
 8006102:	9500      	str	r5, [sp, #0]
 8006104:	f7fd fd00 	bl	8003b08 <HAL_I2C_Master_Transmit>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
	SSD1306_WRITECOMMAND(0x22); //

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
	if (LCD->TFT_HEIGHT == 64)
 8006108:	6821      	ldr	r1, [r4, #0]
 800610a:	684b      	ldr	r3, [r1, #4]
	if (LCD->hi2c)  //I2C
 800610c:	6908      	ldr	r0, [r1, #16]
	if (LCD->TFT_HEIGHT == 64)
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d059      	beq.n	80061c6 <_ZN10TFT_Driver12SSD1306_InitEv+0x35a>
	if (LCD->hi2c)  //I2C
 8006112:	2800      	cmp	r0, #0
 8006114:	d050      	beq.n	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006116:	f44f 7600 	mov.w	r6, #512	; 0x200
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 800611a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 800611e:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006122:	7d09      	ldrb	r1, [r1, #20]
 8006124:	2302      	movs	r3, #2
 8006126:	aa03      	add	r2, sp, #12
 8006128:	9500      	str	r5, [sp, #0]
 800612a:	f7fd fced 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 800612e:	6821      	ldr	r1, [r4, #0]
 8006130:	6908      	ldr	r0, [r1, #16]
 8006132:	2800      	cmp	r0, #0
 8006134:	d040      	beq.n	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006136:	f44f 465b 	mov.w	r6, #56064	; 0xdb00
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 800613a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 800613e:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006142:	2302      	movs	r3, #2
 8006144:	7d09      	ldrb	r1, [r1, #20]
 8006146:	aa03      	add	r2, sp, #12
 8006148:	9500      	str	r5, [sp, #0]
 800614a:	f7fd fcdd 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	6918      	ldr	r0, [r3, #16]
 8006152:	2800      	cmp	r0, #0
 8006154:	d030      	beq.n	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800615a:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 800615e:	7d19      	ldrb	r1, [r3, #20]
 8006160:	aa03      	add	r2, sp, #12
 8006162:	2302      	movs	r3, #2
 8006164:	9500      	str	r5, [sp, #0]
 8006166:	f7fd fccf 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	6918      	ldr	r0, [r3, #16]
 800616e:	b318      	cbz	r0, 80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006170:	f44f 420d 	mov.w	r2, #36096	; 0x8d00
 8006174:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006178:	7d19      	ldrb	r1, [r3, #20]
 800617a:	aa03      	add	r2, sp, #12
 800617c:	2302      	movs	r3, #2
 800617e:	9500      	str	r5, [sp, #0]
 8006180:	f7fd fcc2 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	6918      	ldr	r0, [r3, #16]
 8006188:	b1b0      	cbz	r0, 80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 800618a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800618e:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006192:	7d19      	ldrb	r1, [r3, #20]
 8006194:	aa03      	add	r2, sp, #12
 8006196:	2302      	movs	r3, #2
 8006198:	9500      	str	r5, [sp, #0]
 800619a:	f7fd fcb5 	bl	8003b08 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 800619e:	6821      	ldr	r1, [r4, #0]
 80061a0:	6908      	ldr	r0, [r1, #16]
 80061a2:	b148      	cbz	r0, 80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80061a4:	f44f 442f 	mov.w	r4, #44800	; 0xaf00
 80061a8:	f8ad 400c 	strh.w	r4, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80061ac:	7d09      	ldrb	r1, [r1, #20]
 80061ae:	2302      	movs	r3, #2
 80061b0:	aa03      	add	r2, sp, #12
 80061b2:	9500      	str	r5, [sp, #0]
 80061b4:	f7fd fca8 	bl	8003b08 <HAL_I2C_Master_Transmit>
		CS_1;
    #endif
	/* Set default values */
	//uTFT.CurrentX = 0;
	//uTFT.CurrentY = 0;
}
 80061b8:	b004      	add	sp, #16
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
	if (LCD->hi2c)  //I2C
 80061bc:	2800      	cmp	r0, #0
 80061be:	d0fb      	beq.n	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80061c0:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 80061c4:	e722      	b.n	800600c <_ZN10TFT_Driver12SSD1306_InitEv+0x1a0>
	if (LCD->hi2c)  //I2C
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d0f6      	beq.n	80061b8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80061ca:	f44f 5690 	mov.w	r6, #4608	; 0x1200
 80061ce:	e7a6      	b.n	800611e <_ZN10TFT_Driver12SSD1306_InitEv+0x2b2>

080061d0 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>:

//490uS-72MHz
void TFT_Driver::SSD1306_UpdateScreen(void) {
	uint8_t *p;

	if (LCD->hi2c)  //I2C
 80061d0:	6803      	ldr	r3, [r0, #0]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	b902      	cbnz	r2, 80061d8 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x8>
 80061d6:	4770      	bx	lr
		//HAL_Delay(10);
#endif

		p = &LCD->buffer8[0];
		p--;
		*p = 0x40;
 80061d8:	2140      	movs	r1, #64	; 0x40
void TFT_Driver::SSD1306_UpdateScreen(void) {
 80061da:	b510      	push	{r4, lr}

		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 80061dc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		p = &LCD->buffer8[0];
 80061e0:	69da      	ldr	r2, [r3, #28]
void TFT_Driver::SSD1306_UpdateScreen(void) {
 80061e2:	b082      	sub	sp, #8
		*p = 0x40;
 80061e4:	f802 1c01 	strb.w	r1, [r2, #-1]
		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 80061e8:	6800      	ldr	r0, [r0, #0]
 80061ea:	3a01      	subs	r2, #1
				(LCD->TFT_HEIGHT * LCD->TFT_WIDTH) / 8 + 1, 1000);
 80061ec:	e9d0 1300 	ldrd	r1, r3, [r0]
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bfb8      	it	lt
 80061f8:	3307      	addlt	r3, #7
 80061fa:	10db      	asrs	r3, r3, #3
		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 80061fc:	3301      	adds	r3, #1
 80061fe:	7d01      	ldrb	r1, [r0, #20]
 8006200:	b29b      	uxth	r3, r3
 8006202:	6900      	ldr	r0, [r0, #16]
 8006204:	9400      	str	r4, [sp, #0]
 8006206:	f7fd fc7f 	bl	8003b08 <HAL_I2C_Master_Transmit>
 800620a:	4b02      	ldr	r3, [pc, #8]	; (8006214 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x44>)
 800620c:	7018      	strb	r0, [r3, #0]

#endif

	}

}
 800620e:	b002      	add	sp, #8
 8006210:	bd10      	pop	{r4, pc}
 8006212:	bf00      	nop
 8006214:	20000920 	.word	0x20000920

08006218 <_ZN3TFT8SetPixelEllt>:
#include "TFT_config.h"

#include <math.h>
#include <stdio.h>

void TFT::SetPixel(int32_t x, int32_t y, uint16_t color) {
 8006218:	b410      	push	{r4}

	if ((x < 0) || (y < 0) || (x >= LCD->TFT_WIDTH) || (y >= LCD->TFT_HEIGHT))
 800621a:	ea51 0402 	orrs.w	r4, r1, r2
 800621e:	d40c      	bmi.n	800623a <_ZN3TFT8SetPixelEllt+0x22>
 8006220:	6800      	ldr	r0, [r0, #0]
 8006222:	6804      	ldr	r4, [r0, #0]
 8006224:	428c      	cmp	r4, r1
 8006226:	dd08      	ble.n	800623a <_ZN3TFT8SetPixelEllt+0x22>
 8006228:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800622c:	4594      	cmp	ip, r2
 800622e:	dd04      	ble.n	800623a <_ZN3TFT8SetPixelEllt+0x22>
		return;

#if defined(TFT_USE_1BIT)
#if !defined (TFT_USE_ONLY_ONE_BIT_COLOR)
  if (LCD->Bit == 1)
 8006230:	f890 c009 	ldrb.w	ip, [r0, #9]
 8006234:	f1bc 0f01 	cmp.w	ip, #1
 8006238:	d001      	beq.n	800623e <_ZN3TFT8SetPixelEllt+0x26>
		LCD->buffer16[x + y * LCD->TFT_WIDTH] = color;
		return;
	}
#endif

}
 800623a:	bc10      	pop	{r4}
 800623c:	4770      	bx	lr
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] |= 1 << (y % 8);
 800623e:	69c0      	ldr	r0, [r0, #28]
		if (color != 0)
 8006240:	b163      	cbz	r3, 800625c <_ZN3TFT8SetPixelEllt+0x44>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] |= 1 << (y % 8);
 8006242:	10d3      	asrs	r3, r2, #3
 8006244:	fb04 1303 	mla	r3, r4, r3, r1
 8006248:	f002 0207 	and.w	r2, r2, #7
 800624c:	fa0c fc02 	lsl.w	ip, ip, r2
 8006250:	5cc2      	ldrb	r2, [r0, r3]
 8006252:	ea4c 0c02 	orr.w	ip, ip, r2
 8006256:	f800 c003 	strb.w	ip, [r0, r3]
 800625a:	e7ee      	b.n	800623a <_ZN3TFT8SetPixelEllt+0x22>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] &= ~(1 << (y % 8));
 800625c:	10d3      	asrs	r3, r2, #3
 800625e:	fb04 1103 	mla	r1, r4, r3, r1
 8006262:	f002 0207 	and.w	r2, r2, #7
 8006266:	5c43      	ldrb	r3, [r0, r1]
 8006268:	fa0c fc02 	lsl.w	ip, ip, r2
 800626c:	ea23 030c 	bic.w	r3, r3, ip
 8006270:	5443      	strb	r3, [r0, r1]
 8006272:	e7e2      	b.n	800623a <_ZN3TFT8SetPixelEllt+0x22>

08006274 <_ZN3TFT5Fill1Et>:
	if (color)
		c = 0xFF;
	else
		c = 0;

	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8006274:	6802      	ldr	r2, [r0, #0]
	if (color)
 8006276:	f1b1 0c00 	subs.w	ip, r1, #0
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 800627a:	e9d2 1300 	ldrd	r1, r3, [r2]
 800627e:	fb01 f303 	mul.w	r3, r1, r3
	if (color)
 8006282:	bf18      	it	ne
 8006284:	f04f 0c01 	movne.w	ip, #1
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8006288:	2b07      	cmp	r3, #7
 800628a:	dd16      	ble.n	80062ba <_ZN3TFT5Fill1Et+0x46>
 800628c:	2100      	movs	r1, #0
void TFT::Fill1(uint16_t color) {
 800628e:	b410      	push	{r4}
 8006290:	f1cc 0c00 	rsb	ip, ip, #0
 8006294:	fa5f fc8c 	uxtb.w	ip, ip
		LCD->buffer8[i] = c;
 8006298:	69d3      	ldr	r3, [r2, #28]
 800629a:	f803 c001 	strb.w	ip, [r3, r1]
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 800629e:	6802      	ldr	r2, [r0, #0]
 80062a0:	3101      	adds	r1, #1
 80062a2:	e9d2 4300 	ldrd	r4, r3, [r2]
 80062a6:	fb04 f303 	mul.w	r3, r4, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bfb8      	it	lt
 80062ae:	3307      	addlt	r3, #7
 80062b0:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
 80062b4:	dbf0      	blt.n	8006298 <_ZN3TFT5Fill1Et+0x24>
	return;
}
 80062b6:	bc10      	pop	{r4}
 80062b8:	4770      	bx	lr
 80062ba:	4770      	bx	lr

080062bc <_ZN3TFT5LineHElllt>:
		}
	}

}

void TFT::LineH(int32_t Y, int32_t X1, int32_t X2, uint16_t color) {
 80062bc:	b5f0      	push	{r4, r5, r6, r7, lr}

	int32_t i;

	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 80062be:	6805      	ldr	r5, [r0, #0]
void TFT::LineH(int32_t Y, int32_t X1, int32_t X2, uint16_t color) {
 80062c0:	f8bd c014 	ldrh.w	ip, [sp, #20]
	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 80062c4:	682c      	ldr	r4, [r5, #0]
	if (Y >= LCD->TFT_HEIGHT) return;
 80062c6:	686e      	ldr	r6, [r5, #4]
	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 80062c8:	429c      	cmp	r4, r3
 80062ca:	bfd8      	it	le
 80062cc:	f104 33ff 	addle.w	r3, r4, #4294967295
	if (Y >= LCD->TFT_HEIGHT) return;
 80062d0:	428e      	cmp	r6, r1
 80062d2:	dd0d      	ble.n	80062f0 <_ZN3TFT5LineHElllt+0x34>

	if ((LCD->Bit) == 1) {
 80062d4:	f895 e009 	ldrb.w	lr, [r5, #9]
 80062d8:	f1be 0f01 	cmp.w	lr, #1
 80062dc:	d042      	beq.n	8006364 <_ZN3TFT5LineHElllt+0xa8>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
		}
		return;
	}

	if ((LCD->Bit) == 16) {
 80062de:	f1be 0f10 	cmp.w	lr, #16
 80062e2:	d006      	beq.n	80062f2 <_ZN3TFT5LineHElllt+0x36>
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
		}
		return;
	}

	if ((LCD->Bit) == 4) {
 80062e4:	f1be 0f04 	cmp.w	lr, #4
 80062e8:	d065      	beq.n	80063b6 <_ZN3TFT5LineHElllt+0xfa>
			}
		}
		return;
	}

	if ((LCD->Bit) == 8) {
 80062ea:	f1be 0f08 	cmp.w	lr, #8
 80062ee:	d021      	beq.n	8006334 <_ZN3TFT5LineHElllt+0x78>
		for (int32_t i = X1; i <= X2; i++)
			LCD->buffer8[i + YY] = color;
		return;
	}

}
 80062f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80062f2:	4293      	cmp	r3, r2
 80062f4:	dbfc      	blt.n	80062f0 <_ZN3TFT5LineHElllt+0x34>
 80062f6:	f1c2 0601 	rsb	r6, r2, #1
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 80062fa:	fb04 f101 	mul.w	r1, r4, r1
 80062fe:	69a8      	ldr	r0, [r5, #24]
 8006300:	441e      	add	r6, r3
 8006302:	d013      	beq.n	800632c <_ZN3TFT5LineHElllt+0x70>
 8006304:	2400      	movs	r4, #0
 8006306:	188b      	adds	r3, r1, r2
 8006308:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800630c:	0875      	lsrs	r5, r6, #1
 800630e:	f36c 040f 	bfi	r4, ip, #0, #16
 8006312:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006316:	f36c 441f 	bfi	r4, ip, #16, #16
 800631a:	f843 4b04 	str.w	r4, [r3], #4
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800631e:	42ab      	cmp	r3, r5
 8006320:	d1fb      	bne.n	800631a <_ZN3TFT5LineHElllt+0x5e>
 8006322:	f026 0301 	bic.w	r3, r6, #1
 8006326:	429e      	cmp	r6, r3
 8006328:	441a      	add	r2, r3
 800632a:	d0e1      	beq.n	80062f0 <_ZN3TFT5LineHElllt+0x34>
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 800632c:	4411      	add	r1, r2
 800632e:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
}
 8006332:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (int32_t i = X1; i <= X2; i++)
 8006334:	4293      	cmp	r3, r2
		int YY = Y * LCD->TFT_WIDTH;
 8006336:	fb01 f404 	mul.w	r4, r1, r4
		for (int32_t i = X1; i <= X2; i++)
 800633a:	dbd9      	blt.n	80062f0 <_ZN3TFT5LineHElllt+0x34>
			LCD->buffer8[i + YY] = color;
 800633c:	69e9      	ldr	r1, [r5, #28]
 800633e:	fa5f fc8c 	uxtb.w	ip, ip
 8006342:	4421      	add	r1, r4
 8006344:	f801 c002 	strb.w	ip, [r1, r2]
		for (int32_t i = X1; i <= X2; i++)
 8006348:	3201      	adds	r2, #1
 800634a:	4293      	cmp	r3, r2
 800634c:	dbd0      	blt.n	80062f0 <_ZN3TFT5LineHElllt+0x34>
 800634e:	4422      	add	r2, r4
 8006350:	3401      	adds	r4, #1
 8006352:	4423      	add	r3, r4
			LCD->buffer8[i + YY] = color;
 8006354:	6801      	ldr	r1, [r0, #0]
 8006356:	69c9      	ldr	r1, [r1, #28]
 8006358:	f801 c002 	strb.w	ip, [r1, r2]
		for (int32_t i = X1; i <= X2; i++)
 800635c:	3201      	adds	r2, #1
 800635e:	429a      	cmp	r2, r3
 8006360:	d1f8      	bne.n	8006354 <_ZN3TFT5LineHElllt+0x98>
}
 8006362:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (color == 1) {
 8006364:	f1bc 0f01 	cmp.w	ip, #1
 8006368:	d07c      	beq.n	8006464 <_ZN3TFT5LineHElllt+0x1a8>
			for (i = X1; i <= X2; i++)
 800636a:	4293      	cmp	r3, r2
 800636c:	dbc0      	blt.n	80062f0 <_ZN3TFT5LineHElllt+0x34>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 800636e:	2601      	movs	r6, #1
 8006370:	468c      	mov	ip, r1
 8006372:	2900      	cmp	r1, #0
 8006374:	bfb8      	it	lt
 8006376:	f101 0c07 	addlt.w	ip, r1, #7
 800637a:	f001 0107 	and.w	r1, r1, #7
 800637e:	408e      	lsls	r6, r1
 8006380:	43f6      	mvns	r6, r6
 8006382:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8006386:	fb0c 2404 	mla	r4, ip, r4, r2
 800638a:	69ed      	ldr	r5, [r5, #28]
			for (i = X1; i <= X2; i++)
 800638c:	3201      	adds	r2, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 800638e:	5d29      	ldrb	r1, [r5, r4]
			for (i = X1; i <= X2; i++)
 8006390:	4293      	cmp	r3, r2
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 8006392:	ea01 0106 	and.w	r1, r1, r6
 8006396:	5529      	strb	r1, [r5, r4]
 8006398:	b2f6      	uxtb	r6, r6
			for (i = X1; i <= X2; i++)
 800639a:	dba9      	blt.n	80062f0 <_ZN3TFT5LineHElllt+0x34>
 800639c:	3301      	adds	r3, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 800639e:	6804      	ldr	r4, [r0, #0]
 80063a0:	6821      	ldr	r1, [r4, #0]
 80063a2:	69e5      	ldr	r5, [r4, #28]
 80063a4:	fb01 210c 	mla	r1, r1, ip, r2
 80063a8:	5c6c      	ldrb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 80063aa:	3201      	adds	r2, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80063ac:	4034      	ands	r4, r6
			for (i = X1; i <= X2; i++)
 80063ae:	4293      	cmp	r3, r2
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80063b0:	546c      	strb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 80063b2:	d1f4      	bne.n	800639e <_ZN3TFT5LineHElllt+0xe2>
}
 80063b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80063b6:	4293      	cmp	r3, r2
 80063b8:	db9a      	blt.n	80062f0 <_ZN3TFT5LineHElllt+0x34>
								& (0x0F)) | (color << 4);
 80063ba:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
 80063be:	2901      	cmp	r1, #1
 80063c0:	fa4f fe8e 	sxtb.w	lr, lr
 80063c4:	f103 0301 	add.w	r3, r3, #1
 80063c8:	d00c      	beq.n	80063e4 <_ZN3TFT5LineHElllt+0x128>
 80063ca:	e035      	b.n	8006438 <_ZN3TFT5LineHElllt+0x17c>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80063cc:	69ed      	ldr	r5, [r5, #28]
								& (0x0F)) | (color << 4);
 80063ce:	5c6c      	ldrb	r4, [r5, r1]
 80063d0:	f004 040f 	and.w	r4, r4, #15
 80063d4:	ea4e 0404 	orr.w	r4, lr, r4
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 80063d8:	546c      	strb	r4, [r5, r1]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80063da:	3201      	adds	r2, #1
 80063dc:	429a      	cmp	r2, r3
 80063de:	d087      	beq.n	80062f0 <_ZN3TFT5LineHElllt+0x34>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80063e0:	6805      	ldr	r5, [r0, #0]
 80063e2:	682c      	ldr	r4, [r5, #0]
 80063e4:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 80063e8:	eb04 76d4 	add.w	r6, r4, r4, lsr #31
 80063ec:	1049      	asrs	r1, r1, #1
 80063ee:	eb01 0166 	add.w	r1, r1, r6, asr #1
			if (i % 2 == 0) {
 80063f2:	07d6      	lsls	r6, r2, #31
 80063f4:	d5ea      	bpl.n	80063cc <_ZN3TFT5LineHElllt+0x110>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80063f6:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 80063fa:	69ed      	ldr	r5, [r5, #28]
 80063fc:	1049      	asrs	r1, r1, #1
 80063fe:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8006402:	eb01 0464 	add.w	r4, r1, r4, asr #1
								& (0xF0)) | color;
 8006406:	5d29      	ldrb	r1, [r5, r4]
 8006408:	f021 010f 	bic.w	r1, r1, #15
 800640c:	ea41 010c 	orr.w	r1, r1, ip
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8006410:	5529      	strb	r1, [r5, r4]
 8006412:	e7e2      	b.n	80063da <_ZN3TFT5LineHElllt+0x11e>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8006414:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 8006418:	1064      	asrs	r4, r4, #1
 800641a:	fb01 4406 	mla	r4, r1, r6, r4
 800641e:	69ef      	ldr	r7, [r5, #28]
								& (0x0F)) | (color << 4);
 8006420:	5d3d      	ldrb	r5, [r7, r4]
 8006422:	f005 050f 	and.w	r5, r5, #15
 8006426:	ea4e 0505 	orr.w	r5, lr, r5
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 800642a:	553d      	strb	r5, [r7, r4]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800642c:	3201      	adds	r2, #1
 800642e:	429a      	cmp	r2, r3
 8006430:	f43f af5e 	beq.w	80062f0 <_ZN3TFT5LineHElllt+0x34>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8006434:	6805      	ldr	r5, [r0, #0]
 8006436:	682c      	ldr	r4, [r5, #0]
 8006438:	eb04 76d4 	add.w	r6, r4, r4, lsr #31
			if (i % 2 == 0) {
 800643c:	07d7      	lsls	r7, r2, #31
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 800643e:	ea4f 0666 	mov.w	r6, r6, asr #1
			if (i % 2 == 0) {
 8006442:	d5e7      	bpl.n	8006414 <_ZN3TFT5LineHElllt+0x158>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8006444:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8006448:	1066      	asrs	r6, r4, #1
 800644a:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 800644e:	1064      	asrs	r4, r4, #1
 8006450:	fb01 4406 	mla	r4, r1, r6, r4
 8006454:	69ef      	ldr	r7, [r5, #28]
								& (0xF0)) | color;
 8006456:	5d3d      	ldrb	r5, [r7, r4]
 8006458:	f025 050f 	bic.w	r5, r5, #15
 800645c:	ea45 050c 	orr.w	r5, r5, ip
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8006460:	553d      	strb	r5, [r7, r4]
 8006462:	e7e3      	b.n	800642c <_ZN3TFT5LineHElllt+0x170>
			for (i = X1; i <= X2; i++)
 8006464:	4293      	cmp	r3, r2
 8006466:	f6ff af43 	blt.w	80062f0 <_ZN3TFT5LineHElllt+0x34>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 800646a:	460e      	mov	r6, r1
 800646c:	f04f 0c01 	mov.w	ip, #1
 8006470:	2900      	cmp	r1, #0
 8006472:	bfb8      	it	lt
 8006474:	1dce      	addlt	r6, r1, #7
 8006476:	10f6      	asrs	r6, r6, #3
 8006478:	fb06 2404 	mla	r4, r6, r4, r2
 800647c:	69ed      	ldr	r5, [r5, #28]
 800647e:	f001 0107 	and.w	r1, r1, #7
 8006482:	fa0c fc01 	lsl.w	ip, ip, r1
 8006486:	5d29      	ldrb	r1, [r5, r4]
			for (i = X1; i <= X2; i++)
 8006488:	3201      	adds	r2, #1
 800648a:	fa5f fc8c 	uxtb.w	ip, ip
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 800648e:	ea4c 0101 	orr.w	r1, ip, r1
			for (i = X1; i <= X2; i++)
 8006492:	4293      	cmp	r3, r2
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 8006494:	5529      	strb	r1, [r5, r4]
			for (i = X1; i <= X2; i++)
 8006496:	f6ff af2b 	blt.w	80062f0 <_ZN3TFT5LineHElllt+0x34>
 800649a:	3301      	adds	r3, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 800649c:	6804      	ldr	r4, [r0, #0]
 800649e:	6821      	ldr	r1, [r4, #0]
 80064a0:	69e5      	ldr	r5, [r4, #28]
 80064a2:	fb01 2106 	mla	r1, r1, r6, r2
 80064a6:	5c6c      	ldrb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 80064a8:	3201      	adds	r2, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80064aa:	ea4c 0404 	orr.w	r4, ip, r4
			for (i = X1; i <= X2; i++)
 80064ae:	429a      	cmp	r2, r3
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80064b0:	546c      	strb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 80064b2:	d1f3      	bne.n	800649c <_ZN3TFT5LineHElllt+0x1e0>
}
 80064b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b6:	bf00      	nop

080064b8 <__cvt>:
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064be:	461f      	mov	r7, r3
 80064c0:	bfbb      	ittet	lt
 80064c2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	461f      	movlt	r7, r3
 80064c8:	2300      	movge	r3, #0
 80064ca:	232d      	movlt	r3, #45	; 0x2d
 80064cc:	b088      	sub	sp, #32
 80064ce:	4614      	mov	r4, r2
 80064d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80064d4:	7013      	strb	r3, [r2, #0]
 80064d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80064dc:	f023 0820 	bic.w	r8, r3, #32
 80064e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064e4:	d005      	beq.n	80064f2 <__cvt+0x3a>
 80064e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064ea:	d100      	bne.n	80064ee <__cvt+0x36>
 80064ec:	3501      	adds	r5, #1
 80064ee:	2302      	movs	r3, #2
 80064f0:	e000      	b.n	80064f4 <__cvt+0x3c>
 80064f2:	2303      	movs	r3, #3
 80064f4:	aa07      	add	r2, sp, #28
 80064f6:	9204      	str	r2, [sp, #16]
 80064f8:	aa06      	add	r2, sp, #24
 80064fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80064fe:	e9cd 3500 	strd	r3, r5, [sp]
 8006502:	4622      	mov	r2, r4
 8006504:	463b      	mov	r3, r7
 8006506:	f000 fe73 	bl	80071f0 <_dtoa_r>
 800650a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800650e:	4606      	mov	r6, r0
 8006510:	d102      	bne.n	8006518 <__cvt+0x60>
 8006512:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006514:	07db      	lsls	r3, r3, #31
 8006516:	d522      	bpl.n	800655e <__cvt+0xa6>
 8006518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800651c:	eb06 0905 	add.w	r9, r6, r5
 8006520:	d110      	bne.n	8006544 <__cvt+0x8c>
 8006522:	7833      	ldrb	r3, [r6, #0]
 8006524:	2b30      	cmp	r3, #48	; 0x30
 8006526:	d10a      	bne.n	800653e <__cvt+0x86>
 8006528:	2200      	movs	r2, #0
 800652a:	2300      	movs	r3, #0
 800652c:	4620      	mov	r0, r4
 800652e:	4639      	mov	r1, r7
 8006530:	f7fa fa3a 	bl	80009a8 <__aeabi_dcmpeq>
 8006534:	b918      	cbnz	r0, 800653e <__cvt+0x86>
 8006536:	f1c5 0501 	rsb	r5, r5, #1
 800653a:	f8ca 5000 	str.w	r5, [sl]
 800653e:	f8da 3000 	ldr.w	r3, [sl]
 8006542:	4499      	add	r9, r3
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	4620      	mov	r0, r4
 800654a:	4639      	mov	r1, r7
 800654c:	f7fa fa2c 	bl	80009a8 <__aeabi_dcmpeq>
 8006550:	b108      	cbz	r0, 8006556 <__cvt+0x9e>
 8006552:	f8cd 901c 	str.w	r9, [sp, #28]
 8006556:	2230      	movs	r2, #48	; 0x30
 8006558:	9b07      	ldr	r3, [sp, #28]
 800655a:	454b      	cmp	r3, r9
 800655c:	d307      	bcc.n	800656e <__cvt+0xb6>
 800655e:	4630      	mov	r0, r6
 8006560:	9b07      	ldr	r3, [sp, #28]
 8006562:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006564:	1b9b      	subs	r3, r3, r6
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	b008      	add	sp, #32
 800656a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656e:	1c59      	adds	r1, r3, #1
 8006570:	9107      	str	r1, [sp, #28]
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	e7f0      	b.n	8006558 <__cvt+0xa0>

08006576 <__exponent>:
 8006576:	4603      	mov	r3, r0
 8006578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800657a:	2900      	cmp	r1, #0
 800657c:	f803 2b02 	strb.w	r2, [r3], #2
 8006580:	bfb6      	itet	lt
 8006582:	222d      	movlt	r2, #45	; 0x2d
 8006584:	222b      	movge	r2, #43	; 0x2b
 8006586:	4249      	neglt	r1, r1
 8006588:	2909      	cmp	r1, #9
 800658a:	7042      	strb	r2, [r0, #1]
 800658c:	dd2a      	ble.n	80065e4 <__exponent+0x6e>
 800658e:	f10d 0207 	add.w	r2, sp, #7
 8006592:	4617      	mov	r7, r2
 8006594:	260a      	movs	r6, #10
 8006596:	fb91 f5f6 	sdiv	r5, r1, r6
 800659a:	4694      	mov	ip, r2
 800659c:	fb06 1415 	mls	r4, r6, r5, r1
 80065a0:	3430      	adds	r4, #48	; 0x30
 80065a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80065a6:	460c      	mov	r4, r1
 80065a8:	2c63      	cmp	r4, #99	; 0x63
 80065aa:	4629      	mov	r1, r5
 80065ac:	f102 32ff 	add.w	r2, r2, #4294967295
 80065b0:	dcf1      	bgt.n	8006596 <__exponent+0x20>
 80065b2:	3130      	adds	r1, #48	; 0x30
 80065b4:	f1ac 0402 	sub.w	r4, ip, #2
 80065b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80065bc:	4622      	mov	r2, r4
 80065be:	1c41      	adds	r1, r0, #1
 80065c0:	42ba      	cmp	r2, r7
 80065c2:	d30a      	bcc.n	80065da <__exponent+0x64>
 80065c4:	f10d 0209 	add.w	r2, sp, #9
 80065c8:	eba2 020c 	sub.w	r2, r2, ip
 80065cc:	42bc      	cmp	r4, r7
 80065ce:	bf88      	it	hi
 80065d0:	2200      	movhi	r2, #0
 80065d2:	4413      	add	r3, r2
 80065d4:	1a18      	subs	r0, r3, r0
 80065d6:	b003      	add	sp, #12
 80065d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065da:	f812 5b01 	ldrb.w	r5, [r2], #1
 80065de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80065e2:	e7ed      	b.n	80065c0 <__exponent+0x4a>
 80065e4:	2330      	movs	r3, #48	; 0x30
 80065e6:	3130      	adds	r1, #48	; 0x30
 80065e8:	7083      	strb	r3, [r0, #2]
 80065ea:	70c1      	strb	r1, [r0, #3]
 80065ec:	1d03      	adds	r3, r0, #4
 80065ee:	e7f1      	b.n	80065d4 <__exponent+0x5e>

080065f0 <_printf_float>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	b091      	sub	sp, #68	; 0x44
 80065f6:	460c      	mov	r4, r1
 80065f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80065fc:	4616      	mov	r6, r2
 80065fe:	461f      	mov	r7, r3
 8006600:	4605      	mov	r5, r0
 8006602:	f000 fce5 	bl	8006fd0 <_localeconv_r>
 8006606:	6803      	ldr	r3, [r0, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	9309      	str	r3, [sp, #36]	; 0x24
 800660c:	f7f9 fda0 	bl	8000150 <strlen>
 8006610:	2300      	movs	r3, #0
 8006612:	930e      	str	r3, [sp, #56]	; 0x38
 8006614:	f8d8 3000 	ldr.w	r3, [r8]
 8006618:	900a      	str	r0, [sp, #40]	; 0x28
 800661a:	3307      	adds	r3, #7
 800661c:	f023 0307 	bic.w	r3, r3, #7
 8006620:	f103 0208 	add.w	r2, r3, #8
 8006624:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006628:	f8d4 b000 	ldr.w	fp, [r4]
 800662c:	f8c8 2000 	str.w	r2, [r8]
 8006630:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006634:	4652      	mov	r2, sl
 8006636:	4643      	mov	r3, r8
 8006638:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800663c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006640:	930b      	str	r3, [sp, #44]	; 0x2c
 8006642:	f04f 32ff 	mov.w	r2, #4294967295
 8006646:	4650      	mov	r0, sl
 8006648:	4b9c      	ldr	r3, [pc, #624]	; (80068bc <_printf_float+0x2cc>)
 800664a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800664c:	f7fa f9de 	bl	8000a0c <__aeabi_dcmpun>
 8006650:	bb70      	cbnz	r0, 80066b0 <_printf_float+0xc0>
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	4650      	mov	r0, sl
 8006658:	4b98      	ldr	r3, [pc, #608]	; (80068bc <_printf_float+0x2cc>)
 800665a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800665c:	f7fa f9b8 	bl	80009d0 <__aeabi_dcmple>
 8006660:	bb30      	cbnz	r0, 80066b0 <_printf_float+0xc0>
 8006662:	2200      	movs	r2, #0
 8006664:	2300      	movs	r3, #0
 8006666:	4650      	mov	r0, sl
 8006668:	4641      	mov	r1, r8
 800666a:	f7fa f9a7 	bl	80009bc <__aeabi_dcmplt>
 800666e:	b110      	cbz	r0, 8006676 <_printf_float+0x86>
 8006670:	232d      	movs	r3, #45	; 0x2d
 8006672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006676:	4a92      	ldr	r2, [pc, #584]	; (80068c0 <_printf_float+0x2d0>)
 8006678:	4b92      	ldr	r3, [pc, #584]	; (80068c4 <_printf_float+0x2d4>)
 800667a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800667e:	bf94      	ite	ls
 8006680:	4690      	movls	r8, r2
 8006682:	4698      	movhi	r8, r3
 8006684:	2303      	movs	r3, #3
 8006686:	f04f 0a00 	mov.w	sl, #0
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	f02b 0304 	bic.w	r3, fp, #4
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	4633      	mov	r3, r6
 8006694:	4621      	mov	r1, r4
 8006696:	4628      	mov	r0, r5
 8006698:	9700      	str	r7, [sp, #0]
 800669a:	aa0f      	add	r2, sp, #60	; 0x3c
 800669c:	f000 f9d6 	bl	8006a4c <_printf_common>
 80066a0:	3001      	adds	r0, #1
 80066a2:	f040 8090 	bne.w	80067c6 <_printf_float+0x1d6>
 80066a6:	f04f 30ff 	mov.w	r0, #4294967295
 80066aa:	b011      	add	sp, #68	; 0x44
 80066ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b0:	4652      	mov	r2, sl
 80066b2:	4643      	mov	r3, r8
 80066b4:	4650      	mov	r0, sl
 80066b6:	4641      	mov	r1, r8
 80066b8:	f7fa f9a8 	bl	8000a0c <__aeabi_dcmpun>
 80066bc:	b148      	cbz	r0, 80066d2 <_printf_float+0xe2>
 80066be:	f1b8 0f00 	cmp.w	r8, #0
 80066c2:	bfb8      	it	lt
 80066c4:	232d      	movlt	r3, #45	; 0x2d
 80066c6:	4a80      	ldr	r2, [pc, #512]	; (80068c8 <_printf_float+0x2d8>)
 80066c8:	bfb8      	it	lt
 80066ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066ce:	4b7f      	ldr	r3, [pc, #508]	; (80068cc <_printf_float+0x2dc>)
 80066d0:	e7d3      	b.n	800667a <_printf_float+0x8a>
 80066d2:	6863      	ldr	r3, [r4, #4]
 80066d4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	d142      	bne.n	8006762 <_printf_float+0x172>
 80066dc:	2306      	movs	r3, #6
 80066de:	6063      	str	r3, [r4, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	9206      	str	r2, [sp, #24]
 80066e4:	aa0e      	add	r2, sp, #56	; 0x38
 80066e6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80066ea:	aa0d      	add	r2, sp, #52	; 0x34
 80066ec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80066f0:	9203      	str	r2, [sp, #12]
 80066f2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80066f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80066fa:	6023      	str	r3, [r4, #0]
 80066fc:	6863      	ldr	r3, [r4, #4]
 80066fe:	4652      	mov	r2, sl
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	4628      	mov	r0, r5
 8006704:	4643      	mov	r3, r8
 8006706:	910b      	str	r1, [sp, #44]	; 0x2c
 8006708:	f7ff fed6 	bl	80064b8 <__cvt>
 800670c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800670e:	4680      	mov	r8, r0
 8006710:	2947      	cmp	r1, #71	; 0x47
 8006712:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006714:	d108      	bne.n	8006728 <_printf_float+0x138>
 8006716:	1cc8      	adds	r0, r1, #3
 8006718:	db02      	blt.n	8006720 <_printf_float+0x130>
 800671a:	6863      	ldr	r3, [r4, #4]
 800671c:	4299      	cmp	r1, r3
 800671e:	dd40      	ble.n	80067a2 <_printf_float+0x1b2>
 8006720:	f1a9 0902 	sub.w	r9, r9, #2
 8006724:	fa5f f989 	uxtb.w	r9, r9
 8006728:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800672c:	d81f      	bhi.n	800676e <_printf_float+0x17e>
 800672e:	464a      	mov	r2, r9
 8006730:	3901      	subs	r1, #1
 8006732:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006736:	910d      	str	r1, [sp, #52]	; 0x34
 8006738:	f7ff ff1d 	bl	8006576 <__exponent>
 800673c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800673e:	4682      	mov	sl, r0
 8006740:	1813      	adds	r3, r2, r0
 8006742:	2a01      	cmp	r2, #1
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	dc02      	bgt.n	800674e <_printf_float+0x15e>
 8006748:	6822      	ldr	r2, [r4, #0]
 800674a:	07d2      	lsls	r2, r2, #31
 800674c:	d501      	bpl.n	8006752 <_printf_float+0x162>
 800674e:	3301      	adds	r3, #1
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006756:	2b00      	cmp	r3, #0
 8006758:	d09b      	beq.n	8006692 <_printf_float+0xa2>
 800675a:	232d      	movs	r3, #45	; 0x2d
 800675c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006760:	e797      	b.n	8006692 <_printf_float+0xa2>
 8006762:	2947      	cmp	r1, #71	; 0x47
 8006764:	d1bc      	bne.n	80066e0 <_printf_float+0xf0>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1ba      	bne.n	80066e0 <_printf_float+0xf0>
 800676a:	2301      	movs	r3, #1
 800676c:	e7b7      	b.n	80066de <_printf_float+0xee>
 800676e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006772:	d118      	bne.n	80067a6 <_printf_float+0x1b6>
 8006774:	2900      	cmp	r1, #0
 8006776:	6863      	ldr	r3, [r4, #4]
 8006778:	dd0b      	ble.n	8006792 <_printf_float+0x1a2>
 800677a:	6121      	str	r1, [r4, #16]
 800677c:	b913      	cbnz	r3, 8006784 <_printf_float+0x194>
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	07d0      	lsls	r0, r2, #31
 8006782:	d502      	bpl.n	800678a <_printf_float+0x19a>
 8006784:	3301      	adds	r3, #1
 8006786:	440b      	add	r3, r1
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	f04f 0a00 	mov.w	sl, #0
 800678e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006790:	e7df      	b.n	8006752 <_printf_float+0x162>
 8006792:	b913      	cbnz	r3, 800679a <_printf_float+0x1aa>
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	07d2      	lsls	r2, r2, #31
 8006798:	d501      	bpl.n	800679e <_printf_float+0x1ae>
 800679a:	3302      	adds	r3, #2
 800679c:	e7f4      	b.n	8006788 <_printf_float+0x198>
 800679e:	2301      	movs	r3, #1
 80067a0:	e7f2      	b.n	8006788 <_printf_float+0x198>
 80067a2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80067a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067a8:	4299      	cmp	r1, r3
 80067aa:	db05      	blt.n	80067b8 <_printf_float+0x1c8>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	6121      	str	r1, [r4, #16]
 80067b0:	07d8      	lsls	r0, r3, #31
 80067b2:	d5ea      	bpl.n	800678a <_printf_float+0x19a>
 80067b4:	1c4b      	adds	r3, r1, #1
 80067b6:	e7e7      	b.n	8006788 <_printf_float+0x198>
 80067b8:	2900      	cmp	r1, #0
 80067ba:	bfcc      	ite	gt
 80067bc:	2201      	movgt	r2, #1
 80067be:	f1c1 0202 	rsble	r2, r1, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	e7e0      	b.n	8006788 <_printf_float+0x198>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	055a      	lsls	r2, r3, #21
 80067ca:	d407      	bmi.n	80067dc <_printf_float+0x1ec>
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	4642      	mov	r2, r8
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	d12b      	bne.n	8006832 <_printf_float+0x242>
 80067da:	e764      	b.n	80066a6 <_printf_float+0xb6>
 80067dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067e0:	f240 80dd 	bls.w	800699e <_printf_float+0x3ae>
 80067e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067e8:	2200      	movs	r2, #0
 80067ea:	2300      	movs	r3, #0
 80067ec:	f7fa f8dc 	bl	80009a8 <__aeabi_dcmpeq>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d033      	beq.n	800685c <_printf_float+0x26c>
 80067f4:	2301      	movs	r3, #1
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	4a35      	ldr	r2, [pc, #212]	; (80068d0 <_printf_float+0x2e0>)
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f af51 	beq.w	80066a6 <_printf_float+0xb6>
 8006804:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006808:	429a      	cmp	r2, r3
 800680a:	db02      	blt.n	8006812 <_printf_float+0x222>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	07d8      	lsls	r0, r3, #31
 8006810:	d50f      	bpl.n	8006832 <_printf_float+0x242>
 8006812:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	f43f af42 	beq.w	80066a6 <_printf_float+0xb6>
 8006822:	f04f 0800 	mov.w	r8, #0
 8006826:	f104 091a 	add.w	r9, r4, #26
 800682a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800682c:	3b01      	subs	r3, #1
 800682e:	4543      	cmp	r3, r8
 8006830:	dc09      	bgt.n	8006846 <_printf_float+0x256>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	079b      	lsls	r3, r3, #30
 8006836:	f100 8104 	bmi.w	8006a42 <_printf_float+0x452>
 800683a:	68e0      	ldr	r0, [r4, #12]
 800683c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800683e:	4298      	cmp	r0, r3
 8006840:	bfb8      	it	lt
 8006842:	4618      	movlt	r0, r3
 8006844:	e731      	b.n	80066aa <_printf_float+0xba>
 8006846:	2301      	movs	r3, #1
 8006848:	464a      	mov	r2, r9
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	f43f af28 	beq.w	80066a6 <_printf_float+0xb6>
 8006856:	f108 0801 	add.w	r8, r8, #1
 800685a:	e7e6      	b.n	800682a <_printf_float+0x23a>
 800685c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800685e:	2b00      	cmp	r3, #0
 8006860:	dc38      	bgt.n	80068d4 <_printf_float+0x2e4>
 8006862:	2301      	movs	r3, #1
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	4a19      	ldr	r2, [pc, #100]	; (80068d0 <_printf_float+0x2e0>)
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	f43f af1a 	beq.w	80066a6 <_printf_float+0xb6>
 8006872:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006876:	4313      	orrs	r3, r2
 8006878:	d102      	bne.n	8006880 <_printf_float+0x290>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	07d9      	lsls	r1, r3, #31
 800687e:	d5d8      	bpl.n	8006832 <_printf_float+0x242>
 8006880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	f43f af0b 	beq.w	80066a6 <_printf_float+0xb6>
 8006890:	f04f 0900 	mov.w	r9, #0
 8006894:	f104 0a1a 	add.w	sl, r4, #26
 8006898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800689a:	425b      	negs	r3, r3
 800689c:	454b      	cmp	r3, r9
 800689e:	dc01      	bgt.n	80068a4 <_printf_float+0x2b4>
 80068a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068a2:	e794      	b.n	80067ce <_printf_float+0x1de>
 80068a4:	2301      	movs	r3, #1
 80068a6:	4652      	mov	r2, sl
 80068a8:	4631      	mov	r1, r6
 80068aa:	4628      	mov	r0, r5
 80068ac:	47b8      	blx	r7
 80068ae:	3001      	adds	r0, #1
 80068b0:	f43f aef9 	beq.w	80066a6 <_printf_float+0xb6>
 80068b4:	f109 0901 	add.w	r9, r9, #1
 80068b8:	e7ee      	b.n	8006898 <_printf_float+0x2a8>
 80068ba:	bf00      	nop
 80068bc:	7fefffff 	.word	0x7fefffff
 80068c0:	080099b0 	.word	0x080099b0
 80068c4:	080099b4 	.word	0x080099b4
 80068c8:	080099b8 	.word	0x080099b8
 80068cc:	080099bc 	.word	0x080099bc
 80068d0:	080099c0 	.word	0x080099c0
 80068d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068d8:	429a      	cmp	r2, r3
 80068da:	bfa8      	it	ge
 80068dc:	461a      	movge	r2, r3
 80068de:	2a00      	cmp	r2, #0
 80068e0:	4691      	mov	r9, r2
 80068e2:	dc37      	bgt.n	8006954 <_printf_float+0x364>
 80068e4:	f04f 0b00 	mov.w	fp, #0
 80068e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ec:	f104 021a 	add.w	r2, r4, #26
 80068f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80068f4:	ebaa 0309 	sub.w	r3, sl, r9
 80068f8:	455b      	cmp	r3, fp
 80068fa:	dc33      	bgt.n	8006964 <_printf_float+0x374>
 80068fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006900:	429a      	cmp	r2, r3
 8006902:	db3b      	blt.n	800697c <_printf_float+0x38c>
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	07da      	lsls	r2, r3, #31
 8006908:	d438      	bmi.n	800697c <_printf_float+0x38c>
 800690a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800690e:	eba2 0903 	sub.w	r9, r2, r3
 8006912:	eba2 020a 	sub.w	r2, r2, sl
 8006916:	4591      	cmp	r9, r2
 8006918:	bfa8      	it	ge
 800691a:	4691      	movge	r9, r2
 800691c:	f1b9 0f00 	cmp.w	r9, #0
 8006920:	dc34      	bgt.n	800698c <_printf_float+0x39c>
 8006922:	f04f 0800 	mov.w	r8, #0
 8006926:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800692a:	f104 0a1a 	add.w	sl, r4, #26
 800692e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	eba3 0309 	sub.w	r3, r3, r9
 8006938:	4543      	cmp	r3, r8
 800693a:	f77f af7a 	ble.w	8006832 <_printf_float+0x242>
 800693e:	2301      	movs	r3, #1
 8006940:	4652      	mov	r2, sl
 8006942:	4631      	mov	r1, r6
 8006944:	4628      	mov	r0, r5
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	f43f aeac 	beq.w	80066a6 <_printf_float+0xb6>
 800694e:	f108 0801 	add.w	r8, r8, #1
 8006952:	e7ec      	b.n	800692e <_printf_float+0x33e>
 8006954:	4613      	mov	r3, r2
 8006956:	4631      	mov	r1, r6
 8006958:	4642      	mov	r2, r8
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	d1c0      	bne.n	80068e4 <_printf_float+0x2f4>
 8006962:	e6a0      	b.n	80066a6 <_printf_float+0xb6>
 8006964:	2301      	movs	r3, #1
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	920b      	str	r2, [sp, #44]	; 0x2c
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f ae99 	beq.w	80066a6 <_printf_float+0xb6>
 8006974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006976:	f10b 0b01 	add.w	fp, fp, #1
 800697a:	e7b9      	b.n	80068f0 <_printf_float+0x300>
 800697c:	4631      	mov	r1, r6
 800697e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	d1bf      	bne.n	800690a <_printf_float+0x31a>
 800698a:	e68c      	b.n	80066a6 <_printf_float+0xb6>
 800698c:	464b      	mov	r3, r9
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	eb08 020a 	add.w	r2, r8, sl
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d1c2      	bne.n	8006922 <_printf_float+0x332>
 800699c:	e683      	b.n	80066a6 <_printf_float+0xb6>
 800699e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069a0:	2a01      	cmp	r2, #1
 80069a2:	dc01      	bgt.n	80069a8 <_printf_float+0x3b8>
 80069a4:	07db      	lsls	r3, r3, #31
 80069a6:	d539      	bpl.n	8006a1c <_printf_float+0x42c>
 80069a8:	2301      	movs	r3, #1
 80069aa:	4642      	mov	r2, r8
 80069ac:	4631      	mov	r1, r6
 80069ae:	4628      	mov	r0, r5
 80069b0:	47b8      	blx	r7
 80069b2:	3001      	adds	r0, #1
 80069b4:	f43f ae77 	beq.w	80066a6 <_printf_float+0xb6>
 80069b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f ae6f 	beq.w	80066a6 <_printf_float+0xb6>
 80069c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069cc:	2200      	movs	r2, #0
 80069ce:	2300      	movs	r3, #0
 80069d0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80069d4:	f7f9 ffe8 	bl	80009a8 <__aeabi_dcmpeq>
 80069d8:	b9d8      	cbnz	r0, 8006a12 <_printf_float+0x422>
 80069da:	f109 33ff 	add.w	r3, r9, #4294967295
 80069de:	f108 0201 	add.w	r2, r8, #1
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	d10e      	bne.n	8006a0a <_printf_float+0x41a>
 80069ec:	e65b      	b.n	80066a6 <_printf_float+0xb6>
 80069ee:	2301      	movs	r3, #1
 80069f0:	464a      	mov	r2, r9
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	f43f ae54 	beq.w	80066a6 <_printf_float+0xb6>
 80069fe:	f108 0801 	add.w	r8, r8, #1
 8006a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a04:	3b01      	subs	r3, #1
 8006a06:	4543      	cmp	r3, r8
 8006a08:	dcf1      	bgt.n	80069ee <_printf_float+0x3fe>
 8006a0a:	4653      	mov	r3, sl
 8006a0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a10:	e6de      	b.n	80067d0 <_printf_float+0x1e0>
 8006a12:	f04f 0800 	mov.w	r8, #0
 8006a16:	f104 091a 	add.w	r9, r4, #26
 8006a1a:	e7f2      	b.n	8006a02 <_printf_float+0x412>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	4642      	mov	r2, r8
 8006a20:	e7df      	b.n	80069e2 <_printf_float+0x3f2>
 8006a22:	2301      	movs	r3, #1
 8006a24:	464a      	mov	r2, r9
 8006a26:	4631      	mov	r1, r6
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b8      	blx	r7
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	f43f ae3a 	beq.w	80066a6 <_printf_float+0xb6>
 8006a32:	f108 0801 	add.w	r8, r8, #1
 8006a36:	68e3      	ldr	r3, [r4, #12]
 8006a38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a3a:	1a5b      	subs	r3, r3, r1
 8006a3c:	4543      	cmp	r3, r8
 8006a3e:	dcf0      	bgt.n	8006a22 <_printf_float+0x432>
 8006a40:	e6fb      	b.n	800683a <_printf_float+0x24a>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	f104 0919 	add.w	r9, r4, #25
 8006a4a:	e7f4      	b.n	8006a36 <_printf_float+0x446>

08006a4c <_printf_common>:
 8006a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a50:	4616      	mov	r6, r2
 8006a52:	4699      	mov	r9, r3
 8006a54:	688a      	ldr	r2, [r1, #8]
 8006a56:	690b      	ldr	r3, [r1, #16]
 8006a58:	4607      	mov	r7, r0
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	bfb8      	it	lt
 8006a5e:	4613      	movlt	r3, r2
 8006a60:	6033      	str	r3, [r6, #0]
 8006a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a66:	460c      	mov	r4, r1
 8006a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a6c:	b10a      	cbz	r2, 8006a72 <_printf_common+0x26>
 8006a6e:	3301      	adds	r3, #1
 8006a70:	6033      	str	r3, [r6, #0]
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	0699      	lsls	r1, r3, #26
 8006a76:	bf42      	ittt	mi
 8006a78:	6833      	ldrmi	r3, [r6, #0]
 8006a7a:	3302      	addmi	r3, #2
 8006a7c:	6033      	strmi	r3, [r6, #0]
 8006a7e:	6825      	ldr	r5, [r4, #0]
 8006a80:	f015 0506 	ands.w	r5, r5, #6
 8006a84:	d106      	bne.n	8006a94 <_printf_common+0x48>
 8006a86:	f104 0a19 	add.w	sl, r4, #25
 8006a8a:	68e3      	ldr	r3, [r4, #12]
 8006a8c:	6832      	ldr	r2, [r6, #0]
 8006a8e:	1a9b      	subs	r3, r3, r2
 8006a90:	42ab      	cmp	r3, r5
 8006a92:	dc2b      	bgt.n	8006aec <_printf_common+0xa0>
 8006a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a98:	1e13      	subs	r3, r2, #0
 8006a9a:	6822      	ldr	r2, [r4, #0]
 8006a9c:	bf18      	it	ne
 8006a9e:	2301      	movne	r3, #1
 8006aa0:	0692      	lsls	r2, r2, #26
 8006aa2:	d430      	bmi.n	8006b06 <_printf_common+0xba>
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aac:	47c0      	blx	r8
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d023      	beq.n	8006afa <_printf_common+0xae>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	6922      	ldr	r2, [r4, #16]
 8006ab6:	f003 0306 	and.w	r3, r3, #6
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	bf14      	ite	ne
 8006abe:	2500      	movne	r5, #0
 8006ac0:	6833      	ldreq	r3, [r6, #0]
 8006ac2:	f04f 0600 	mov.w	r6, #0
 8006ac6:	bf08      	it	eq
 8006ac8:	68e5      	ldreq	r5, [r4, #12]
 8006aca:	f104 041a 	add.w	r4, r4, #26
 8006ace:	bf08      	it	eq
 8006ad0:	1aed      	subeq	r5, r5, r3
 8006ad2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006ad6:	bf08      	it	eq
 8006ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006adc:	4293      	cmp	r3, r2
 8006ade:	bfc4      	itt	gt
 8006ae0:	1a9b      	subgt	r3, r3, r2
 8006ae2:	18ed      	addgt	r5, r5, r3
 8006ae4:	42b5      	cmp	r5, r6
 8006ae6:	d11a      	bne.n	8006b1e <_printf_common+0xd2>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e008      	b.n	8006afe <_printf_common+0xb2>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4652      	mov	r2, sl
 8006af0:	4649      	mov	r1, r9
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c0      	blx	r8
 8006af6:	3001      	adds	r0, #1
 8006af8:	d103      	bne.n	8006b02 <_printf_common+0xb6>
 8006afa:	f04f 30ff 	mov.w	r0, #4294967295
 8006afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b02:	3501      	adds	r5, #1
 8006b04:	e7c1      	b.n	8006a8a <_printf_common+0x3e>
 8006b06:	2030      	movs	r0, #48	; 0x30
 8006b08:	18e1      	adds	r1, r4, r3
 8006b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b14:	4422      	add	r2, r4
 8006b16:	3302      	adds	r3, #2
 8006b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b1c:	e7c2      	b.n	8006aa4 <_printf_common+0x58>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4622      	mov	r2, r4
 8006b22:	4649      	mov	r1, r9
 8006b24:	4638      	mov	r0, r7
 8006b26:	47c0      	blx	r8
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d0e6      	beq.n	8006afa <_printf_common+0xae>
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	e7d9      	b.n	8006ae4 <_printf_common+0x98>

08006b30 <_printf_i>:
 8006b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b34:	7e0f      	ldrb	r7, [r1, #24]
 8006b36:	4691      	mov	r9, r2
 8006b38:	2f78      	cmp	r7, #120	; 0x78
 8006b3a:	4680      	mov	r8, r0
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	469a      	mov	sl, r3
 8006b40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b46:	d807      	bhi.n	8006b58 <_printf_i+0x28>
 8006b48:	2f62      	cmp	r7, #98	; 0x62
 8006b4a:	d80a      	bhi.n	8006b62 <_printf_i+0x32>
 8006b4c:	2f00      	cmp	r7, #0
 8006b4e:	f000 80d5 	beq.w	8006cfc <_printf_i+0x1cc>
 8006b52:	2f58      	cmp	r7, #88	; 0x58
 8006b54:	f000 80c1 	beq.w	8006cda <_printf_i+0x1aa>
 8006b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b60:	e03a      	b.n	8006bd8 <_printf_i+0xa8>
 8006b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b66:	2b15      	cmp	r3, #21
 8006b68:	d8f6      	bhi.n	8006b58 <_printf_i+0x28>
 8006b6a:	a101      	add	r1, pc, #4	; (adr r1, 8006b70 <_printf_i+0x40>)
 8006b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b70:	08006bc9 	.word	0x08006bc9
 8006b74:	08006bdd 	.word	0x08006bdd
 8006b78:	08006b59 	.word	0x08006b59
 8006b7c:	08006b59 	.word	0x08006b59
 8006b80:	08006b59 	.word	0x08006b59
 8006b84:	08006b59 	.word	0x08006b59
 8006b88:	08006bdd 	.word	0x08006bdd
 8006b8c:	08006b59 	.word	0x08006b59
 8006b90:	08006b59 	.word	0x08006b59
 8006b94:	08006b59 	.word	0x08006b59
 8006b98:	08006b59 	.word	0x08006b59
 8006b9c:	08006ce3 	.word	0x08006ce3
 8006ba0:	08006c09 	.word	0x08006c09
 8006ba4:	08006c9d 	.word	0x08006c9d
 8006ba8:	08006b59 	.word	0x08006b59
 8006bac:	08006b59 	.word	0x08006b59
 8006bb0:	08006d05 	.word	0x08006d05
 8006bb4:	08006b59 	.word	0x08006b59
 8006bb8:	08006c09 	.word	0x08006c09
 8006bbc:	08006b59 	.word	0x08006b59
 8006bc0:	08006b59 	.word	0x08006b59
 8006bc4:	08006ca5 	.word	0x08006ca5
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	602a      	str	r2, [r5, #0]
 8006bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0a0      	b.n	8006d1e <_printf_i+0x1ee>
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	682b      	ldr	r3, [r5, #0]
 8006be0:	0607      	lsls	r7, r0, #24
 8006be2:	f103 0104 	add.w	r1, r3, #4
 8006be6:	6029      	str	r1, [r5, #0]
 8006be8:	d501      	bpl.n	8006bee <_printf_i+0xbe>
 8006bea:	681e      	ldr	r6, [r3, #0]
 8006bec:	e003      	b.n	8006bf6 <_printf_i+0xc6>
 8006bee:	0646      	lsls	r6, r0, #25
 8006bf0:	d5fb      	bpl.n	8006bea <_printf_i+0xba>
 8006bf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	da03      	bge.n	8006c02 <_printf_i+0xd2>
 8006bfa:	232d      	movs	r3, #45	; 0x2d
 8006bfc:	4276      	negs	r6, r6
 8006bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c02:	230a      	movs	r3, #10
 8006c04:	4859      	ldr	r0, [pc, #356]	; (8006d6c <_printf_i+0x23c>)
 8006c06:	e012      	b.n	8006c2e <_printf_i+0xfe>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	6820      	ldr	r0, [r4, #0]
 8006c0c:	1d19      	adds	r1, r3, #4
 8006c0e:	6029      	str	r1, [r5, #0]
 8006c10:	0605      	lsls	r5, r0, #24
 8006c12:	d501      	bpl.n	8006c18 <_printf_i+0xe8>
 8006c14:	681e      	ldr	r6, [r3, #0]
 8006c16:	e002      	b.n	8006c1e <_printf_i+0xee>
 8006c18:	0641      	lsls	r1, r0, #25
 8006c1a:	d5fb      	bpl.n	8006c14 <_printf_i+0xe4>
 8006c1c:	881e      	ldrh	r6, [r3, #0]
 8006c1e:	2f6f      	cmp	r7, #111	; 0x6f
 8006c20:	bf0c      	ite	eq
 8006c22:	2308      	moveq	r3, #8
 8006c24:	230a      	movne	r3, #10
 8006c26:	4851      	ldr	r0, [pc, #324]	; (8006d6c <_printf_i+0x23c>)
 8006c28:	2100      	movs	r1, #0
 8006c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c2e:	6865      	ldr	r5, [r4, #4]
 8006c30:	2d00      	cmp	r5, #0
 8006c32:	bfa8      	it	ge
 8006c34:	6821      	ldrge	r1, [r4, #0]
 8006c36:	60a5      	str	r5, [r4, #8]
 8006c38:	bfa4      	itt	ge
 8006c3a:	f021 0104 	bicge.w	r1, r1, #4
 8006c3e:	6021      	strge	r1, [r4, #0]
 8006c40:	b90e      	cbnz	r6, 8006c46 <_printf_i+0x116>
 8006c42:	2d00      	cmp	r5, #0
 8006c44:	d04b      	beq.n	8006cde <_printf_i+0x1ae>
 8006c46:	4615      	mov	r5, r2
 8006c48:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c4c:	fb03 6711 	mls	r7, r3, r1, r6
 8006c50:	5dc7      	ldrb	r7, [r0, r7]
 8006c52:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c56:	4637      	mov	r7, r6
 8006c58:	42bb      	cmp	r3, r7
 8006c5a:	460e      	mov	r6, r1
 8006c5c:	d9f4      	bls.n	8006c48 <_printf_i+0x118>
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d10b      	bne.n	8006c7a <_printf_i+0x14a>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	07de      	lsls	r6, r3, #31
 8006c66:	d508      	bpl.n	8006c7a <_printf_i+0x14a>
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	6861      	ldr	r1, [r4, #4]
 8006c6c:	4299      	cmp	r1, r3
 8006c6e:	bfde      	ittt	le
 8006c70:	2330      	movle	r3, #48	; 0x30
 8006c72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c7a:	1b52      	subs	r2, r2, r5
 8006c7c:	6122      	str	r2, [r4, #16]
 8006c7e:	464b      	mov	r3, r9
 8006c80:	4621      	mov	r1, r4
 8006c82:	4640      	mov	r0, r8
 8006c84:	f8cd a000 	str.w	sl, [sp]
 8006c88:	aa03      	add	r2, sp, #12
 8006c8a:	f7ff fedf 	bl	8006a4c <_printf_common>
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d14a      	bne.n	8006d28 <_printf_i+0x1f8>
 8006c92:	f04f 30ff 	mov.w	r0, #4294967295
 8006c96:	b004      	add	sp, #16
 8006c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	f043 0320 	orr.w	r3, r3, #32
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	2778      	movs	r7, #120	; 0x78
 8006ca6:	4832      	ldr	r0, [pc, #200]	; (8006d70 <_printf_i+0x240>)
 8006ca8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	6829      	ldr	r1, [r5, #0]
 8006cb0:	061f      	lsls	r7, r3, #24
 8006cb2:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cb6:	d402      	bmi.n	8006cbe <_printf_i+0x18e>
 8006cb8:	065f      	lsls	r7, r3, #25
 8006cba:	bf48      	it	mi
 8006cbc:	b2b6      	uxthmi	r6, r6
 8006cbe:	07df      	lsls	r7, r3, #31
 8006cc0:	bf48      	it	mi
 8006cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc6:	6029      	str	r1, [r5, #0]
 8006cc8:	bf48      	it	mi
 8006cca:	6023      	strmi	r3, [r4, #0]
 8006ccc:	b91e      	cbnz	r6, 8006cd6 <_printf_i+0x1a6>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	f023 0320 	bic.w	r3, r3, #32
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	2310      	movs	r3, #16
 8006cd8:	e7a6      	b.n	8006c28 <_printf_i+0xf8>
 8006cda:	4824      	ldr	r0, [pc, #144]	; (8006d6c <_printf_i+0x23c>)
 8006cdc:	e7e4      	b.n	8006ca8 <_printf_i+0x178>
 8006cde:	4615      	mov	r5, r2
 8006ce0:	e7bd      	b.n	8006c5e <_printf_i+0x12e>
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	6826      	ldr	r6, [r4, #0]
 8006ce6:	1d18      	adds	r0, r3, #4
 8006ce8:	6961      	ldr	r1, [r4, #20]
 8006cea:	6028      	str	r0, [r5, #0]
 8006cec:	0635      	lsls	r5, r6, #24
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	d501      	bpl.n	8006cf6 <_printf_i+0x1c6>
 8006cf2:	6019      	str	r1, [r3, #0]
 8006cf4:	e002      	b.n	8006cfc <_printf_i+0x1cc>
 8006cf6:	0670      	lsls	r0, r6, #25
 8006cf8:	d5fb      	bpl.n	8006cf2 <_printf_i+0x1c2>
 8006cfa:	8019      	strh	r1, [r3, #0]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4615      	mov	r5, r2
 8006d00:	6123      	str	r3, [r4, #16]
 8006d02:	e7bc      	b.n	8006c7e <_printf_i+0x14e>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	2100      	movs	r1, #0
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	602a      	str	r2, [r5, #0]
 8006d0c:	681d      	ldr	r5, [r3, #0]
 8006d0e:	6862      	ldr	r2, [r4, #4]
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 f9d4 	bl	80070be <memchr>
 8006d16:	b108      	cbz	r0, 8006d1c <_printf_i+0x1ec>
 8006d18:	1b40      	subs	r0, r0, r5
 8006d1a:	6060      	str	r0, [r4, #4]
 8006d1c:	6863      	ldr	r3, [r4, #4]
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	2300      	movs	r3, #0
 8006d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d26:	e7aa      	b.n	8006c7e <_printf_i+0x14e>
 8006d28:	462a      	mov	r2, r5
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	47d0      	blx	sl
 8006d32:	3001      	adds	r0, #1
 8006d34:	d0ad      	beq.n	8006c92 <_printf_i+0x162>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	079b      	lsls	r3, r3, #30
 8006d3a:	d413      	bmi.n	8006d64 <_printf_i+0x234>
 8006d3c:	68e0      	ldr	r0, [r4, #12]
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	4298      	cmp	r0, r3
 8006d42:	bfb8      	it	lt
 8006d44:	4618      	movlt	r0, r3
 8006d46:	e7a6      	b.n	8006c96 <_printf_i+0x166>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4632      	mov	r2, r6
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	4640      	mov	r0, r8
 8006d50:	47d0      	blx	sl
 8006d52:	3001      	adds	r0, #1
 8006d54:	d09d      	beq.n	8006c92 <_printf_i+0x162>
 8006d56:	3501      	adds	r5, #1
 8006d58:	68e3      	ldr	r3, [r4, #12]
 8006d5a:	9903      	ldr	r1, [sp, #12]
 8006d5c:	1a5b      	subs	r3, r3, r1
 8006d5e:	42ab      	cmp	r3, r5
 8006d60:	dcf2      	bgt.n	8006d48 <_printf_i+0x218>
 8006d62:	e7eb      	b.n	8006d3c <_printf_i+0x20c>
 8006d64:	2500      	movs	r5, #0
 8006d66:	f104 0619 	add.w	r6, r4, #25
 8006d6a:	e7f5      	b.n	8006d58 <_printf_i+0x228>
 8006d6c:	080099c2 	.word	0x080099c2
 8006d70:	080099d3 	.word	0x080099d3

08006d74 <std>:
 8006d74:	2300      	movs	r3, #0
 8006d76:	b510      	push	{r4, lr}
 8006d78:	4604      	mov	r4, r0
 8006d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d82:	6083      	str	r3, [r0, #8]
 8006d84:	8181      	strh	r1, [r0, #12]
 8006d86:	6643      	str	r3, [r0, #100]	; 0x64
 8006d88:	81c2      	strh	r2, [r0, #14]
 8006d8a:	6183      	str	r3, [r0, #24]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	2208      	movs	r2, #8
 8006d90:	305c      	adds	r0, #92	; 0x5c
 8006d92:	f000 f914 	bl	8006fbe <memset>
 8006d96:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <std+0x58>)
 8006d98:	6224      	str	r4, [r4, #32]
 8006d9a:	6263      	str	r3, [r4, #36]	; 0x24
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <std+0x5c>)
 8006d9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006da0:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <std+0x60>)
 8006da2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006da4:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <std+0x64>)
 8006da6:	6323      	str	r3, [r4, #48]	; 0x30
 8006da8:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <std+0x68>)
 8006daa:	429c      	cmp	r4, r3
 8006dac:	d006      	beq.n	8006dbc <std+0x48>
 8006dae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006db2:	4294      	cmp	r4, r2
 8006db4:	d002      	beq.n	8006dbc <std+0x48>
 8006db6:	33d0      	adds	r3, #208	; 0xd0
 8006db8:	429c      	cmp	r4, r3
 8006dba:	d105      	bne.n	8006dc8 <std+0x54>
 8006dbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc4:	f000 b978 	b.w	80070b8 <__retarget_lock_init_recursive>
 8006dc8:	bd10      	pop	{r4, pc}
 8006dca:	bf00      	nop
 8006dcc:	08006f39 	.word	0x08006f39
 8006dd0:	08006f5b 	.word	0x08006f5b
 8006dd4:	08006f93 	.word	0x08006f93
 8006dd8:	08006fb7 	.word	0x08006fb7
 8006ddc:	20000924 	.word	0x20000924

08006de0 <stdio_exit_handler>:
 8006de0:	4a02      	ldr	r2, [pc, #8]	; (8006dec <stdio_exit_handler+0xc>)
 8006de2:	4903      	ldr	r1, [pc, #12]	; (8006df0 <stdio_exit_handler+0x10>)
 8006de4:	4803      	ldr	r0, [pc, #12]	; (8006df4 <stdio_exit_handler+0x14>)
 8006de6:	f000 b869 	b.w	8006ebc <_fwalk_sglue>
 8006dea:	bf00      	nop
 8006dec:	20000070 	.word	0x20000070
 8006df0:	08008a55 	.word	0x08008a55
 8006df4:	2000007c 	.word	0x2000007c

08006df8 <cleanup_stdio>:
 8006df8:	6841      	ldr	r1, [r0, #4]
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <cleanup_stdio+0x34>)
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	4299      	cmp	r1, r3
 8006e00:	4604      	mov	r4, r0
 8006e02:	d001      	beq.n	8006e08 <cleanup_stdio+0x10>
 8006e04:	f001 fe26 	bl	8008a54 <_fflush_r>
 8006e08:	68a1      	ldr	r1, [r4, #8]
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <cleanup_stdio+0x38>)
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	d002      	beq.n	8006e16 <cleanup_stdio+0x1e>
 8006e10:	4620      	mov	r0, r4
 8006e12:	f001 fe1f 	bl	8008a54 <_fflush_r>
 8006e16:	68e1      	ldr	r1, [r4, #12]
 8006e18:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <cleanup_stdio+0x3c>)
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	d004      	beq.n	8006e28 <cleanup_stdio+0x30>
 8006e1e:	4620      	mov	r0, r4
 8006e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e24:	f001 be16 	b.w	8008a54 <_fflush_r>
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000924 	.word	0x20000924
 8006e30:	2000098c 	.word	0x2000098c
 8006e34:	200009f4 	.word	0x200009f4

08006e38 <global_stdio_init.part.0>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <global_stdio_init.part.0+0x30>)
 8006e3c:	4c0b      	ldr	r4, [pc, #44]	; (8006e6c <global_stdio_init.part.0+0x34>)
 8006e3e:	4a0c      	ldr	r2, [pc, #48]	; (8006e70 <global_stdio_init.part.0+0x38>)
 8006e40:	4620      	mov	r0, r4
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	2104      	movs	r1, #4
 8006e46:	2200      	movs	r2, #0
 8006e48:	f7ff ff94 	bl	8006d74 <std>
 8006e4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e50:	2201      	movs	r2, #1
 8006e52:	2109      	movs	r1, #9
 8006e54:	f7ff ff8e 	bl	8006d74 <std>
 8006e58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e62:	2112      	movs	r1, #18
 8006e64:	f7ff bf86 	b.w	8006d74 <std>
 8006e68:	20000a5c 	.word	0x20000a5c
 8006e6c:	20000924 	.word	0x20000924
 8006e70:	08006de1 	.word	0x08006de1

08006e74 <__sfp_lock_acquire>:
 8006e74:	4801      	ldr	r0, [pc, #4]	; (8006e7c <__sfp_lock_acquire+0x8>)
 8006e76:	f000 b920 	b.w	80070ba <__retarget_lock_acquire_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20000a65 	.word	0x20000a65

08006e80 <__sfp_lock_release>:
 8006e80:	4801      	ldr	r0, [pc, #4]	; (8006e88 <__sfp_lock_release+0x8>)
 8006e82:	f000 b91b 	b.w	80070bc <__retarget_lock_release_recursive>
 8006e86:	bf00      	nop
 8006e88:	20000a65 	.word	0x20000a65

08006e8c <__sinit>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	4604      	mov	r4, r0
 8006e90:	f7ff fff0 	bl	8006e74 <__sfp_lock_acquire>
 8006e94:	6a23      	ldr	r3, [r4, #32]
 8006e96:	b11b      	cbz	r3, 8006ea0 <__sinit+0x14>
 8006e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9c:	f7ff bff0 	b.w	8006e80 <__sfp_lock_release>
 8006ea0:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <__sinit+0x28>)
 8006ea2:	6223      	str	r3, [r4, #32]
 8006ea4:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <__sinit+0x2c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f5      	bne.n	8006e98 <__sinit+0xc>
 8006eac:	f7ff ffc4 	bl	8006e38 <global_stdio_init.part.0>
 8006eb0:	e7f2      	b.n	8006e98 <__sinit+0xc>
 8006eb2:	bf00      	nop
 8006eb4:	08006df9 	.word	0x08006df9
 8006eb8:	20000a5c 	.word	0x20000a5c

08006ebc <_fwalk_sglue>:
 8006ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	4688      	mov	r8, r1
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8006ed0:	d505      	bpl.n	8006ede <_fwalk_sglue+0x22>
 8006ed2:	6824      	ldr	r4, [r4, #0]
 8006ed4:	2c00      	cmp	r4, #0
 8006ed6:	d1f7      	bne.n	8006ec8 <_fwalk_sglue+0xc>
 8006ed8:	4630      	mov	r0, r6
 8006eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d907      	bls.n	8006ef4 <_fwalk_sglue+0x38>
 8006ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	d003      	beq.n	8006ef4 <_fwalk_sglue+0x38>
 8006eec:	4629      	mov	r1, r5
 8006eee:	4638      	mov	r0, r7
 8006ef0:	47c0      	blx	r8
 8006ef2:	4306      	orrs	r6, r0
 8006ef4:	3568      	adds	r5, #104	; 0x68
 8006ef6:	e7e9      	b.n	8006ecc <_fwalk_sglue+0x10>

08006ef8 <siprintf>:
 8006ef8:	b40e      	push	{r1, r2, r3}
 8006efa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006efe:	b500      	push	{lr}
 8006f00:	b09c      	sub	sp, #112	; 0x70
 8006f02:	ab1d      	add	r3, sp, #116	; 0x74
 8006f04:	9002      	str	r0, [sp, #8]
 8006f06:	9006      	str	r0, [sp, #24]
 8006f08:	9107      	str	r1, [sp, #28]
 8006f0a:	9104      	str	r1, [sp, #16]
 8006f0c:	4808      	ldr	r0, [pc, #32]	; (8006f30 <siprintf+0x38>)
 8006f0e:	4909      	ldr	r1, [pc, #36]	; (8006f34 <siprintf+0x3c>)
 8006f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f14:	9105      	str	r1, [sp, #20]
 8006f16:	6800      	ldr	r0, [r0, #0]
 8006f18:	a902      	add	r1, sp, #8
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	f001 fc1a 	bl	8008754 <_svfiprintf_r>
 8006f20:	2200      	movs	r2, #0
 8006f22:	9b02      	ldr	r3, [sp, #8]
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	b01c      	add	sp, #112	; 0x70
 8006f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f2c:	b003      	add	sp, #12
 8006f2e:	4770      	bx	lr
 8006f30:	200000c8 	.word	0x200000c8
 8006f34:	ffff0208 	.word	0xffff0208

08006f38 <__sread>:
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f40:	f000 f86c 	bl	800701c <_read_r>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	bfab      	itete	ge
 8006f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f4c:	181b      	addge	r3, r3, r0
 8006f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f52:	bfac      	ite	ge
 8006f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f56:	81a3      	strhlt	r3, [r4, #12]
 8006f58:	bd10      	pop	{r4, pc}

08006f5a <__swrite>:
 8006f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5e:	461f      	mov	r7, r3
 8006f60:	898b      	ldrh	r3, [r1, #12]
 8006f62:	4605      	mov	r5, r0
 8006f64:	05db      	lsls	r3, r3, #23
 8006f66:	460c      	mov	r4, r1
 8006f68:	4616      	mov	r6, r2
 8006f6a:	d505      	bpl.n	8006f78 <__swrite+0x1e>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f74:	f000 f840 	bl	8006ff8 <_lseek_r>
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f80:	81a3      	strh	r3, [r4, #12]
 8006f82:	4628      	mov	r0, r5
 8006f84:	463b      	mov	r3, r7
 8006f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8e:	f000 b857 	b.w	8007040 <_write_r>

08006f92 <__sseek>:
 8006f92:	b510      	push	{r4, lr}
 8006f94:	460c      	mov	r4, r1
 8006f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9a:	f000 f82d 	bl	8006ff8 <_lseek_r>
 8006f9e:	1c43      	adds	r3, r0, #1
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	bf15      	itete	ne
 8006fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fae:	81a3      	strheq	r3, [r4, #12]
 8006fb0:	bf18      	it	ne
 8006fb2:	81a3      	strhne	r3, [r4, #12]
 8006fb4:	bd10      	pop	{r4, pc}

08006fb6 <__sclose>:
 8006fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fba:	f000 b80d 	b.w	8006fd8 <_close_r>

08006fbe <memset>:
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4402      	add	r2, r0
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d100      	bne.n	8006fc8 <memset+0xa>
 8006fc6:	4770      	bx	lr
 8006fc8:	f803 1b01 	strb.w	r1, [r3], #1
 8006fcc:	e7f9      	b.n	8006fc2 <memset+0x4>
	...

08006fd0 <_localeconv_r>:
 8006fd0:	4800      	ldr	r0, [pc, #0]	; (8006fd4 <_localeconv_r+0x4>)
 8006fd2:	4770      	bx	lr
 8006fd4:	200001bc 	.word	0x200001bc

08006fd8 <_close_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4d05      	ldr	r5, [pc, #20]	; (8006ff4 <_close_r+0x1c>)
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fb ff85 	bl	8002ef2 <_close>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_close_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_close_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20000a60 	.word	0x20000a60

08006ff8 <_lseek_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	4611      	mov	r1, r2
 8007000:	2200      	movs	r2, #0
 8007002:	4d05      	ldr	r5, [pc, #20]	; (8007018 <_lseek_r+0x20>)
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	f7fb ff97 	bl	8002f3a <_lseek>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_lseek_r+0x1e>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_lseek_r+0x1e>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	20000a60 	.word	0x20000a60

0800701c <_read_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	2200      	movs	r2, #0
 8007026:	4d05      	ldr	r5, [pc, #20]	; (800703c <_read_r+0x20>)
 8007028:	602a      	str	r2, [r5, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	f7fb ff28 	bl	8002e80 <_read>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_read_r+0x1e>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_read_r+0x1e>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20000a60 	.word	0x20000a60

08007040 <_write_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	4611      	mov	r1, r2
 8007048:	2200      	movs	r2, #0
 800704a:	4d05      	ldr	r5, [pc, #20]	; (8007060 <_write_r+0x20>)
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fb ff33 	bl	8002eba <_write>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_write_r+0x1e>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_write_r+0x1e>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000a60 	.word	0x20000a60

08007064 <__errno>:
 8007064:	4b01      	ldr	r3, [pc, #4]	; (800706c <__errno+0x8>)
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	200000c8 	.word	0x200000c8

08007070 <__libc_init_array>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	2600      	movs	r6, #0
 8007074:	4d0c      	ldr	r5, [pc, #48]	; (80070a8 <__libc_init_array+0x38>)
 8007076:	4c0d      	ldr	r4, [pc, #52]	; (80070ac <__libc_init_array+0x3c>)
 8007078:	1b64      	subs	r4, r4, r5
 800707a:	10a4      	asrs	r4, r4, #2
 800707c:	42a6      	cmp	r6, r4
 800707e:	d109      	bne.n	8007094 <__libc_init_array+0x24>
 8007080:	f002 f888 	bl	8009194 <_init>
 8007084:	2600      	movs	r6, #0
 8007086:	4d0a      	ldr	r5, [pc, #40]	; (80070b0 <__libc_init_array+0x40>)
 8007088:	4c0a      	ldr	r4, [pc, #40]	; (80070b4 <__libc_init_array+0x44>)
 800708a:	1b64      	subs	r4, r4, r5
 800708c:	10a4      	asrs	r4, r4, #2
 800708e:	42a6      	cmp	r6, r4
 8007090:	d105      	bne.n	800709e <__libc_init_array+0x2e>
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	f855 3b04 	ldr.w	r3, [r5], #4
 8007098:	4798      	blx	r3
 800709a:	3601      	adds	r6, #1
 800709c:	e7ee      	b.n	800707c <__libc_init_array+0xc>
 800709e:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a2:	4798      	blx	r3
 80070a4:	3601      	adds	r6, #1
 80070a6:	e7f2      	b.n	800708e <__libc_init_array+0x1e>
 80070a8:	08009d24 	.word	0x08009d24
 80070ac:	08009d24 	.word	0x08009d24
 80070b0:	08009d24 	.word	0x08009d24
 80070b4:	08009d2c 	.word	0x08009d2c

080070b8 <__retarget_lock_init_recursive>:
 80070b8:	4770      	bx	lr

080070ba <__retarget_lock_acquire_recursive>:
 80070ba:	4770      	bx	lr

080070bc <__retarget_lock_release_recursive>:
 80070bc:	4770      	bx	lr

080070be <memchr>:
 80070be:	4603      	mov	r3, r0
 80070c0:	b510      	push	{r4, lr}
 80070c2:	b2c9      	uxtb	r1, r1
 80070c4:	4402      	add	r2, r0
 80070c6:	4293      	cmp	r3, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	d101      	bne.n	80070d0 <memchr+0x12>
 80070cc:	2000      	movs	r0, #0
 80070ce:	e003      	b.n	80070d8 <memchr+0x1a>
 80070d0:	7804      	ldrb	r4, [r0, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	428c      	cmp	r4, r1
 80070d6:	d1f6      	bne.n	80070c6 <memchr+0x8>
 80070d8:	bd10      	pop	{r4, pc}

080070da <quorem>:
 80070da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070de:	6903      	ldr	r3, [r0, #16]
 80070e0:	690c      	ldr	r4, [r1, #16]
 80070e2:	4607      	mov	r7, r0
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	db7f      	blt.n	80071e8 <quorem+0x10e>
 80070e8:	3c01      	subs	r4, #1
 80070ea:	f100 0514 	add.w	r5, r0, #20
 80070ee:	f101 0814 	add.w	r8, r1, #20
 80070f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007100:	3301      	adds	r3, #1
 8007102:	429a      	cmp	r2, r3
 8007104:	fbb2 f6f3 	udiv	r6, r2, r3
 8007108:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800710c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007110:	d331      	bcc.n	8007176 <quorem+0x9c>
 8007112:	f04f 0e00 	mov.w	lr, #0
 8007116:	4640      	mov	r0, r8
 8007118:	46ac      	mov	ip, r5
 800711a:	46f2      	mov	sl, lr
 800711c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007120:	b293      	uxth	r3, r2
 8007122:	fb06 e303 	mla	r3, r6, r3, lr
 8007126:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800712a:	0c1a      	lsrs	r2, r3, #16
 800712c:	b29b      	uxth	r3, r3
 800712e:	fb06 220e 	mla	r2, r6, lr, r2
 8007132:	ebaa 0303 	sub.w	r3, sl, r3
 8007136:	f8dc a000 	ldr.w	sl, [ip]
 800713a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800713e:	fa1f fa8a 	uxth.w	sl, sl
 8007142:	4453      	add	r3, sl
 8007144:	f8dc a000 	ldr.w	sl, [ip]
 8007148:	b292      	uxth	r2, r2
 800714a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800714e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007152:	b29b      	uxth	r3, r3
 8007154:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007158:	4581      	cmp	r9, r0
 800715a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800715e:	f84c 3b04 	str.w	r3, [ip], #4
 8007162:	d2db      	bcs.n	800711c <quorem+0x42>
 8007164:	f855 300b 	ldr.w	r3, [r5, fp]
 8007168:	b92b      	cbnz	r3, 8007176 <quorem+0x9c>
 800716a:	9b01      	ldr	r3, [sp, #4]
 800716c:	3b04      	subs	r3, #4
 800716e:	429d      	cmp	r5, r3
 8007170:	461a      	mov	r2, r3
 8007172:	d32d      	bcc.n	80071d0 <quorem+0xf6>
 8007174:	613c      	str	r4, [r7, #16]
 8007176:	4638      	mov	r0, r7
 8007178:	f001 f994 	bl	80084a4 <__mcmp>
 800717c:	2800      	cmp	r0, #0
 800717e:	db23      	blt.n	80071c8 <quorem+0xee>
 8007180:	4629      	mov	r1, r5
 8007182:	2000      	movs	r0, #0
 8007184:	3601      	adds	r6, #1
 8007186:	f858 2b04 	ldr.w	r2, [r8], #4
 800718a:	f8d1 c000 	ldr.w	ip, [r1]
 800718e:	b293      	uxth	r3, r2
 8007190:	1ac3      	subs	r3, r0, r3
 8007192:	0c12      	lsrs	r2, r2, #16
 8007194:	fa1f f08c 	uxth.w	r0, ip
 8007198:	4403      	add	r3, r0
 800719a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800719e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071a8:	45c1      	cmp	r9, r8
 80071aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071ae:	f841 3b04 	str.w	r3, [r1], #4
 80071b2:	d2e8      	bcs.n	8007186 <quorem+0xac>
 80071b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071bc:	b922      	cbnz	r2, 80071c8 <quorem+0xee>
 80071be:	3b04      	subs	r3, #4
 80071c0:	429d      	cmp	r5, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	d30a      	bcc.n	80071dc <quorem+0x102>
 80071c6:	613c      	str	r4, [r7, #16]
 80071c8:	4630      	mov	r0, r6
 80071ca:	b003      	add	sp, #12
 80071cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	3b04      	subs	r3, #4
 80071d4:	2a00      	cmp	r2, #0
 80071d6:	d1cd      	bne.n	8007174 <quorem+0x9a>
 80071d8:	3c01      	subs	r4, #1
 80071da:	e7c8      	b.n	800716e <quorem+0x94>
 80071dc:	6812      	ldr	r2, [r2, #0]
 80071de:	3b04      	subs	r3, #4
 80071e0:	2a00      	cmp	r2, #0
 80071e2:	d1f0      	bne.n	80071c6 <quorem+0xec>
 80071e4:	3c01      	subs	r4, #1
 80071e6:	e7eb      	b.n	80071c0 <quorem+0xe6>
 80071e8:	2000      	movs	r0, #0
 80071ea:	e7ee      	b.n	80071ca <quorem+0xf0>
 80071ec:	0000      	movs	r0, r0
	...

080071f0 <_dtoa_r>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	4616      	mov	r6, r2
 80071f6:	461f      	mov	r7, r3
 80071f8:	69c4      	ldr	r4, [r0, #28]
 80071fa:	b099      	sub	sp, #100	; 0x64
 80071fc:	4605      	mov	r5, r0
 80071fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007202:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007206:	b974      	cbnz	r4, 8007226 <_dtoa_r+0x36>
 8007208:	2010      	movs	r0, #16
 800720a:	f000 fe1d 	bl	8007e48 <malloc>
 800720e:	4602      	mov	r2, r0
 8007210:	61e8      	str	r0, [r5, #28]
 8007212:	b920      	cbnz	r0, 800721e <_dtoa_r+0x2e>
 8007214:	21ef      	movs	r1, #239	; 0xef
 8007216:	4bac      	ldr	r3, [pc, #688]	; (80074c8 <_dtoa_r+0x2d8>)
 8007218:	48ac      	ldr	r0, [pc, #688]	; (80074cc <_dtoa_r+0x2dc>)
 800721a:	f001 fc7b 	bl	8008b14 <__assert_func>
 800721e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007222:	6004      	str	r4, [r0, #0]
 8007224:	60c4      	str	r4, [r0, #12]
 8007226:	69eb      	ldr	r3, [r5, #28]
 8007228:	6819      	ldr	r1, [r3, #0]
 800722a:	b151      	cbz	r1, 8007242 <_dtoa_r+0x52>
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	2301      	movs	r3, #1
 8007230:	4093      	lsls	r3, r2
 8007232:	604a      	str	r2, [r1, #4]
 8007234:	608b      	str	r3, [r1, #8]
 8007236:	4628      	mov	r0, r5
 8007238:	f000 fefa 	bl	8008030 <_Bfree>
 800723c:	2200      	movs	r2, #0
 800723e:	69eb      	ldr	r3, [r5, #28]
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	1e3b      	subs	r3, r7, #0
 8007244:	bfaf      	iteee	ge
 8007246:	2300      	movge	r3, #0
 8007248:	2201      	movlt	r2, #1
 800724a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800724e:	9305      	strlt	r3, [sp, #20]
 8007250:	bfa8      	it	ge
 8007252:	f8c8 3000 	strge.w	r3, [r8]
 8007256:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800725a:	4b9d      	ldr	r3, [pc, #628]	; (80074d0 <_dtoa_r+0x2e0>)
 800725c:	bfb8      	it	lt
 800725e:	f8c8 2000 	strlt.w	r2, [r8]
 8007262:	ea33 0309 	bics.w	r3, r3, r9
 8007266:	d119      	bne.n	800729c <_dtoa_r+0xac>
 8007268:	f242 730f 	movw	r3, #9999	; 0x270f
 800726c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007274:	4333      	orrs	r3, r6
 8007276:	f000 8589 	beq.w	8007d8c <_dtoa_r+0xb9c>
 800727a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800727c:	b953      	cbnz	r3, 8007294 <_dtoa_r+0xa4>
 800727e:	4b95      	ldr	r3, [pc, #596]	; (80074d4 <_dtoa_r+0x2e4>)
 8007280:	e023      	b.n	80072ca <_dtoa_r+0xda>
 8007282:	4b95      	ldr	r3, [pc, #596]	; (80074d8 <_dtoa_r+0x2e8>)
 8007284:	9303      	str	r3, [sp, #12]
 8007286:	3308      	adds	r3, #8
 8007288:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	9803      	ldr	r0, [sp, #12]
 800728e:	b019      	add	sp, #100	; 0x64
 8007290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007294:	4b8f      	ldr	r3, [pc, #572]	; (80074d4 <_dtoa_r+0x2e4>)
 8007296:	9303      	str	r3, [sp, #12]
 8007298:	3303      	adds	r3, #3
 800729a:	e7f5      	b.n	8007288 <_dtoa_r+0x98>
 800729c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80072a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80072a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072a8:	2200      	movs	r2, #0
 80072aa:	2300      	movs	r3, #0
 80072ac:	f7f9 fb7c 	bl	80009a8 <__aeabi_dcmpeq>
 80072b0:	4680      	mov	r8, r0
 80072b2:	b160      	cbz	r0, 80072ce <_dtoa_r+0xde>
 80072b4:	2301      	movs	r3, #1
 80072b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8562 	beq.w	8007d86 <_dtoa_r+0xb96>
 80072c2:	4b86      	ldr	r3, [pc, #536]	; (80074dc <_dtoa_r+0x2ec>)
 80072c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	9303      	str	r3, [sp, #12]
 80072cc:	e7de      	b.n	800728c <_dtoa_r+0x9c>
 80072ce:	ab16      	add	r3, sp, #88	; 0x58
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	ab17      	add	r3, sp, #92	; 0x5c
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	4628      	mov	r0, r5
 80072d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80072dc:	f001 f98a 	bl	80085f4 <__d2b>
 80072e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80072e4:	4682      	mov	sl, r0
 80072e6:	2c00      	cmp	r4, #0
 80072e8:	d07e      	beq.n	80073e8 <_dtoa_r+0x1f8>
 80072ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80072f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072f8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80072fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007300:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007304:	4619      	mov	r1, r3
 8007306:	2200      	movs	r2, #0
 8007308:	4b75      	ldr	r3, [pc, #468]	; (80074e0 <_dtoa_r+0x2f0>)
 800730a:	f7f8 ff2d 	bl	8000168 <__aeabi_dsub>
 800730e:	a368      	add	r3, pc, #416	; (adr r3, 80074b0 <_dtoa_r+0x2c0>)
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f7f9 f8e0 	bl	80004d8 <__aeabi_dmul>
 8007318:	a367      	add	r3, pc, #412	; (adr r3, 80074b8 <_dtoa_r+0x2c8>)
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	f7f8 ff25 	bl	800016c <__adddf3>
 8007322:	4606      	mov	r6, r0
 8007324:	4620      	mov	r0, r4
 8007326:	460f      	mov	r7, r1
 8007328:	f7f9 f86c 	bl	8000404 <__aeabi_i2d>
 800732c:	a364      	add	r3, pc, #400	; (adr r3, 80074c0 <_dtoa_r+0x2d0>)
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f7f9 f8d1 	bl	80004d8 <__aeabi_dmul>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4630      	mov	r0, r6
 800733c:	4639      	mov	r1, r7
 800733e:	f7f8 ff15 	bl	800016c <__adddf3>
 8007342:	4606      	mov	r6, r0
 8007344:	460f      	mov	r7, r1
 8007346:	f7f9 fb77 	bl	8000a38 <__aeabi_d2iz>
 800734a:	2200      	movs	r2, #0
 800734c:	4683      	mov	fp, r0
 800734e:	2300      	movs	r3, #0
 8007350:	4630      	mov	r0, r6
 8007352:	4639      	mov	r1, r7
 8007354:	f7f9 fb32 	bl	80009bc <__aeabi_dcmplt>
 8007358:	b148      	cbz	r0, 800736e <_dtoa_r+0x17e>
 800735a:	4658      	mov	r0, fp
 800735c:	f7f9 f852 	bl	8000404 <__aeabi_i2d>
 8007360:	4632      	mov	r2, r6
 8007362:	463b      	mov	r3, r7
 8007364:	f7f9 fb20 	bl	80009a8 <__aeabi_dcmpeq>
 8007368:	b908      	cbnz	r0, 800736e <_dtoa_r+0x17e>
 800736a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800736e:	f1bb 0f16 	cmp.w	fp, #22
 8007372:	d857      	bhi.n	8007424 <_dtoa_r+0x234>
 8007374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007378:	4b5a      	ldr	r3, [pc, #360]	; (80074e4 <_dtoa_r+0x2f4>)
 800737a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f7f9 fb1b 	bl	80009bc <__aeabi_dcmplt>
 8007386:	2800      	cmp	r0, #0
 8007388:	d04e      	beq.n	8007428 <_dtoa_r+0x238>
 800738a:	2300      	movs	r3, #0
 800738c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007390:	930f      	str	r3, [sp, #60]	; 0x3c
 8007392:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007394:	1b1b      	subs	r3, r3, r4
 8007396:	1e5a      	subs	r2, r3, #1
 8007398:	bf46      	itte	mi
 800739a:	f1c3 0901 	rsbmi	r9, r3, #1
 800739e:	2300      	movmi	r3, #0
 80073a0:	f04f 0900 	movpl.w	r9, #0
 80073a4:	9209      	str	r2, [sp, #36]	; 0x24
 80073a6:	bf48      	it	mi
 80073a8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80073aa:	f1bb 0f00 	cmp.w	fp, #0
 80073ae:	db3d      	blt.n	800742c <_dtoa_r+0x23c>
 80073b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80073b6:	445b      	add	r3, fp
 80073b8:	9309      	str	r3, [sp, #36]	; 0x24
 80073ba:	2300      	movs	r3, #0
 80073bc:	930a      	str	r3, [sp, #40]	; 0x28
 80073be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073c0:	2b09      	cmp	r3, #9
 80073c2:	d867      	bhi.n	8007494 <_dtoa_r+0x2a4>
 80073c4:	2b05      	cmp	r3, #5
 80073c6:	bfc4      	itt	gt
 80073c8:	3b04      	subgt	r3, #4
 80073ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 80073cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073ce:	bfc8      	it	gt
 80073d0:	2400      	movgt	r4, #0
 80073d2:	f1a3 0302 	sub.w	r3, r3, #2
 80073d6:	bfd8      	it	le
 80073d8:	2401      	movle	r4, #1
 80073da:	2b03      	cmp	r3, #3
 80073dc:	f200 8086 	bhi.w	80074ec <_dtoa_r+0x2fc>
 80073e0:	e8df f003 	tbb	[pc, r3]
 80073e4:	5637392c 	.word	0x5637392c
 80073e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80073ec:	441c      	add	r4, r3
 80073ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	bfc1      	itttt	gt
 80073f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073fa:	fa09 f903 	lslgt.w	r9, r9, r3
 80073fe:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007402:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007406:	bfd6      	itet	le
 8007408:	f1c3 0320 	rsble	r3, r3, #32
 800740c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007410:	fa06 f003 	lslle.w	r0, r6, r3
 8007414:	f7f8 ffe6 	bl	80003e4 <__aeabi_ui2d>
 8007418:	2201      	movs	r2, #1
 800741a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800741e:	3c01      	subs	r4, #1
 8007420:	9213      	str	r2, [sp, #76]	; 0x4c
 8007422:	e76f      	b.n	8007304 <_dtoa_r+0x114>
 8007424:	2301      	movs	r3, #1
 8007426:	e7b3      	b.n	8007390 <_dtoa_r+0x1a0>
 8007428:	900f      	str	r0, [sp, #60]	; 0x3c
 800742a:	e7b2      	b.n	8007392 <_dtoa_r+0x1a2>
 800742c:	f1cb 0300 	rsb	r3, fp, #0
 8007430:	930a      	str	r3, [sp, #40]	; 0x28
 8007432:	2300      	movs	r3, #0
 8007434:	eba9 090b 	sub.w	r9, r9, fp
 8007438:	930e      	str	r3, [sp, #56]	; 0x38
 800743a:	e7c0      	b.n	80073be <_dtoa_r+0x1ce>
 800743c:	2300      	movs	r3, #0
 800743e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007440:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007442:	2b00      	cmp	r3, #0
 8007444:	dc55      	bgt.n	80074f2 <_dtoa_r+0x302>
 8007446:	2301      	movs	r3, #1
 8007448:	461a      	mov	r2, r3
 800744a:	9306      	str	r3, [sp, #24]
 800744c:	9308      	str	r3, [sp, #32]
 800744e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007450:	e00b      	b.n	800746a <_dtoa_r+0x27a>
 8007452:	2301      	movs	r3, #1
 8007454:	e7f3      	b.n	800743e <_dtoa_r+0x24e>
 8007456:	2300      	movs	r3, #0
 8007458:	930b      	str	r3, [sp, #44]	; 0x2c
 800745a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800745c:	445b      	add	r3, fp
 800745e:	9306      	str	r3, [sp, #24]
 8007460:	3301      	adds	r3, #1
 8007462:	2b01      	cmp	r3, #1
 8007464:	9308      	str	r3, [sp, #32]
 8007466:	bfb8      	it	lt
 8007468:	2301      	movlt	r3, #1
 800746a:	2100      	movs	r1, #0
 800746c:	2204      	movs	r2, #4
 800746e:	69e8      	ldr	r0, [r5, #28]
 8007470:	f102 0614 	add.w	r6, r2, #20
 8007474:	429e      	cmp	r6, r3
 8007476:	d940      	bls.n	80074fa <_dtoa_r+0x30a>
 8007478:	6041      	str	r1, [r0, #4]
 800747a:	4628      	mov	r0, r5
 800747c:	f000 fd98 	bl	8007fb0 <_Balloc>
 8007480:	9003      	str	r0, [sp, #12]
 8007482:	2800      	cmp	r0, #0
 8007484:	d13c      	bne.n	8007500 <_dtoa_r+0x310>
 8007486:	4602      	mov	r2, r0
 8007488:	f240 11af 	movw	r1, #431	; 0x1af
 800748c:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <_dtoa_r+0x2f8>)
 800748e:	e6c3      	b.n	8007218 <_dtoa_r+0x28>
 8007490:	2301      	movs	r3, #1
 8007492:	e7e1      	b.n	8007458 <_dtoa_r+0x268>
 8007494:	2401      	movs	r4, #1
 8007496:	2300      	movs	r3, #0
 8007498:	940b      	str	r4, [sp, #44]	; 0x2c
 800749a:	9322      	str	r3, [sp, #136]	; 0x88
 800749c:	f04f 33ff 	mov.w	r3, #4294967295
 80074a0:	2200      	movs	r2, #0
 80074a2:	9306      	str	r3, [sp, #24]
 80074a4:	9308      	str	r3, [sp, #32]
 80074a6:	2312      	movs	r3, #18
 80074a8:	e7d1      	b.n	800744e <_dtoa_r+0x25e>
 80074aa:	bf00      	nop
 80074ac:	f3af 8000 	nop.w
 80074b0:	636f4361 	.word	0x636f4361
 80074b4:	3fd287a7 	.word	0x3fd287a7
 80074b8:	8b60c8b3 	.word	0x8b60c8b3
 80074bc:	3fc68a28 	.word	0x3fc68a28
 80074c0:	509f79fb 	.word	0x509f79fb
 80074c4:	3fd34413 	.word	0x3fd34413
 80074c8:	080099f1 	.word	0x080099f1
 80074cc:	08009a08 	.word	0x08009a08
 80074d0:	7ff00000 	.word	0x7ff00000
 80074d4:	080099ed 	.word	0x080099ed
 80074d8:	080099e4 	.word	0x080099e4
 80074dc:	080099c1 	.word	0x080099c1
 80074e0:	3ff80000 	.word	0x3ff80000
 80074e4:	08009af8 	.word	0x08009af8
 80074e8:	08009a60 	.word	0x08009a60
 80074ec:	2301      	movs	r3, #1
 80074ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80074f0:	e7d4      	b.n	800749c <_dtoa_r+0x2ac>
 80074f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074f4:	9306      	str	r3, [sp, #24]
 80074f6:	9308      	str	r3, [sp, #32]
 80074f8:	e7b7      	b.n	800746a <_dtoa_r+0x27a>
 80074fa:	3101      	adds	r1, #1
 80074fc:	0052      	lsls	r2, r2, #1
 80074fe:	e7b7      	b.n	8007470 <_dtoa_r+0x280>
 8007500:	69eb      	ldr	r3, [r5, #28]
 8007502:	9a03      	ldr	r2, [sp, #12]
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	9b08      	ldr	r3, [sp, #32]
 8007508:	2b0e      	cmp	r3, #14
 800750a:	f200 80a8 	bhi.w	800765e <_dtoa_r+0x46e>
 800750e:	2c00      	cmp	r4, #0
 8007510:	f000 80a5 	beq.w	800765e <_dtoa_r+0x46e>
 8007514:	f1bb 0f00 	cmp.w	fp, #0
 8007518:	dd34      	ble.n	8007584 <_dtoa_r+0x394>
 800751a:	4b9a      	ldr	r3, [pc, #616]	; (8007784 <_dtoa_r+0x594>)
 800751c:	f00b 020f 	and.w	r2, fp, #15
 8007520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007524:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007528:	e9d3 3400 	ldrd	r3, r4, [r3]
 800752c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007530:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007534:	d016      	beq.n	8007564 <_dtoa_r+0x374>
 8007536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800753a:	4b93      	ldr	r3, [pc, #588]	; (8007788 <_dtoa_r+0x598>)
 800753c:	2703      	movs	r7, #3
 800753e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007542:	f7f9 f8f3 	bl	800072c <__aeabi_ddiv>
 8007546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800754a:	f004 040f 	and.w	r4, r4, #15
 800754e:	4e8e      	ldr	r6, [pc, #568]	; (8007788 <_dtoa_r+0x598>)
 8007550:	b954      	cbnz	r4, 8007568 <_dtoa_r+0x378>
 8007552:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800755a:	f7f9 f8e7 	bl	800072c <__aeabi_ddiv>
 800755e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007562:	e029      	b.n	80075b8 <_dtoa_r+0x3c8>
 8007564:	2702      	movs	r7, #2
 8007566:	e7f2      	b.n	800754e <_dtoa_r+0x35e>
 8007568:	07e1      	lsls	r1, r4, #31
 800756a:	d508      	bpl.n	800757e <_dtoa_r+0x38e>
 800756c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007570:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007574:	f7f8 ffb0 	bl	80004d8 <__aeabi_dmul>
 8007578:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800757c:	3701      	adds	r7, #1
 800757e:	1064      	asrs	r4, r4, #1
 8007580:	3608      	adds	r6, #8
 8007582:	e7e5      	b.n	8007550 <_dtoa_r+0x360>
 8007584:	f000 80a5 	beq.w	80076d2 <_dtoa_r+0x4e2>
 8007588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800758c:	f1cb 0400 	rsb	r4, fp, #0
 8007590:	4b7c      	ldr	r3, [pc, #496]	; (8007784 <_dtoa_r+0x594>)
 8007592:	f004 020f 	and.w	r2, r4, #15
 8007596:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f8 ff9b 	bl	80004d8 <__aeabi_dmul>
 80075a2:	2702      	movs	r7, #2
 80075a4:	2300      	movs	r3, #0
 80075a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075aa:	4e77      	ldr	r6, [pc, #476]	; (8007788 <_dtoa_r+0x598>)
 80075ac:	1124      	asrs	r4, r4, #4
 80075ae:	2c00      	cmp	r4, #0
 80075b0:	f040 8084 	bne.w	80076bc <_dtoa_r+0x4cc>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1d2      	bne.n	800755e <_dtoa_r+0x36e>
 80075b8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80075bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80075c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8087 	beq.w	80076d6 <_dtoa_r+0x4e6>
 80075c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075cc:	2200      	movs	r2, #0
 80075ce:	4b6f      	ldr	r3, [pc, #444]	; (800778c <_dtoa_r+0x59c>)
 80075d0:	f7f9 f9f4 	bl	80009bc <__aeabi_dcmplt>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d07e      	beq.n	80076d6 <_dtoa_r+0x4e6>
 80075d8:	9b08      	ldr	r3, [sp, #32]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d07b      	beq.n	80076d6 <_dtoa_r+0x4e6>
 80075de:	9b06      	ldr	r3, [sp, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dd38      	ble.n	8007656 <_dtoa_r+0x466>
 80075e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075e8:	2200      	movs	r2, #0
 80075ea:	4b69      	ldr	r3, [pc, #420]	; (8007790 <_dtoa_r+0x5a0>)
 80075ec:	f7f8 ff74 	bl	80004d8 <__aeabi_dmul>
 80075f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075f4:	9c06      	ldr	r4, [sp, #24]
 80075f6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80075fa:	3701      	adds	r7, #1
 80075fc:	4638      	mov	r0, r7
 80075fe:	f7f8 ff01 	bl	8000404 <__aeabi_i2d>
 8007602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007606:	f7f8 ff67 	bl	80004d8 <__aeabi_dmul>
 800760a:	2200      	movs	r2, #0
 800760c:	4b61      	ldr	r3, [pc, #388]	; (8007794 <_dtoa_r+0x5a4>)
 800760e:	f7f8 fdad 	bl	800016c <__adddf3>
 8007612:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007616:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800761a:	9611      	str	r6, [sp, #68]	; 0x44
 800761c:	2c00      	cmp	r4, #0
 800761e:	d15d      	bne.n	80076dc <_dtoa_r+0x4ec>
 8007620:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007624:	2200      	movs	r2, #0
 8007626:	4b5c      	ldr	r3, [pc, #368]	; (8007798 <_dtoa_r+0x5a8>)
 8007628:	f7f8 fd9e 	bl	8000168 <__aeabi_dsub>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007634:	4633      	mov	r3, r6
 8007636:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007638:	f7f9 f9de 	bl	80009f8 <__aeabi_dcmpgt>
 800763c:	2800      	cmp	r0, #0
 800763e:	f040 8295 	bne.w	8007b6c <_dtoa_r+0x97c>
 8007642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007646:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007648:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800764c:	f7f9 f9b6 	bl	80009bc <__aeabi_dcmplt>
 8007650:	2800      	cmp	r0, #0
 8007652:	f040 8289 	bne.w	8007b68 <_dtoa_r+0x978>
 8007656:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800765a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800765e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007660:	2b00      	cmp	r3, #0
 8007662:	f2c0 8151 	blt.w	8007908 <_dtoa_r+0x718>
 8007666:	f1bb 0f0e 	cmp.w	fp, #14
 800766a:	f300 814d 	bgt.w	8007908 <_dtoa_r+0x718>
 800766e:	4b45      	ldr	r3, [pc, #276]	; (8007784 <_dtoa_r+0x594>)
 8007670:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007674:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007678:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800767c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800767e:	2b00      	cmp	r3, #0
 8007680:	f280 80da 	bge.w	8007838 <_dtoa_r+0x648>
 8007684:	9b08      	ldr	r3, [sp, #32]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f300 80d6 	bgt.w	8007838 <_dtoa_r+0x648>
 800768c:	f040 826b 	bne.w	8007b66 <_dtoa_r+0x976>
 8007690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007694:	2200      	movs	r2, #0
 8007696:	4b40      	ldr	r3, [pc, #256]	; (8007798 <_dtoa_r+0x5a8>)
 8007698:	f7f8 ff1e 	bl	80004d8 <__aeabi_dmul>
 800769c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a0:	f7f9 f9a0 	bl	80009e4 <__aeabi_dcmpge>
 80076a4:	9c08      	ldr	r4, [sp, #32]
 80076a6:	4626      	mov	r6, r4
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f040 8241 	bne.w	8007b30 <_dtoa_r+0x940>
 80076ae:	2331      	movs	r3, #49	; 0x31
 80076b0:	9f03      	ldr	r7, [sp, #12]
 80076b2:	f10b 0b01 	add.w	fp, fp, #1
 80076b6:	f807 3b01 	strb.w	r3, [r7], #1
 80076ba:	e23d      	b.n	8007b38 <_dtoa_r+0x948>
 80076bc:	07e2      	lsls	r2, r4, #31
 80076be:	d505      	bpl.n	80076cc <_dtoa_r+0x4dc>
 80076c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076c4:	f7f8 ff08 	bl	80004d8 <__aeabi_dmul>
 80076c8:	2301      	movs	r3, #1
 80076ca:	3701      	adds	r7, #1
 80076cc:	1064      	asrs	r4, r4, #1
 80076ce:	3608      	adds	r6, #8
 80076d0:	e76d      	b.n	80075ae <_dtoa_r+0x3be>
 80076d2:	2702      	movs	r7, #2
 80076d4:	e770      	b.n	80075b8 <_dtoa_r+0x3c8>
 80076d6:	46d8      	mov	r8, fp
 80076d8:	9c08      	ldr	r4, [sp, #32]
 80076da:	e78f      	b.n	80075fc <_dtoa_r+0x40c>
 80076dc:	9903      	ldr	r1, [sp, #12]
 80076de:	4b29      	ldr	r3, [pc, #164]	; (8007784 <_dtoa_r+0x594>)
 80076e0:	4421      	add	r1, r4
 80076e2:	9112      	str	r1, [sp, #72]	; 0x48
 80076e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076ea:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80076ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076f2:	2900      	cmp	r1, #0
 80076f4:	d054      	beq.n	80077a0 <_dtoa_r+0x5b0>
 80076f6:	2000      	movs	r0, #0
 80076f8:	4928      	ldr	r1, [pc, #160]	; (800779c <_dtoa_r+0x5ac>)
 80076fa:	f7f9 f817 	bl	800072c <__aeabi_ddiv>
 80076fe:	463b      	mov	r3, r7
 8007700:	4632      	mov	r2, r6
 8007702:	f7f8 fd31 	bl	8000168 <__aeabi_dsub>
 8007706:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800770a:	9f03      	ldr	r7, [sp, #12]
 800770c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007710:	f7f9 f992 	bl	8000a38 <__aeabi_d2iz>
 8007714:	4604      	mov	r4, r0
 8007716:	f7f8 fe75 	bl	8000404 <__aeabi_i2d>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007722:	f7f8 fd21 	bl	8000168 <__aeabi_dsub>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	3430      	adds	r4, #48	; 0x30
 800772c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007730:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007734:	f807 4b01 	strb.w	r4, [r7], #1
 8007738:	f7f9 f940 	bl	80009bc <__aeabi_dcmplt>
 800773c:	2800      	cmp	r0, #0
 800773e:	d173      	bne.n	8007828 <_dtoa_r+0x638>
 8007740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007744:	2000      	movs	r0, #0
 8007746:	4911      	ldr	r1, [pc, #68]	; (800778c <_dtoa_r+0x59c>)
 8007748:	f7f8 fd0e 	bl	8000168 <__aeabi_dsub>
 800774c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007750:	f7f9 f934 	bl	80009bc <__aeabi_dcmplt>
 8007754:	2800      	cmp	r0, #0
 8007756:	f040 80b6 	bne.w	80078c6 <_dtoa_r+0x6d6>
 800775a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800775c:	429f      	cmp	r7, r3
 800775e:	f43f af7a 	beq.w	8007656 <_dtoa_r+0x466>
 8007762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007766:	2200      	movs	r2, #0
 8007768:	4b09      	ldr	r3, [pc, #36]	; (8007790 <_dtoa_r+0x5a0>)
 800776a:	f7f8 feb5 	bl	80004d8 <__aeabi_dmul>
 800776e:	2200      	movs	r2, #0
 8007770:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007778:	4b05      	ldr	r3, [pc, #20]	; (8007790 <_dtoa_r+0x5a0>)
 800777a:	f7f8 fead 	bl	80004d8 <__aeabi_dmul>
 800777e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007782:	e7c3      	b.n	800770c <_dtoa_r+0x51c>
 8007784:	08009af8 	.word	0x08009af8
 8007788:	08009ad0 	.word	0x08009ad0
 800778c:	3ff00000 	.word	0x3ff00000
 8007790:	40240000 	.word	0x40240000
 8007794:	401c0000 	.word	0x401c0000
 8007798:	40140000 	.word	0x40140000
 800779c:	3fe00000 	.word	0x3fe00000
 80077a0:	4630      	mov	r0, r6
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7f8 fe98 	bl	80004d8 <__aeabi_dmul>
 80077a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077ae:	9c03      	ldr	r4, [sp, #12]
 80077b0:	9314      	str	r3, [sp, #80]	; 0x50
 80077b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077b6:	f7f9 f93f 	bl	8000a38 <__aeabi_d2iz>
 80077ba:	9015      	str	r0, [sp, #84]	; 0x54
 80077bc:	f7f8 fe22 	bl	8000404 <__aeabi_i2d>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077c8:	f7f8 fcce 	bl	8000168 <__aeabi_dsub>
 80077cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ce:	4606      	mov	r6, r0
 80077d0:	3330      	adds	r3, #48	; 0x30
 80077d2:	f804 3b01 	strb.w	r3, [r4], #1
 80077d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077d8:	460f      	mov	r7, r1
 80077da:	429c      	cmp	r4, r3
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	d124      	bne.n	800782c <_dtoa_r+0x63c>
 80077e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077e6:	4baf      	ldr	r3, [pc, #700]	; (8007aa4 <_dtoa_r+0x8b4>)
 80077e8:	f7f8 fcc0 	bl	800016c <__adddf3>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 f900 	bl	80009f8 <__aeabi_dcmpgt>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d163      	bne.n	80078c4 <_dtoa_r+0x6d4>
 80077fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007800:	2000      	movs	r0, #0
 8007802:	49a8      	ldr	r1, [pc, #672]	; (8007aa4 <_dtoa_r+0x8b4>)
 8007804:	f7f8 fcb0 	bl	8000168 <__aeabi_dsub>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f7f9 f8d4 	bl	80009bc <__aeabi_dcmplt>
 8007814:	2800      	cmp	r0, #0
 8007816:	f43f af1e 	beq.w	8007656 <_dtoa_r+0x466>
 800781a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800781c:	1e7b      	subs	r3, r7, #1
 800781e:	9314      	str	r3, [sp, #80]	; 0x50
 8007820:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007824:	2b30      	cmp	r3, #48	; 0x30
 8007826:	d0f8      	beq.n	800781a <_dtoa_r+0x62a>
 8007828:	46c3      	mov	fp, r8
 800782a:	e03b      	b.n	80078a4 <_dtoa_r+0x6b4>
 800782c:	4b9e      	ldr	r3, [pc, #632]	; (8007aa8 <_dtoa_r+0x8b8>)
 800782e:	f7f8 fe53 	bl	80004d8 <__aeabi_dmul>
 8007832:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007836:	e7bc      	b.n	80077b2 <_dtoa_r+0x5c2>
 8007838:	9f03      	ldr	r7, [sp, #12]
 800783a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800783e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007842:	4640      	mov	r0, r8
 8007844:	4649      	mov	r1, r9
 8007846:	f7f8 ff71 	bl	800072c <__aeabi_ddiv>
 800784a:	f7f9 f8f5 	bl	8000a38 <__aeabi_d2iz>
 800784e:	4604      	mov	r4, r0
 8007850:	f7f8 fdd8 	bl	8000404 <__aeabi_i2d>
 8007854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007858:	f7f8 fe3e 	bl	80004d8 <__aeabi_dmul>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4640      	mov	r0, r8
 8007862:	4649      	mov	r1, r9
 8007864:	f7f8 fc80 	bl	8000168 <__aeabi_dsub>
 8007868:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800786c:	f807 6b01 	strb.w	r6, [r7], #1
 8007870:	9e03      	ldr	r6, [sp, #12]
 8007872:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007876:	1bbe      	subs	r6, r7, r6
 8007878:	45b4      	cmp	ip, r6
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	d136      	bne.n	80078ee <_dtoa_r+0x6fe>
 8007880:	f7f8 fc74 	bl	800016c <__adddf3>
 8007884:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007888:	4680      	mov	r8, r0
 800788a:	4689      	mov	r9, r1
 800788c:	f7f9 f8b4 	bl	80009f8 <__aeabi_dcmpgt>
 8007890:	bb58      	cbnz	r0, 80078ea <_dtoa_r+0x6fa>
 8007892:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007896:	4640      	mov	r0, r8
 8007898:	4649      	mov	r1, r9
 800789a:	f7f9 f885 	bl	80009a8 <__aeabi_dcmpeq>
 800789e:	b108      	cbz	r0, 80078a4 <_dtoa_r+0x6b4>
 80078a0:	07e3      	lsls	r3, r4, #31
 80078a2:	d422      	bmi.n	80078ea <_dtoa_r+0x6fa>
 80078a4:	4651      	mov	r1, sl
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fbc2 	bl	8008030 <_Bfree>
 80078ac:	2300      	movs	r3, #0
 80078ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078b0:	703b      	strb	r3, [r7, #0]
 80078b2:	f10b 0301 	add.w	r3, fp, #1
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f43f ace6 	beq.w	800728c <_dtoa_r+0x9c>
 80078c0:	601f      	str	r7, [r3, #0]
 80078c2:	e4e3      	b.n	800728c <_dtoa_r+0x9c>
 80078c4:	4627      	mov	r7, r4
 80078c6:	463b      	mov	r3, r7
 80078c8:	461f      	mov	r7, r3
 80078ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ce:	2a39      	cmp	r2, #57	; 0x39
 80078d0:	d107      	bne.n	80078e2 <_dtoa_r+0x6f2>
 80078d2:	9a03      	ldr	r2, [sp, #12]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d1f7      	bne.n	80078c8 <_dtoa_r+0x6d8>
 80078d8:	2230      	movs	r2, #48	; 0x30
 80078da:	9903      	ldr	r1, [sp, #12]
 80078dc:	f108 0801 	add.w	r8, r8, #1
 80078e0:	700a      	strb	r2, [r1, #0]
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	3201      	adds	r2, #1
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	e79e      	b.n	8007828 <_dtoa_r+0x638>
 80078ea:	46d8      	mov	r8, fp
 80078ec:	e7eb      	b.n	80078c6 <_dtoa_r+0x6d6>
 80078ee:	2200      	movs	r2, #0
 80078f0:	4b6d      	ldr	r3, [pc, #436]	; (8007aa8 <_dtoa_r+0x8b8>)
 80078f2:	f7f8 fdf1 	bl	80004d8 <__aeabi_dmul>
 80078f6:	2200      	movs	r2, #0
 80078f8:	2300      	movs	r3, #0
 80078fa:	4680      	mov	r8, r0
 80078fc:	4689      	mov	r9, r1
 80078fe:	f7f9 f853 	bl	80009a8 <__aeabi_dcmpeq>
 8007902:	2800      	cmp	r0, #0
 8007904:	d09b      	beq.n	800783e <_dtoa_r+0x64e>
 8007906:	e7cd      	b.n	80078a4 <_dtoa_r+0x6b4>
 8007908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800790a:	2a00      	cmp	r2, #0
 800790c:	f000 80c4 	beq.w	8007a98 <_dtoa_r+0x8a8>
 8007910:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007912:	2a01      	cmp	r2, #1
 8007914:	f300 80a8 	bgt.w	8007a68 <_dtoa_r+0x878>
 8007918:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800791a:	2a00      	cmp	r2, #0
 800791c:	f000 80a0 	beq.w	8007a60 <_dtoa_r+0x870>
 8007920:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007924:	464f      	mov	r7, r9
 8007926:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800792a:	2101      	movs	r1, #1
 800792c:	441a      	add	r2, r3
 800792e:	4628      	mov	r0, r5
 8007930:	4499      	add	r9, r3
 8007932:	9209      	str	r2, [sp, #36]	; 0x24
 8007934:	f000 fc32 	bl	800819c <__i2b>
 8007938:	4606      	mov	r6, r0
 800793a:	b15f      	cbz	r7, 8007954 <_dtoa_r+0x764>
 800793c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793e:	2b00      	cmp	r3, #0
 8007940:	dd08      	ble.n	8007954 <_dtoa_r+0x764>
 8007942:	42bb      	cmp	r3, r7
 8007944:	bfa8      	it	ge
 8007946:	463b      	movge	r3, r7
 8007948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800794a:	eba9 0903 	sub.w	r9, r9, r3
 800794e:	1aff      	subs	r7, r7, r3
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	9309      	str	r3, [sp, #36]	; 0x24
 8007954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007956:	b1f3      	cbz	r3, 8007996 <_dtoa_r+0x7a6>
 8007958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 80a0 	beq.w	8007aa0 <_dtoa_r+0x8b0>
 8007960:	2c00      	cmp	r4, #0
 8007962:	dd10      	ble.n	8007986 <_dtoa_r+0x796>
 8007964:	4631      	mov	r1, r6
 8007966:	4622      	mov	r2, r4
 8007968:	4628      	mov	r0, r5
 800796a:	f000 fcd5 	bl	8008318 <__pow5mult>
 800796e:	4652      	mov	r2, sl
 8007970:	4601      	mov	r1, r0
 8007972:	4606      	mov	r6, r0
 8007974:	4628      	mov	r0, r5
 8007976:	f000 fc27 	bl	80081c8 <__multiply>
 800797a:	4680      	mov	r8, r0
 800797c:	4651      	mov	r1, sl
 800797e:	4628      	mov	r0, r5
 8007980:	f000 fb56 	bl	8008030 <_Bfree>
 8007984:	46c2      	mov	sl, r8
 8007986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007988:	1b1a      	subs	r2, r3, r4
 800798a:	d004      	beq.n	8007996 <_dtoa_r+0x7a6>
 800798c:	4651      	mov	r1, sl
 800798e:	4628      	mov	r0, r5
 8007990:	f000 fcc2 	bl	8008318 <__pow5mult>
 8007994:	4682      	mov	sl, r0
 8007996:	2101      	movs	r1, #1
 8007998:	4628      	mov	r0, r5
 800799a:	f000 fbff 	bl	800819c <__i2b>
 800799e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079a0:	4604      	mov	r4, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f340 8082 	ble.w	8007aac <_dtoa_r+0x8bc>
 80079a8:	461a      	mov	r2, r3
 80079aa:	4601      	mov	r1, r0
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 fcb3 	bl	8008318 <__pow5mult>
 80079b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079b4:	4604      	mov	r4, r0
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	dd7b      	ble.n	8007ab2 <_dtoa_r+0x8c2>
 80079ba:	f04f 0800 	mov.w	r8, #0
 80079be:	6923      	ldr	r3, [r4, #16]
 80079c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079c4:	6918      	ldr	r0, [r3, #16]
 80079c6:	f000 fb9b 	bl	8008100 <__hi0bits>
 80079ca:	f1c0 0020 	rsb	r0, r0, #32
 80079ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d0:	4418      	add	r0, r3
 80079d2:	f010 001f 	ands.w	r0, r0, #31
 80079d6:	f000 8092 	beq.w	8007afe <_dtoa_r+0x90e>
 80079da:	f1c0 0320 	rsb	r3, r0, #32
 80079de:	2b04      	cmp	r3, #4
 80079e0:	f340 8085 	ble.w	8007aee <_dtoa_r+0x8fe>
 80079e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e6:	f1c0 001c 	rsb	r0, r0, #28
 80079ea:	4403      	add	r3, r0
 80079ec:	4481      	add	r9, r0
 80079ee:	4407      	add	r7, r0
 80079f0:	9309      	str	r3, [sp, #36]	; 0x24
 80079f2:	f1b9 0f00 	cmp.w	r9, #0
 80079f6:	dd05      	ble.n	8007a04 <_dtoa_r+0x814>
 80079f8:	4651      	mov	r1, sl
 80079fa:	464a      	mov	r2, r9
 80079fc:	4628      	mov	r0, r5
 80079fe:	f000 fce5 	bl	80083cc <__lshift>
 8007a02:	4682      	mov	sl, r0
 8007a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dd05      	ble.n	8007a16 <_dtoa_r+0x826>
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 fcdc 	bl	80083cc <__lshift>
 8007a14:	4604      	mov	r4, r0
 8007a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d072      	beq.n	8007b02 <_dtoa_r+0x912>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4650      	mov	r0, sl
 8007a20:	f000 fd40 	bl	80084a4 <__mcmp>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	da6c      	bge.n	8007b02 <_dtoa_r+0x912>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4651      	mov	r1, sl
 8007a2c:	220a      	movs	r2, #10
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 fb20 	bl	8008074 <__multadd>
 8007a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a36:	4682      	mov	sl, r0
 8007a38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 81ac 	beq.w	8007d9a <_dtoa_r+0xbaa>
 8007a42:	2300      	movs	r3, #0
 8007a44:	4631      	mov	r1, r6
 8007a46:	220a      	movs	r2, #10
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f000 fb13 	bl	8008074 <__multadd>
 8007a4e:	9b06      	ldr	r3, [sp, #24]
 8007a50:	4606      	mov	r6, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f300 8093 	bgt.w	8007b7e <_dtoa_r+0x98e>
 8007a58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	dc59      	bgt.n	8007b12 <_dtoa_r+0x922>
 8007a5e:	e08e      	b.n	8007b7e <_dtoa_r+0x98e>
 8007a60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a66:	e75d      	b.n	8007924 <_dtoa_r+0x734>
 8007a68:	9b08      	ldr	r3, [sp, #32]
 8007a6a:	1e5c      	subs	r4, r3, #1
 8007a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a6e:	42a3      	cmp	r3, r4
 8007a70:	bfbf      	itttt	lt
 8007a72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a74:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007a76:	1ae3      	sublt	r3, r4, r3
 8007a78:	18d2      	addlt	r2, r2, r3
 8007a7a:	bfa8      	it	ge
 8007a7c:	1b1c      	subge	r4, r3, r4
 8007a7e:	9b08      	ldr	r3, [sp, #32]
 8007a80:	bfbe      	ittt	lt
 8007a82:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007a84:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007a86:	2400      	movlt	r4, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bfb5      	itete	lt
 8007a8c:	eba9 0703 	sublt.w	r7, r9, r3
 8007a90:	464f      	movge	r7, r9
 8007a92:	2300      	movlt	r3, #0
 8007a94:	9b08      	ldrge	r3, [sp, #32]
 8007a96:	e747      	b.n	8007928 <_dtoa_r+0x738>
 8007a98:	464f      	mov	r7, r9
 8007a9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a9c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a9e:	e74c      	b.n	800793a <_dtoa_r+0x74a>
 8007aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aa2:	e773      	b.n	800798c <_dtoa_r+0x79c>
 8007aa4:	3fe00000 	.word	0x3fe00000
 8007aa8:	40240000 	.word	0x40240000
 8007aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	dc18      	bgt.n	8007ae4 <_dtoa_r+0x8f4>
 8007ab2:	9b04      	ldr	r3, [sp, #16]
 8007ab4:	b9b3      	cbnz	r3, 8007ae4 <_dtoa_r+0x8f4>
 8007ab6:	9b05      	ldr	r3, [sp, #20]
 8007ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007abc:	b993      	cbnz	r3, 8007ae4 <_dtoa_r+0x8f4>
 8007abe:	9b05      	ldr	r3, [sp, #20]
 8007ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ac4:	0d1b      	lsrs	r3, r3, #20
 8007ac6:	051b      	lsls	r3, r3, #20
 8007ac8:	b17b      	cbz	r3, 8007aea <_dtoa_r+0x8fa>
 8007aca:	f04f 0801 	mov.w	r8, #1
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	f109 0901 	add.w	r9, r9, #1
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f47f af6f 	bne.w	80079be <_dtoa_r+0x7ce>
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	e774      	b.n	80079ce <_dtoa_r+0x7de>
 8007ae4:	f04f 0800 	mov.w	r8, #0
 8007ae8:	e7f6      	b.n	8007ad8 <_dtoa_r+0x8e8>
 8007aea:	4698      	mov	r8, r3
 8007aec:	e7f4      	b.n	8007ad8 <_dtoa_r+0x8e8>
 8007aee:	d080      	beq.n	80079f2 <_dtoa_r+0x802>
 8007af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af2:	331c      	adds	r3, #28
 8007af4:	441a      	add	r2, r3
 8007af6:	4499      	add	r9, r3
 8007af8:	441f      	add	r7, r3
 8007afa:	9209      	str	r2, [sp, #36]	; 0x24
 8007afc:	e779      	b.n	80079f2 <_dtoa_r+0x802>
 8007afe:	4603      	mov	r3, r0
 8007b00:	e7f6      	b.n	8007af0 <_dtoa_r+0x900>
 8007b02:	9b08      	ldr	r3, [sp, #32]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dc34      	bgt.n	8007b72 <_dtoa_r+0x982>
 8007b08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	dd31      	ble.n	8007b72 <_dtoa_r+0x982>
 8007b0e:	9b08      	ldr	r3, [sp, #32]
 8007b10:	9306      	str	r3, [sp, #24]
 8007b12:	9b06      	ldr	r3, [sp, #24]
 8007b14:	b963      	cbnz	r3, 8007b30 <_dtoa_r+0x940>
 8007b16:	4621      	mov	r1, r4
 8007b18:	2205      	movs	r2, #5
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 faaa 	bl	8008074 <__multadd>
 8007b20:	4601      	mov	r1, r0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4650      	mov	r0, sl
 8007b26:	f000 fcbd 	bl	80084a4 <__mcmp>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f73f adbf 	bgt.w	80076ae <_dtoa_r+0x4be>
 8007b30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b32:	9f03      	ldr	r7, [sp, #12]
 8007b34:	ea6f 0b03 	mvn.w	fp, r3
 8007b38:	f04f 0800 	mov.w	r8, #0
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 fa76 	bl	8008030 <_Bfree>
 8007b44:	2e00      	cmp	r6, #0
 8007b46:	f43f aead 	beq.w	80078a4 <_dtoa_r+0x6b4>
 8007b4a:	f1b8 0f00 	cmp.w	r8, #0
 8007b4e:	d005      	beq.n	8007b5c <_dtoa_r+0x96c>
 8007b50:	45b0      	cmp	r8, r6
 8007b52:	d003      	beq.n	8007b5c <_dtoa_r+0x96c>
 8007b54:	4641      	mov	r1, r8
 8007b56:	4628      	mov	r0, r5
 8007b58:	f000 fa6a 	bl	8008030 <_Bfree>
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f000 fa66 	bl	8008030 <_Bfree>
 8007b64:	e69e      	b.n	80078a4 <_dtoa_r+0x6b4>
 8007b66:	2400      	movs	r4, #0
 8007b68:	4626      	mov	r6, r4
 8007b6a:	e7e1      	b.n	8007b30 <_dtoa_r+0x940>
 8007b6c:	46c3      	mov	fp, r8
 8007b6e:	4626      	mov	r6, r4
 8007b70:	e59d      	b.n	80076ae <_dtoa_r+0x4be>
 8007b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 80c8 	beq.w	8007d0a <_dtoa_r+0xb1a>
 8007b7a:	9b08      	ldr	r3, [sp, #32]
 8007b7c:	9306      	str	r3, [sp, #24]
 8007b7e:	2f00      	cmp	r7, #0
 8007b80:	dd05      	ble.n	8007b8e <_dtoa_r+0x99e>
 8007b82:	4631      	mov	r1, r6
 8007b84:	463a      	mov	r2, r7
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 fc20 	bl	80083cc <__lshift>
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	f1b8 0f00 	cmp.w	r8, #0
 8007b92:	d05b      	beq.n	8007c4c <_dtoa_r+0xa5c>
 8007b94:	4628      	mov	r0, r5
 8007b96:	6871      	ldr	r1, [r6, #4]
 8007b98:	f000 fa0a 	bl	8007fb0 <_Balloc>
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	b928      	cbnz	r0, 8007bac <_dtoa_r+0x9bc>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007ba6:	4b81      	ldr	r3, [pc, #516]	; (8007dac <_dtoa_r+0xbbc>)
 8007ba8:	f7ff bb36 	b.w	8007218 <_dtoa_r+0x28>
 8007bac:	6932      	ldr	r2, [r6, #16]
 8007bae:	f106 010c 	add.w	r1, r6, #12
 8007bb2:	3202      	adds	r2, #2
 8007bb4:	0092      	lsls	r2, r2, #2
 8007bb6:	300c      	adds	r0, #12
 8007bb8:	f000 ff9e 	bl	8008af8 <memcpy>
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 fc03 	bl	80083cc <__lshift>
 8007bc6:	46b0      	mov	r8, r6
 8007bc8:	4606      	mov	r6, r0
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	9a03      	ldr	r2, [sp, #12]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	9308      	str	r3, [sp, #32]
 8007bd2:	9b06      	ldr	r3, [sp, #24]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bd8:	9b04      	ldr	r3, [sp, #16]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	930a      	str	r3, [sp, #40]	; 0x28
 8007be0:	9b08      	ldr	r3, [sp, #32]
 8007be2:	4621      	mov	r1, r4
 8007be4:	3b01      	subs	r3, #1
 8007be6:	4650      	mov	r0, sl
 8007be8:	9304      	str	r3, [sp, #16]
 8007bea:	f7ff fa76 	bl	80070da <quorem>
 8007bee:	4641      	mov	r1, r8
 8007bf0:	9006      	str	r0, [sp, #24]
 8007bf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bf6:	4650      	mov	r0, sl
 8007bf8:	f000 fc54 	bl	80084a4 <__mcmp>
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	9009      	str	r0, [sp, #36]	; 0x24
 8007c00:	4621      	mov	r1, r4
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 fc6a 	bl	80084dc <__mdiff>
 8007c08:	68c2      	ldr	r2, [r0, #12]
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	bb02      	cbnz	r2, 8007c50 <_dtoa_r+0xa60>
 8007c0e:	4601      	mov	r1, r0
 8007c10:	4650      	mov	r0, sl
 8007c12:	f000 fc47 	bl	80084a4 <__mcmp>
 8007c16:	4602      	mov	r2, r0
 8007c18:	4639      	mov	r1, r7
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	920c      	str	r2, [sp, #48]	; 0x30
 8007c1e:	f000 fa07 	bl	8008030 <_Bfree>
 8007c22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c26:	9f08      	ldr	r7, [sp, #32]
 8007c28:	ea43 0102 	orr.w	r1, r3, r2
 8007c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2e:	4319      	orrs	r1, r3
 8007c30:	d110      	bne.n	8007c54 <_dtoa_r+0xa64>
 8007c32:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c36:	d029      	beq.n	8007c8c <_dtoa_r+0xa9c>
 8007c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	dd02      	ble.n	8007c44 <_dtoa_r+0xa54>
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007c44:	9b04      	ldr	r3, [sp, #16]
 8007c46:	f883 9000 	strb.w	r9, [r3]
 8007c4a:	e777      	b.n	8007b3c <_dtoa_r+0x94c>
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	e7ba      	b.n	8007bc6 <_dtoa_r+0x9d6>
 8007c50:	2201      	movs	r2, #1
 8007c52:	e7e1      	b.n	8007c18 <_dtoa_r+0xa28>
 8007c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	db04      	blt.n	8007c64 <_dtoa_r+0xa74>
 8007c5a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c60:	430b      	orrs	r3, r1
 8007c62:	d120      	bne.n	8007ca6 <_dtoa_r+0xab6>
 8007c64:	2a00      	cmp	r2, #0
 8007c66:	dded      	ble.n	8007c44 <_dtoa_r+0xa54>
 8007c68:	4651      	mov	r1, sl
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 fbad 	bl	80083cc <__lshift>
 8007c72:	4621      	mov	r1, r4
 8007c74:	4682      	mov	sl, r0
 8007c76:	f000 fc15 	bl	80084a4 <__mcmp>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	dc03      	bgt.n	8007c86 <_dtoa_r+0xa96>
 8007c7e:	d1e1      	bne.n	8007c44 <_dtoa_r+0xa54>
 8007c80:	f019 0f01 	tst.w	r9, #1
 8007c84:	d0de      	beq.n	8007c44 <_dtoa_r+0xa54>
 8007c86:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c8a:	d1d8      	bne.n	8007c3e <_dtoa_r+0xa4e>
 8007c8c:	2339      	movs	r3, #57	; 0x39
 8007c8e:	9a04      	ldr	r2, [sp, #16]
 8007c90:	7013      	strb	r3, [r2, #0]
 8007c92:	463b      	mov	r3, r7
 8007c94:	461f      	mov	r7, r3
 8007c96:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	2a39      	cmp	r2, #57	; 0x39
 8007c9e:	d06b      	beq.n	8007d78 <_dtoa_r+0xb88>
 8007ca0:	3201      	adds	r2, #1
 8007ca2:	701a      	strb	r2, [r3, #0]
 8007ca4:	e74a      	b.n	8007b3c <_dtoa_r+0x94c>
 8007ca6:	2a00      	cmp	r2, #0
 8007ca8:	dd07      	ble.n	8007cba <_dtoa_r+0xaca>
 8007caa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cae:	d0ed      	beq.n	8007c8c <_dtoa_r+0xa9c>
 8007cb0:	9a04      	ldr	r2, [sp, #16]
 8007cb2:	f109 0301 	add.w	r3, r9, #1
 8007cb6:	7013      	strb	r3, [r2, #0]
 8007cb8:	e740      	b.n	8007b3c <_dtoa_r+0x94c>
 8007cba:	9b08      	ldr	r3, [sp, #32]
 8007cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cbe:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d042      	beq.n	8007d4c <_dtoa_r+0xb5c>
 8007cc6:	4651      	mov	r1, sl
 8007cc8:	2300      	movs	r3, #0
 8007cca:	220a      	movs	r2, #10
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f000 f9d1 	bl	8008074 <__multadd>
 8007cd2:	45b0      	cmp	r8, r6
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	f04f 020a 	mov.w	r2, #10
 8007cde:	4641      	mov	r1, r8
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	d107      	bne.n	8007cf4 <_dtoa_r+0xb04>
 8007ce4:	f000 f9c6 	bl	8008074 <__multadd>
 8007ce8:	4680      	mov	r8, r0
 8007cea:	4606      	mov	r6, r0
 8007cec:	9b08      	ldr	r3, [sp, #32]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	9308      	str	r3, [sp, #32]
 8007cf2:	e775      	b.n	8007be0 <_dtoa_r+0x9f0>
 8007cf4:	f000 f9be 	bl	8008074 <__multadd>
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	220a      	movs	r2, #10
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 f9b7 	bl	8008074 <__multadd>
 8007d06:	4606      	mov	r6, r0
 8007d08:	e7f0      	b.n	8007cec <_dtoa_r+0xafc>
 8007d0a:	9b08      	ldr	r3, [sp, #32]
 8007d0c:	9306      	str	r3, [sp, #24]
 8007d0e:	9f03      	ldr	r7, [sp, #12]
 8007d10:	4621      	mov	r1, r4
 8007d12:	4650      	mov	r0, sl
 8007d14:	f7ff f9e1 	bl	80070da <quorem>
 8007d18:	9b03      	ldr	r3, [sp, #12]
 8007d1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d1e:	f807 9b01 	strb.w	r9, [r7], #1
 8007d22:	1afa      	subs	r2, r7, r3
 8007d24:	9b06      	ldr	r3, [sp, #24]
 8007d26:	4293      	cmp	r3, r2
 8007d28:	dd07      	ble.n	8007d3a <_dtoa_r+0xb4a>
 8007d2a:	4651      	mov	r1, sl
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	220a      	movs	r2, #10
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 f99f 	bl	8008074 <__multadd>
 8007d36:	4682      	mov	sl, r0
 8007d38:	e7ea      	b.n	8007d10 <_dtoa_r+0xb20>
 8007d3a:	9b06      	ldr	r3, [sp, #24]
 8007d3c:	f04f 0800 	mov.w	r8, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bfcc      	ite	gt
 8007d44:	461f      	movgt	r7, r3
 8007d46:	2701      	movle	r7, #1
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	441f      	add	r7, r3
 8007d4c:	4651      	mov	r1, sl
 8007d4e:	2201      	movs	r2, #1
 8007d50:	4628      	mov	r0, r5
 8007d52:	f000 fb3b 	bl	80083cc <__lshift>
 8007d56:	4621      	mov	r1, r4
 8007d58:	4682      	mov	sl, r0
 8007d5a:	f000 fba3 	bl	80084a4 <__mcmp>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	dc97      	bgt.n	8007c92 <_dtoa_r+0xaa2>
 8007d62:	d102      	bne.n	8007d6a <_dtoa_r+0xb7a>
 8007d64:	f019 0f01 	tst.w	r9, #1
 8007d68:	d193      	bne.n	8007c92 <_dtoa_r+0xaa2>
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	461f      	mov	r7, r3
 8007d6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d72:	2a30      	cmp	r2, #48	; 0x30
 8007d74:	d0fa      	beq.n	8007d6c <_dtoa_r+0xb7c>
 8007d76:	e6e1      	b.n	8007b3c <_dtoa_r+0x94c>
 8007d78:	9a03      	ldr	r2, [sp, #12]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d18a      	bne.n	8007c94 <_dtoa_r+0xaa4>
 8007d7e:	2331      	movs	r3, #49	; 0x31
 8007d80:	f10b 0b01 	add.w	fp, fp, #1
 8007d84:	e797      	b.n	8007cb6 <_dtoa_r+0xac6>
 8007d86:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <_dtoa_r+0xbc0>)
 8007d88:	f7ff ba9f 	b.w	80072ca <_dtoa_r+0xda>
 8007d8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f47f aa77 	bne.w	8007282 <_dtoa_r+0x92>
 8007d94:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <_dtoa_r+0xbc4>)
 8007d96:	f7ff ba98 	b.w	80072ca <_dtoa_r+0xda>
 8007d9a:	9b06      	ldr	r3, [sp, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	dcb6      	bgt.n	8007d0e <_dtoa_r+0xb1e>
 8007da0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	f73f aeb5 	bgt.w	8007b12 <_dtoa_r+0x922>
 8007da8:	e7b1      	b.n	8007d0e <_dtoa_r+0xb1e>
 8007daa:	bf00      	nop
 8007dac:	08009a60 	.word	0x08009a60
 8007db0:	080099c0 	.word	0x080099c0
 8007db4:	080099e4 	.word	0x080099e4

08007db8 <_free_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4605      	mov	r5, r0
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	d040      	beq.n	8007e42 <_free_r+0x8a>
 8007dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc4:	1f0c      	subs	r4, r1, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bfb8      	it	lt
 8007dca:	18e4      	addlt	r4, r4, r3
 8007dcc:	f000 f8e4 	bl	8007f98 <__malloc_lock>
 8007dd0:	4a1c      	ldr	r2, [pc, #112]	; (8007e44 <_free_r+0x8c>)
 8007dd2:	6813      	ldr	r3, [r2, #0]
 8007dd4:	b933      	cbnz	r3, 8007de4 <_free_r+0x2c>
 8007dd6:	6063      	str	r3, [r4, #4]
 8007dd8:	6014      	str	r4, [r2, #0]
 8007dda:	4628      	mov	r0, r5
 8007ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007de0:	f000 b8e0 	b.w	8007fa4 <__malloc_unlock>
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	d908      	bls.n	8007dfa <_free_r+0x42>
 8007de8:	6820      	ldr	r0, [r4, #0]
 8007dea:	1821      	adds	r1, r4, r0
 8007dec:	428b      	cmp	r3, r1
 8007dee:	bf01      	itttt	eq
 8007df0:	6819      	ldreq	r1, [r3, #0]
 8007df2:	685b      	ldreq	r3, [r3, #4]
 8007df4:	1809      	addeq	r1, r1, r0
 8007df6:	6021      	streq	r1, [r4, #0]
 8007df8:	e7ed      	b.n	8007dd6 <_free_r+0x1e>
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	b10b      	cbz	r3, 8007e04 <_free_r+0x4c>
 8007e00:	42a3      	cmp	r3, r4
 8007e02:	d9fa      	bls.n	8007dfa <_free_r+0x42>
 8007e04:	6811      	ldr	r1, [r2, #0]
 8007e06:	1850      	adds	r0, r2, r1
 8007e08:	42a0      	cmp	r0, r4
 8007e0a:	d10b      	bne.n	8007e24 <_free_r+0x6c>
 8007e0c:	6820      	ldr	r0, [r4, #0]
 8007e0e:	4401      	add	r1, r0
 8007e10:	1850      	adds	r0, r2, r1
 8007e12:	4283      	cmp	r3, r0
 8007e14:	6011      	str	r1, [r2, #0]
 8007e16:	d1e0      	bne.n	8007dda <_free_r+0x22>
 8007e18:	6818      	ldr	r0, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	4408      	add	r0, r1
 8007e1e:	6010      	str	r0, [r2, #0]
 8007e20:	6053      	str	r3, [r2, #4]
 8007e22:	e7da      	b.n	8007dda <_free_r+0x22>
 8007e24:	d902      	bls.n	8007e2c <_free_r+0x74>
 8007e26:	230c      	movs	r3, #12
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	e7d6      	b.n	8007dda <_free_r+0x22>
 8007e2c:	6820      	ldr	r0, [r4, #0]
 8007e2e:	1821      	adds	r1, r4, r0
 8007e30:	428b      	cmp	r3, r1
 8007e32:	bf01      	itttt	eq
 8007e34:	6819      	ldreq	r1, [r3, #0]
 8007e36:	685b      	ldreq	r3, [r3, #4]
 8007e38:	1809      	addeq	r1, r1, r0
 8007e3a:	6021      	streq	r1, [r4, #0]
 8007e3c:	6063      	str	r3, [r4, #4]
 8007e3e:	6054      	str	r4, [r2, #4]
 8007e40:	e7cb      	b.n	8007dda <_free_r+0x22>
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	20000a68 	.word	0x20000a68

08007e48 <malloc>:
 8007e48:	4b02      	ldr	r3, [pc, #8]	; (8007e54 <malloc+0xc>)
 8007e4a:	4601      	mov	r1, r0
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	f000 b823 	b.w	8007e98 <_malloc_r>
 8007e52:	bf00      	nop
 8007e54:	200000c8 	.word	0x200000c8

08007e58 <sbrk_aligned>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	4e0e      	ldr	r6, [pc, #56]	; (8007e94 <sbrk_aligned+0x3c>)
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	6831      	ldr	r1, [r6, #0]
 8007e60:	4605      	mov	r5, r0
 8007e62:	b911      	cbnz	r1, 8007e6a <sbrk_aligned+0x12>
 8007e64:	f000 fe38 	bl	8008ad8 <_sbrk_r>
 8007e68:	6030      	str	r0, [r6, #0]
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f000 fe33 	bl	8008ad8 <_sbrk_r>
 8007e72:	1c43      	adds	r3, r0, #1
 8007e74:	d00a      	beq.n	8007e8c <sbrk_aligned+0x34>
 8007e76:	1cc4      	adds	r4, r0, #3
 8007e78:	f024 0403 	bic.w	r4, r4, #3
 8007e7c:	42a0      	cmp	r0, r4
 8007e7e:	d007      	beq.n	8007e90 <sbrk_aligned+0x38>
 8007e80:	1a21      	subs	r1, r4, r0
 8007e82:	4628      	mov	r0, r5
 8007e84:	f000 fe28 	bl	8008ad8 <_sbrk_r>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d101      	bne.n	8007e90 <sbrk_aligned+0x38>
 8007e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8007e90:	4620      	mov	r0, r4
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	20000a6c 	.word	0x20000a6c

08007e98 <_malloc_r>:
 8007e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	1ccd      	adds	r5, r1, #3
 8007e9e:	f025 0503 	bic.w	r5, r5, #3
 8007ea2:	3508      	adds	r5, #8
 8007ea4:	2d0c      	cmp	r5, #12
 8007ea6:	bf38      	it	cc
 8007ea8:	250c      	movcc	r5, #12
 8007eaa:	2d00      	cmp	r5, #0
 8007eac:	4607      	mov	r7, r0
 8007eae:	db01      	blt.n	8007eb4 <_malloc_r+0x1c>
 8007eb0:	42a9      	cmp	r1, r5
 8007eb2:	d905      	bls.n	8007ec0 <_malloc_r+0x28>
 8007eb4:	230c      	movs	r3, #12
 8007eb6:	2600      	movs	r6, #0
 8007eb8:	603b      	str	r3, [r7, #0]
 8007eba:	4630      	mov	r0, r6
 8007ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f94 <_malloc_r+0xfc>
 8007ec4:	f000 f868 	bl	8007f98 <__malloc_lock>
 8007ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ecc:	461c      	mov	r4, r3
 8007ece:	bb5c      	cbnz	r4, 8007f28 <_malloc_r+0x90>
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	f7ff ffc0 	bl	8007e58 <sbrk_aligned>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	4604      	mov	r4, r0
 8007edc:	d155      	bne.n	8007f8a <_malloc_r+0xf2>
 8007ede:	f8d8 4000 	ldr.w	r4, [r8]
 8007ee2:	4626      	mov	r6, r4
 8007ee4:	2e00      	cmp	r6, #0
 8007ee6:	d145      	bne.n	8007f74 <_malloc_r+0xdc>
 8007ee8:	2c00      	cmp	r4, #0
 8007eea:	d048      	beq.n	8007f7e <_malloc_r+0xe6>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	eb04 0903 	add.w	r9, r4, r3
 8007ef6:	f000 fdef 	bl	8008ad8 <_sbrk_r>
 8007efa:	4581      	cmp	r9, r0
 8007efc:	d13f      	bne.n	8007f7e <_malloc_r+0xe6>
 8007efe:	6821      	ldr	r1, [r4, #0]
 8007f00:	4638      	mov	r0, r7
 8007f02:	1a6d      	subs	r5, r5, r1
 8007f04:	4629      	mov	r1, r5
 8007f06:	f7ff ffa7 	bl	8007e58 <sbrk_aligned>
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d037      	beq.n	8007f7e <_malloc_r+0xe6>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	442b      	add	r3, r5
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	f8d8 3000 	ldr.w	r3, [r8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d038      	beq.n	8007f8e <_malloc_r+0xf6>
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	42a2      	cmp	r2, r4
 8007f20:	d12b      	bne.n	8007f7a <_malloc_r+0xe2>
 8007f22:	2200      	movs	r2, #0
 8007f24:	605a      	str	r2, [r3, #4]
 8007f26:	e00f      	b.n	8007f48 <_malloc_r+0xb0>
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	1b52      	subs	r2, r2, r5
 8007f2c:	d41f      	bmi.n	8007f6e <_malloc_r+0xd6>
 8007f2e:	2a0b      	cmp	r2, #11
 8007f30:	d917      	bls.n	8007f62 <_malloc_r+0xca>
 8007f32:	1961      	adds	r1, r4, r5
 8007f34:	42a3      	cmp	r3, r4
 8007f36:	6025      	str	r5, [r4, #0]
 8007f38:	bf18      	it	ne
 8007f3a:	6059      	strne	r1, [r3, #4]
 8007f3c:	6863      	ldr	r3, [r4, #4]
 8007f3e:	bf08      	it	eq
 8007f40:	f8c8 1000 	streq.w	r1, [r8]
 8007f44:	5162      	str	r2, [r4, r5]
 8007f46:	604b      	str	r3, [r1, #4]
 8007f48:	4638      	mov	r0, r7
 8007f4a:	f104 060b 	add.w	r6, r4, #11
 8007f4e:	f000 f829 	bl	8007fa4 <__malloc_unlock>
 8007f52:	f026 0607 	bic.w	r6, r6, #7
 8007f56:	1d23      	adds	r3, r4, #4
 8007f58:	1af2      	subs	r2, r6, r3
 8007f5a:	d0ae      	beq.n	8007eba <_malloc_r+0x22>
 8007f5c:	1b9b      	subs	r3, r3, r6
 8007f5e:	50a3      	str	r3, [r4, r2]
 8007f60:	e7ab      	b.n	8007eba <_malloc_r+0x22>
 8007f62:	42a3      	cmp	r3, r4
 8007f64:	6862      	ldr	r2, [r4, #4]
 8007f66:	d1dd      	bne.n	8007f24 <_malloc_r+0x8c>
 8007f68:	f8c8 2000 	str.w	r2, [r8]
 8007f6c:	e7ec      	b.n	8007f48 <_malloc_r+0xb0>
 8007f6e:	4623      	mov	r3, r4
 8007f70:	6864      	ldr	r4, [r4, #4]
 8007f72:	e7ac      	b.n	8007ece <_malloc_r+0x36>
 8007f74:	4634      	mov	r4, r6
 8007f76:	6876      	ldr	r6, [r6, #4]
 8007f78:	e7b4      	b.n	8007ee4 <_malloc_r+0x4c>
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	e7cc      	b.n	8007f18 <_malloc_r+0x80>
 8007f7e:	230c      	movs	r3, #12
 8007f80:	4638      	mov	r0, r7
 8007f82:	603b      	str	r3, [r7, #0]
 8007f84:	f000 f80e 	bl	8007fa4 <__malloc_unlock>
 8007f88:	e797      	b.n	8007eba <_malloc_r+0x22>
 8007f8a:	6025      	str	r5, [r4, #0]
 8007f8c:	e7dc      	b.n	8007f48 <_malloc_r+0xb0>
 8007f8e:	605b      	str	r3, [r3, #4]
 8007f90:	deff      	udf	#255	; 0xff
 8007f92:	bf00      	nop
 8007f94:	20000a68 	.word	0x20000a68

08007f98 <__malloc_lock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__malloc_lock+0x8>)
 8007f9a:	f7ff b88e 	b.w	80070ba <__retarget_lock_acquire_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	20000a64 	.word	0x20000a64

08007fa4 <__malloc_unlock>:
 8007fa4:	4801      	ldr	r0, [pc, #4]	; (8007fac <__malloc_unlock+0x8>)
 8007fa6:	f7ff b889 	b.w	80070bc <__retarget_lock_release_recursive>
 8007faa:	bf00      	nop
 8007fac:	20000a64 	.word	0x20000a64

08007fb0 <_Balloc>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	69c6      	ldr	r6, [r0, #28]
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	460d      	mov	r5, r1
 8007fb8:	b976      	cbnz	r6, 8007fd8 <_Balloc+0x28>
 8007fba:	2010      	movs	r0, #16
 8007fbc:	f7ff ff44 	bl	8007e48 <malloc>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	61e0      	str	r0, [r4, #28]
 8007fc4:	b920      	cbnz	r0, 8007fd0 <_Balloc+0x20>
 8007fc6:	216b      	movs	r1, #107	; 0x6b
 8007fc8:	4b17      	ldr	r3, [pc, #92]	; (8008028 <_Balloc+0x78>)
 8007fca:	4818      	ldr	r0, [pc, #96]	; (800802c <_Balloc+0x7c>)
 8007fcc:	f000 fda2 	bl	8008b14 <__assert_func>
 8007fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fd4:	6006      	str	r6, [r0, #0]
 8007fd6:	60c6      	str	r6, [r0, #12]
 8007fd8:	69e6      	ldr	r6, [r4, #28]
 8007fda:	68f3      	ldr	r3, [r6, #12]
 8007fdc:	b183      	cbz	r3, 8008000 <_Balloc+0x50>
 8007fde:	69e3      	ldr	r3, [r4, #28]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fe6:	b9b8      	cbnz	r0, 8008018 <_Balloc+0x68>
 8007fe8:	2101      	movs	r1, #1
 8007fea:	fa01 f605 	lsl.w	r6, r1, r5
 8007fee:	1d72      	adds	r2, r6, #5
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	0092      	lsls	r2, r2, #2
 8007ff4:	f000 fdac 	bl	8008b50 <_calloc_r>
 8007ff8:	b160      	cbz	r0, 8008014 <_Balloc+0x64>
 8007ffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ffe:	e00e      	b.n	800801e <_Balloc+0x6e>
 8008000:	2221      	movs	r2, #33	; 0x21
 8008002:	2104      	movs	r1, #4
 8008004:	4620      	mov	r0, r4
 8008006:	f000 fda3 	bl	8008b50 <_calloc_r>
 800800a:	69e3      	ldr	r3, [r4, #28]
 800800c:	60f0      	str	r0, [r6, #12]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e4      	bne.n	8007fde <_Balloc+0x2e>
 8008014:	2000      	movs	r0, #0
 8008016:	bd70      	pop	{r4, r5, r6, pc}
 8008018:	6802      	ldr	r2, [r0, #0]
 800801a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800801e:	2300      	movs	r3, #0
 8008020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008024:	e7f7      	b.n	8008016 <_Balloc+0x66>
 8008026:	bf00      	nop
 8008028:	080099f1 	.word	0x080099f1
 800802c:	08009a71 	.word	0x08009a71

08008030 <_Bfree>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	69c6      	ldr	r6, [r0, #28]
 8008034:	4605      	mov	r5, r0
 8008036:	460c      	mov	r4, r1
 8008038:	b976      	cbnz	r6, 8008058 <_Bfree+0x28>
 800803a:	2010      	movs	r0, #16
 800803c:	f7ff ff04 	bl	8007e48 <malloc>
 8008040:	4602      	mov	r2, r0
 8008042:	61e8      	str	r0, [r5, #28]
 8008044:	b920      	cbnz	r0, 8008050 <_Bfree+0x20>
 8008046:	218f      	movs	r1, #143	; 0x8f
 8008048:	4b08      	ldr	r3, [pc, #32]	; (800806c <_Bfree+0x3c>)
 800804a:	4809      	ldr	r0, [pc, #36]	; (8008070 <_Bfree+0x40>)
 800804c:	f000 fd62 	bl	8008b14 <__assert_func>
 8008050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008054:	6006      	str	r6, [r0, #0]
 8008056:	60c6      	str	r6, [r0, #12]
 8008058:	b13c      	cbz	r4, 800806a <_Bfree+0x3a>
 800805a:	69eb      	ldr	r3, [r5, #28]
 800805c:	6862      	ldr	r2, [r4, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008064:	6021      	str	r1, [r4, #0]
 8008066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	080099f1 	.word	0x080099f1
 8008070:	08009a71 	.word	0x08009a71

08008074 <__multadd>:
 8008074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008078:	4607      	mov	r7, r0
 800807a:	460c      	mov	r4, r1
 800807c:	461e      	mov	r6, r3
 800807e:	2000      	movs	r0, #0
 8008080:	690d      	ldr	r5, [r1, #16]
 8008082:	f101 0c14 	add.w	ip, r1, #20
 8008086:	f8dc 3000 	ldr.w	r3, [ip]
 800808a:	3001      	adds	r0, #1
 800808c:	b299      	uxth	r1, r3
 800808e:	fb02 6101 	mla	r1, r2, r1, r6
 8008092:	0c1e      	lsrs	r6, r3, #16
 8008094:	0c0b      	lsrs	r3, r1, #16
 8008096:	fb02 3306 	mla	r3, r2, r6, r3
 800809a:	b289      	uxth	r1, r1
 800809c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080a0:	4285      	cmp	r5, r0
 80080a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080a6:	f84c 1b04 	str.w	r1, [ip], #4
 80080aa:	dcec      	bgt.n	8008086 <__multadd+0x12>
 80080ac:	b30e      	cbz	r6, 80080f2 <__multadd+0x7e>
 80080ae:	68a3      	ldr	r3, [r4, #8]
 80080b0:	42ab      	cmp	r3, r5
 80080b2:	dc19      	bgt.n	80080e8 <__multadd+0x74>
 80080b4:	6861      	ldr	r1, [r4, #4]
 80080b6:	4638      	mov	r0, r7
 80080b8:	3101      	adds	r1, #1
 80080ba:	f7ff ff79 	bl	8007fb0 <_Balloc>
 80080be:	4680      	mov	r8, r0
 80080c0:	b928      	cbnz	r0, 80080ce <__multadd+0x5a>
 80080c2:	4602      	mov	r2, r0
 80080c4:	21ba      	movs	r1, #186	; 0xba
 80080c6:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <__multadd+0x84>)
 80080c8:	480c      	ldr	r0, [pc, #48]	; (80080fc <__multadd+0x88>)
 80080ca:	f000 fd23 	bl	8008b14 <__assert_func>
 80080ce:	6922      	ldr	r2, [r4, #16]
 80080d0:	f104 010c 	add.w	r1, r4, #12
 80080d4:	3202      	adds	r2, #2
 80080d6:	0092      	lsls	r2, r2, #2
 80080d8:	300c      	adds	r0, #12
 80080da:	f000 fd0d 	bl	8008af8 <memcpy>
 80080de:	4621      	mov	r1, r4
 80080e0:	4638      	mov	r0, r7
 80080e2:	f7ff ffa5 	bl	8008030 <_Bfree>
 80080e6:	4644      	mov	r4, r8
 80080e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080ec:	3501      	adds	r5, #1
 80080ee:	615e      	str	r6, [r3, #20]
 80080f0:	6125      	str	r5, [r4, #16]
 80080f2:	4620      	mov	r0, r4
 80080f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f8:	08009a60 	.word	0x08009a60
 80080fc:	08009a71 	.word	0x08009a71

08008100 <__hi0bits>:
 8008100:	0c02      	lsrs	r2, r0, #16
 8008102:	0412      	lsls	r2, r2, #16
 8008104:	4603      	mov	r3, r0
 8008106:	b9ca      	cbnz	r2, 800813c <__hi0bits+0x3c>
 8008108:	0403      	lsls	r3, r0, #16
 800810a:	2010      	movs	r0, #16
 800810c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008110:	bf04      	itt	eq
 8008112:	021b      	lsleq	r3, r3, #8
 8008114:	3008      	addeq	r0, #8
 8008116:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800811a:	bf04      	itt	eq
 800811c:	011b      	lsleq	r3, r3, #4
 800811e:	3004      	addeq	r0, #4
 8008120:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008124:	bf04      	itt	eq
 8008126:	009b      	lsleq	r3, r3, #2
 8008128:	3002      	addeq	r0, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	db05      	blt.n	800813a <__hi0bits+0x3a>
 800812e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008132:	f100 0001 	add.w	r0, r0, #1
 8008136:	bf08      	it	eq
 8008138:	2020      	moveq	r0, #32
 800813a:	4770      	bx	lr
 800813c:	2000      	movs	r0, #0
 800813e:	e7e5      	b.n	800810c <__hi0bits+0xc>

08008140 <__lo0bits>:
 8008140:	6803      	ldr	r3, [r0, #0]
 8008142:	4602      	mov	r2, r0
 8008144:	f013 0007 	ands.w	r0, r3, #7
 8008148:	d00b      	beq.n	8008162 <__lo0bits+0x22>
 800814a:	07d9      	lsls	r1, r3, #31
 800814c:	d421      	bmi.n	8008192 <__lo0bits+0x52>
 800814e:	0798      	lsls	r0, r3, #30
 8008150:	bf49      	itett	mi
 8008152:	085b      	lsrmi	r3, r3, #1
 8008154:	089b      	lsrpl	r3, r3, #2
 8008156:	2001      	movmi	r0, #1
 8008158:	6013      	strmi	r3, [r2, #0]
 800815a:	bf5c      	itt	pl
 800815c:	2002      	movpl	r0, #2
 800815e:	6013      	strpl	r3, [r2, #0]
 8008160:	4770      	bx	lr
 8008162:	b299      	uxth	r1, r3
 8008164:	b909      	cbnz	r1, 800816a <__lo0bits+0x2a>
 8008166:	2010      	movs	r0, #16
 8008168:	0c1b      	lsrs	r3, r3, #16
 800816a:	b2d9      	uxtb	r1, r3
 800816c:	b909      	cbnz	r1, 8008172 <__lo0bits+0x32>
 800816e:	3008      	adds	r0, #8
 8008170:	0a1b      	lsrs	r3, r3, #8
 8008172:	0719      	lsls	r1, r3, #28
 8008174:	bf04      	itt	eq
 8008176:	091b      	lsreq	r3, r3, #4
 8008178:	3004      	addeq	r0, #4
 800817a:	0799      	lsls	r1, r3, #30
 800817c:	bf04      	itt	eq
 800817e:	089b      	lsreq	r3, r3, #2
 8008180:	3002      	addeq	r0, #2
 8008182:	07d9      	lsls	r1, r3, #31
 8008184:	d403      	bmi.n	800818e <__lo0bits+0x4e>
 8008186:	085b      	lsrs	r3, r3, #1
 8008188:	f100 0001 	add.w	r0, r0, #1
 800818c:	d003      	beq.n	8008196 <__lo0bits+0x56>
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	4770      	bx	lr
 8008192:	2000      	movs	r0, #0
 8008194:	4770      	bx	lr
 8008196:	2020      	movs	r0, #32
 8008198:	4770      	bx	lr
	...

0800819c <__i2b>:
 800819c:	b510      	push	{r4, lr}
 800819e:	460c      	mov	r4, r1
 80081a0:	2101      	movs	r1, #1
 80081a2:	f7ff ff05 	bl	8007fb0 <_Balloc>
 80081a6:	4602      	mov	r2, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__i2b+0x1a>
 80081aa:	f240 1145 	movw	r1, #325	; 0x145
 80081ae:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <__i2b+0x24>)
 80081b0:	4804      	ldr	r0, [pc, #16]	; (80081c4 <__i2b+0x28>)
 80081b2:	f000 fcaf 	bl	8008b14 <__assert_func>
 80081b6:	2301      	movs	r3, #1
 80081b8:	6144      	str	r4, [r0, #20]
 80081ba:	6103      	str	r3, [r0, #16]
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	bf00      	nop
 80081c0:	08009a60 	.word	0x08009a60
 80081c4:	08009a71 	.word	0x08009a71

080081c8 <__multiply>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	4691      	mov	r9, r2
 80081ce:	690a      	ldr	r2, [r1, #16]
 80081d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081d4:	460c      	mov	r4, r1
 80081d6:	429a      	cmp	r2, r3
 80081d8:	bfbe      	ittt	lt
 80081da:	460b      	movlt	r3, r1
 80081dc:	464c      	movlt	r4, r9
 80081de:	4699      	movlt	r9, r3
 80081e0:	6927      	ldr	r7, [r4, #16]
 80081e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081e6:	68a3      	ldr	r3, [r4, #8]
 80081e8:	6861      	ldr	r1, [r4, #4]
 80081ea:	eb07 060a 	add.w	r6, r7, sl
 80081ee:	42b3      	cmp	r3, r6
 80081f0:	b085      	sub	sp, #20
 80081f2:	bfb8      	it	lt
 80081f4:	3101      	addlt	r1, #1
 80081f6:	f7ff fedb 	bl	8007fb0 <_Balloc>
 80081fa:	b930      	cbnz	r0, 800820a <__multiply+0x42>
 80081fc:	4602      	mov	r2, r0
 80081fe:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008202:	4b43      	ldr	r3, [pc, #268]	; (8008310 <__multiply+0x148>)
 8008204:	4843      	ldr	r0, [pc, #268]	; (8008314 <__multiply+0x14c>)
 8008206:	f000 fc85 	bl	8008b14 <__assert_func>
 800820a:	f100 0514 	add.w	r5, r0, #20
 800820e:	462b      	mov	r3, r5
 8008210:	2200      	movs	r2, #0
 8008212:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008216:	4543      	cmp	r3, r8
 8008218:	d321      	bcc.n	800825e <__multiply+0x96>
 800821a:	f104 0314 	add.w	r3, r4, #20
 800821e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008222:	f109 0314 	add.w	r3, r9, #20
 8008226:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800822a:	9202      	str	r2, [sp, #8]
 800822c:	1b3a      	subs	r2, r7, r4
 800822e:	3a15      	subs	r2, #21
 8008230:	f022 0203 	bic.w	r2, r2, #3
 8008234:	3204      	adds	r2, #4
 8008236:	f104 0115 	add.w	r1, r4, #21
 800823a:	428f      	cmp	r7, r1
 800823c:	bf38      	it	cc
 800823e:	2204      	movcc	r2, #4
 8008240:	9201      	str	r2, [sp, #4]
 8008242:	9a02      	ldr	r2, [sp, #8]
 8008244:	9303      	str	r3, [sp, #12]
 8008246:	429a      	cmp	r2, r3
 8008248:	d80c      	bhi.n	8008264 <__multiply+0x9c>
 800824a:	2e00      	cmp	r6, #0
 800824c:	dd03      	ble.n	8008256 <__multiply+0x8e>
 800824e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008252:	2b00      	cmp	r3, #0
 8008254:	d05a      	beq.n	800830c <__multiply+0x144>
 8008256:	6106      	str	r6, [r0, #16]
 8008258:	b005      	add	sp, #20
 800825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825e:	f843 2b04 	str.w	r2, [r3], #4
 8008262:	e7d8      	b.n	8008216 <__multiply+0x4e>
 8008264:	f8b3 a000 	ldrh.w	sl, [r3]
 8008268:	f1ba 0f00 	cmp.w	sl, #0
 800826c:	d023      	beq.n	80082b6 <__multiply+0xee>
 800826e:	46a9      	mov	r9, r5
 8008270:	f04f 0c00 	mov.w	ip, #0
 8008274:	f104 0e14 	add.w	lr, r4, #20
 8008278:	f85e 2b04 	ldr.w	r2, [lr], #4
 800827c:	f8d9 1000 	ldr.w	r1, [r9]
 8008280:	fa1f fb82 	uxth.w	fp, r2
 8008284:	b289      	uxth	r1, r1
 8008286:	fb0a 110b 	mla	r1, sl, fp, r1
 800828a:	4461      	add	r1, ip
 800828c:	f8d9 c000 	ldr.w	ip, [r9]
 8008290:	0c12      	lsrs	r2, r2, #16
 8008292:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008296:	fb0a c202 	mla	r2, sl, r2, ip
 800829a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800829e:	b289      	uxth	r1, r1
 80082a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082a4:	4577      	cmp	r7, lr
 80082a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082aa:	f849 1b04 	str.w	r1, [r9], #4
 80082ae:	d8e3      	bhi.n	8008278 <__multiply+0xb0>
 80082b0:	9a01      	ldr	r2, [sp, #4]
 80082b2:	f845 c002 	str.w	ip, [r5, r2]
 80082b6:	9a03      	ldr	r2, [sp, #12]
 80082b8:	3304      	adds	r3, #4
 80082ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082be:	f1b9 0f00 	cmp.w	r9, #0
 80082c2:	d021      	beq.n	8008308 <__multiply+0x140>
 80082c4:	46ae      	mov	lr, r5
 80082c6:	f04f 0a00 	mov.w	sl, #0
 80082ca:	6829      	ldr	r1, [r5, #0]
 80082cc:	f104 0c14 	add.w	ip, r4, #20
 80082d0:	f8bc b000 	ldrh.w	fp, [ip]
 80082d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082d8:	b289      	uxth	r1, r1
 80082da:	fb09 220b 	mla	r2, r9, fp, r2
 80082de:	4452      	add	r2, sl
 80082e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082e4:	f84e 1b04 	str.w	r1, [lr], #4
 80082e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80082ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082f0:	f8be 1000 	ldrh.w	r1, [lr]
 80082f4:	4567      	cmp	r7, ip
 80082f6:	fb09 110a 	mla	r1, r9, sl, r1
 80082fa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80082fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008302:	d8e5      	bhi.n	80082d0 <__multiply+0x108>
 8008304:	9a01      	ldr	r2, [sp, #4]
 8008306:	50a9      	str	r1, [r5, r2]
 8008308:	3504      	adds	r5, #4
 800830a:	e79a      	b.n	8008242 <__multiply+0x7a>
 800830c:	3e01      	subs	r6, #1
 800830e:	e79c      	b.n	800824a <__multiply+0x82>
 8008310:	08009a60 	.word	0x08009a60
 8008314:	08009a71 	.word	0x08009a71

08008318 <__pow5mult>:
 8008318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800831c:	4615      	mov	r5, r2
 800831e:	f012 0203 	ands.w	r2, r2, #3
 8008322:	4606      	mov	r6, r0
 8008324:	460f      	mov	r7, r1
 8008326:	d007      	beq.n	8008338 <__pow5mult+0x20>
 8008328:	4c25      	ldr	r4, [pc, #148]	; (80083c0 <__pow5mult+0xa8>)
 800832a:	3a01      	subs	r2, #1
 800832c:	2300      	movs	r3, #0
 800832e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008332:	f7ff fe9f 	bl	8008074 <__multadd>
 8008336:	4607      	mov	r7, r0
 8008338:	10ad      	asrs	r5, r5, #2
 800833a:	d03d      	beq.n	80083b8 <__pow5mult+0xa0>
 800833c:	69f4      	ldr	r4, [r6, #28]
 800833e:	b97c      	cbnz	r4, 8008360 <__pow5mult+0x48>
 8008340:	2010      	movs	r0, #16
 8008342:	f7ff fd81 	bl	8007e48 <malloc>
 8008346:	4602      	mov	r2, r0
 8008348:	61f0      	str	r0, [r6, #28]
 800834a:	b928      	cbnz	r0, 8008358 <__pow5mult+0x40>
 800834c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008350:	4b1c      	ldr	r3, [pc, #112]	; (80083c4 <__pow5mult+0xac>)
 8008352:	481d      	ldr	r0, [pc, #116]	; (80083c8 <__pow5mult+0xb0>)
 8008354:	f000 fbde 	bl	8008b14 <__assert_func>
 8008358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800835c:	6004      	str	r4, [r0, #0]
 800835e:	60c4      	str	r4, [r0, #12]
 8008360:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008368:	b94c      	cbnz	r4, 800837e <__pow5mult+0x66>
 800836a:	f240 2171 	movw	r1, #625	; 0x271
 800836e:	4630      	mov	r0, r6
 8008370:	f7ff ff14 	bl	800819c <__i2b>
 8008374:	2300      	movs	r3, #0
 8008376:	4604      	mov	r4, r0
 8008378:	f8c8 0008 	str.w	r0, [r8, #8]
 800837c:	6003      	str	r3, [r0, #0]
 800837e:	f04f 0900 	mov.w	r9, #0
 8008382:	07eb      	lsls	r3, r5, #31
 8008384:	d50a      	bpl.n	800839c <__pow5mult+0x84>
 8008386:	4639      	mov	r1, r7
 8008388:	4622      	mov	r2, r4
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ff1c 	bl	80081c8 <__multiply>
 8008390:	4680      	mov	r8, r0
 8008392:	4639      	mov	r1, r7
 8008394:	4630      	mov	r0, r6
 8008396:	f7ff fe4b 	bl	8008030 <_Bfree>
 800839a:	4647      	mov	r7, r8
 800839c:	106d      	asrs	r5, r5, #1
 800839e:	d00b      	beq.n	80083b8 <__pow5mult+0xa0>
 80083a0:	6820      	ldr	r0, [r4, #0]
 80083a2:	b938      	cbnz	r0, 80083b4 <__pow5mult+0x9c>
 80083a4:	4622      	mov	r2, r4
 80083a6:	4621      	mov	r1, r4
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7ff ff0d 	bl	80081c8 <__multiply>
 80083ae:	6020      	str	r0, [r4, #0]
 80083b0:	f8c0 9000 	str.w	r9, [r0]
 80083b4:	4604      	mov	r4, r0
 80083b6:	e7e4      	b.n	8008382 <__pow5mult+0x6a>
 80083b8:	4638      	mov	r0, r7
 80083ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083be:	bf00      	nop
 80083c0:	08009bc0 	.word	0x08009bc0
 80083c4:	080099f1 	.word	0x080099f1
 80083c8:	08009a71 	.word	0x08009a71

080083cc <__lshift>:
 80083cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d0:	460c      	mov	r4, r1
 80083d2:	4607      	mov	r7, r0
 80083d4:	4691      	mov	r9, r2
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	6849      	ldr	r1, [r1, #4]
 80083da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083de:	68a3      	ldr	r3, [r4, #8]
 80083e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083e4:	f108 0601 	add.w	r6, r8, #1
 80083e8:	42b3      	cmp	r3, r6
 80083ea:	db0b      	blt.n	8008404 <__lshift+0x38>
 80083ec:	4638      	mov	r0, r7
 80083ee:	f7ff fddf 	bl	8007fb0 <_Balloc>
 80083f2:	4605      	mov	r5, r0
 80083f4:	b948      	cbnz	r0, 800840a <__lshift+0x3e>
 80083f6:	4602      	mov	r2, r0
 80083f8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80083fc:	4b27      	ldr	r3, [pc, #156]	; (800849c <__lshift+0xd0>)
 80083fe:	4828      	ldr	r0, [pc, #160]	; (80084a0 <__lshift+0xd4>)
 8008400:	f000 fb88 	bl	8008b14 <__assert_func>
 8008404:	3101      	adds	r1, #1
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	e7ee      	b.n	80083e8 <__lshift+0x1c>
 800840a:	2300      	movs	r3, #0
 800840c:	f100 0114 	add.w	r1, r0, #20
 8008410:	f100 0210 	add.w	r2, r0, #16
 8008414:	4618      	mov	r0, r3
 8008416:	4553      	cmp	r3, sl
 8008418:	db33      	blt.n	8008482 <__lshift+0xb6>
 800841a:	6920      	ldr	r0, [r4, #16]
 800841c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008420:	f104 0314 	add.w	r3, r4, #20
 8008424:	f019 091f 	ands.w	r9, r9, #31
 8008428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800842c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008430:	d02b      	beq.n	800848a <__lshift+0xbe>
 8008432:	468a      	mov	sl, r1
 8008434:	2200      	movs	r2, #0
 8008436:	f1c9 0e20 	rsb	lr, r9, #32
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	fa00 f009 	lsl.w	r0, r0, r9
 8008440:	4310      	orrs	r0, r2
 8008442:	f84a 0b04 	str.w	r0, [sl], #4
 8008446:	f853 2b04 	ldr.w	r2, [r3], #4
 800844a:	459c      	cmp	ip, r3
 800844c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008450:	d8f3      	bhi.n	800843a <__lshift+0x6e>
 8008452:	ebac 0304 	sub.w	r3, ip, r4
 8008456:	3b15      	subs	r3, #21
 8008458:	f023 0303 	bic.w	r3, r3, #3
 800845c:	3304      	adds	r3, #4
 800845e:	f104 0015 	add.w	r0, r4, #21
 8008462:	4584      	cmp	ip, r0
 8008464:	bf38      	it	cc
 8008466:	2304      	movcc	r3, #4
 8008468:	50ca      	str	r2, [r1, r3]
 800846a:	b10a      	cbz	r2, 8008470 <__lshift+0xa4>
 800846c:	f108 0602 	add.w	r6, r8, #2
 8008470:	3e01      	subs	r6, #1
 8008472:	4638      	mov	r0, r7
 8008474:	4621      	mov	r1, r4
 8008476:	612e      	str	r6, [r5, #16]
 8008478:	f7ff fdda 	bl	8008030 <_Bfree>
 800847c:	4628      	mov	r0, r5
 800847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008482:	f842 0f04 	str.w	r0, [r2, #4]!
 8008486:	3301      	adds	r3, #1
 8008488:	e7c5      	b.n	8008416 <__lshift+0x4a>
 800848a:	3904      	subs	r1, #4
 800848c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008490:	459c      	cmp	ip, r3
 8008492:	f841 2f04 	str.w	r2, [r1, #4]!
 8008496:	d8f9      	bhi.n	800848c <__lshift+0xc0>
 8008498:	e7ea      	b.n	8008470 <__lshift+0xa4>
 800849a:	bf00      	nop
 800849c:	08009a60 	.word	0x08009a60
 80084a0:	08009a71 	.word	0x08009a71

080084a4 <__mcmp>:
 80084a4:	4603      	mov	r3, r0
 80084a6:	690a      	ldr	r2, [r1, #16]
 80084a8:	6900      	ldr	r0, [r0, #16]
 80084aa:	b530      	push	{r4, r5, lr}
 80084ac:	1a80      	subs	r0, r0, r2
 80084ae:	d10d      	bne.n	80084cc <__mcmp+0x28>
 80084b0:	3314      	adds	r3, #20
 80084b2:	3114      	adds	r1, #20
 80084b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084c4:	4295      	cmp	r5, r2
 80084c6:	d002      	beq.n	80084ce <__mcmp+0x2a>
 80084c8:	d304      	bcc.n	80084d4 <__mcmp+0x30>
 80084ca:	2001      	movs	r0, #1
 80084cc:	bd30      	pop	{r4, r5, pc}
 80084ce:	42a3      	cmp	r3, r4
 80084d0:	d3f4      	bcc.n	80084bc <__mcmp+0x18>
 80084d2:	e7fb      	b.n	80084cc <__mcmp+0x28>
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	e7f8      	b.n	80084cc <__mcmp+0x28>
	...

080084dc <__mdiff>:
 80084dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	460d      	mov	r5, r1
 80084e2:	4607      	mov	r7, r0
 80084e4:	4611      	mov	r1, r2
 80084e6:	4628      	mov	r0, r5
 80084e8:	4614      	mov	r4, r2
 80084ea:	f7ff ffdb 	bl	80084a4 <__mcmp>
 80084ee:	1e06      	subs	r6, r0, #0
 80084f0:	d111      	bne.n	8008516 <__mdiff+0x3a>
 80084f2:	4631      	mov	r1, r6
 80084f4:	4638      	mov	r0, r7
 80084f6:	f7ff fd5b 	bl	8007fb0 <_Balloc>
 80084fa:	4602      	mov	r2, r0
 80084fc:	b928      	cbnz	r0, 800850a <__mdiff+0x2e>
 80084fe:	f240 2137 	movw	r1, #567	; 0x237
 8008502:	4b3a      	ldr	r3, [pc, #232]	; (80085ec <__mdiff+0x110>)
 8008504:	483a      	ldr	r0, [pc, #232]	; (80085f0 <__mdiff+0x114>)
 8008506:	f000 fb05 	bl	8008b14 <__assert_func>
 800850a:	2301      	movs	r3, #1
 800850c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008510:	4610      	mov	r0, r2
 8008512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	bfa4      	itt	ge
 8008518:	4623      	movge	r3, r4
 800851a:	462c      	movge	r4, r5
 800851c:	4638      	mov	r0, r7
 800851e:	6861      	ldr	r1, [r4, #4]
 8008520:	bfa6      	itte	ge
 8008522:	461d      	movge	r5, r3
 8008524:	2600      	movge	r6, #0
 8008526:	2601      	movlt	r6, #1
 8008528:	f7ff fd42 	bl	8007fb0 <_Balloc>
 800852c:	4602      	mov	r2, r0
 800852e:	b918      	cbnz	r0, 8008538 <__mdiff+0x5c>
 8008530:	f240 2145 	movw	r1, #581	; 0x245
 8008534:	4b2d      	ldr	r3, [pc, #180]	; (80085ec <__mdiff+0x110>)
 8008536:	e7e5      	b.n	8008504 <__mdiff+0x28>
 8008538:	f102 0814 	add.w	r8, r2, #20
 800853c:	46c2      	mov	sl, r8
 800853e:	f04f 0c00 	mov.w	ip, #0
 8008542:	6927      	ldr	r7, [r4, #16]
 8008544:	60c6      	str	r6, [r0, #12]
 8008546:	692e      	ldr	r6, [r5, #16]
 8008548:	f104 0014 	add.w	r0, r4, #20
 800854c:	f105 0914 	add.w	r9, r5, #20
 8008550:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008554:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008558:	3410      	adds	r4, #16
 800855a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800855e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008562:	fa1f f18b 	uxth.w	r1, fp
 8008566:	4461      	add	r1, ip
 8008568:	fa1f fc83 	uxth.w	ip, r3
 800856c:	0c1b      	lsrs	r3, r3, #16
 800856e:	eba1 010c 	sub.w	r1, r1, ip
 8008572:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008576:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800857a:	b289      	uxth	r1, r1
 800857c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008580:	454e      	cmp	r6, r9
 8008582:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008586:	f84a 1b04 	str.w	r1, [sl], #4
 800858a:	d8e6      	bhi.n	800855a <__mdiff+0x7e>
 800858c:	1b73      	subs	r3, r6, r5
 800858e:	3b15      	subs	r3, #21
 8008590:	f023 0303 	bic.w	r3, r3, #3
 8008594:	3515      	adds	r5, #21
 8008596:	3304      	adds	r3, #4
 8008598:	42ae      	cmp	r6, r5
 800859a:	bf38      	it	cc
 800859c:	2304      	movcc	r3, #4
 800859e:	4418      	add	r0, r3
 80085a0:	4443      	add	r3, r8
 80085a2:	461e      	mov	r6, r3
 80085a4:	4605      	mov	r5, r0
 80085a6:	4575      	cmp	r5, lr
 80085a8:	d30e      	bcc.n	80085c8 <__mdiff+0xec>
 80085aa:	f10e 0103 	add.w	r1, lr, #3
 80085ae:	1a09      	subs	r1, r1, r0
 80085b0:	f021 0103 	bic.w	r1, r1, #3
 80085b4:	3803      	subs	r0, #3
 80085b6:	4586      	cmp	lr, r0
 80085b8:	bf38      	it	cc
 80085ba:	2100      	movcc	r1, #0
 80085bc:	440b      	add	r3, r1
 80085be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085c2:	b189      	cbz	r1, 80085e8 <__mdiff+0x10c>
 80085c4:	6117      	str	r7, [r2, #16]
 80085c6:	e7a3      	b.n	8008510 <__mdiff+0x34>
 80085c8:	f855 8b04 	ldr.w	r8, [r5], #4
 80085cc:	fa1f f188 	uxth.w	r1, r8
 80085d0:	4461      	add	r1, ip
 80085d2:	140c      	asrs	r4, r1, #16
 80085d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085d8:	b289      	uxth	r1, r1
 80085da:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80085de:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80085e2:	f846 1b04 	str.w	r1, [r6], #4
 80085e6:	e7de      	b.n	80085a6 <__mdiff+0xca>
 80085e8:	3f01      	subs	r7, #1
 80085ea:	e7e8      	b.n	80085be <__mdiff+0xe2>
 80085ec:	08009a60 	.word	0x08009a60
 80085f0:	08009a71 	.word	0x08009a71

080085f4 <__d2b>:
 80085f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f6:	2101      	movs	r1, #1
 80085f8:	4617      	mov	r7, r2
 80085fa:	461c      	mov	r4, r3
 80085fc:	9e08      	ldr	r6, [sp, #32]
 80085fe:	f7ff fcd7 	bl	8007fb0 <_Balloc>
 8008602:	4605      	mov	r5, r0
 8008604:	b930      	cbnz	r0, 8008614 <__d2b+0x20>
 8008606:	4602      	mov	r2, r0
 8008608:	f240 310f 	movw	r1, #783	; 0x30f
 800860c:	4b22      	ldr	r3, [pc, #136]	; (8008698 <__d2b+0xa4>)
 800860e:	4823      	ldr	r0, [pc, #140]	; (800869c <__d2b+0xa8>)
 8008610:	f000 fa80 	bl	8008b14 <__assert_func>
 8008614:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008618:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800861c:	bb24      	cbnz	r4, 8008668 <__d2b+0x74>
 800861e:	2f00      	cmp	r7, #0
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	d026      	beq.n	8008672 <__d2b+0x7e>
 8008624:	4668      	mov	r0, sp
 8008626:	9700      	str	r7, [sp, #0]
 8008628:	f7ff fd8a 	bl	8008140 <__lo0bits>
 800862c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008630:	b1e8      	cbz	r0, 800866e <__d2b+0x7a>
 8008632:	f1c0 0320 	rsb	r3, r0, #32
 8008636:	fa02 f303 	lsl.w	r3, r2, r3
 800863a:	430b      	orrs	r3, r1
 800863c:	40c2      	lsrs	r2, r0
 800863e:	616b      	str	r3, [r5, #20]
 8008640:	9201      	str	r2, [sp, #4]
 8008642:	9b01      	ldr	r3, [sp, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	bf14      	ite	ne
 8008648:	2102      	movne	r1, #2
 800864a:	2101      	moveq	r1, #1
 800864c:	61ab      	str	r3, [r5, #24]
 800864e:	6129      	str	r1, [r5, #16]
 8008650:	b1bc      	cbz	r4, 8008682 <__d2b+0x8e>
 8008652:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008656:	4404      	add	r4, r0
 8008658:	6034      	str	r4, [r6, #0]
 800865a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	6018      	str	r0, [r3, #0]
 8008662:	4628      	mov	r0, r5
 8008664:	b003      	add	sp, #12
 8008666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800866c:	e7d7      	b.n	800861e <__d2b+0x2a>
 800866e:	6169      	str	r1, [r5, #20]
 8008670:	e7e7      	b.n	8008642 <__d2b+0x4e>
 8008672:	a801      	add	r0, sp, #4
 8008674:	f7ff fd64 	bl	8008140 <__lo0bits>
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	2101      	movs	r1, #1
 800867c:	616b      	str	r3, [r5, #20]
 800867e:	3020      	adds	r0, #32
 8008680:	e7e5      	b.n	800864e <__d2b+0x5a>
 8008682:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008686:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800868a:	6030      	str	r0, [r6, #0]
 800868c:	6918      	ldr	r0, [r3, #16]
 800868e:	f7ff fd37 	bl	8008100 <__hi0bits>
 8008692:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008696:	e7e2      	b.n	800865e <__d2b+0x6a>
 8008698:	08009a60 	.word	0x08009a60
 800869c:	08009a71 	.word	0x08009a71

080086a0 <__ssputs_r>:
 80086a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	461f      	mov	r7, r3
 80086a6:	688e      	ldr	r6, [r1, #8]
 80086a8:	4682      	mov	sl, r0
 80086aa:	42be      	cmp	r6, r7
 80086ac:	460c      	mov	r4, r1
 80086ae:	4690      	mov	r8, r2
 80086b0:	680b      	ldr	r3, [r1, #0]
 80086b2:	d82c      	bhi.n	800870e <__ssputs_r+0x6e>
 80086b4:	898a      	ldrh	r2, [r1, #12]
 80086b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086ba:	d026      	beq.n	800870a <__ssputs_r+0x6a>
 80086bc:	6965      	ldr	r5, [r4, #20]
 80086be:	6909      	ldr	r1, [r1, #16]
 80086c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086c4:	eba3 0901 	sub.w	r9, r3, r1
 80086c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086cc:	1c7b      	adds	r3, r7, #1
 80086ce:	444b      	add	r3, r9
 80086d0:	106d      	asrs	r5, r5, #1
 80086d2:	429d      	cmp	r5, r3
 80086d4:	bf38      	it	cc
 80086d6:	461d      	movcc	r5, r3
 80086d8:	0553      	lsls	r3, r2, #21
 80086da:	d527      	bpl.n	800872c <__ssputs_r+0x8c>
 80086dc:	4629      	mov	r1, r5
 80086de:	f7ff fbdb 	bl	8007e98 <_malloc_r>
 80086e2:	4606      	mov	r6, r0
 80086e4:	b360      	cbz	r0, 8008740 <__ssputs_r+0xa0>
 80086e6:	464a      	mov	r2, r9
 80086e8:	6921      	ldr	r1, [r4, #16]
 80086ea:	f000 fa05 	bl	8008af8 <memcpy>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f8:	81a3      	strh	r3, [r4, #12]
 80086fa:	6126      	str	r6, [r4, #16]
 80086fc:	444e      	add	r6, r9
 80086fe:	6026      	str	r6, [r4, #0]
 8008700:	463e      	mov	r6, r7
 8008702:	6165      	str	r5, [r4, #20]
 8008704:	eba5 0509 	sub.w	r5, r5, r9
 8008708:	60a5      	str	r5, [r4, #8]
 800870a:	42be      	cmp	r6, r7
 800870c:	d900      	bls.n	8008710 <__ssputs_r+0x70>
 800870e:	463e      	mov	r6, r7
 8008710:	4632      	mov	r2, r6
 8008712:	4641      	mov	r1, r8
 8008714:	6820      	ldr	r0, [r4, #0]
 8008716:	f000 f9c5 	bl	8008aa4 <memmove>
 800871a:	2000      	movs	r0, #0
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	1b9b      	subs	r3, r3, r6
 8008720:	60a3      	str	r3, [r4, #8]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	4433      	add	r3, r6
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800872c:	462a      	mov	r2, r5
 800872e:	f000 fa35 	bl	8008b9c <_realloc_r>
 8008732:	4606      	mov	r6, r0
 8008734:	2800      	cmp	r0, #0
 8008736:	d1e0      	bne.n	80086fa <__ssputs_r+0x5a>
 8008738:	4650      	mov	r0, sl
 800873a:	6921      	ldr	r1, [r4, #16]
 800873c:	f7ff fb3c 	bl	8007db8 <_free_r>
 8008740:	230c      	movs	r3, #12
 8008742:	f8ca 3000 	str.w	r3, [sl]
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	e7e9      	b.n	8008728 <__ssputs_r+0x88>

08008754 <_svfiprintf_r>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	4698      	mov	r8, r3
 800875a:	898b      	ldrh	r3, [r1, #12]
 800875c:	4607      	mov	r7, r0
 800875e:	061b      	lsls	r3, r3, #24
 8008760:	460d      	mov	r5, r1
 8008762:	4614      	mov	r4, r2
 8008764:	b09d      	sub	sp, #116	; 0x74
 8008766:	d50e      	bpl.n	8008786 <_svfiprintf_r+0x32>
 8008768:	690b      	ldr	r3, [r1, #16]
 800876a:	b963      	cbnz	r3, 8008786 <_svfiprintf_r+0x32>
 800876c:	2140      	movs	r1, #64	; 0x40
 800876e:	f7ff fb93 	bl	8007e98 <_malloc_r>
 8008772:	6028      	str	r0, [r5, #0]
 8008774:	6128      	str	r0, [r5, #16]
 8008776:	b920      	cbnz	r0, 8008782 <_svfiprintf_r+0x2e>
 8008778:	230c      	movs	r3, #12
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	e0d0      	b.n	8008924 <_svfiprintf_r+0x1d0>
 8008782:	2340      	movs	r3, #64	; 0x40
 8008784:	616b      	str	r3, [r5, #20]
 8008786:	2300      	movs	r3, #0
 8008788:	9309      	str	r3, [sp, #36]	; 0x24
 800878a:	2320      	movs	r3, #32
 800878c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008790:	2330      	movs	r3, #48	; 0x30
 8008792:	f04f 0901 	mov.w	r9, #1
 8008796:	f8cd 800c 	str.w	r8, [sp, #12]
 800879a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800893c <_svfiprintf_r+0x1e8>
 800879e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087a2:	4623      	mov	r3, r4
 80087a4:	469a      	mov	sl, r3
 80087a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087aa:	b10a      	cbz	r2, 80087b0 <_svfiprintf_r+0x5c>
 80087ac:	2a25      	cmp	r2, #37	; 0x25
 80087ae:	d1f9      	bne.n	80087a4 <_svfiprintf_r+0x50>
 80087b0:	ebba 0b04 	subs.w	fp, sl, r4
 80087b4:	d00b      	beq.n	80087ce <_svfiprintf_r+0x7a>
 80087b6:	465b      	mov	r3, fp
 80087b8:	4622      	mov	r2, r4
 80087ba:	4629      	mov	r1, r5
 80087bc:	4638      	mov	r0, r7
 80087be:	f7ff ff6f 	bl	80086a0 <__ssputs_r>
 80087c2:	3001      	adds	r0, #1
 80087c4:	f000 80a9 	beq.w	800891a <_svfiprintf_r+0x1c6>
 80087c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ca:	445a      	add	r2, fp
 80087cc:	9209      	str	r2, [sp, #36]	; 0x24
 80087ce:	f89a 3000 	ldrb.w	r3, [sl]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80a1 	beq.w	800891a <_svfiprintf_r+0x1c6>
 80087d8:	2300      	movs	r3, #0
 80087da:	f04f 32ff 	mov.w	r2, #4294967295
 80087de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087e2:	f10a 0a01 	add.w	sl, sl, #1
 80087e6:	9304      	str	r3, [sp, #16]
 80087e8:	9307      	str	r3, [sp, #28]
 80087ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087ee:	931a      	str	r3, [sp, #104]	; 0x68
 80087f0:	4654      	mov	r4, sl
 80087f2:	2205      	movs	r2, #5
 80087f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f8:	4850      	ldr	r0, [pc, #320]	; (800893c <_svfiprintf_r+0x1e8>)
 80087fa:	f7fe fc60 	bl	80070be <memchr>
 80087fe:	9a04      	ldr	r2, [sp, #16]
 8008800:	b9d8      	cbnz	r0, 800883a <_svfiprintf_r+0xe6>
 8008802:	06d0      	lsls	r0, r2, #27
 8008804:	bf44      	itt	mi
 8008806:	2320      	movmi	r3, #32
 8008808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800880c:	0711      	lsls	r1, r2, #28
 800880e:	bf44      	itt	mi
 8008810:	232b      	movmi	r3, #43	; 0x2b
 8008812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008816:	f89a 3000 	ldrb.w	r3, [sl]
 800881a:	2b2a      	cmp	r3, #42	; 0x2a
 800881c:	d015      	beq.n	800884a <_svfiprintf_r+0xf6>
 800881e:	4654      	mov	r4, sl
 8008820:	2000      	movs	r0, #0
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	9a07      	ldr	r2, [sp, #28]
 8008828:	4621      	mov	r1, r4
 800882a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800882e:	3b30      	subs	r3, #48	; 0x30
 8008830:	2b09      	cmp	r3, #9
 8008832:	d94d      	bls.n	80088d0 <_svfiprintf_r+0x17c>
 8008834:	b1b0      	cbz	r0, 8008864 <_svfiprintf_r+0x110>
 8008836:	9207      	str	r2, [sp, #28]
 8008838:	e014      	b.n	8008864 <_svfiprintf_r+0x110>
 800883a:	eba0 0308 	sub.w	r3, r0, r8
 800883e:	fa09 f303 	lsl.w	r3, r9, r3
 8008842:	4313      	orrs	r3, r2
 8008844:	46a2      	mov	sl, r4
 8008846:	9304      	str	r3, [sp, #16]
 8008848:	e7d2      	b.n	80087f0 <_svfiprintf_r+0x9c>
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	1d19      	adds	r1, r3, #4
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	9103      	str	r1, [sp, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	bfbb      	ittet	lt
 8008856:	425b      	neglt	r3, r3
 8008858:	f042 0202 	orrlt.w	r2, r2, #2
 800885c:	9307      	strge	r3, [sp, #28]
 800885e:	9307      	strlt	r3, [sp, #28]
 8008860:	bfb8      	it	lt
 8008862:	9204      	strlt	r2, [sp, #16]
 8008864:	7823      	ldrb	r3, [r4, #0]
 8008866:	2b2e      	cmp	r3, #46	; 0x2e
 8008868:	d10c      	bne.n	8008884 <_svfiprintf_r+0x130>
 800886a:	7863      	ldrb	r3, [r4, #1]
 800886c:	2b2a      	cmp	r3, #42	; 0x2a
 800886e:	d134      	bne.n	80088da <_svfiprintf_r+0x186>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	3402      	adds	r4, #2
 8008874:	1d1a      	adds	r2, r3, #4
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	9203      	str	r2, [sp, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	bfb8      	it	lt
 800887e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008882:	9305      	str	r3, [sp, #20]
 8008884:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008940 <_svfiprintf_r+0x1ec>
 8008888:	2203      	movs	r2, #3
 800888a:	4650      	mov	r0, sl
 800888c:	7821      	ldrb	r1, [r4, #0]
 800888e:	f7fe fc16 	bl	80070be <memchr>
 8008892:	b138      	cbz	r0, 80088a4 <_svfiprintf_r+0x150>
 8008894:	2240      	movs	r2, #64	; 0x40
 8008896:	9b04      	ldr	r3, [sp, #16]
 8008898:	eba0 000a 	sub.w	r0, r0, sl
 800889c:	4082      	lsls	r2, r0
 800889e:	4313      	orrs	r3, r2
 80088a0:	3401      	adds	r4, #1
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a8:	2206      	movs	r2, #6
 80088aa:	4826      	ldr	r0, [pc, #152]	; (8008944 <_svfiprintf_r+0x1f0>)
 80088ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088b0:	f7fe fc05 	bl	80070be <memchr>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d038      	beq.n	800892a <_svfiprintf_r+0x1d6>
 80088b8:	4b23      	ldr	r3, [pc, #140]	; (8008948 <_svfiprintf_r+0x1f4>)
 80088ba:	bb1b      	cbnz	r3, 8008904 <_svfiprintf_r+0x1b0>
 80088bc:	9b03      	ldr	r3, [sp, #12]
 80088be:	3307      	adds	r3, #7
 80088c0:	f023 0307 	bic.w	r3, r3, #7
 80088c4:	3308      	adds	r3, #8
 80088c6:	9303      	str	r3, [sp, #12]
 80088c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ca:	4433      	add	r3, r6
 80088cc:	9309      	str	r3, [sp, #36]	; 0x24
 80088ce:	e768      	b.n	80087a2 <_svfiprintf_r+0x4e>
 80088d0:	460c      	mov	r4, r1
 80088d2:	2001      	movs	r0, #1
 80088d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80088d8:	e7a6      	b.n	8008828 <_svfiprintf_r+0xd4>
 80088da:	2300      	movs	r3, #0
 80088dc:	f04f 0c0a 	mov.w	ip, #10
 80088e0:	4619      	mov	r1, r3
 80088e2:	3401      	adds	r4, #1
 80088e4:	9305      	str	r3, [sp, #20]
 80088e6:	4620      	mov	r0, r4
 80088e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ec:	3a30      	subs	r2, #48	; 0x30
 80088ee:	2a09      	cmp	r2, #9
 80088f0:	d903      	bls.n	80088fa <_svfiprintf_r+0x1a6>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0c6      	beq.n	8008884 <_svfiprintf_r+0x130>
 80088f6:	9105      	str	r1, [sp, #20]
 80088f8:	e7c4      	b.n	8008884 <_svfiprintf_r+0x130>
 80088fa:	4604      	mov	r4, r0
 80088fc:	2301      	movs	r3, #1
 80088fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008902:	e7f0      	b.n	80088e6 <_svfiprintf_r+0x192>
 8008904:	ab03      	add	r3, sp, #12
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	462a      	mov	r2, r5
 800890a:	4638      	mov	r0, r7
 800890c:	4b0f      	ldr	r3, [pc, #60]	; (800894c <_svfiprintf_r+0x1f8>)
 800890e:	a904      	add	r1, sp, #16
 8008910:	f7fd fe6e 	bl	80065f0 <_printf_float>
 8008914:	1c42      	adds	r2, r0, #1
 8008916:	4606      	mov	r6, r0
 8008918:	d1d6      	bne.n	80088c8 <_svfiprintf_r+0x174>
 800891a:	89ab      	ldrh	r3, [r5, #12]
 800891c:	065b      	lsls	r3, r3, #25
 800891e:	f53f af2d 	bmi.w	800877c <_svfiprintf_r+0x28>
 8008922:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008924:	b01d      	add	sp, #116	; 0x74
 8008926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892a:	ab03      	add	r3, sp, #12
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	462a      	mov	r2, r5
 8008930:	4638      	mov	r0, r7
 8008932:	4b06      	ldr	r3, [pc, #24]	; (800894c <_svfiprintf_r+0x1f8>)
 8008934:	a904      	add	r1, sp, #16
 8008936:	f7fe f8fb 	bl	8006b30 <_printf_i>
 800893a:	e7eb      	b.n	8008914 <_svfiprintf_r+0x1c0>
 800893c:	08009bcc 	.word	0x08009bcc
 8008940:	08009bd2 	.word	0x08009bd2
 8008944:	08009bd6 	.word	0x08009bd6
 8008948:	080065f1 	.word	0x080065f1
 800894c:	080086a1 	.word	0x080086a1

08008950 <__sflush_r>:
 8008950:	898a      	ldrh	r2, [r1, #12]
 8008952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008954:	4605      	mov	r5, r0
 8008956:	0710      	lsls	r0, r2, #28
 8008958:	460c      	mov	r4, r1
 800895a:	d457      	bmi.n	8008a0c <__sflush_r+0xbc>
 800895c:	684b      	ldr	r3, [r1, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	dc04      	bgt.n	800896c <__sflush_r+0x1c>
 8008962:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc01      	bgt.n	800896c <__sflush_r+0x1c>
 8008968:	2000      	movs	r0, #0
 800896a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800896c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800896e:	2e00      	cmp	r6, #0
 8008970:	d0fa      	beq.n	8008968 <__sflush_r+0x18>
 8008972:	2300      	movs	r3, #0
 8008974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008978:	682f      	ldr	r7, [r5, #0]
 800897a:	6a21      	ldr	r1, [r4, #32]
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	d032      	beq.n	80089e6 <__sflush_r+0x96>
 8008980:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	075a      	lsls	r2, r3, #29
 8008986:	d505      	bpl.n	8008994 <__sflush_r+0x44>
 8008988:	6863      	ldr	r3, [r4, #4]
 800898a:	1ac0      	subs	r0, r0, r3
 800898c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800898e:	b10b      	cbz	r3, 8008994 <__sflush_r+0x44>
 8008990:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008992:	1ac0      	subs	r0, r0, r3
 8008994:	2300      	movs	r3, #0
 8008996:	4602      	mov	r2, r0
 8008998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800899a:	4628      	mov	r0, r5
 800899c:	6a21      	ldr	r1, [r4, #32]
 800899e:	47b0      	blx	r6
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	d106      	bne.n	80089b4 <__sflush_r+0x64>
 80089a6:	6829      	ldr	r1, [r5, #0]
 80089a8:	291d      	cmp	r1, #29
 80089aa:	d82b      	bhi.n	8008a04 <__sflush_r+0xb4>
 80089ac:	4a28      	ldr	r2, [pc, #160]	; (8008a50 <__sflush_r+0x100>)
 80089ae:	410a      	asrs	r2, r1
 80089b0:	07d6      	lsls	r6, r2, #31
 80089b2:	d427      	bmi.n	8008a04 <__sflush_r+0xb4>
 80089b4:	2200      	movs	r2, #0
 80089b6:	6062      	str	r2, [r4, #4]
 80089b8:	6922      	ldr	r2, [r4, #16]
 80089ba:	04d9      	lsls	r1, r3, #19
 80089bc:	6022      	str	r2, [r4, #0]
 80089be:	d504      	bpl.n	80089ca <__sflush_r+0x7a>
 80089c0:	1c42      	adds	r2, r0, #1
 80089c2:	d101      	bne.n	80089c8 <__sflush_r+0x78>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b903      	cbnz	r3, 80089ca <__sflush_r+0x7a>
 80089c8:	6560      	str	r0, [r4, #84]	; 0x54
 80089ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089cc:	602f      	str	r7, [r5, #0]
 80089ce:	2900      	cmp	r1, #0
 80089d0:	d0ca      	beq.n	8008968 <__sflush_r+0x18>
 80089d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089d6:	4299      	cmp	r1, r3
 80089d8:	d002      	beq.n	80089e0 <__sflush_r+0x90>
 80089da:	4628      	mov	r0, r5
 80089dc:	f7ff f9ec 	bl	8007db8 <_free_r>
 80089e0:	2000      	movs	r0, #0
 80089e2:	6360      	str	r0, [r4, #52]	; 0x34
 80089e4:	e7c1      	b.n	800896a <__sflush_r+0x1a>
 80089e6:	2301      	movs	r3, #1
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b0      	blx	r6
 80089ec:	1c41      	adds	r1, r0, #1
 80089ee:	d1c8      	bne.n	8008982 <__sflush_r+0x32>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0c5      	beq.n	8008982 <__sflush_r+0x32>
 80089f6:	2b1d      	cmp	r3, #29
 80089f8:	d001      	beq.n	80089fe <__sflush_r+0xae>
 80089fa:	2b16      	cmp	r3, #22
 80089fc:	d101      	bne.n	8008a02 <__sflush_r+0xb2>
 80089fe:	602f      	str	r7, [r5, #0]
 8008a00:	e7b2      	b.n	8008968 <__sflush_r+0x18>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	e7ae      	b.n	800896a <__sflush_r+0x1a>
 8008a0c:	690f      	ldr	r7, [r1, #16]
 8008a0e:	2f00      	cmp	r7, #0
 8008a10:	d0aa      	beq.n	8008968 <__sflush_r+0x18>
 8008a12:	0793      	lsls	r3, r2, #30
 8008a14:	bf18      	it	ne
 8008a16:	2300      	movne	r3, #0
 8008a18:	680e      	ldr	r6, [r1, #0]
 8008a1a:	bf08      	it	eq
 8008a1c:	694b      	ldreq	r3, [r1, #20]
 8008a1e:	1bf6      	subs	r6, r6, r7
 8008a20:	600f      	str	r7, [r1, #0]
 8008a22:	608b      	str	r3, [r1, #8]
 8008a24:	2e00      	cmp	r6, #0
 8008a26:	dd9f      	ble.n	8008968 <__sflush_r+0x18>
 8008a28:	4633      	mov	r3, r6
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	6a21      	ldr	r1, [r4, #32]
 8008a30:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008a34:	47e0      	blx	ip
 8008a36:	2800      	cmp	r0, #0
 8008a38:	dc06      	bgt.n	8008a48 <__sflush_r+0xf8>
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	e790      	b.n	800896a <__sflush_r+0x1a>
 8008a48:	4407      	add	r7, r0
 8008a4a:	1a36      	subs	r6, r6, r0
 8008a4c:	e7ea      	b.n	8008a24 <__sflush_r+0xd4>
 8008a4e:	bf00      	nop
 8008a50:	dfbffffe 	.word	0xdfbffffe

08008a54 <_fflush_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	690b      	ldr	r3, [r1, #16]
 8008a58:	4605      	mov	r5, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	b913      	cbnz	r3, 8008a64 <_fflush_r+0x10>
 8008a5e:	2500      	movs	r5, #0
 8008a60:	4628      	mov	r0, r5
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	b118      	cbz	r0, 8008a6e <_fflush_r+0x1a>
 8008a66:	6a03      	ldr	r3, [r0, #32]
 8008a68:	b90b      	cbnz	r3, 8008a6e <_fflush_r+0x1a>
 8008a6a:	f7fe fa0f 	bl	8006e8c <__sinit>
 8008a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0f3      	beq.n	8008a5e <_fflush_r+0xa>
 8008a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a78:	07d0      	lsls	r0, r2, #31
 8008a7a:	d404      	bmi.n	8008a86 <_fflush_r+0x32>
 8008a7c:	0599      	lsls	r1, r3, #22
 8008a7e:	d402      	bmi.n	8008a86 <_fflush_r+0x32>
 8008a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a82:	f7fe fb1a 	bl	80070ba <__retarget_lock_acquire_recursive>
 8008a86:	4628      	mov	r0, r5
 8008a88:	4621      	mov	r1, r4
 8008a8a:	f7ff ff61 	bl	8008950 <__sflush_r>
 8008a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a90:	4605      	mov	r5, r0
 8008a92:	07da      	lsls	r2, r3, #31
 8008a94:	d4e4      	bmi.n	8008a60 <_fflush_r+0xc>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	059b      	lsls	r3, r3, #22
 8008a9a:	d4e1      	bmi.n	8008a60 <_fflush_r+0xc>
 8008a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a9e:	f7fe fb0d 	bl	80070bc <__retarget_lock_release_recursive>
 8008aa2:	e7dd      	b.n	8008a60 <_fflush_r+0xc>

08008aa4 <memmove>:
 8008aa4:	4288      	cmp	r0, r1
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	eb01 0402 	add.w	r4, r1, r2
 8008aac:	d902      	bls.n	8008ab4 <memmove+0x10>
 8008aae:	4284      	cmp	r4, r0
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	d807      	bhi.n	8008ac4 <memmove+0x20>
 8008ab4:	1e43      	subs	r3, r0, #1
 8008ab6:	42a1      	cmp	r1, r4
 8008ab8:	d008      	beq.n	8008acc <memmove+0x28>
 8008aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ac2:	e7f8      	b.n	8008ab6 <memmove+0x12>
 8008ac4:	4601      	mov	r1, r0
 8008ac6:	4402      	add	r2, r0
 8008ac8:	428a      	cmp	r2, r1
 8008aca:	d100      	bne.n	8008ace <memmove+0x2a>
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ad6:	e7f7      	b.n	8008ac8 <memmove+0x24>

08008ad8 <_sbrk_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	2300      	movs	r3, #0
 8008adc:	4d05      	ldr	r5, [pc, #20]	; (8008af4 <_sbrk_r+0x1c>)
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	602b      	str	r3, [r5, #0]
 8008ae4:	f7fa fa36 	bl	8002f54 <_sbrk>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_sbrk_r+0x1a>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_sbrk_r+0x1a>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	20000a60 	.word	0x20000a60

08008af8 <memcpy>:
 8008af8:	440a      	add	r2, r1
 8008afa:	4291      	cmp	r1, r2
 8008afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b00:	d100      	bne.n	8008b04 <memcpy+0xc>
 8008b02:	4770      	bx	lr
 8008b04:	b510      	push	{r4, lr}
 8008b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b0a:	4291      	cmp	r1, r2
 8008b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b10:	d1f9      	bne.n	8008b06 <memcpy+0xe>
 8008b12:	bd10      	pop	{r4, pc}

08008b14 <__assert_func>:
 8008b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b16:	4614      	mov	r4, r2
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <__assert_func+0x2c>)
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68d8      	ldr	r0, [r3, #12]
 8008b22:	b14c      	cbz	r4, 8008b38 <__assert_func+0x24>
 8008b24:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <__assert_func+0x30>)
 8008b26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b2a:	9100      	str	r1, [sp, #0]
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	4906      	ldr	r1, [pc, #24]	; (8008b48 <__assert_func+0x34>)
 8008b30:	f000 f870 	bl	8008c14 <fiprintf>
 8008b34:	f000 f880 	bl	8008c38 <abort>
 8008b38:	4b04      	ldr	r3, [pc, #16]	; (8008b4c <__assert_func+0x38>)
 8008b3a:	461c      	mov	r4, r3
 8008b3c:	e7f3      	b.n	8008b26 <__assert_func+0x12>
 8008b3e:	bf00      	nop
 8008b40:	200000c8 	.word	0x200000c8
 8008b44:	08009be7 	.word	0x08009be7
 8008b48:	08009bf4 	.word	0x08009bf4
 8008b4c:	08009c22 	.word	0x08009c22

08008b50 <_calloc_r>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	fba1 5402 	umull	r5, r4, r1, r2
 8008b56:	b934      	cbnz	r4, 8008b66 <_calloc_r+0x16>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7ff f99d 	bl	8007e98 <_malloc_r>
 8008b5e:	4606      	mov	r6, r0
 8008b60:	b928      	cbnz	r0, 8008b6e <_calloc_r+0x1e>
 8008b62:	4630      	mov	r0, r6
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
 8008b66:	220c      	movs	r2, #12
 8008b68:	2600      	movs	r6, #0
 8008b6a:	6002      	str	r2, [r0, #0]
 8008b6c:	e7f9      	b.n	8008b62 <_calloc_r+0x12>
 8008b6e:	462a      	mov	r2, r5
 8008b70:	4621      	mov	r1, r4
 8008b72:	f7fe fa24 	bl	8006fbe <memset>
 8008b76:	e7f4      	b.n	8008b62 <_calloc_r+0x12>

08008b78 <__ascii_mbtowc>:
 8008b78:	b082      	sub	sp, #8
 8008b7a:	b901      	cbnz	r1, 8008b7e <__ascii_mbtowc+0x6>
 8008b7c:	a901      	add	r1, sp, #4
 8008b7e:	b142      	cbz	r2, 8008b92 <__ascii_mbtowc+0x1a>
 8008b80:	b14b      	cbz	r3, 8008b96 <__ascii_mbtowc+0x1e>
 8008b82:	7813      	ldrb	r3, [r2, #0]
 8008b84:	600b      	str	r3, [r1, #0]
 8008b86:	7812      	ldrb	r2, [r2, #0]
 8008b88:	1e10      	subs	r0, r2, #0
 8008b8a:	bf18      	it	ne
 8008b8c:	2001      	movne	r0, #1
 8008b8e:	b002      	add	sp, #8
 8008b90:	4770      	bx	lr
 8008b92:	4610      	mov	r0, r2
 8008b94:	e7fb      	b.n	8008b8e <__ascii_mbtowc+0x16>
 8008b96:	f06f 0001 	mvn.w	r0, #1
 8008b9a:	e7f8      	b.n	8008b8e <__ascii_mbtowc+0x16>

08008b9c <_realloc_r>:
 8008b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	4614      	mov	r4, r2
 8008ba4:	460e      	mov	r6, r1
 8008ba6:	b921      	cbnz	r1, 8008bb2 <_realloc_r+0x16>
 8008ba8:	4611      	mov	r1, r2
 8008baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bae:	f7ff b973 	b.w	8007e98 <_malloc_r>
 8008bb2:	b92a      	cbnz	r2, 8008bc0 <_realloc_r+0x24>
 8008bb4:	f7ff f900 	bl	8007db8 <_free_r>
 8008bb8:	4625      	mov	r5, r4
 8008bba:	4628      	mov	r0, r5
 8008bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc0:	f000 f841 	bl	8008c46 <_malloc_usable_size_r>
 8008bc4:	4284      	cmp	r4, r0
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	d802      	bhi.n	8008bd0 <_realloc_r+0x34>
 8008bca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bce:	d812      	bhi.n	8008bf6 <_realloc_r+0x5a>
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	f7ff f960 	bl	8007e98 <_malloc_r>
 8008bd8:	4605      	mov	r5, r0
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d0ed      	beq.n	8008bba <_realloc_r+0x1e>
 8008bde:	42bc      	cmp	r4, r7
 8008be0:	4622      	mov	r2, r4
 8008be2:	4631      	mov	r1, r6
 8008be4:	bf28      	it	cs
 8008be6:	463a      	movcs	r2, r7
 8008be8:	f7ff ff86 	bl	8008af8 <memcpy>
 8008bec:	4631      	mov	r1, r6
 8008bee:	4640      	mov	r0, r8
 8008bf0:	f7ff f8e2 	bl	8007db8 <_free_r>
 8008bf4:	e7e1      	b.n	8008bba <_realloc_r+0x1e>
 8008bf6:	4635      	mov	r5, r6
 8008bf8:	e7df      	b.n	8008bba <_realloc_r+0x1e>

08008bfa <__ascii_wctomb>:
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	b141      	cbz	r1, 8008c12 <__ascii_wctomb+0x18>
 8008c00:	2aff      	cmp	r2, #255	; 0xff
 8008c02:	d904      	bls.n	8008c0e <__ascii_wctomb+0x14>
 8008c04:	228a      	movs	r2, #138	; 0x8a
 8008c06:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	4770      	bx	lr
 8008c0e:	2001      	movs	r0, #1
 8008c10:	700a      	strb	r2, [r1, #0]
 8008c12:	4770      	bx	lr

08008c14 <fiprintf>:
 8008c14:	b40e      	push	{r1, r2, r3}
 8008c16:	b503      	push	{r0, r1, lr}
 8008c18:	4601      	mov	r1, r0
 8008c1a:	ab03      	add	r3, sp, #12
 8008c1c:	4805      	ldr	r0, [pc, #20]	; (8008c34 <fiprintf+0x20>)
 8008c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c22:	6800      	ldr	r0, [r0, #0]
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	f000 f83d 	bl	8008ca4 <_vfiprintf_r>
 8008c2a:	b002      	add	sp, #8
 8008c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c30:	b003      	add	sp, #12
 8008c32:	4770      	bx	lr
 8008c34:	200000c8 	.word	0x200000c8

08008c38 <abort>:
 8008c38:	2006      	movs	r0, #6
 8008c3a:	b508      	push	{r3, lr}
 8008c3c:	f000 fa0a 	bl	8009054 <raise>
 8008c40:	2001      	movs	r0, #1
 8008c42:	f7fa f913 	bl	8002e6c <_exit>

08008c46 <_malloc_usable_size_r>:
 8008c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c4a:	1f18      	subs	r0, r3, #4
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bfbc      	itt	lt
 8008c50:	580b      	ldrlt	r3, [r1, r0]
 8008c52:	18c0      	addlt	r0, r0, r3
 8008c54:	4770      	bx	lr

08008c56 <__sfputc_r>:
 8008c56:	6893      	ldr	r3, [r2, #8]
 8008c58:	b410      	push	{r4}
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	6093      	str	r3, [r2, #8]
 8008c60:	da07      	bge.n	8008c72 <__sfputc_r+0x1c>
 8008c62:	6994      	ldr	r4, [r2, #24]
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	db01      	blt.n	8008c6c <__sfputc_r+0x16>
 8008c68:	290a      	cmp	r1, #10
 8008c6a:	d102      	bne.n	8008c72 <__sfputc_r+0x1c>
 8008c6c:	bc10      	pop	{r4}
 8008c6e:	f000 b933 	b.w	8008ed8 <__swbuf_r>
 8008c72:	6813      	ldr	r3, [r2, #0]
 8008c74:	1c58      	adds	r0, r3, #1
 8008c76:	6010      	str	r0, [r2, #0]
 8008c78:	7019      	strb	r1, [r3, #0]
 8008c7a:	4608      	mov	r0, r1
 8008c7c:	bc10      	pop	{r4}
 8008c7e:	4770      	bx	lr

08008c80 <__sfputs_r>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	4606      	mov	r6, r0
 8008c84:	460f      	mov	r7, r1
 8008c86:	4614      	mov	r4, r2
 8008c88:	18d5      	adds	r5, r2, r3
 8008c8a:	42ac      	cmp	r4, r5
 8008c8c:	d101      	bne.n	8008c92 <__sfputs_r+0x12>
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e007      	b.n	8008ca2 <__sfputs_r+0x22>
 8008c92:	463a      	mov	r2, r7
 8008c94:	4630      	mov	r0, r6
 8008c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9a:	f7ff ffdc 	bl	8008c56 <__sfputc_r>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d1f3      	bne.n	8008c8a <__sfputs_r+0xa>
 8008ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ca4 <_vfiprintf_r>:
 8008ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca8:	460d      	mov	r5, r1
 8008caa:	4614      	mov	r4, r2
 8008cac:	4698      	mov	r8, r3
 8008cae:	4606      	mov	r6, r0
 8008cb0:	b09d      	sub	sp, #116	; 0x74
 8008cb2:	b118      	cbz	r0, 8008cbc <_vfiprintf_r+0x18>
 8008cb4:	6a03      	ldr	r3, [r0, #32]
 8008cb6:	b90b      	cbnz	r3, 8008cbc <_vfiprintf_r+0x18>
 8008cb8:	f7fe f8e8 	bl	8006e8c <__sinit>
 8008cbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cbe:	07d9      	lsls	r1, r3, #31
 8008cc0:	d405      	bmi.n	8008cce <_vfiprintf_r+0x2a>
 8008cc2:	89ab      	ldrh	r3, [r5, #12]
 8008cc4:	059a      	lsls	r2, r3, #22
 8008cc6:	d402      	bmi.n	8008cce <_vfiprintf_r+0x2a>
 8008cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cca:	f7fe f9f6 	bl	80070ba <__retarget_lock_acquire_recursive>
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	071b      	lsls	r3, r3, #28
 8008cd2:	d501      	bpl.n	8008cd8 <_vfiprintf_r+0x34>
 8008cd4:	692b      	ldr	r3, [r5, #16]
 8008cd6:	b99b      	cbnz	r3, 8008d00 <_vfiprintf_r+0x5c>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f000 f93a 	bl	8008f54 <__swsetup_r>
 8008ce0:	b170      	cbz	r0, 8008d00 <_vfiprintf_r+0x5c>
 8008ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ce4:	07dc      	lsls	r4, r3, #31
 8008ce6:	d504      	bpl.n	8008cf2 <_vfiprintf_r+0x4e>
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	b01d      	add	sp, #116	; 0x74
 8008cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf2:	89ab      	ldrh	r3, [r5, #12]
 8008cf4:	0598      	lsls	r0, r3, #22
 8008cf6:	d4f7      	bmi.n	8008ce8 <_vfiprintf_r+0x44>
 8008cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cfa:	f7fe f9df 	bl	80070bc <__retarget_lock_release_recursive>
 8008cfe:	e7f3      	b.n	8008ce8 <_vfiprintf_r+0x44>
 8008d00:	2300      	movs	r3, #0
 8008d02:	9309      	str	r3, [sp, #36]	; 0x24
 8008d04:	2320      	movs	r3, #32
 8008d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d0a:	2330      	movs	r3, #48	; 0x30
 8008d0c:	f04f 0901 	mov.w	r9, #1
 8008d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d14:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008ec4 <_vfiprintf_r+0x220>
 8008d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	469a      	mov	sl, r3
 8008d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d24:	b10a      	cbz	r2, 8008d2a <_vfiprintf_r+0x86>
 8008d26:	2a25      	cmp	r2, #37	; 0x25
 8008d28:	d1f9      	bne.n	8008d1e <_vfiprintf_r+0x7a>
 8008d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d2e:	d00b      	beq.n	8008d48 <_vfiprintf_r+0xa4>
 8008d30:	465b      	mov	r3, fp
 8008d32:	4622      	mov	r2, r4
 8008d34:	4629      	mov	r1, r5
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7ff ffa2 	bl	8008c80 <__sfputs_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f000 80a9 	beq.w	8008e94 <_vfiprintf_r+0x1f0>
 8008d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d44:	445a      	add	r2, fp
 8008d46:	9209      	str	r2, [sp, #36]	; 0x24
 8008d48:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 80a1 	beq.w	8008e94 <_vfiprintf_r+0x1f0>
 8008d52:	2300      	movs	r3, #0
 8008d54:	f04f 32ff 	mov.w	r2, #4294967295
 8008d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d5c:	f10a 0a01 	add.w	sl, sl, #1
 8008d60:	9304      	str	r3, [sp, #16]
 8008d62:	9307      	str	r3, [sp, #28]
 8008d64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d68:	931a      	str	r3, [sp, #104]	; 0x68
 8008d6a:	4654      	mov	r4, sl
 8008d6c:	2205      	movs	r2, #5
 8008d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d72:	4854      	ldr	r0, [pc, #336]	; (8008ec4 <_vfiprintf_r+0x220>)
 8008d74:	f7fe f9a3 	bl	80070be <memchr>
 8008d78:	9a04      	ldr	r2, [sp, #16]
 8008d7a:	b9d8      	cbnz	r0, 8008db4 <_vfiprintf_r+0x110>
 8008d7c:	06d1      	lsls	r1, r2, #27
 8008d7e:	bf44      	itt	mi
 8008d80:	2320      	movmi	r3, #32
 8008d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d86:	0713      	lsls	r3, r2, #28
 8008d88:	bf44      	itt	mi
 8008d8a:	232b      	movmi	r3, #43	; 0x2b
 8008d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d90:	f89a 3000 	ldrb.w	r3, [sl]
 8008d94:	2b2a      	cmp	r3, #42	; 0x2a
 8008d96:	d015      	beq.n	8008dc4 <_vfiprintf_r+0x120>
 8008d98:	4654      	mov	r4, sl
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	f04f 0c0a 	mov.w	ip, #10
 8008da0:	9a07      	ldr	r2, [sp, #28]
 8008da2:	4621      	mov	r1, r4
 8008da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008da8:	3b30      	subs	r3, #48	; 0x30
 8008daa:	2b09      	cmp	r3, #9
 8008dac:	d94d      	bls.n	8008e4a <_vfiprintf_r+0x1a6>
 8008dae:	b1b0      	cbz	r0, 8008dde <_vfiprintf_r+0x13a>
 8008db0:	9207      	str	r2, [sp, #28]
 8008db2:	e014      	b.n	8008dde <_vfiprintf_r+0x13a>
 8008db4:	eba0 0308 	sub.w	r3, r0, r8
 8008db8:	fa09 f303 	lsl.w	r3, r9, r3
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	46a2      	mov	sl, r4
 8008dc0:	9304      	str	r3, [sp, #16]
 8008dc2:	e7d2      	b.n	8008d6a <_vfiprintf_r+0xc6>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	1d19      	adds	r1, r3, #4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	9103      	str	r1, [sp, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bfbb      	ittet	lt
 8008dd0:	425b      	neglt	r3, r3
 8008dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd6:	9307      	strge	r3, [sp, #28]
 8008dd8:	9307      	strlt	r3, [sp, #28]
 8008dda:	bfb8      	it	lt
 8008ddc:	9204      	strlt	r2, [sp, #16]
 8008dde:	7823      	ldrb	r3, [r4, #0]
 8008de0:	2b2e      	cmp	r3, #46	; 0x2e
 8008de2:	d10c      	bne.n	8008dfe <_vfiprintf_r+0x15a>
 8008de4:	7863      	ldrb	r3, [r4, #1]
 8008de6:	2b2a      	cmp	r3, #42	; 0x2a
 8008de8:	d134      	bne.n	8008e54 <_vfiprintf_r+0x1b0>
 8008dea:	9b03      	ldr	r3, [sp, #12]
 8008dec:	3402      	adds	r4, #2
 8008dee:	1d1a      	adds	r2, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	9203      	str	r2, [sp, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfb8      	it	lt
 8008df8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dfc:	9305      	str	r3, [sp, #20]
 8008dfe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ec8 <_vfiprintf_r+0x224>
 8008e02:	2203      	movs	r2, #3
 8008e04:	4650      	mov	r0, sl
 8008e06:	7821      	ldrb	r1, [r4, #0]
 8008e08:	f7fe f959 	bl	80070be <memchr>
 8008e0c:	b138      	cbz	r0, 8008e1e <_vfiprintf_r+0x17a>
 8008e0e:	2240      	movs	r2, #64	; 0x40
 8008e10:	9b04      	ldr	r3, [sp, #16]
 8008e12:	eba0 000a 	sub.w	r0, r0, sl
 8008e16:	4082      	lsls	r2, r0
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	3401      	adds	r4, #1
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e22:	2206      	movs	r2, #6
 8008e24:	4829      	ldr	r0, [pc, #164]	; (8008ecc <_vfiprintf_r+0x228>)
 8008e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e2a:	f7fe f948 	bl	80070be <memchr>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d03f      	beq.n	8008eb2 <_vfiprintf_r+0x20e>
 8008e32:	4b27      	ldr	r3, [pc, #156]	; (8008ed0 <_vfiprintf_r+0x22c>)
 8008e34:	bb1b      	cbnz	r3, 8008e7e <_vfiprintf_r+0x1da>
 8008e36:	9b03      	ldr	r3, [sp, #12]
 8008e38:	3307      	adds	r3, #7
 8008e3a:	f023 0307 	bic.w	r3, r3, #7
 8008e3e:	3308      	adds	r3, #8
 8008e40:	9303      	str	r3, [sp, #12]
 8008e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e44:	443b      	add	r3, r7
 8008e46:	9309      	str	r3, [sp, #36]	; 0x24
 8008e48:	e768      	b.n	8008d1c <_vfiprintf_r+0x78>
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e52:	e7a6      	b.n	8008da2 <_vfiprintf_r+0xfe>
 8008e54:	2300      	movs	r3, #0
 8008e56:	f04f 0c0a 	mov.w	ip, #10
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	3401      	adds	r4, #1
 8008e5e:	9305      	str	r3, [sp, #20]
 8008e60:	4620      	mov	r0, r4
 8008e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e66:	3a30      	subs	r2, #48	; 0x30
 8008e68:	2a09      	cmp	r2, #9
 8008e6a:	d903      	bls.n	8008e74 <_vfiprintf_r+0x1d0>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d0c6      	beq.n	8008dfe <_vfiprintf_r+0x15a>
 8008e70:	9105      	str	r1, [sp, #20]
 8008e72:	e7c4      	b.n	8008dfe <_vfiprintf_r+0x15a>
 8008e74:	4604      	mov	r4, r0
 8008e76:	2301      	movs	r3, #1
 8008e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e7c:	e7f0      	b.n	8008e60 <_vfiprintf_r+0x1bc>
 8008e7e:	ab03      	add	r3, sp, #12
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	462a      	mov	r2, r5
 8008e84:	4630      	mov	r0, r6
 8008e86:	4b13      	ldr	r3, [pc, #76]	; (8008ed4 <_vfiprintf_r+0x230>)
 8008e88:	a904      	add	r1, sp, #16
 8008e8a:	f7fd fbb1 	bl	80065f0 <_printf_float>
 8008e8e:	4607      	mov	r7, r0
 8008e90:	1c78      	adds	r0, r7, #1
 8008e92:	d1d6      	bne.n	8008e42 <_vfiprintf_r+0x19e>
 8008e94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e96:	07d9      	lsls	r1, r3, #31
 8008e98:	d405      	bmi.n	8008ea6 <_vfiprintf_r+0x202>
 8008e9a:	89ab      	ldrh	r3, [r5, #12]
 8008e9c:	059a      	lsls	r2, r3, #22
 8008e9e:	d402      	bmi.n	8008ea6 <_vfiprintf_r+0x202>
 8008ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ea2:	f7fe f90b 	bl	80070bc <__retarget_lock_release_recursive>
 8008ea6:	89ab      	ldrh	r3, [r5, #12]
 8008ea8:	065b      	lsls	r3, r3, #25
 8008eaa:	f53f af1d 	bmi.w	8008ce8 <_vfiprintf_r+0x44>
 8008eae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eb0:	e71c      	b.n	8008cec <_vfiprintf_r+0x48>
 8008eb2:	ab03      	add	r3, sp, #12
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	462a      	mov	r2, r5
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <_vfiprintf_r+0x230>)
 8008ebc:	a904      	add	r1, sp, #16
 8008ebe:	f7fd fe37 	bl	8006b30 <_printf_i>
 8008ec2:	e7e4      	b.n	8008e8e <_vfiprintf_r+0x1ea>
 8008ec4:	08009bcc 	.word	0x08009bcc
 8008ec8:	08009bd2 	.word	0x08009bd2
 8008ecc:	08009bd6 	.word	0x08009bd6
 8008ed0:	080065f1 	.word	0x080065f1
 8008ed4:	08008c81 	.word	0x08008c81

08008ed8 <__swbuf_r>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	460e      	mov	r6, r1
 8008edc:	4614      	mov	r4, r2
 8008ede:	4605      	mov	r5, r0
 8008ee0:	b118      	cbz	r0, 8008eea <__swbuf_r+0x12>
 8008ee2:	6a03      	ldr	r3, [r0, #32]
 8008ee4:	b90b      	cbnz	r3, 8008eea <__swbuf_r+0x12>
 8008ee6:	f7fd ffd1 	bl	8006e8c <__sinit>
 8008eea:	69a3      	ldr	r3, [r4, #24]
 8008eec:	60a3      	str	r3, [r4, #8]
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	071a      	lsls	r2, r3, #28
 8008ef2:	d525      	bpl.n	8008f40 <__swbuf_r+0x68>
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	b31b      	cbz	r3, 8008f40 <__swbuf_r+0x68>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	6922      	ldr	r2, [r4, #16]
 8008efc:	b2f6      	uxtb	r6, r6
 8008efe:	1a98      	subs	r0, r3, r2
 8008f00:	6963      	ldr	r3, [r4, #20]
 8008f02:	4637      	mov	r7, r6
 8008f04:	4283      	cmp	r3, r0
 8008f06:	dc04      	bgt.n	8008f12 <__swbuf_r+0x3a>
 8008f08:	4621      	mov	r1, r4
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7ff fda2 	bl	8008a54 <_fflush_r>
 8008f10:	b9e0      	cbnz	r0, 8008f4c <__swbuf_r+0x74>
 8008f12:	68a3      	ldr	r3, [r4, #8]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	60a3      	str	r3, [r4, #8]
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	6022      	str	r2, [r4, #0]
 8008f1e:	701e      	strb	r6, [r3, #0]
 8008f20:	6962      	ldr	r2, [r4, #20]
 8008f22:	1c43      	adds	r3, r0, #1
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d004      	beq.n	8008f32 <__swbuf_r+0x5a>
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	07db      	lsls	r3, r3, #31
 8008f2c:	d506      	bpl.n	8008f3c <__swbuf_r+0x64>
 8008f2e:	2e0a      	cmp	r6, #10
 8008f30:	d104      	bne.n	8008f3c <__swbuf_r+0x64>
 8008f32:	4621      	mov	r1, r4
 8008f34:	4628      	mov	r0, r5
 8008f36:	f7ff fd8d 	bl	8008a54 <_fflush_r>
 8008f3a:	b938      	cbnz	r0, 8008f4c <__swbuf_r+0x74>
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f40:	4621      	mov	r1, r4
 8008f42:	4628      	mov	r0, r5
 8008f44:	f000 f806 	bl	8008f54 <__swsetup_r>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d0d5      	beq.n	8008ef8 <__swbuf_r+0x20>
 8008f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f50:	e7f4      	b.n	8008f3c <__swbuf_r+0x64>
	...

08008f54 <__swsetup_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4b2a      	ldr	r3, [pc, #168]	; (8009000 <__swsetup_r+0xac>)
 8008f58:	4605      	mov	r5, r0
 8008f5a:	6818      	ldr	r0, [r3, #0]
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	b118      	cbz	r0, 8008f68 <__swsetup_r+0x14>
 8008f60:	6a03      	ldr	r3, [r0, #32]
 8008f62:	b90b      	cbnz	r3, 8008f68 <__swsetup_r+0x14>
 8008f64:	f7fd ff92 	bl	8006e8c <__sinit>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f6e:	0718      	lsls	r0, r3, #28
 8008f70:	d422      	bmi.n	8008fb8 <__swsetup_r+0x64>
 8008f72:	06d9      	lsls	r1, r3, #27
 8008f74:	d407      	bmi.n	8008f86 <__swsetup_r+0x32>
 8008f76:	2309      	movs	r3, #9
 8008f78:	602b      	str	r3, [r5, #0]
 8008f7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	e034      	b.n	8008ff0 <__swsetup_r+0x9c>
 8008f86:	0758      	lsls	r0, r3, #29
 8008f88:	d512      	bpl.n	8008fb0 <__swsetup_r+0x5c>
 8008f8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f8c:	b141      	cbz	r1, 8008fa0 <__swsetup_r+0x4c>
 8008f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f92:	4299      	cmp	r1, r3
 8008f94:	d002      	beq.n	8008f9c <__swsetup_r+0x48>
 8008f96:	4628      	mov	r0, r5
 8008f98:	f7fe ff0e 	bl	8007db8 <_free_r>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6363      	str	r3, [r4, #52]	; 0x34
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fa6:	81a3      	strh	r3, [r4, #12]
 8008fa8:	2300      	movs	r3, #0
 8008faa:	6063      	str	r3, [r4, #4]
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	f043 0308 	orr.w	r3, r3, #8
 8008fb6:	81a3      	strh	r3, [r4, #12]
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	b94b      	cbnz	r3, 8008fd0 <__swsetup_r+0x7c>
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fc6:	d003      	beq.n	8008fd0 <__swsetup_r+0x7c>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f000 f883 	bl	80090d6 <__smakebuf_r>
 8008fd0:	89a0      	ldrh	r0, [r4, #12]
 8008fd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fd6:	f010 0301 	ands.w	r3, r0, #1
 8008fda:	d00a      	beq.n	8008ff2 <__swsetup_r+0x9e>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	60a3      	str	r3, [r4, #8]
 8008fe0:	6963      	ldr	r3, [r4, #20]
 8008fe2:	425b      	negs	r3, r3
 8008fe4:	61a3      	str	r3, [r4, #24]
 8008fe6:	6923      	ldr	r3, [r4, #16]
 8008fe8:	b943      	cbnz	r3, 8008ffc <__swsetup_r+0xa8>
 8008fea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fee:	d1c4      	bne.n	8008f7a <__swsetup_r+0x26>
 8008ff0:	bd38      	pop	{r3, r4, r5, pc}
 8008ff2:	0781      	lsls	r1, r0, #30
 8008ff4:	bf58      	it	pl
 8008ff6:	6963      	ldrpl	r3, [r4, #20]
 8008ff8:	60a3      	str	r3, [r4, #8]
 8008ffa:	e7f4      	b.n	8008fe6 <__swsetup_r+0x92>
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	e7f7      	b.n	8008ff0 <__swsetup_r+0x9c>
 8009000:	200000c8 	.word	0x200000c8

08009004 <_raise_r>:
 8009004:	291f      	cmp	r1, #31
 8009006:	b538      	push	{r3, r4, r5, lr}
 8009008:	4604      	mov	r4, r0
 800900a:	460d      	mov	r5, r1
 800900c:	d904      	bls.n	8009018 <_raise_r+0x14>
 800900e:	2316      	movs	r3, #22
 8009010:	6003      	str	r3, [r0, #0]
 8009012:	f04f 30ff 	mov.w	r0, #4294967295
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800901a:	b112      	cbz	r2, 8009022 <_raise_r+0x1e>
 800901c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009020:	b94b      	cbnz	r3, 8009036 <_raise_r+0x32>
 8009022:	4620      	mov	r0, r4
 8009024:	f000 f830 	bl	8009088 <_getpid_r>
 8009028:	462a      	mov	r2, r5
 800902a:	4601      	mov	r1, r0
 800902c:	4620      	mov	r0, r4
 800902e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009032:	f000 b817 	b.w	8009064 <_kill_r>
 8009036:	2b01      	cmp	r3, #1
 8009038:	d00a      	beq.n	8009050 <_raise_r+0x4c>
 800903a:	1c59      	adds	r1, r3, #1
 800903c:	d103      	bne.n	8009046 <_raise_r+0x42>
 800903e:	2316      	movs	r3, #22
 8009040:	6003      	str	r3, [r0, #0]
 8009042:	2001      	movs	r0, #1
 8009044:	e7e7      	b.n	8009016 <_raise_r+0x12>
 8009046:	2400      	movs	r4, #0
 8009048:	4628      	mov	r0, r5
 800904a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800904e:	4798      	blx	r3
 8009050:	2000      	movs	r0, #0
 8009052:	e7e0      	b.n	8009016 <_raise_r+0x12>

08009054 <raise>:
 8009054:	4b02      	ldr	r3, [pc, #8]	; (8009060 <raise+0xc>)
 8009056:	4601      	mov	r1, r0
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	f7ff bfd3 	b.w	8009004 <_raise_r>
 800905e:	bf00      	nop
 8009060:	200000c8 	.word	0x200000c8

08009064 <_kill_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	2300      	movs	r3, #0
 8009068:	4d06      	ldr	r5, [pc, #24]	; (8009084 <_kill_r+0x20>)
 800906a:	4604      	mov	r4, r0
 800906c:	4608      	mov	r0, r1
 800906e:	4611      	mov	r1, r2
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	f7f9 feeb 	bl	8002e4c <_kill>
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	d102      	bne.n	8009080 <_kill_r+0x1c>
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	b103      	cbz	r3, 8009080 <_kill_r+0x1c>
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	bd38      	pop	{r3, r4, r5, pc}
 8009082:	bf00      	nop
 8009084:	20000a60 	.word	0x20000a60

08009088 <_getpid_r>:
 8009088:	f7f9 bed9 	b.w	8002e3e <_getpid>

0800908c <__swhatbuf_r>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	460c      	mov	r4, r1
 8009090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009094:	4615      	mov	r5, r2
 8009096:	2900      	cmp	r1, #0
 8009098:	461e      	mov	r6, r3
 800909a:	b096      	sub	sp, #88	; 0x58
 800909c:	da0c      	bge.n	80090b8 <__swhatbuf_r+0x2c>
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	2100      	movs	r1, #0
 80090a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80090a6:	bf0c      	ite	eq
 80090a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80090ac:	2340      	movne	r3, #64	; 0x40
 80090ae:	2000      	movs	r0, #0
 80090b0:	6031      	str	r1, [r6, #0]
 80090b2:	602b      	str	r3, [r5, #0]
 80090b4:	b016      	add	sp, #88	; 0x58
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	466a      	mov	r2, sp
 80090ba:	f000 f849 	bl	8009150 <_fstat_r>
 80090be:	2800      	cmp	r0, #0
 80090c0:	dbed      	blt.n	800909e <__swhatbuf_r+0x12>
 80090c2:	9901      	ldr	r1, [sp, #4]
 80090c4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80090c8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80090cc:	4259      	negs	r1, r3
 80090ce:	4159      	adcs	r1, r3
 80090d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d4:	e7eb      	b.n	80090ae <__swhatbuf_r+0x22>

080090d6 <__smakebuf_r>:
 80090d6:	898b      	ldrh	r3, [r1, #12]
 80090d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090da:	079d      	lsls	r5, r3, #30
 80090dc:	4606      	mov	r6, r0
 80090de:	460c      	mov	r4, r1
 80090e0:	d507      	bpl.n	80090f2 <__smakebuf_r+0x1c>
 80090e2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	6123      	str	r3, [r4, #16]
 80090ea:	2301      	movs	r3, #1
 80090ec:	6163      	str	r3, [r4, #20]
 80090ee:	b002      	add	sp, #8
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	466a      	mov	r2, sp
 80090f4:	ab01      	add	r3, sp, #4
 80090f6:	f7ff ffc9 	bl	800908c <__swhatbuf_r>
 80090fa:	9900      	ldr	r1, [sp, #0]
 80090fc:	4605      	mov	r5, r0
 80090fe:	4630      	mov	r0, r6
 8009100:	f7fe feca 	bl	8007e98 <_malloc_r>
 8009104:	b948      	cbnz	r0, 800911a <__smakebuf_r+0x44>
 8009106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910a:	059a      	lsls	r2, r3, #22
 800910c:	d4ef      	bmi.n	80090ee <__smakebuf_r+0x18>
 800910e:	f023 0303 	bic.w	r3, r3, #3
 8009112:	f043 0302 	orr.w	r3, r3, #2
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	e7e3      	b.n	80090e2 <__smakebuf_r+0xc>
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	6020      	str	r0, [r4, #0]
 800911e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009122:	81a3      	strh	r3, [r4, #12]
 8009124:	9b00      	ldr	r3, [sp, #0]
 8009126:	6120      	str	r0, [r4, #16]
 8009128:	6163      	str	r3, [r4, #20]
 800912a:	9b01      	ldr	r3, [sp, #4]
 800912c:	b15b      	cbz	r3, 8009146 <__smakebuf_r+0x70>
 800912e:	4630      	mov	r0, r6
 8009130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009134:	f000 f81e 	bl	8009174 <_isatty_r>
 8009138:	b128      	cbz	r0, 8009146 <__smakebuf_r+0x70>
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	f023 0303 	bic.w	r3, r3, #3
 8009140:	f043 0301 	orr.w	r3, r3, #1
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	431d      	orrs	r5, r3
 800914a:	81a5      	strh	r5, [r4, #12]
 800914c:	e7cf      	b.n	80090ee <__smakebuf_r+0x18>
	...

08009150 <_fstat_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	2300      	movs	r3, #0
 8009154:	4d06      	ldr	r5, [pc, #24]	; (8009170 <_fstat_r+0x20>)
 8009156:	4604      	mov	r4, r0
 8009158:	4608      	mov	r0, r1
 800915a:	4611      	mov	r1, r2
 800915c:	602b      	str	r3, [r5, #0]
 800915e:	f7f9 fed3 	bl	8002f08 <_fstat>
 8009162:	1c43      	adds	r3, r0, #1
 8009164:	d102      	bne.n	800916c <_fstat_r+0x1c>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	b103      	cbz	r3, 800916c <_fstat_r+0x1c>
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	bd38      	pop	{r3, r4, r5, pc}
 800916e:	bf00      	nop
 8009170:	20000a60 	.word	0x20000a60

08009174 <_isatty_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	2300      	movs	r3, #0
 8009178:	4d05      	ldr	r5, [pc, #20]	; (8009190 <_isatty_r+0x1c>)
 800917a:	4604      	mov	r4, r0
 800917c:	4608      	mov	r0, r1
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	f7f9 fed1 	bl	8002f26 <_isatty>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_isatty_r+0x1a>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_isatty_r+0x1a>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	20000a60 	.word	0x20000a60

08009194 <_init>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	bf00      	nop
 8009198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919a:	bc08      	pop	{r3}
 800919c:	469e      	mov	lr, r3
 800919e:	4770      	bx	lr

080091a0 <_fini>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	bf00      	nop
 80091a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a6:	bc08      	pop	{r3}
 80091a8:	469e      	mov	lr, r3
 80091aa:	4770      	bx	lr
