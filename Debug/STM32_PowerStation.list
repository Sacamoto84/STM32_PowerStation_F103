
STM32_PowerStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a4  080054a4  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  080054a4  080054a4  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054a4  080054a4  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080054ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  200000c0  0800556c  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  0800556c  000208b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a784  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f4  00000000  00000000  0003a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  0003e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3a  00000000  00000000  0003f530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cc4e  00000000  00000000  0004046a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bade  00000000  00000000  0005d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093961  00000000  00000000  00078b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056ac  00000000  00000000  0010c4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00111ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c2c 	.word	0x08004c2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08004c2c 	.word	0x08004c2c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_GPIO_Init+0xa4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <MX_GPIO_Init+0xa4>)
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_GPIO_Init+0xa4>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0320 	and.w	r3, r3, #32
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_GPIO_Init+0xa4>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_GPIO_Init+0xa4>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_GPIO_Init+0xa4>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_GPIO_Init+0xa4>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <MX_GPIO_Init+0xa4>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_GPIO_Init+0xa4>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2110      	movs	r1, #16
 8000678:	4811      	ldr	r0, [pc, #68]	; (80006c0 <MX_GPIO_Init+0xa8>)
 800067a:	f001 fb0f 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800067e:	2310      	movs	r3, #16
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	4619      	mov	r1, r3
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <MX_GPIO_Init+0xa8>)
 8000696:	f001 f97d 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY_Pin|KEY_Pin;
 800069a:	2341      	movs	r3, #65	; 0x41
 800069c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_GPIO_Init+0xac>)
 80006ae:	f001 f971 	bl	8001994 <HAL_GPIO_Init>

}
 80006b2:	bf00      	nop
 80006b4:	3720      	adds	r7, #32
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40010c00 	.word	0x40010c00

080006c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C2_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C2_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C2_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C2_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C2_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C2_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C2_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C2_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C2_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C2_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C2_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C2_Init+0x50>)
 8000706:	f001 fae1 	bl	8001ccc <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 fdb0 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000dc 	.word	0x200000dc
 800071c:	40005800 	.word	0x40005800
 8000720:	000186a0 	.word	0x000186a0

08000724 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <HAL_I2C_MspInit+0x74>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d124      	bne.n	800078e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_I2C_MspInit+0x78>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a14      	ldr	r2, [pc, #80]	; (800079c <HAL_I2C_MspInit+0x78>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_I2C_MspInit+0x78>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800075c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000762:	2312      	movs	r3, #18
 8000764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <HAL_I2C_MspInit+0x7c>)
 8000772:	f001 f90f 	bl	8001994 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_I2C_MspInit+0x78>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_I2C_MspInit+0x78>)
 800077c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_I2C_MspInit+0x78>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40005800 	.word	0x40005800
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010c00 	.word	0x40010c00

080007a4 <_ZN10TFT_Driver4initEP9TFT_LCD_t>:

	uint32_t DMA_TX_Complete; //����� ������ ��������� DMA �������� ������ ��� �����
	uint32_t blockUpdate;
	uint32_t needUpdate;

	void init(TFT_LCD_t *_LCD) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
		LCD = _LCD;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	601a      	str	r2, [r3, #0]

		switch (LCD->LCD_Driver) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7a1b      	ldrb	r3, [r3, #8]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d103      	bne.n	80007c6 <_ZN10TFT_Driver4initEP9TFT_LCD_t+0x22>

#if defined(TFT_DRIVER_SSD1306)
		case SSD1306:
			SSD1306_Init();
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f003 fac6 	bl	8003d50 <_ZN10TFT_Driver12SSD1306_InitEv>
			break;
 80007c4:	e000      	b.n	80007c8 <_ZN10TFT_Driver4initEP9TFT_LCD_t+0x24>
			  ST7735S_init();
			  break;
#endif

		default:
			break;
 80007c6:	bf00      	nop
		}
	}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_ZN10TFT_Driver6UpdateEv>:

	void Update(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
		switch (LCD->LCD_Driver) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	7a1b      	ldrb	r3, [r3, #8]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d103      	bne.n	80007ea <_ZN10TFT_Driver6UpdateEv+0x1a>

#if defined(TFT_DRIVER_SSD1306)
		case SSD1306:
			SSD1306_UpdateScreen();
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f003 fb40 	bl	8003e68 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
			break;
 80007e8:	e000      	b.n	80007ec <_ZN10TFT_Driver6UpdateEv+0x1c>
			uTFT_USB_Update();
			break;
#endif

		default:
			break;
 80007ea:	bf00      	nop
		}
	}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <_ZN3TFT4initEP9TFT_LCD_t>:

	int16_t _xPivot;   // TFT x pivot point coordinate for rotated Sprites
	int16_t _yPivot;   // TFT x pivot point coordinate for rotated Sprites

	////////////////////////////////////////////////////////////////////////////////////////////
	void init(TFT_LCD_t *_LCD) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
		LCD = _LCD;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	601a      	str	r2, [r3, #0]
		driver.init(_LCD);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3304      	adds	r3, #4
 8000808:	6839      	ldr	r1, [r7, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ffca 	bl	80007a4 <_ZN10TFT_Driver4initEP9TFT_LCD_t>
	}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <_ZN3TFT12SetFontColorEtt>:

	void Gradient_Vertical(u32 x0, u32 y0, u32 w, u32 h,
			u8 otR, u8 otG, u8 otB, u8 doR, u8 doG,	u8 doB);

	//Работает на все фонты//////////////////////////////////////////////////////////////
	void SetFontColor(u16 Color, u16 BColor) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	807b      	strh	r3, [r7, #2]
 8000824:	4613      	mov	r3, r2
 8000826:	803b      	strh	r3, [r7, #0]
		uTFT.Color = Color;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	887a      	ldrh	r2, [r7, #2]
 800082c:	831a      	strh	r2, [r3, #24]
		uTFT.BColor = BColor;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	883a      	ldrh	r2, [r7, #0]
 8000832:	835a      	strh	r2, [r3, #26]
	}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <_ZN3TFT6GotoXYEss>:
		uTFT.Color = Color;
	}
	void SetBColor(u16 BColor) {
		uTFT.BColor = BColor;
	}
	void GotoXY(i16 x, i16 y) {
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	460b      	mov	r3, r1
 8000848:	807b      	strh	r3, [r7, #2]
 800084a:	4613      	mov	r3, r2
 800084c:	803b      	strh	r3, [r7, #0]
		uTFT.CurrentX = x;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	887a      	ldrh	r2, [r7, #2]
 8000852:	829a      	strh	r2, [r3, #20]
		uTFT.CurrentY = y;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	883a      	ldrh	r2, [r7, #0]
 8000858:	82da      	strh	r2, [r3, #22]
	}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <_ZL15FontClassicPutcP3TFTcP9FontDef_th>:
  * @param  ch символ.
  * @param  Font указатель на структуру
  * @param  NoBack true если не нужен задний фон за символом, по умолчанию 0
  * @retval ch status
  */
static inline char FontClassicPutc(TFT * tft, char ch, FontDef_t* Font, uint8_t NoBack ) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	461a      	mov	r2, r3
 8000870:	460b      	mov	r3, r1
 8000872:	72fb      	strb	r3, [r7, #11]
 8000874:	4613      	mov	r3, r2
 8000876:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	if (NoBack)
 8000878:	7abb      	ldrb	r3, [r7, #10]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d042      	beq.n	8000904 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0xa0>
	for (i = 0; i < Font->FontHeight; i++) {
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	e038      	b.n	80008f6 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x92>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	3b20      	subs	r3, #32
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	7849      	ldrb	r1, [r1, #1]
 8000890:	fb01 f303 	mul.w	r3, r1, r3
 8000894:	4619      	mov	r1, r3
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	440b      	add	r3, r1
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	e01d      	b.n	80008e4 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x80>
			if ((b << j) & 0x8000) {
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d012      	beq.n	80008de <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x7a>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80008be:	461a      	mov	r2, r3
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	4413      	add	r3, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80008cc:	461a      	mov	r2, r3
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	4413      	add	r3, r2
 80008d2:	461a      	mov	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	8b1b      	ldrh	r3, [r3, #24]
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f003 faff 	bl	8003edc <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	3301      	adds	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d3db      	bcc.n	80008a8 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x44>
	for (i = 0; i < Font->FontHeight; i++) {
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	3301      	adds	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	461a      	mov	r2, r3
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	4293      	cmp	r3, r2
 8000900:	d3c0      	bcc.n	8000884 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x20>
 8000902:	e055      	b.n	80009b0 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x14c>
		}
	}
	else
	for (i = 0; i < Font->FontHeight; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
 8000908:	e04c      	b.n	80009a4 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x140>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685a      	ldr	r2, [r3, #4]
 800090e:	7afb      	ldrb	r3, [r7, #11]
 8000910:	3b20      	subs	r3, #32
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	7849      	ldrb	r1, [r1, #1]
 8000916:	fb01 f303 	mul.w	r3, r1, r3
 800091a:	4619      	mov	r1, r3
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	440b      	add	r3, r1
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	e031      	b.n	8000992 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x12e>
			if ((b << j) & 0x8000) {
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d013      	beq.n	8000966 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x102>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000944:	461a      	mov	r2, r3
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4413      	add	r3, r2
 800094a:	4619      	mov	r1, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000952:	461a      	mov	r2, r3
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	4413      	add	r3, r2
 8000958:	461a      	mov	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	8b1b      	ldrh	r3, [r3, #24]
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f003 fabc 	bl	8003edc <_ZN3TFT8SetPixelEllt>
 8000964:	e012      	b.n	800098c <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x128>
			else {
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800096c:	461a      	mov	r2, r3
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	4413      	add	r3, r2
 8000972:	4619      	mov	r1, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800097a:	461a      	mov	r2, r3
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	4413      	add	r3, r2
 8000980:	461a      	mov	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	8b5b      	ldrh	r3, [r3, #26]
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f003 faa8 	bl	8003edc <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	3301      	adds	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	4293      	cmp	r3, r2
 800099c:	d3c7      	bcc.n	800092e <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0xca>
	for (i = 0; i < Font->FontHeight; i++) {
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3301      	adds	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	785b      	ldrb	r3, [r3, #1]
 80009a8:	461a      	mov	r2, r3
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d3ac      	bcc.n	800090a <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0xa6>
		}
	}

	/* Increase pointer */
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	4413      	add	r3, r2
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	3b01      	subs	r3, #1
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	b21a      	sxth	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	829a      	strh	r2, [r3, #20]

	/* Return character written */
	return ch;
 80009cc:	7afb      	ldrb	r3, [r7, #11]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th>:
  * @param  sMasterConfig pointer to a TIM_MasterConfigTypeDef structure that
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
static inline char FontClassicPuts(TFT * tft, char* str, FontDef_t* Font, uint8_t NoBack) {
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b084      	sub	sp, #16
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 80009e4:	e017      	b.n	8000a16 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x40>
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	7819      	ldrb	r1, [r3, #0]
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff ff38 	bl	8000864 <_ZL15FontClassicPutcP3TFTcP9FontDef_th>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x3a>
			return *str;
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	e008      	b.n	8000a22 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x4c>
		}
		str++;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1e3      	bne.n	80009e6 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x10>
	}
	/* Everything OK, zero should be returned */
	return *str;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	781b      	ldrb	r3, [r3, #0]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <_ZN7ADS12438XferByteEh>:
	ADS124xRegister ADSregister;

	uint32_t ValueData;

	// Получить байт, одновременно отправить данные
	unsigned char XferByte(uint8_t txData) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
		uint8_t rxData;
		while (hspi1.State == HAL_SPI_STATE_BUSY)
 8000a38:	bf00      	nop
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <_ZN7ADS12438XferByteEh+0x44>)
 8000a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	bf0c      	ite	eq
 8000a46:	2301      	moveq	r3, #1
 8000a48:	2300      	movne	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1f4      	bne.n	8000a3a <_ZN7ADS12438XferByteEh+0xe>
			;
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8000a50:	f107 020f 	add.w	r2, r7, #15
 8000a54:	1cf9      	adds	r1, r7, #3
 8000a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <_ZN7ADS12438XferByteEh+0x44>)
 8000a60:	f002 fa64 	bl	8002f2c <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000678 	.word	0x20000678

08000a74 <_ZN7ADS124313writeRegisterEhh>:

	void writeRegister(uint8_t r, uint8_t data) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]
 8000a80:	4613      	mov	r3, r2
 8000a82:	70bb      	strb	r3, [r7, #2]
		ADS124x_CS_0;
 8000a84:	2200      	movs	r2, #0
 8000a86:	2110      	movs	r1, #16
 8000a88:	4828      	ldr	r0, [pc, #160]	; (8000b2c <_ZN7ADS124313writeRegisterEhh+0xb8>)
 8000a8a:	f001 f907 	bl	8001c9c <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <_ZN7ADS124313writeRegisterEhh+0xbc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <_ZN7ADS124313writeRegisterEhh+0xc0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <_ZN7ADS124313writeRegisterEhh+0xc4>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9a      	lsrs	r2, r3, #18
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	3b10      	subs	r3, #16
 8000aaa:	4a24      	ldr	r2, [pc, #144]	; (8000b3c <_ZN7ADS124313writeRegisterEhh+0xc8>)
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <_ZN7ADS124313writeRegisterEhh+0xbc>)
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <_ZN7ADS124313writeRegisterEhh+0xc8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	bf34      	ite	cc
 8000aba:	2301      	movcc	r3, #1
 8000abc:	2300      	movcs	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f4      	bne.n	8000aae <_ZN7ADS124313writeRegisterEhh+0x3a>
		XferByte(0x50 + r);
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	3350      	adds	r3, #80	; 0x50
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4619      	mov	r1, r3
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ffad 	bl	8000a2c <_ZN7ADS12438XferByteEh>
		XferByte(0);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ffa9 	bl	8000a2c <_ZN7ADS12438XferByteEh>
		XferByte(data);
 8000ada:	78bb      	ldrb	r3, [r7, #2]
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffa4 	bl	8000a2c <_ZN7ADS12438XferByteEh>
		delayMicroseconds(20);
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <_ZN7ADS124313writeRegisterEhh+0xbc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <_ZN7ADS124313writeRegisterEhh+0xc0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_ZN7ADS124313writeRegisterEhh+0xc4>)
 8000af0:	fba2 2303 	umull	r2, r3, r2, r3
 8000af4:	0c9a      	lsrs	r2, r3, #18
 8000af6:	4613      	mov	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	4413      	add	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	3b10      	subs	r3, #16
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <_ZN7ADS124313writeRegisterEhh+0xc8>)
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <_ZN7ADS124313writeRegisterEhh+0xbc>)
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <_ZN7ADS124313writeRegisterEhh+0xc8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	bf34      	ite	cc
 8000b10:	2301      	movcc	r3, #1
 8000b12:	2300      	movcs	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1f4      	bne.n	8000b04 <_ZN7ADS124313writeRegisterEhh+0x90>
		ADS124x_CS_1;
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	4803      	ldr	r0, [pc, #12]	; (8000b2c <_ZN7ADS124313writeRegisterEhh+0xb8>)
 8000b20:	f001 f8bc 	bl	8001c9c <HAL_GPIO_WritePin>

	}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	e0001000 	.word	0xe0001000
 8000b34:	2000005c 	.word	0x2000005c
 8000b38:	431bde83 	.word	0x431bde83
 8000b3c:	20000768 	.word	0x20000768

08000b40 <_ZN7ADS124315readAllRegisterEv>:

	void readAllRegister() {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
		ADS124x_CS_0;
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	4866      	ldr	r0, [pc, #408]	; (8000ce8 <_ZN7ADS124315readAllRegisterEv+0x1a8>)
 8000b4e:	f001 f8a5 	bl	8001c9c <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		delayMicroseconds(20);
 8000b52:	4b66      	ldr	r3, [pc, #408]	; (8000cec <_ZN7ADS124315readAllRegisterEv+0x1ac>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	4b65      	ldr	r3, [pc, #404]	; (8000cf0 <_ZN7ADS124315readAllRegisterEv+0x1b0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a65      	ldr	r2, [pc, #404]	; (8000cf4 <_ZN7ADS124315readAllRegisterEv+0x1b4>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9a      	lsrs	r2, r3, #18
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	3b10      	subs	r3, #16
 8000b6e:	4a62      	ldr	r2, [pc, #392]	; (8000cf8 <_ZN7ADS124315readAllRegisterEv+0x1b8>)
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	4b5e      	ldr	r3, [pc, #376]	; (8000cec <_ZN7ADS124315readAllRegisterEv+0x1ac>)
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	4b60      	ldr	r3, [pc, #384]	; (8000cf8 <_ZN7ADS124315readAllRegisterEv+0x1b8>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	bf34      	ite	cc
 8000b7e:	2301      	movcc	r3, #1
 8000b80:	2300      	movcs	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f4      	bne.n	8000b72 <_ZN7ADS124315readAllRegisterEv+0x32>

		XferByte(0x10);
 8000b88:	2110      	movs	r1, #16
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ff4e 	bl	8000a2c <_ZN7ADS12438XferByteEh>
		XferByte(15);
 8000b90:	210f      	movs	r1, #15
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ff4a 	bl	8000a2c <_ZN7ADS12438XferByteEh>

		readSETUP(XferByte(0));
 8000b98:	2100      	movs	r1, #0
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff46 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 f941 	bl	8000e2c <_ZN7ADS12439readSETUPEh>
		readMUX(XferByte(0));
 8000baa:	2100      	movs	r1, #0
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff3d 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 f962 	bl	8000e80 <_ZN7ADS12437readMUXEh>
		readACR(XferByte(0));
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff34 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 f978 	bl	8000ebe <_ZN7ADS12437readACREh>

		ADSregister.ODAC = XferByte(0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff2b 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	70da      	strb	r2, [r3, #3]
		ADSregister.DIO = XferByte(0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff23 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	711a      	strb	r2, [r3, #4]
		ADSregister.DIR = XferByte(0);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff1b 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	715a      	strb	r2, [r3, #5]
		ADSregister.IOCON = XferByte(0);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff13 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	719a      	strb	r2, [r3, #6]
		ADSregister.OCR0 = XferByte(0);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff0b 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	71da      	strb	r2, [r3, #7]
		ADSregister.OCR1 = XferByte(0);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff03 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	721a      	strb	r2, [r3, #8]
		ADSregister.OCR2 = XferByte(0);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff fefb 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	725a      	strb	r2, [r3, #9]
		ADSregister.FSR0 = XferByte(0);
 8000c3e:	2100      	movs	r1, #0
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fef3 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	729a      	strb	r2, [r3, #10]
		ADSregister.FSR1 = XferByte(0);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff feeb 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	72da      	strb	r2, [r3, #11]
		ADSregister.FSR2 = XferByte(0);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fee3 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	731a      	strb	r2, [r3, #12]
		ADSregister.DOR2 = XferByte(0);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fedb 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	735a      	strb	r2, [r3, #13]
		ADSregister.DOR1 = XferByte(0);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fed3 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000c86:	4603      	mov	r3, r0
 8000c88:	461a      	mov	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	739a      	strb	r2, [r3, #14]
		ADSregister.DOR0 = XferByte(0);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff fecb 	bl	8000a2c <_ZN7ADS12438XferByteEh>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	73da      	strb	r2, [r3, #15]

		delayMicroseconds(20);
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <_ZN7ADS124315readAllRegisterEv+0x1ac>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <_ZN7ADS124315readAllRegisterEv+0x1b0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <_ZN7ADS124315readAllRegisterEv+0x1b4>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	0c9a      	lsrs	r2, r3, #18
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	3b10      	subs	r3, #16
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <_ZN7ADS124315readAllRegisterEv+0x1b8>)
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <_ZN7ADS124315readAllRegisterEv+0x1ac>)
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <_ZN7ADS124315readAllRegisterEv+0x1b8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	bf34      	ite	cc
 8000cca:	2301      	movcc	r3, #1
 8000ccc:	2300      	movcs	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1f4      	bne.n	8000cbe <_ZN7ADS124315readAllRegisterEv+0x17e>

		ADS124x_CS_1;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <_ZN7ADS124315readAllRegisterEv+0x1a8>)
 8000cda:	f000 ffdf 	bl	8001c9c <HAL_GPIO_WritePin>

	}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	e0001000 	.word	0xe0001000
 8000cf0:	2000005c 	.word	0x2000005c
 8000cf4:	431bde83 	.word	0x431bde83
 8000cf8:	20000768 	.word	0x20000768

08000cfc <_ZN7ADS12438read_bitEhi>:

	uint8_t read_bit(uint8_t value, int pos) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	460b      	mov	r3, r1
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	72fb      	strb	r3, [r7, #11]
		return (value >> pos) & 1;
 8000d0a:	7afa      	ldrb	r2, [r7, #11]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	fa42 f303 	asr.w	r3, r2, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	b2db      	uxtb	r3, r3
	}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <_ZN7ADS12436setPGAE4_PGA>:

	//PGA
	void setPGA(_PGA pga)
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
	{
		ADSregister.SETUP.PGA = pga;
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	b2d9      	uxtb	r1, r3
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	7813      	ldrb	r3, [r2, #0]
 8000d3c:	f361 0302 	bfi	r3, r1, #0, #3
 8000d40:	7013      	strb	r3, [r2, #0]
	    uint8_t p = (ADSregister.SETUP.ID << 4) | (ADSregister.SETUP.BOCS << 3) |  ADSregister.SETUP.PGA;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	b25a      	sxtb	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	73fb      	strb	r3, [r7, #15]
		writeRegister(0, p);
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	461a      	mov	r2, r3
 8000d78:	2100      	movs	r1, #0
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fe7a 	bl	8000a74 <_ZN7ADS124313writeRegisterEhh>
	}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_ZN7ADS12437setPSELEh>:
		ADSregister.MUX.PSEL = p;
		ADSregister.MUX.NSEL = n;
		writeRegister(1, (ADSregister.MUX.PSEL << 4) | ADSregister.MUX.NSEL);
	}

	void setPSEL(uint8_t value) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
		ADSregister.MUX.PSEL = value;
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	b2d9      	uxtb	r1, r3
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	7853      	ldrb	r3, [r2, #1]
 8000da0:	f361 1307 	bfi	r3, r1, #4, #4
 8000da4:	7053      	strb	r3, [r2, #1]
		uint8_t r = (ADSregister.MUX.PSEL << 4) | ADSregister.MUX.NSEL;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	b25a      	sxtb	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	785b      	ldrb	r3, [r3, #1]
 8000db8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	73fb      	strb	r3, [r7, #15]
		writeRegister(1, r);
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	2101      	movs	r1, #1
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fe51 	bl	8000a74 <_ZN7ADS124313writeRegisterEhh>
	}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_ZN7ADS12437setNSELEh>:

	void setNSEL(uint8_t value) {
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	460b      	mov	r3, r1
 8000de4:	70fb      	strb	r3, [r7, #3]
		ADSregister.MUX.NSEL = value;
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	f003 030f 	and.w	r3, r3, #15
 8000dec:	b2d9      	uxtb	r1, r3
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	7853      	ldrb	r3, [r2, #1]
 8000df2:	f361 0303 	bfi	r3, r1, #0, #4
 8000df6:	7053      	strb	r3, [r2, #1]
		uint8_t r = (ADSregister.MUX.PSEL << 4) | ADSregister.MUX.NSEL;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	785b      	ldrb	r3, [r3, #1]
 8000dfc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	b25a      	sxtb	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	785b      	ldrb	r3, [r3, #1]
 8000e0a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	73fb      	strb	r3, [r7, #15]
		writeRegister(1, r);
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fe28 	bl	8000a74 <_ZN7ADS124313writeRegisterEhh>
	}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_ZN7ADS12439readSETUPEh>:

private:

	void readSETUP(uint8_t p) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
		ADSregister.SETUP.PGA = p & 0x7;
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	b2d9      	uxtb	r1, r3
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	7813      	ldrb	r3, [r2, #0]
 8000e44:	f361 0302 	bfi	r3, r1, #0, #3
 8000e48:	7013      	strb	r3, [r2, #0]
		ADSregister.SETUP.BOCS = (p >> 3) & 0x1;
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	b2d9      	uxtb	r1, r3
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	7813      	ldrb	r3, [r2, #0]
 8000e5a:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e5e:	7013      	strb	r3, [r2, #0]
		ADSregister.SETUP.ID = p >> 4;
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	b2d9      	uxtb	r1, r3
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	7813      	ldrb	r3, [r2, #0]
 8000e70:	f361 1307 	bfi	r3, r1, #4, #4
 8000e74:	7013      	strb	r3, [r2, #0]
	}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <_ZN7ADS12437readMUXEh>:

	void readMUX(uint8_t p) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
		ADSregister.MUX.NSEL = p & 0x0F;
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	b2d9      	uxtb	r1, r3
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	7853      	ldrb	r3, [r2, #1]
 8000e98:	f361 0303 	bfi	r3, r1, #0, #4
 8000e9c:	7053      	strb	r3, [r2, #1]
		ADSregister.MUX.PSEL = (uint8_t) ((p >> 4) & 0x0F);
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f003 030f 	and.w	r3, r3, #15
 8000ea8:	b2d9      	uxtb	r1, r3
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	7853      	ldrb	r3, [r2, #1]
 8000eae:	f361 1307 	bfi	r3, r1, #4, #4
 8000eb2:	7053      	strb	r3, [r2, #1]
	}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <_ZN7ADS12437readACREh>:

	void readACR(uint8_t p) {
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	70fb      	strb	r3, [r7, #3]
		ADSregister.ACR.DR0 = read_bit(p, 0);
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff13 	bl	8000cfc <_ZN7ADS12438read_bitEhi>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	b2d9      	uxtb	r1, r3
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	7893      	ldrb	r3, [r2, #2]
 8000ee2:	f361 0300 	bfi	r3, r1, #0, #1
 8000ee6:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.DR1 = read_bit(p, 1);
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	2201      	movs	r2, #1
 8000eec:	4619      	mov	r1, r3
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff04 	bl	8000cfc <_ZN7ADS12438read_bitEhi>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	b2d9      	uxtb	r1, r3
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	7893      	ldrb	r3, [r2, #2]
 8000f00:	f361 0341 	bfi	r3, r1, #1, #1
 8000f04:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.RANGE = read_bit(p, 2);
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff fef5 	bl	8000cfc <_ZN7ADS12438read_bitEhi>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	b2d9      	uxtb	r1, r3
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	7893      	ldrb	r3, [r2, #2]
 8000f1e:	f361 0382 	bfi	r3, r1, #2, #1
 8000f22:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.BITORDER = read_bit(p, 3);
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	2203      	movs	r2, #3
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fee6 	bl	8000cfc <_ZN7ADS12438read_bitEhi>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	b2d9      	uxtb	r1, r3
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	7893      	ldrb	r3, [r2, #2]
 8000f3c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f40:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.BUFFER = read_bit(p, 4);
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	2204      	movs	r2, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fed7 	bl	8000cfc <_ZN7ADS12438read_bitEhi>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	b2d9      	uxtb	r1, r3
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	7893      	ldrb	r3, [r2, #2]
 8000f5a:	f361 1304 	bfi	r3, r1, #4, #1
 8000f5e:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.SPEED = read_bit(p, 5);
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	2205      	movs	r2, #5
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fec8 	bl	8000cfc <_ZN7ADS12438read_bitEhi>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	b2d9      	uxtb	r1, r3
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	7893      	ldrb	r3, [r2, #2]
 8000f78:	f361 1345 	bfi	r3, r1, #5, #1
 8000f7c:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.DataFormat = read_bit(p, 6);
 8000f7e:	78fb      	ldrb	r3, [r7, #3]
 8000f80:	2206      	movs	r2, #6
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff feb9 	bl	8000cfc <_ZN7ADS12438read_bitEhi>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	b2d9      	uxtb	r1, r3
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	7893      	ldrb	r3, [r2, #2]
 8000f96:	f361 1386 	bfi	r3, r1, #6, #1
 8000f9a:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.DRDY = read_bit(p, 7);
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff feaa 	bl	8000cfc <_ZN7ADS12438read_bitEhi>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	b2d9      	uxtb	r1, r3
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	7893      	ldrb	r3, [r2, #2]
 8000fb4:	f361 13c7 	bfi	r3, r1, #7, #1
 8000fb8:	7093      	strb	r3, [r2, #2]
	}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZN8classLog4initEP20__UART_HandleTypeDef>:
#define COLOR_RESET   "\33[0m"

class classLog {
public:

	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <_ZN8classLog7printlnEPKc>:
			strcat(str, "\n");
			HAL_UART_Transmit(huart, (uint8_t*) str, strlen(str), 1000);

	}

	void println(char const *format) {
 8000fde:	b590      	push	{r4, r7, lr}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
      HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f7ff f8ac 	bl	800014c <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4620      	mov	r0, r4
 8001000:	f002 fca6 	bl	8003950 <HAL_UART_Transmit>
	}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <_ZN8classLog1iEPKc>:

	UART_HandleTypeDef *huart;

	void w(char const *const format) {colorStringln(11, format);}
	void e(char const *const format) {colorStringln(9, format);}
	void i(char const *const format) {colorStringln(45, format);}
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	212d      	movs	r1, #45	; 0x2d
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f002 fe5e 	bl	8003cdc <_ZN8classLog13colorStringlnEiPKc>
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <setup>:

ADS1243 adc;

classLog Log;

extern "C" void setup() {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af02      	add	r7, sp, #8

	DWT_Init();
 800102e:	f002 fe0f 	bl	8003c50 <_Z8DWT_Initv>

	tft.init(&LCD_0);
 8001032:	4919      	ldr	r1, [pc, #100]	; (8001098 <setup+0x70>)
 8001034:	4819      	ldr	r0, [pc, #100]	; (800109c <setup+0x74>)
 8001036:	f7ff fbdd 	bl	80007f4 <_ZN3TFT4initEP9TFT_LCD_t>
	tft.Fill1(0);
 800103a:	2100      	movs	r1, #0
 800103c:	4817      	ldr	r0, [pc, #92]	; (800109c <setup+0x74>)
 800103e:	f002 ffc7 	bl	8003fd0 <_ZN3TFT5Fill1Et>
	tft.driver.Update();
 8001042:	4817      	ldr	r0, [pc, #92]	; (80010a0 <setup+0x78>)
 8001044:	f7ff fbc4 	bl	80007d0 <_ZN10TFT_Driver6UpdateEv>
	tft.SetFontColor(1, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2101      	movs	r1, #1
 800104c:	4813      	ldr	r0, [pc, #76]	; (800109c <setup+0x74>)
 800104e:	f7ff fbe3 	bl	8000818 <_ZN3TFT12SetFontColorEtt>
	tft.GotoXY(20, 20);
 8001052:	2214      	movs	r2, #20
 8001054:	2114      	movs	r1, #20
 8001056:	4811      	ldr	r0, [pc, #68]	; (800109c <setup+0x74>)
 8001058:	f7ff fbf1 	bl	800083e <_ZN3TFT6GotoXYEss>
	FontClassicPuts(&tft, (char*) "1111", &Font_7x10, 0);
 800105c:	2300      	movs	r3, #0
 800105e:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <setup+0x7c>)
 8001060:	4911      	ldr	r1, [pc, #68]	; (80010a8 <setup+0x80>)
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <setup+0x74>)
 8001064:	f7ff fcb7 	bl	80009d6 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th>
	tft.LineH(10, 10, 50, 1);
 8001068:	2301      	movs	r3, #1
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2332      	movs	r3, #50	; 0x32
 800106e:	220a      	movs	r2, #10
 8001070:	210a      	movs	r1, #10
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <setup+0x74>)
 8001074:	f002 ffdc 	bl	8004030 <_ZN3TFT5LineHElllt>
	tft.driver.Update();
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <setup+0x78>)
 800107a:	f7ff fba9 	bl	80007d0 <_ZN10TFT_Driver6UpdateEv>

	Log.init(&huart1);
 800107e:	490b      	ldr	r1, [pc, #44]	; (80010ac <setup+0x84>)
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <setup+0x88>)
 8001082:	f7ff ff9e 	bl	8000fc2 <_ZN8classLog4initEP20__UART_HandleTypeDef>
	Log.i("Start");
 8001086:	490b      	ldr	r1, [pc, #44]	; (80010b4 <setup+0x8c>)
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <setup+0x88>)
 800108a:	f7ff ffbf 	bl	800100c <_ZN8classLog1iEPKc>
//	Log.println("DOR0  0Fh %d", adc.readRegister(15));




	loop();
 800108e:	f000 f813 	bl	80010b8 <_Z4loopv>
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000000 	.word	0x20000000
 800109c:	20000530 	.word	0x20000530
 80010a0:	20000534 	.word	0x20000534
 80010a4:	20000068 	.word	0x20000068
 80010a8:	08004c44 	.word	0x08004c44
 80010ac:	2000071c 	.word	0x2000071c
 80010b0:	2000056c 	.word	0x2000056c
 80010b4:	08004c4c 	.word	0x08004c4c

080010b8 <_Z4loopv>:
uint32_t v;
float v1;
void loop() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	while (1) {

		adc.readAllRegister();
 80010bc:	4824      	ldr	r0, [pc, #144]	; (8001150 <_Z4loopv+0x98>)
 80010be:	f7ff fd3f 	bl	8000b40 <_ZN7ADS124315readAllRegisterEv>

		v = (adc.ADSregister.DOR2<<16) | (adc.ADSregister.DOR1<<8) | adc.ADSregister.DOR0;
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <_Z4loopv+0x98>)
 80010c4:	7b5b      	ldrb	r3, [r3, #13]
 80010c6:	041a      	lsls	r2, r3, #16
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <_Z4loopv+0x98>)
 80010ca:	7b9b      	ldrb	r3, [r3, #14]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	4313      	orrs	r3, r2
 80010d0:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <_Z4loopv+0x98>)
 80010d2:	7bd2      	ldrb	r2, [r2, #15]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <_Z4loopv+0x9c>)
 80010da:	601a      	str	r2, [r3, #0]
        v1 = (float)v / (256.0f*256.0f*256.0f);
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <_Z4loopv+0x9c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f8f1 	bl	80002c8 <__aeabi_ui2f>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f9f7 	bl	80004e0 <__aeabi_fdiv>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <_Z4loopv+0xa0>)
 80010f8:	601a      	str	r2, [r3, #0]

        adc.setPSEL(5);
 80010fa:	2105      	movs	r1, #5
 80010fc:	4814      	ldr	r0, [pc, #80]	; (8001150 <_Z4loopv+0x98>)
 80010fe:	f7ff fe43 	bl	8000d88 <_ZN7ADS12437setPSELEh>
        adc.setNSEL(6);
 8001102:	2106      	movs	r1, #6
 8001104:	4812      	ldr	r0, [pc, #72]	; (8001150 <_Z4loopv+0x98>)
 8001106:	f7ff fe68 	bl	8000dda <_ZN7ADS12437setNSELEh>

        adc.setPGA(PGA_128);
 800110a:	2107      	movs	r1, #7
 800110c:	4810      	ldr	r0, [pc, #64]	; (8001150 <_Z4loopv+0x98>)
 800110e:	f7ff fe09 	bl	8000d24 <_ZN7ADS12436setPGAE4_PGA>

        adc.readAllRegister();
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <_Z4loopv+0x98>)
 8001114:	f7ff fd14 	bl	8000b40 <_ZN7ADS124315readAllRegisterEv>

        adc.setPGA(PGA_4);
 8001118:	2102      	movs	r1, #2
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <_Z4loopv+0x98>)
 800111c:	f7ff fe02 	bl	8000d24 <_ZN7ADS12436setPGAE4_PGA>

        adc.setPSEL(1);
 8001120:	2101      	movs	r1, #1
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <_Z4loopv+0x98>)
 8001124:	f7ff fe30 	bl	8000d88 <_ZN7ADS12437setPSELEh>
        adc.setNSEL(4);
 8001128:	2104      	movs	r1, #4
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <_Z4loopv+0x98>)
 800112c:	f7ff fe55 	bl	8000dda <_ZN7ADS12437setNSELEh>

        adc.readAllRegister();
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <_Z4loopv+0x98>)
 8001132:	f7ff fd05 	bl	8000b40 <_ZN7ADS124315readAllRegisterEv>

		//Log.clear();
		Log.println("----");
 8001136:	4909      	ldr	r1, [pc, #36]	; (800115c <_Z4loopv+0xa4>)
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <_Z4loopv+0xa8>)
 800113a:	f7ff ff50 	bl	8000fde <_ZN8classLog7printlnEPKc>
		Log.println("SETUP 00h %d", adc.ADSregister.SETUP);
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <_Z4loopv+0x98>)
 8001140:	4908      	ldr	r1, [pc, #32]	; (8001164 <_Z4loopv+0xac>)
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <_Z4loopv+0xa8>)
 8001144:	f000 f810 	bl	8001168 <_ZN8classLog7printlnIJ6_setupEEEvPKcDpRKT_>
//		Log.println("FSR2  0Ch %d", adc.readRegister(12));
//		Log.println("DOR2  0Dh %d", adc.readRegister(13));
//		Log.println("DOR1  0Eh %d", adc.readRegister(14));
//		Log.println("DOR0  0Fh %d", adc.readRegister(15));

		HAL_Delay(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f000 fb1b 	bl	8001784 <HAL_Delay>
		adc.readAllRegister();
 800114e:	e7b5      	b.n	80010bc <_Z4loopv+0x4>
 8001150:	20000558 	.word	0x20000558
 8001154:	20000670 	.word	0x20000670
 8001158:	20000674 	.word	0x20000674
 800115c:	08004c54 	.word	0x08004c54
 8001160:	2000056c 	.word	0x2000056c
 8001164:	08004c5c 	.word	0x08004c5c

08001168 <_ZN8classLog7printlnIJ6_setupEEEvPKcDpRKT_>:
	void println(char const *const format, Args const &... args) noexcept {
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
			sprintf(str, format, args ...);
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	f003 f8a4 	bl	80042c8 <siprintf>
			strcat(str, "\n");
 8001180:	68fc      	ldr	r4, [r7, #12]
 8001182:	4620      	mov	r0, r4
 8001184:	f7fe ffe2 	bl	800014c <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	4423      	add	r3, r4
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <_ZN8classLog7printlnIJ6_setupEEEvPKcDpRKT_+0x58>)
 800118e:	461a      	mov	r2, r3
 8001190:	460b      	mov	r3, r1
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(huart, (uint8_t*) str, strlen(str), 1000);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 800119c:	68fd      	ldr	r5, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7fe ffd3 	bl	800014c <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	4629      	mov	r1, r5
 80011b0:	4620      	mov	r0, r4
 80011b2:	f002 fbcd 	bl	8003950 <HAL_UART_Transmit>
	}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	08004c6c 	.word	0x08004c6c

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c8:	f000 fa7a 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 f80d 	bl	80011ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f7ff fa22 	bl	8000618 <MX_GPIO_Init>
  MX_I2C2_Init();
 80011d4:	f7ff fa78 	bl	80006c8 <MX_I2C2_Init>
  MX_SPI1_Init();
 80011d8:	f000 f852 	bl	8001280 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011dc:	f000 f9d4 	bl	8001588 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80011e0:	f000 f964 	bl	80014ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80011e4:	f7ff ff20 	bl	8001028 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <main+0x24>

080011ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b090      	sub	sp, #64	; 0x40
 80011ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	2228      	movs	r2, #40	; 0x28
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 f885 	bl	8004308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001214:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121a:	2301      	movs	r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001228:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800122c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	4618      	mov	r0, r3
 8001234:	f001 f9e6 	bl	8002604 <HAL_RCC_OscConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800123e:	f000 f819 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001242:	230f      	movs	r3, #15
 8001244:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001246:	2302      	movs	r3, #2
 8001248:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800124e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2102      	movs	r1, #2
 800125c:	4618      	mov	r0, r3
 800125e:	f001 fc53 	bl	8002b08 <HAL_RCC_ClockConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001268:	f000 f804 	bl	8001274 <Error_Handler>
  }
}
 800126c:	bf00      	nop
 800126e:	3740      	adds	r7, #64	; 0x40
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_SPI1_Init+0x64>)
 8001286:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <MX_SPI1_Init+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_SPI1_Init+0x64>)
 800128c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001290:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_SPI1_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_SPI1_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012b4:	2220      	movs	r2, #32
 80012b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012cc:	220a      	movs	r2, #10
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012d2:	f001 fda7 	bl	8002e24 <HAL_SPI_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012dc:	f7ff ffca 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000678 	.word	0x20000678
 80012e8:	40013000 	.word	0x40013000

080012ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <HAL_SPI_MspInit+0x88>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d12f      	bne.n	800136c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 8001312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a13      	ldr	r2, [pc, #76]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_SPI_MspInit+0x8c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800133c:	23a0      	movs	r3, #160	; 0xa0
 800133e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <HAL_SPI_MspInit+0x90>)
 8001350:	f000 fb20 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001354:	2340      	movs	r3, #64	; 0x40
 8001356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_SPI_MspInit+0x90>)
 8001368:	f000 fb14 	bl	8001994 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40013000 	.word	0x40013000
 8001378:	40021000 	.word	0x40021000
 800137c:	40010800 	.word	0x40010800

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_MspInit+0x5c>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_MspInit+0x5c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_MspInit+0x5c>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_MspInit+0x5c>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_MspInit+0x5c>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_MspInit+0x5c>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_MspInit+0x60>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_MspInit+0x60>)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f000 f98f 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f002 ff58 	bl	8004318 <__errno>
 8001468:	4603      	mov	r3, r0
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20005000 	.word	0x20005000
 8001494:	00000400 	.word	0x00000400
 8001498:	200006d0 	.word	0x200006d0
 800149c:	200008b8 	.word	0x200008b8

080014a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_TIM1_Init+0x98>)
 80014ca:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <MX_TIM1_Init+0x9c>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_TIM1_Init+0x98>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_TIM1_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_TIM1_Init+0x98>)
 80014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_TIM1_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_TIM1_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_TIM1_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f4:	4813      	ldr	r0, [pc, #76]	; (8001544 <MX_TIM1_Init+0x98>)
 80014f6:	f001 ff6f 	bl	80033d8 <HAL_TIM_Base_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001500:	f7ff feb8 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_TIM1_Init+0x98>)
 8001512:	f001 ffb0 	bl	8003476 <HAL_TIM_ConfigClockSource>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800151c:	f7ff feaa 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_TIM1_Init+0x98>)
 800152e:	f002 f961 	bl	80037f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001538:	f7ff fe9c 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200006d4 	.word	0x200006d4
 8001548:	40012c00 	.word	0x40012c00

0800154c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_TIM_Base_MspInit+0x34>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10b      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 8001564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40012c00 	.word	0x40012c00
 8001584:	40021000 	.word	0x40021000

08001588 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_USART1_UART_Init+0x48>)
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 8001590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_USART1_UART_Init+0x48>)
 8001594:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <MX_USART1_UART_Init+0x50>)
 8001596:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_USART1_UART_Init+0x48>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART1_UART_Init+0x48>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_USART1_UART_Init+0x48>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART1_UART_Init+0x48>)
 80015ac:	220c      	movs	r2, #12
 80015ae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <MX_USART1_UART_Init+0x48>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART1_UART_Init+0x48>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_USART1_UART_Init+0x48>)
 80015be:	f002 f977 	bl	80038b0 <HAL_UART_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80015c8:	f7ff fe54 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000071c 	.word	0x2000071c
 80015d4:	40013800 	.word	0x40013800
 80015d8:	001e8480 	.word	0x001e8480

080015dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_UART_MspInit+0x8c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d131      	bne.n	8001660 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_UART_MspInit+0x90>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a1a      	ldr	r2, [pc, #104]	; (800166c <HAL_UART_MspInit+0x90>)
 8001602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_UART_MspInit+0x90>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_UART_MspInit+0x90>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a14      	ldr	r2, [pc, #80]	; (800166c <HAL_UART_MspInit+0x90>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_UART_MspInit+0x90>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800162c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4619      	mov	r1, r3
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <HAL_UART_MspInit+0x94>)
 8001642:	f000 f9a7 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_UART_MspInit+0x94>)
 800165c:	f000 f99a 	bl	8001994 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40013800 	.word	0x40013800
 800166c:	40021000 	.word	0x40021000
 8001670:	40010800 	.word	0x40010800

08001674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001674:	f7ff ff14 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480b      	ldr	r0, [pc, #44]	; (80016a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800167a:	490c      	ldr	r1, [pc, #48]	; (80016ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800167c:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001690:	4c09      	ldr	r4, [pc, #36]	; (80016b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169e:	f002 fe41 	bl	8004324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016a2:	f7ff fd8f 	bl	80011c4 <main>
  bx lr
 80016a6:	4770      	bx	lr
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80016b0:	080054ac 	.word	0x080054ac
  ldr r2, =_sbss
 80016b4:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80016b8:	200008b8 	.word	0x200008b8

080016bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_2_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x28>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x28>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f92b 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	200f      	movs	r0, #15
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fe50 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40022000 	.word	0x40022000

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f935 	bl	800197a <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f90b 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000005c 	.word	0x2000005c
 8001744:	20000064 	.word	0x20000064
 8001748:	20000060 	.word	0x20000060

0800174c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_IncTick+0x1c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_IncTick+0x20>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a03      	ldr	r2, [pc, #12]	; (800176c <HAL_IncTick+0x20>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	20000064 	.word	0x20000064
 800176c:	20000764 	.word	0x20000764

08001770 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <HAL_GetTick+0x10>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000764 	.word	0x20000764

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff fff0 	bl	8001770 <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffe0 	bl	8001770 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000064 	.word	0x20000064

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff90 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff49 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff5e 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff90 	bl	8001884 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5f 	bl	8001830 <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffb0 	bl	80018e8 <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b08b      	sub	sp, #44	; 0x2c
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	e169      	b.n	8001c7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019a8:	2201      	movs	r2, #1
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	f040 8158 	bne.w	8001c76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4a9a      	ldr	r2, [pc, #616]	; (8001c34 <HAL_GPIO_Init+0x2a0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d05e      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019d0:	4a98      	ldr	r2, [pc, #608]	; (8001c34 <HAL_GPIO_Init+0x2a0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d875      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019d6:	4a98      	ldr	r2, [pc, #608]	; (8001c38 <HAL_GPIO_Init+0x2a4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d058      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019dc:	4a96      	ldr	r2, [pc, #600]	; (8001c38 <HAL_GPIO_Init+0x2a4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d86f      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019e2:	4a96      	ldr	r2, [pc, #600]	; (8001c3c <HAL_GPIO_Init+0x2a8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d052      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019e8:	4a94      	ldr	r2, [pc, #592]	; (8001c3c <HAL_GPIO_Init+0x2a8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d869      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019ee:	4a94      	ldr	r2, [pc, #592]	; (8001c40 <HAL_GPIO_Init+0x2ac>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d04c      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019f4:	4a92      	ldr	r2, [pc, #584]	; (8001c40 <HAL_GPIO_Init+0x2ac>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d863      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019fa:	4a92      	ldr	r2, [pc, #584]	; (8001c44 <HAL_GPIO_Init+0x2b0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d046      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 8001a00:	4a90      	ldr	r2, [pc, #576]	; (8001c44 <HAL_GPIO_Init+0x2b0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d85d      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d82a      	bhi.n	8001a60 <HAL_GPIO_Init+0xcc>
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d859      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <HAL_GPIO_Init+0x80>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a8f 	.word	0x08001a8f
 8001a18:	08001a69 	.word	0x08001a69
 8001a1c:	08001a7b 	.word	0x08001a7b
 8001a20:	08001abd 	.word	0x08001abd
 8001a24:	08001ac3 	.word	0x08001ac3
 8001a28:	08001ac3 	.word	0x08001ac3
 8001a2c:	08001ac3 	.word	0x08001ac3
 8001a30:	08001ac3 	.word	0x08001ac3
 8001a34:	08001ac3 	.word	0x08001ac3
 8001a38:	08001ac3 	.word	0x08001ac3
 8001a3c:	08001ac3 	.word	0x08001ac3
 8001a40:	08001ac3 	.word	0x08001ac3
 8001a44:	08001ac3 	.word	0x08001ac3
 8001a48:	08001ac3 	.word	0x08001ac3
 8001a4c:	08001ac3 	.word	0x08001ac3
 8001a50:	08001ac3 	.word	0x08001ac3
 8001a54:	08001ac3 	.word	0x08001ac3
 8001a58:	08001a71 	.word	0x08001a71
 8001a5c:	08001a85 	.word	0x08001a85
 8001a60:	4a79      	ldr	r2, [pc, #484]	; (8001c48 <HAL_GPIO_Init+0x2b4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a66:	e02c      	b.n	8001ac2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e029      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	3304      	adds	r3, #4
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e024      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	3308      	adds	r3, #8
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e01f      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	330c      	adds	r3, #12
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e01a      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a96:	2304      	movs	r3, #4
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e013      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	611a      	str	r2, [r3, #16]
          break;
 8001aae:	e009      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	615a      	str	r2, [r3, #20]
          break;
 8001aba:	e003      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
          break;
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          break;
 8001ac2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2bff      	cmp	r3, #255	; 0xff
 8001ac8:	d801      	bhi.n	8001ace <HAL_GPIO_Init+0x13a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	e001      	b.n	8001ad2 <HAL_GPIO_Init+0x13e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d802      	bhi.n	8001ae0 <HAL_GPIO_Init+0x14c>
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x152>
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3b08      	subs	r3, #8
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	210f      	movs	r1, #15
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	401a      	ands	r2, r3
 8001af8:	6a39      	ldr	r1, [r7, #32]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	431a      	orrs	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80b1 	beq.w	8001c76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <HAL_GPIO_Init+0x2b8>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a4c      	ldr	r2, [pc, #304]	; (8001c4c <HAL_GPIO_Init+0x2b8>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_GPIO_Init+0x2b8>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b2c:	4a48      	ldr	r2, [pc, #288]	; (8001c50 <HAL_GPIO_Init+0x2bc>)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a40      	ldr	r2, [pc, #256]	; (8001c54 <HAL_GPIO_Init+0x2c0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d013      	beq.n	8001b80 <HAL_GPIO_Init+0x1ec>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a3f      	ldr	r2, [pc, #252]	; (8001c58 <HAL_GPIO_Init+0x2c4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d00d      	beq.n	8001b7c <HAL_GPIO_Init+0x1e8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a3e      	ldr	r2, [pc, #248]	; (8001c5c <HAL_GPIO_Init+0x2c8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d007      	beq.n	8001b78 <HAL_GPIO_Init+0x1e4>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a3d      	ldr	r2, [pc, #244]	; (8001c60 <HAL_GPIO_Init+0x2cc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <HAL_GPIO_Init+0x1e0>
 8001b70:	2303      	movs	r3, #3
 8001b72:	e006      	b.n	8001b82 <HAL_GPIO_Init+0x1ee>
 8001b74:	2304      	movs	r3, #4
 8001b76:	e004      	b.n	8001b82 <HAL_GPIO_Init+0x1ee>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e002      	b.n	8001b82 <HAL_GPIO_Init+0x1ee>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_GPIO_Init+0x1ee>
 8001b80:	2300      	movs	r3, #0
 8001b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b84:	f002 0203 	and.w	r2, r2, #3
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	4093      	lsls	r3, r2
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b92:	492f      	ldr	r1, [pc, #188]	; (8001c50 <HAL_GPIO_Init+0x2bc>)
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	492c      	ldr	r1, [pc, #176]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4928      	ldr	r1, [pc, #160]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4922      	ldr	r1, [pc, #136]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60cb      	str	r3, [r1, #12]
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	491e      	ldr	r1, [pc, #120]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4918      	ldr	r1, [pc, #96]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4914      	ldr	r1, [pc, #80]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d021      	beq.n	8001c68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	490e      	ldr	r1, [pc, #56]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	e021      	b.n	8001c76 <HAL_GPIO_Init+0x2e2>
 8001c32:	bf00      	nop
 8001c34:	10320000 	.word	0x10320000
 8001c38:	10310000 	.word	0x10310000
 8001c3c:	10220000 	.word	0x10220000
 8001c40:	10210000 	.word	0x10210000
 8001c44:	10120000 	.word	0x10120000
 8001c48:	10110000 	.word	0x10110000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40010800 	.word	0x40010800
 8001c58:	40010c00 	.word	0x40010c00
 8001c5c:	40011000 	.word	0x40011000
 8001c60:	40011400 	.word	0x40011400
 8001c64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_GPIO_Init+0x304>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	4909      	ldr	r1, [pc, #36]	; (8001c98 <HAL_GPIO_Init+0x304>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	3301      	adds	r3, #1
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f47f ae8e 	bne.w	80019a8 <HAL_GPIO_Init+0x14>
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	372c      	adds	r7, #44	; 0x2c
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	40010400 	.word	0x40010400

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cb8:	e003      	b.n	8001cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	041a      	lsls	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	611a      	str	r2, [r3, #16]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e12b      	b.n	8001f36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fd16 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2224      	movs	r2, #36	; 0x24
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d30:	f001 f832 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 8001d34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a81      	ldr	r2, [pc, #516]	; (8001f40 <HAL_I2C_Init+0x274>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d807      	bhi.n	8001d50 <HAL_I2C_Init+0x84>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4a80      	ldr	r2, [pc, #512]	; (8001f44 <HAL_I2C_Init+0x278>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	bf94      	ite	ls
 8001d48:	2301      	movls	r3, #1
 8001d4a:	2300      	movhi	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e006      	b.n	8001d5e <HAL_I2C_Init+0x92>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4a7d      	ldr	r2, [pc, #500]	; (8001f48 <HAL_I2C_Init+0x27c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	bf94      	ite	ls
 8001d58:	2301      	movls	r3, #1
 8001d5a:	2300      	movhi	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0e7      	b.n	8001f36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4a78      	ldr	r2, [pc, #480]	; (8001f4c <HAL_I2C_Init+0x280>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0c9b      	lsrs	r3, r3, #18
 8001d70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a6a      	ldr	r2, [pc, #424]	; (8001f40 <HAL_I2C_Init+0x274>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d802      	bhi.n	8001da0 <HAL_I2C_Init+0xd4>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	e009      	b.n	8001db4 <HAL_I2C_Init+0xe8>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	4a69      	ldr	r2, [pc, #420]	; (8001f50 <HAL_I2C_Init+0x284>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	3301      	adds	r3, #1
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	495c      	ldr	r1, [pc, #368]	; (8001f40 <HAL_I2C_Init+0x274>)
 8001dd0:	428b      	cmp	r3, r1
 8001dd2:	d819      	bhi.n	8001e08 <HAL_I2C_Init+0x13c>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1e59      	subs	r1, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de2:	1c59      	adds	r1, r3, #1
 8001de4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001de8:	400b      	ands	r3, r1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_I2C_Init+0x138>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1e59      	subs	r1, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e02:	e051      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e04:	2304      	movs	r3, #4
 8001e06:	e04f      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d111      	bne.n	8001e34 <HAL_I2C_Init+0x168>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e58      	subs	r0, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e012      	b.n	8001e5a <HAL_I2C_Init+0x18e>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	0099      	lsls	r1, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Init+0x196>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e022      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10e      	bne.n	8001e88 <HAL_I2C_Init+0x1bc>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1e58      	subs	r0, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6859      	ldr	r1, [r3, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	440b      	add	r3, r1
 8001e78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e86:	e00f      	b.n	8001ea8 <HAL_I2C_Init+0x1dc>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e58      	subs	r0, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	0099      	lsls	r1, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	6809      	ldr	r1, [r1, #0]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ed6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6911      	ldr	r1, [r2, #16]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68d2      	ldr	r2, [r2, #12]
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	000186a0 	.word	0x000186a0
 8001f44:	001e847f 	.word	0x001e847f
 8001f48:	003d08ff 	.word	0x003d08ff
 8001f4c:	431bde83 	.word	0x431bde83
 8001f50:	10624dd3 	.word	0x10624dd3

08001f54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	460b      	mov	r3, r1
 8001f62:	817b      	strh	r3, [r7, #10]
 8001f64:	4613      	mov	r3, r2
 8001f66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fc02 	bl	8001770 <HAL_GetTick>
 8001f6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	f040 80e0 	bne.w	800213c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2319      	movs	r3, #25
 8001f82:	2201      	movs	r2, #1
 8001f84:	4970      	ldr	r1, [pc, #448]	; (8002148 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f964 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	e0d3      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_I2C_Master_Transmit+0x50>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e0cc      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d007      	beq.n	8001fca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2221      	movs	r2, #33	; 0x21
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	893a      	ldrh	r2, [r7, #8]
 8001ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4a50      	ldr	r2, [pc, #320]	; (800214c <HAL_I2C_Master_Transmit+0x1f8>)
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800200c:	8979      	ldrh	r1, [r7, #10]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	6a3a      	ldr	r2, [r7, #32]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f89c 	bl	8002150 <I2C_MasterRequestWrite>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e08d      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002038:	e066      	b.n	8002108 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	6a39      	ldr	r1, [r7, #32]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fa22 	bl	8002488 <I2C_WaitOnTXEFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00d      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b04      	cmp	r3, #4
 8002050:	d107      	bne.n	8002062 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002060:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06b      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d11b      	bne.n	80020dc <HAL_I2C_Master_Transmit+0x188>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d017      	beq.n	80020dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	6a39      	ldr	r1, [r7, #32]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fa19 	bl	8002518 <I2C_WaitOnBTFFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00d      	beq.n	8002108 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d107      	bne.n	8002104 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002102:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e01a      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	d194      	bne.n	800203a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	00100002 	.word	0x00100002
 800214c:	ffff0000 	.word	0xffff0000

08002150 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	460b      	mov	r3, r1
 800215e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d006      	beq.n	800217a <I2C_MasterRequestWrite+0x2a>
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d003      	beq.n	800217a <I2C_MasterRequestWrite+0x2a>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002178:	d108      	bne.n	800218c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e00b      	b.n	80021a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	2b12      	cmp	r3, #18
 8002192:	d107      	bne.n	80021a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f84f 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00d      	beq.n	80021d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ca:	d103      	bne.n	80021d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e035      	b.n	8002244 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021e0:	d108      	bne.n	80021f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021e2:	897b      	ldrh	r3, [r7, #10]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021f0:	611a      	str	r2, [r3, #16]
 80021f2:	e01b      	b.n	800222c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021f4:	897b      	ldrh	r3, [r7, #10]
 80021f6:	11db      	asrs	r3, r3, #7
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f003 0306 	and.w	r3, r3, #6
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f063 030f 	orn	r3, r3, #15
 8002204:	b2da      	uxtb	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	490e      	ldr	r1, [pc, #56]	; (800224c <I2C_MasterRequestWrite+0xfc>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f898 	bl	8002348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e010      	b.n	8002244 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <I2C_MasterRequestWrite+0x100>)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f888 	bl	8002348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	00010008 	.word	0x00010008
 8002250:	00010002 	.word	0x00010002

08002254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	4613      	mov	r3, r2
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002264:	e048      	b.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d044      	beq.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226e:	f7ff fa7f 	bl	8001770 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d302      	bcc.n	8002284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d139      	bne.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	0c1b      	lsrs	r3, r3, #16
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d10d      	bne.n	80022aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	43da      	mvns	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	e00c      	b.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	43da      	mvns	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4013      	ands	r3, r2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d116      	bne.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e023      	b.n	8002340 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	0c1b      	lsrs	r3, r3, #16
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d10d      	bne.n	800231e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	43da      	mvns	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	e00c      	b.n	8002338 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	43da      	mvns	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4013      	ands	r3, r2
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	429a      	cmp	r2, r3
 800233c:	d093      	beq.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002356:	e071      	b.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002366:	d123      	bne.n	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002380:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f043 0204 	orr.w	r2, r3, #4
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e067      	b.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b6:	d041      	beq.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b8:	f7ff f9da 	bl	8001770 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d302      	bcc.n	80023ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d136      	bne.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d10c      	bne.n	80023f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4013      	ands	r3, r2
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	e00b      	b.n	800240a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	43da      	mvns	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4013      	ands	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f043 0220 	orr.w	r2, r3, #32
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e021      	b.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	d10c      	bne.n	8002460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	43da      	mvns	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4013      	ands	r3, r2
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e00b      	b.n	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf14      	ite	ne
 8002472:	2301      	movne	r3, #1
 8002474:	2300      	moveq	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	f47f af6d 	bne.w	8002358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002494:	e034      	b.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f886 	bl	80025a8 <I2C_IsAcknowledgeFailed>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e034      	b.n	8002510 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d028      	beq.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7ff f95f 	bl	8001770 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11d      	bne.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b80      	cmp	r3, #128	; 0x80
 80024d0:	d016      	beq.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e007      	b.n	8002510 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b80      	cmp	r3, #128	; 0x80
 800250c:	d1c3      	bne.n	8002496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002524:	e034      	b.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f83e 	bl	80025a8 <I2C_IsAcknowledgeFailed>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e034      	b.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d028      	beq.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7ff f917 	bl	8001770 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11d      	bne.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b04      	cmp	r3, #4
 8002560:	d016      	beq.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d1c3      	bne.n	8002526 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	d11b      	bne.n	80025f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f043 0204 	orr.w	r2, r3, #4
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e272      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8087 	beq.w	8002732 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002624:	4b92      	ldr	r3, [pc, #584]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b04      	cmp	r3, #4
 800262e:	d00c      	beq.n	800264a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002630:	4b8f      	ldr	r3, [pc, #572]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d112      	bne.n	8002662 <HAL_RCC_OscConfig+0x5e>
 800263c:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002648:	d10b      	bne.n	8002662 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264a:	4b89      	ldr	r3, [pc, #548]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d06c      	beq.n	8002730 <HAL_RCC_OscConfig+0x12c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d168      	bne.n	8002730 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e24c      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x76>
 800266c:	4b80      	ldr	r3, [pc, #512]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a7f      	ldr	r2, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e02e      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x98>
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7a      	ldr	r2, [pc, #488]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a77      	ldr	r2, [pc, #476]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01d      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0xbc>
 80026a6:	4b72      	ldr	r3, [pc, #456]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a71      	ldr	r2, [pc, #452]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b6f      	ldr	r3, [pc, #444]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6e      	ldr	r2, [pc, #440]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b68      	ldr	r3, [pc, #416]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a67      	ldr	r2, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff f846 	bl	8001770 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff f842 	bl	8001770 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e200      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe4>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff f832 	bl	8001770 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7ff f82e 	bl	8001770 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1ec      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x10c>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d063      	beq.n	8002806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800273e:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800274a:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x18c>
 8002756:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x176>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1c0      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4939      	ldr	r1, [pc, #228]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	e03a      	b.n	8002806 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe ffe7 	bl	8001770 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe ffe3 	bl	8001770 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1a1      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4927      	ldr	r1, [pc, #156]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe ffc6 	bl	8001770 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe ffc2 	bl	8001770 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e180      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03a      	beq.n	8002888 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d019      	beq.n	800284e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7fe ffa6 	bl	8001770 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7fe ffa2 	bl	8001770 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e160      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002846:	2001      	movs	r0, #1
 8002848:	f000 face 	bl	8002de8 <RCC_Delay>
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7fe ff8c 	bl	8001770 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285a:	e00f      	b.n	800287c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe ff88 	bl	8001770 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d908      	bls.n	800287c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e146      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	42420000 	.word	0x42420000
 8002878:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4b92      	ldr	r3, [pc, #584]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e9      	bne.n	800285c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a6 	beq.w	80029e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a87      	ldr	r2, [pc, #540]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b82      	ldr	r3, [pc, #520]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b7f      	ldr	r3, [pc, #508]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7e      	ldr	r2, [pc, #504]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7fe ff49 	bl	8001770 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7fe ff45 	bl	8001770 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e103      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b75      	ldr	r3, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x312>
 8002908:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a6e      	ldr	r2, [pc, #440]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e02d      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x334>
 800291e:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6213      	str	r3, [r2, #32]
 800292a:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a66      	ldr	r2, [pc, #408]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6213      	str	r3, [r2, #32]
 8002936:	e01c      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d10c      	bne.n	800295a <HAL_RCC_OscConfig+0x356>
 8002940:	4b61      	ldr	r3, [pc, #388]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a60      	ldr	r2, [pc, #384]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	4b5e      	ldr	r3, [pc, #376]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4a5d      	ldr	r2, [pc, #372]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6213      	str	r3, [r2, #32]
 8002958:	e00b      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 800295a:	4b5b      	ldr	r3, [pc, #364]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a5a      	ldr	r2, [pc, #360]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	6213      	str	r3, [r2, #32]
 8002966:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 0304 	bic.w	r3, r3, #4
 8002970:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d015      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7fe fef9 	bl	8001770 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe fef5 	bl	8001770 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0b1      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ee      	beq.n	8002982 <HAL_RCC_OscConfig+0x37e>
 80029a4:	e014      	b.n	80029d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7fe fee3 	bl	8001770 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe fedf 	bl	8001770 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e09b      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c4:	4b40      	ldr	r3, [pc, #256]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ee      	bne.n	80029ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a3b      	ldr	r2, [pc, #236]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8087 	beq.w	8002afa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ec:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d061      	beq.n	8002abc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d146      	bne.n	8002a8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <HAL_RCC_OscConfig+0x4cc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe feb3 	bl	8001770 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe feaf 	bl	8001770 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e06d      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d108      	bne.n	8002a48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4921      	ldr	r1, [pc, #132]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a19      	ldr	r1, [r3, #32]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	491b      	ldr	r1, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x4cc>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fe83 	bl	8001770 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe fe7f 	bl	8001770 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e03d      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x46a>
 8002a8c:	e035      	b.n	8002afa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x4cc>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fe6c 	bl	8001770 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fe68 	bl	8001770 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e026      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x498>
 8002aba:	e01e      	b.n	8002afa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e019      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_OscConfig+0x500>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000

08002b08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0d0      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d910      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b67      	ldr	r3, [pc, #412]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 0207 	bic.w	r2, r3, #7
 8002b32:	4965      	ldr	r1, [pc, #404]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b63      	ldr	r3, [pc, #396]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b8      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b64:	4b59      	ldr	r3, [pc, #356]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b7c:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	494d      	ldr	r1, [pc, #308]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d040      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d115      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e073      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06b      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4936      	ldr	r1, [pc, #216]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fdba 	bl	8001770 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe fdb6 	bl	8001770 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e053      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d210      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4922      	ldr	r1, [pc, #136]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e032      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4916      	ldr	r1, [pc, #88]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	490e      	ldr	r1, [pc, #56]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c96:	f000 f821 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	490a      	ldr	r1, [pc, #40]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	5ccb      	ldrb	r3, [r1, r3]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fd18 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08004cd8 	.word	0x08004cd8
 8002cd4:	2000005c 	.word	0x2000005c
 8002cd8:	20000060 	.word	0x20000060

08002cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x30>
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x36>
 8002d0a:	e027      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d0e:	613b      	str	r3, [r7, #16]
      break;
 8002d10:	e027      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0c9b      	lsrs	r3, r3, #18
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d1c:	5cd3      	ldrb	r3, [r2, r3]
 8002d1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0c5b      	lsrs	r3, r3, #17
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d36:	5cd3      	ldrb	r3, [r2, r3]
 8002d38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d3e:	fb03 f202 	mul.w	r2, r3, r2
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e004      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	613b      	str	r3, [r7, #16]
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d5e:	613b      	str	r3, [r7, #16]
      break;
 8002d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d62:	693b      	ldr	r3, [r7, #16]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	007a1200 	.word	0x007a1200
 8002d78:	08004cf0 	.word	0x08004cf0
 8002d7c:	08004d00 	.word	0x08004d00
 8002d80:	003d0900 	.word	0x003d0900

08002d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d88:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	2000005c 	.word	0x2000005c

08002d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d9c:	f7ff fff2 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	4903      	ldr	r1, [pc, #12]	; (8002dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	08004ce8 	.word	0x08004ce8

08002dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dc4:	f7ff ffde 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	0adb      	lsrs	r3, r3, #11
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08004ce8 	.word	0x08004ce8

08002de8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <RCC_Delay+0x34>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <RCC_Delay+0x38>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	0a5b      	lsrs	r3, r3, #9
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e04:	bf00      	nop
  }
  while (Delay --);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1e5a      	subs	r2, r3, #1
 8002e0a:	60fa      	str	r2, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f9      	bne.n	8002e04 <RCC_Delay+0x1c>
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	2000005c 	.word	0x2000005c
 8002e20:	10624dd3 	.word	0x10624dd3

08002e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e076      	b.n	8002f24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d108      	bne.n	8002e50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e46:	d009      	beq.n	8002e5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
 8002e4e:	e005      	b.n	8002e5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe fa38 	bl	80012ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	ea42 0103 	orr.w	r1, r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	0c1a      	lsrs	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f002 0204 	and.w	r2, r2, #4
 8002f02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_SPI_TransmitReceive+0x26>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e198      	b.n	8003284 <HAL_SPI_TransmitReceive+0x358>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f5a:	f7fe fc09 	bl	8001770 <HAL_GetTick>
 8002f5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d00f      	beq.n	8002f9c <HAL_SPI_TransmitReceive+0x70>
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f82:	d107      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d103      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x68>
 8002f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d003      	beq.n	8002f9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
 8002f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f9a:	e16d      	b.n	8003278 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x82>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x82>
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fb4:	e160      	b.n	8003278 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d003      	beq.n	8002fca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	887a      	ldrh	r2, [r7, #2]
 8002fda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	887a      	ldrh	r2, [r7, #2]
 8002ff2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d007      	beq.n	800301e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003026:	d17c      	bne.n	8003122 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_SPI_TransmitReceive+0x10a>
 8003030:	8b7b      	ldrh	r3, [r7, #26]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d16a      	bne.n	800310c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	881a      	ldrh	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	1c9a      	adds	r2, r3, #2
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800305a:	e057      	b.n	800310c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	d11b      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x176>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d016      	beq.n	80030a2 <HAL_SPI_TransmitReceive+0x176>
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d113      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	1c9a      	adds	r2, r3, #2
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d119      	bne.n	80030e4 <HAL_SPI_TransmitReceive+0x1b8>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d014      	beq.n	80030e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	b292      	uxth	r2, r2
 80030c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030e0:	2301      	movs	r3, #1
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030e4:	f7fe fb44 	bl	8001770 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d80b      	bhi.n	800310c <HAL_SPI_TransmitReceive+0x1e0>
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d007      	beq.n	800310c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800310a:	e0b5      	b.n	8003278 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1a2      	bne.n	800305c <HAL_SPI_TransmitReceive+0x130>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d19d      	bne.n	800305c <HAL_SPI_TransmitReceive+0x130>
 8003120:	e080      	b.n	8003224 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_SPI_TransmitReceive+0x204>
 800312a:	8b7b      	ldrh	r3, [r7, #26]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d16f      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	7812      	ldrb	r2, [r2, #0]
 800313c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003156:	e05b      	b.n	8003210 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d11c      	bne.n	80031a0 <HAL_SPI_TransmitReceive+0x274>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d017      	beq.n	80031a0 <HAL_SPI_TransmitReceive+0x274>
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	2b01      	cmp	r3, #1
 8003174:	d114      	bne.n	80031a0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d119      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x2b6>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d014      	beq.n	80031e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031de:	2301      	movs	r3, #1
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031e2:	f7fe fac5 	bl	8001770 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d803      	bhi.n	80031fa <HAL_SPI_TransmitReceive+0x2ce>
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d102      	bne.n	8003200 <HAL_SPI_TransmitReceive+0x2d4>
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800320e:	e033      	b.n	8003278 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d19e      	bne.n	8003158 <HAL_SPI_TransmitReceive+0x22c>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d199      	bne.n	8003158 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f8b7 	bl	800339c <SPI_EndRxTxTransaction>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003240:	e01a      	b.n	8003278 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800326e:	e003      	b.n	8003278 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003280:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003284:	4618      	mov	r0, r3
 8003286:	3730      	adds	r7, #48	; 0x30
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800329c:	f7fe fa68 	bl	8001770 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	4413      	add	r3, r2
 80032aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032ac:	f7fe fa60 	bl	8001770 <HAL_GetTick>
 80032b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032b2:	4b39      	ldr	r3, [pc, #228]	; (8003398 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	015b      	lsls	r3, r3, #5
 80032b8:	0d1b      	lsrs	r3, r3, #20
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	fb02 f303 	mul.w	r3, r2, r3
 80032c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032c2:	e054      	b.n	800336e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d050      	beq.n	800336e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032cc:	f7fe fa50 	bl	8001770 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d902      	bls.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d13d      	bne.n	800335e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032fa:	d111      	bne.n	8003320 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003304:	d004      	beq.n	8003310 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330e:	d107      	bne.n	8003320 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003328:	d10f      	bne.n	800334a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e017      	b.n	800338e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3b01      	subs	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4013      	ands	r3, r2
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	bf0c      	ite	eq
 800337e:	2301      	moveq	r3, #1
 8003380:	2300      	movne	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	429a      	cmp	r2, r3
 800338a:	d19b      	bne.n	80032c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	2000005c 	.word	0x2000005c

0800339c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff ff6a 	bl	800328c <SPI_WaitFlagStateUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	f043 0220 	orr.w	r2, r3, #32
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e000      	b.n	80033d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e041      	b.n	800346e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe f8a4 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f000 f8f4 	bl	8003604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_TIM_ConfigClockSource+0x1c>
 800348e:	2302      	movs	r3, #2
 8003490:	e0b4      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x186>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ca:	d03e      	beq.n	800354a <HAL_TIM_ConfigClockSource+0xd4>
 80034cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d0:	f200 8087 	bhi.w	80035e2 <HAL_TIM_ConfigClockSource+0x16c>
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	f000 8086 	beq.w	80035e8 <HAL_TIM_ConfigClockSource+0x172>
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d87f      	bhi.n	80035e2 <HAL_TIM_ConfigClockSource+0x16c>
 80034e2:	2b70      	cmp	r3, #112	; 0x70
 80034e4:	d01a      	beq.n	800351c <HAL_TIM_ConfigClockSource+0xa6>
 80034e6:	2b70      	cmp	r3, #112	; 0x70
 80034e8:	d87b      	bhi.n	80035e2 <HAL_TIM_ConfigClockSource+0x16c>
 80034ea:	2b60      	cmp	r3, #96	; 0x60
 80034ec:	d050      	beq.n	8003590 <HAL_TIM_ConfigClockSource+0x11a>
 80034ee:	2b60      	cmp	r3, #96	; 0x60
 80034f0:	d877      	bhi.n	80035e2 <HAL_TIM_ConfigClockSource+0x16c>
 80034f2:	2b50      	cmp	r3, #80	; 0x50
 80034f4:	d03c      	beq.n	8003570 <HAL_TIM_ConfigClockSource+0xfa>
 80034f6:	2b50      	cmp	r3, #80	; 0x50
 80034f8:	d873      	bhi.n	80035e2 <HAL_TIM_ConfigClockSource+0x16c>
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d058      	beq.n	80035b0 <HAL_TIM_ConfigClockSource+0x13a>
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d86f      	bhi.n	80035e2 <HAL_TIM_ConfigClockSource+0x16c>
 8003502:	2b30      	cmp	r3, #48	; 0x30
 8003504:	d064      	beq.n	80035d0 <HAL_TIM_ConfigClockSource+0x15a>
 8003506:	2b30      	cmp	r3, #48	; 0x30
 8003508:	d86b      	bhi.n	80035e2 <HAL_TIM_ConfigClockSource+0x16c>
 800350a:	2b20      	cmp	r3, #32
 800350c:	d060      	beq.n	80035d0 <HAL_TIM_ConfigClockSource+0x15a>
 800350e:	2b20      	cmp	r3, #32
 8003510:	d867      	bhi.n	80035e2 <HAL_TIM_ConfigClockSource+0x16c>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d05c      	beq.n	80035d0 <HAL_TIM_ConfigClockSource+0x15a>
 8003516:	2b10      	cmp	r3, #16
 8003518:	d05a      	beq.n	80035d0 <HAL_TIM_ConfigClockSource+0x15a>
 800351a:	e062      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800352c:	f000 f943 	bl	80037b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800353e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	609a      	str	r2, [r3, #8]
      break;
 8003548:	e04f      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800355a:	f000 f92c 	bl	80037b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800356c:	609a      	str	r2, [r3, #8]
      break;
 800356e:	e03c      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357c:	461a      	mov	r2, r3
 800357e:	f000 f8a3 	bl	80036c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2150      	movs	r1, #80	; 0x50
 8003588:	4618      	mov	r0, r3
 800358a:	f000 f8fa 	bl	8003782 <TIM_ITRx_SetConfig>
      break;
 800358e:	e02c      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800359c:	461a      	mov	r2, r3
 800359e:	f000 f8c1 	bl	8003724 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2160      	movs	r1, #96	; 0x60
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f8ea 	bl	8003782 <TIM_ITRx_SetConfig>
      break;
 80035ae:	e01c      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035bc:	461a      	mov	r2, r3
 80035be:	f000 f883 	bl	80036c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2140      	movs	r1, #64	; 0x40
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f8da 	bl	8003782 <TIM_ITRx_SetConfig>
      break;
 80035ce:	e00c      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f000 f8d1 	bl	8003782 <TIM_ITRx_SetConfig>
      break;
 80035e0:	e003      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
      break;
 80035e6:	e000      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a29      	ldr	r2, [pc, #164]	; (80036bc <TIM_Base_SetConfig+0xb8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_Base_SetConfig+0x30>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003622:	d007      	beq.n	8003634 <TIM_Base_SetConfig+0x30>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a26      	ldr	r2, [pc, #152]	; (80036c0 <TIM_Base_SetConfig+0xbc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_Base_SetConfig+0x30>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <TIM_Base_SetConfig+0xc0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d108      	bne.n	8003646 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <TIM_Base_SetConfig+0xb8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00b      	beq.n	8003666 <TIM_Base_SetConfig+0x62>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003654:	d007      	beq.n	8003666 <TIM_Base_SetConfig+0x62>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <TIM_Base_SetConfig+0xbc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d003      	beq.n	8003666 <TIM_Base_SetConfig+0x62>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <TIM_Base_SetConfig+0xc0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a07      	ldr	r2, [pc, #28]	; (80036bc <TIM_Base_SetConfig+0xb8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d103      	bne.n	80036ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	615a      	str	r2, [r3, #20]
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800

080036c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f023 0201 	bic.w	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 030a 	bic.w	r3, r3, #10
 8003704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f023 0210 	bic.w	r2, r3, #16
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800374e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	031b      	lsls	r3, r3, #12
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003760:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	621a      	str	r2, [r3, #32]
}
 8003778:	bf00      	nop
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr

08003782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	f043 0307 	orr.w	r3, r3, #7
 80037a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	609a      	str	r2, [r3, #8]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr

080037b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b087      	sub	sp, #28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	021a      	lsls	r2, r3, #8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	431a      	orrs	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4313      	orrs	r3, r2
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	609a      	str	r2, [r3, #8]
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003808:	2302      	movs	r3, #2
 800380a:	e046      	b.n	800389a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00e      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003858:	d009      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a10      	ldr	r2, [pc, #64]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d10c      	bne.n	8003888 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	4313      	orrs	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800

080038b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e042      	b.n	8003948 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fe80 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f91d 	bl	8003b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b20      	cmp	r3, #32
 800396e:	d16d      	bne.n	8003a4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_UART_Transmit+0x2c>
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e066      	b.n	8003a4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2221      	movs	r2, #33	; 0x21
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398e:	f7fd feef 	bl	8001770 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	d108      	bne.n	80039bc <HAL_UART_Transmit+0x6c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e003      	b.n	80039c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c4:	e02a      	b.n	8003a1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f840 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e036      	b.n	8003a4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3302      	adds	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e007      	b.n	8003a0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1cf      	bne.n	80039c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2140      	movs	r1, #64	; 0x40
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f810 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e006      	b.n	8003a4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e000      	b.n	8003a4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b090      	sub	sp, #64	; 0x40
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a66:	e050      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6e:	d04c      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a76:	f7fd fe7b 	bl	8001770 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d241      	bcs.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aa6:	637a      	str	r2, [r7, #52]	; 0x34
 8003aa8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e5      	bne.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3314      	adds	r3, #20
 8003ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ada:	623a      	str	r2, [r7, #32]
 8003adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	69f9      	ldr	r1, [r7, #28]
 8003ae0:	6a3a      	ldr	r2, [r7, #32]
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e5      	bne.n	8003aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e00f      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d09f      	beq.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3740      	adds	r7, #64	; 0x40
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b6e:	f023 030c 	bic.w	r3, r3, #12
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2c      	ldr	r2, [pc, #176]	; (8003c48 <UART_SetConfig+0x114>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d103      	bne.n	8003ba4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b9c:	f7ff f910 	bl	8002dc0 <HAL_RCC_GetPCLK2Freq>
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	e002      	b.n	8003baa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ba4:	f7ff f8f8 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 8003ba8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009a      	lsls	r2, r3, #2
 8003bb4:	441a      	add	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <UART_SetConfig+0x118>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	0119      	lsls	r1, r3, #4
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009a      	lsls	r2, r3, #2
 8003bd4:	441a      	add	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be0:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <UART_SetConfig+0x118>)
 8003be2:	fba3 0302 	umull	r0, r3, r3, r2
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2064      	movs	r0, #100	; 0x64
 8003bea:	fb00 f303 	mul.w	r3, r0, r3
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	3332      	adds	r3, #50	; 0x32
 8003bf4:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <UART_SetConfig+0x118>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c00:	4419      	add	r1, r3
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	009a      	lsls	r2, r3, #2
 8003c0c:	441a      	add	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <UART_SetConfig+0x118>)
 8003c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2064      	movs	r0, #100	; 0x64
 8003c22:	fb00 f303 	mul.w	r3, r0, r3
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	3332      	adds	r3, #50	; 0x32
 8003c2c:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <UART_SetConfig+0x118>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	f003 020f 	and.w	r2, r3, #15
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40013800 	.word	0x40013800
 8003c4c:	51eb851f 	.word	0x51eb851f

08003c50 <_Z8DWT_Initv>:
static volatile uint32_t * temp;

uint32_t us_count_tic;

void DWT_Init(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
    SCB_DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <_Z8DWT_Initv+0x24>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a06      	ldr	r2, [pc, #24]	; (8003c74 <_Z8DWT_Initv+0x24>)
 8003c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c5e:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;     // запускаем счётчик
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <_Z8DWT_Initv+0x28>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <_Z8DWT_Initv+0x28>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	e000edfc 	.word	0xe000edfc
 8003c78:	e0001000 	.word	0xe0001000

08003c7c <_ZN8classLog5printEPKc>:
	void print(char const *format) {
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
			HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 8003c8c:	6838      	ldr	r0, [r7, #0]
 8003c8e:	f7fc fa5d 	bl	800014c <strlen>
 8003c92:	4603      	mov	r3, r0
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9a:	6839      	ldr	r1, [r7, #0]
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7ff fe57 	bl	8003950 <HAL_UART_Transmit>
	}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd90      	pop	{r4, r7, pc}
	...

08003cac <_ZN8classLog5colorEi>:
	char s[16];
	sprintf(s, "\33[08m");
	print(s);
}
void classLog::color(int color)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
	char s[16];
	sprintf(s, "\33[38;05;%dm",color);
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	4906      	ldr	r1, [pc, #24]	; (8003cd8 <_ZN8classLog5colorEi+0x2c>)
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fb02 	bl	80042c8 <siprintf>
	print(s);
 8003cc4:	f107 0308 	add.w	r3, r7, #8
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ffd6 	bl	8003c7c <_ZN8classLog5printEPKc>
}
 8003cd0:	bf00      	nop
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	08004c98 	.word	0x08004c98

08003cdc <_ZN8classLog13colorStringlnEiPKc>:
	print(s);
	print(format);
	print("\33[0m");
}
void classLog::colorStringln(int c, char const *const format)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
	color(c);
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff ffde 	bl	8003cac <_ZN8classLog5colorEi>
	print(format);
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff ffc2 	bl	8003c7c <_ZN8classLog5printEPKc>
	print("\33[0m\n");
 8003cf8:	4903      	ldr	r1, [pc, #12]	; (8003d08 <_ZN8classLog13colorStringlnEiPKc+0x2c>)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff ffbe 	bl	8003c7c <_ZN8classLog5printEPKc>
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	08004cd0 	.word	0x08004cd0

08003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>:
//* Write command */
//#define SSD1306_WRITECOMMAND(command)      ssd1306_I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0x00, (command))
///* Write data */
//#define SSD1306_WRITEDATA(data)            ssd1306_I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0x40, (data))

void TFT_Driver::SSD1306_WRITECOMMAND(uint8_t data) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
	if (LCD->hi2c)  //I2C
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d012      	beq.n	8003d48 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh+0x3c>
	{
		uint8_t dt[2];
		dt[0] = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	733b      	strb	r3, [r7, #12]
		dt[1] = data;
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6918      	ldr	r0, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	7d1b      	ldrb	r3, [r3, #20]
 8003d36:	b299      	uxth	r1, r3
 8003d38:	f107 020c 	add.w	r2, r7, #12
 8003d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2302      	movs	r3, #2
 8003d44:	f7fe f906 	bl	8001f54 <HAL_I2C_Master_Transmit>
#if defined(TFT_USE_SPI)
		SPI.SendCmd(data);
#endif
	}

}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_ZN10TFT_Driver12SSD1306_InitEv>:
	}

}

//Инициализация первого экрана
void TFT_Driver::SSD1306_Init(void) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	if (LCD->GPIO_CS != NULL)	
		CS_0;
#endif

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003d58:	21ae      	movs	r1, #174	; 0xae
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ffd6 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8003d60:	2120      	movs	r1, #32
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ffd2 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003d68:	2110      	movs	r1, #16
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ffce 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003d70:	21b0      	movs	r1, #176	; 0xb0
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ffca 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003d78:	21c8      	movs	r1, #200	; 0xc8
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ffc6 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003d80:	2100      	movs	r1, #0
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ffc2 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003d88:	2110      	movs	r1, #16
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff ffbe 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003d90:	2140      	movs	r1, #64	; 0x40
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff ffba 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003d98:	2181      	movs	r1, #129	; 0x81
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff ffb6 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xFF);
 8003da0:	21ff      	movs	r1, #255	; 0xff
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ffb2 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003da8:	21a1      	movs	r1, #161	; 0xa1
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ffae 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003db0:	21a6      	movs	r1, #166	; 0xa6
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ffaa 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003db8:	21a8      	movs	r1, #168	; 0xa8
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ffa6 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	if (LCD->TFT_HEIGHT == 64)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d104      	bne.n	8003dd4 <_ZN10TFT_Driver12SSD1306_InitEv+0x84>
		SSD1306_WRITECOMMAND(0x3F); //64
 8003dca:	213f      	movs	r1, #63	; 0x3f
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff9d 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
 8003dd2:	e003      	b.n	8003ddc <_ZN10TFT_Driver12SSD1306_InitEv+0x8c>
	else
		SSD1306_WRITECOMMAND(0x1F); //32
 8003dd4:	211f      	movs	r1, #31
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ff98 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003ddc:	21a4      	movs	r1, #164	; 0xa4
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ff94 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003de4:	21d3      	movs	r1, #211	; 0xd3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ff90 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003dec:	2100      	movs	r1, #0
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ff8c 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003df4:	21d5      	movs	r1, #213	; 0xd5
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ff88 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003dfc:	21f0      	movs	r1, #240	; 0xf0
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff ff84 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003e04:	21d9      	movs	r1, #217	; 0xd9
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ff80 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x22); //
 8003e0c:	2122      	movs	r1, #34	; 0x22
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ff7c 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003e14:	21da      	movs	r1, #218	; 0xda
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ff78 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	if (LCD->TFT_HEIGHT == 64)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d104      	bne.n	8003e30 <_ZN10TFT_Driver12SSD1306_InitEv+0xe0>
		SSD1306_WRITECOMMAND(0x12); //64
 8003e26:	2112      	movs	r1, #18
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff6f 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
 8003e2e:	e003      	b.n	8003e38 <_ZN10TFT_Driver12SSD1306_InitEv+0xe8>
	else
		SSD1306_WRITECOMMAND(0x02); //32
 8003e30:	2102      	movs	r1, #2
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ff6a 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003e38:	21db      	movs	r1, #219	; 0xdb
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff ff66 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003e40:	2120      	movs	r1, #32
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ff62 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003e48:	218d      	movs	r1, #141	; 0x8d
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ff5e 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x14); //
 8003e50:	2114      	movs	r1, #20
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ff5a 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003e58:	21af      	movs	r1, #175	; 0xaf
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ff56 	bl	8003d0c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
		CS_1;
    #endif
	/* Set default values */
	//uTFT.CurrentX = 0;
	//uTFT.CurrentY = 0;
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>:

volatile HAL_StatusTypeDef res;

//490uS-72MHz
void TFT_Driver::SSD1306_UpdateScreen(void) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	6078      	str	r0, [r7, #4]
	uint8_t *p;

	if (LCD->hi2c)  //I2C
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d02a      	beq.n	8003ed0 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x68>
			osDelay(2);
		#else
		//HAL_Delay(10);
#endif

		p = &LCD->buffer8[0];
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	60fb      	str	r3, [r7, #12]
		p--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
		*p = 0x40;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2240      	movs	r2, #64	; 0x40
 8003e8c:	701a      	strb	r2, [r3, #0]

		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6918      	ldr	r0, [r3, #16]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	7d1b      	ldrb	r3, [r3, #20]
 8003e9a:	b299      	uxth	r1, r3
				(LCD->TFT_HEIGHT * LCD->TFT_WIDTH) / 8 + 1, 1000);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	da00      	bge.n	8003eb2 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x4a>
 8003eb0:	3307      	adds	r3, #7
 8003eb2:	10db      	asrs	r3, r3, #3
		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ebe:	9200      	str	r2, [sp, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	f7fe f847 	bl	8001f54 <HAL_I2C_Master_Transmit>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x70>)
 8003ecc:	701a      	strb	r2, [r3, #0]


		return;
 8003ece:	bf00      	nop

#endif

	}

}
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000076c 	.word	0x2000076c

08003edc <_ZN3TFT8SetPixelEllt>:
#include "TFT_config.h"

#include <math.h>
#include <stdio.h>

void TFT::SetPixel(int32_t x, int32_t y, uint16_t color) {
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	807b      	strh	r3, [r7, #2]

	if ((x < 0) || (y < 0) || (x >= LCD->TFT_WIDTH) || (y >= LCD->TFT_HEIGHT))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	db6a      	blt.n	8003fc6 <_ZN3TFT8SetPixelEllt+0xea>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db67      	blt.n	8003fc6 <_ZN3TFT8SetPixelEllt+0xea>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	da61      	bge.n	8003fc6 <_ZN3TFT8SetPixelEllt+0xea>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	da5b      	bge.n	8003fc6 <_ZN3TFT8SetPixelEllt+0xea>
		return;

#if defined(TFT_USE_1BIT)
#if !defined (TFT_USE_ONLY_ONE_BIT_COLOR)
  if (LCD->Bit == 1)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	7a5b      	ldrb	r3, [r3, #9]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d157      	bne.n	8003fc8 <_ZN3TFT8SetPixelEllt+0xec>
#endif
	{
		if (color != 0)
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d028      	beq.n	8003f70 <_ZN3TFT8SetPixelEllt+0x94>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] |= 1 << (y % 8);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da00      	bge.n	8003f2c <_ZN3TFT8SetPixelEllt+0x50>
 8003f2a:	3307      	adds	r3, #7
 8003f2c:	10db      	asrs	r3, r3, #3
 8003f2e:	68f9      	ldr	r1, [r7, #12]
 8003f30:	6809      	ldr	r1, [r1, #0]
 8003f32:	6809      	ldr	r1, [r1, #0]
 8003f34:	fb01 f003 	mul.w	r0, r1, r3
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	4401      	add	r1, r0
 8003f3c:	440a      	add	r2, r1
 8003f3e:	7812      	ldrb	r2, [r2, #0]
 8003f40:	b251      	sxtb	r1, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	f002 0207 	and.w	r2, r2, #7
 8003f48:	2001      	movs	r0, #1
 8003f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f4e:	b252      	sxtb	r2, r2
 8003f50:	430a      	orrs	r2, r1
 8003f52:	b250      	sxtb	r0, r2
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	69d2      	ldr	r2, [r2, #28]
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	6809      	ldr	r1, [r1, #0]
 8003f5e:	6809      	ldr	r1, [r1, #0]
 8003f60:	fb03 f101 	mul.w	r1, r3, r1
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	440b      	add	r3, r1
 8003f68:	4413      	add	r3, r2
 8003f6a:	b2c2      	uxtb	r2, r0
 8003f6c:	701a      	strb	r2, [r3, #0]
		else
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] &= ~(1 << (y % 8));
		return;
 8003f6e:	e02b      	b.n	8003fc8 <_ZN3TFT8SetPixelEllt+0xec>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] &= ~(1 << (y % 8));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da00      	bge.n	8003f7e <_ZN3TFT8SetPixelEllt+0xa2>
 8003f7c:	3307      	adds	r3, #7
 8003f7e:	10db      	asrs	r3, r3, #3
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	6809      	ldr	r1, [r1, #0]
 8003f84:	6809      	ldr	r1, [r1, #0]
 8003f86:	fb01 f003 	mul.w	r0, r1, r3
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	4401      	add	r1, r0
 8003f8e:	440a      	add	r2, r1
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	b251      	sxtb	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	f002 0207 	and.w	r2, r2, #7
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	fa00 f202 	lsl.w	r2, r0, r2
 8003fa0:	b252      	sxtb	r2, r2
 8003fa2:	43d2      	mvns	r2, r2
 8003fa4:	b252      	sxtb	r2, r2
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	b250      	sxtb	r0, r2
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	69d2      	ldr	r2, [r2, #28]
 8003fb0:	68f9      	ldr	r1, [r7, #12]
 8003fb2:	6809      	ldr	r1, [r1, #0]
 8003fb4:	6809      	ldr	r1, [r1, #0]
 8003fb6:	fb03 f101 	mul.w	r1, r3, r1
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	440b      	add	r3, r1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	b2c2      	uxtb	r2, r0
 8003fc2:	701a      	strb	r2, [r3, #0]
		return;
 8003fc4:	e000      	b.n	8003fc8 <_ZN3TFT8SetPixelEllt+0xec>
		return;
 8003fc6:	bf00      	nop
		LCD->buffer16[x + y * LCD->TFT_WIDTH] = color;
		return;
	}
#endif

}
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <_ZN3TFT5Fill1Et>:

	}

}

void TFT::Fill1(uint16_t color) {
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]

	uint8_t c;
	if (color)
 8003fdc:	887b      	ldrh	r3, [r7, #2]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <_ZN3TFT5Fill1Et+0x18>
		c = 0xFF;
 8003fe2:	23ff      	movs	r3, #255	; 0xff
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	e001      	b.n	8003fec <_ZN3TFT5Fill1Et+0x1c>
	else
		c = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]

	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	e009      	b.n	8004006 <_ZN3TFT5Fill1Et+0x36>
		LCD->buffer8[i] = c;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	701a      	strb	r2, [r3, #0]
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3301      	adds	r3, #1
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	da00      	bge.n	800401c <_ZN3TFT5Fill1Et+0x4c>
 800401a:	3307      	adds	r3, #7
 800401c:	10db      	asrs	r3, r3, #3
 800401e:	461a      	mov	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4293      	cmp	r3, r2
 8004024:	dbe5      	blt.n	8003ff2 <_ZN3TFT5Fill1Et+0x22>
	return;
 8004026:	bf00      	nop
}
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <_ZN3TFT5LineHElllt>:
		}
	}

}

void TFT::LineH(int32_t Y, int32_t X1, int32_t X2, uint16_t color) {
 8004030:	b490      	push	{r4, r7}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]

	int32_t i;

	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	db04      	blt.n	8004054 <_ZN3TFT5LineHElllt+0x24>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3b01      	subs	r3, #1
 8004052:	603b      	str	r3, [r7, #0]
	if (Y >= LCD->TFT_HEIGHT) return;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	429a      	cmp	r2, r3
 800405e:	f280 812d 	bge.w	80042bc <_ZN3TFT5LineHElllt+0x28c>

	if ((LCD->Bit) == 1) {
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	7a5b      	ldrb	r3, [r3, #9]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d16a      	bne.n	8004142 <_ZN3TFT5LineHElllt+0x112>
		if (color == 1) {
 800406c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800406e:	2b01      	cmp	r3, #1
 8004070:	d132      	bne.n	80040d8 <_ZN3TFT5LineHElllt+0xa8>
			for (i = X1; i <= X2; i++)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	e02a      	b.n	80040ce <_ZN3TFT5LineHElllt+0x9e>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	da00      	bge.n	8004086 <_ZN3TFT5LineHElllt+0x56>
 8004084:	3307      	adds	r3, #7
 8004086:	10db      	asrs	r3, r3, #3
 8004088:	68f9      	ldr	r1, [r7, #12]
 800408a:	6809      	ldr	r1, [r1, #0]
 800408c:	6809      	ldr	r1, [r1, #0]
 800408e:	fb01 f003 	mul.w	r0, r1, r3
 8004092:	69f9      	ldr	r1, [r7, #28]
 8004094:	4401      	add	r1, r0
 8004096:	440a      	add	r2, r1
 8004098:	7812      	ldrb	r2, [r2, #0]
 800409a:	b251      	sxtb	r1, r2
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	f002 0207 	and.w	r2, r2, #7
 80040a2:	2001      	movs	r0, #1
 80040a4:	fa00 f202 	lsl.w	r2, r0, r2
 80040a8:	b252      	sxtb	r2, r2
 80040aa:	430a      	orrs	r2, r1
 80040ac:	b250      	sxtb	r0, r2
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	69d2      	ldr	r2, [r2, #28]
 80040b4:	68f9      	ldr	r1, [r7, #12]
 80040b6:	6809      	ldr	r1, [r1, #0]
 80040b8:	6809      	ldr	r1, [r1, #0]
 80040ba:	fb03 f101 	mul.w	r1, r3, r1
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	440b      	add	r3, r1
 80040c2:	4413      	add	r3, r2
 80040c4:	b2c2      	uxtb	r2, r0
 80040c6:	701a      	strb	r2, [r3, #0]
			for (i = X1; i <= X2; i++)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	ddd0      	ble.n	8004078 <_ZN3TFT5LineHElllt+0x48>
		} else {
			for (i = X1; i <= X2; i++)
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
		}
		return;
 80040d6:	e0f2      	b.n	80042be <_ZN3TFT5LineHElllt+0x28e>
			for (i = X1; i <= X2; i++)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	e02c      	b.n	8004138 <_ZN3TFT5LineHElllt+0x108>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	da00      	bge.n	80040ec <_ZN3TFT5LineHElllt+0xbc>
 80040ea:	3307      	adds	r3, #7
 80040ec:	10db      	asrs	r3, r3, #3
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	6809      	ldr	r1, [r1, #0]
 80040f2:	6809      	ldr	r1, [r1, #0]
 80040f4:	fb01 f003 	mul.w	r0, r1, r3
 80040f8:	69f9      	ldr	r1, [r7, #28]
 80040fa:	4401      	add	r1, r0
 80040fc:	440a      	add	r2, r1
 80040fe:	7812      	ldrb	r2, [r2, #0]
 8004100:	b251      	sxtb	r1, r2
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	f002 0207 	and.w	r2, r2, #7
 8004108:	2001      	movs	r0, #1
 800410a:	fa00 f202 	lsl.w	r2, r0, r2
 800410e:	b252      	sxtb	r2, r2
 8004110:	43d2      	mvns	r2, r2
 8004112:	b252      	sxtb	r2, r2
 8004114:	400a      	ands	r2, r1
 8004116:	b250      	sxtb	r0, r2
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	69d2      	ldr	r2, [r2, #28]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	6809      	ldr	r1, [r1, #0]
 8004122:	6809      	ldr	r1, [r1, #0]
 8004124:	fb03 f101 	mul.w	r1, r3, r1
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	440b      	add	r3, r1
 800412c:	4413      	add	r3, r2
 800412e:	b2c2      	uxtb	r2, r0
 8004130:	701a      	strb	r2, [r3, #0]
			for (i = X1; i <= X2; i++)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	ddce      	ble.n	80040de <_ZN3TFT5LineHElllt+0xae>
		return;
 8004140:	e0bd      	b.n	80042be <_ZN3TFT5LineHElllt+0x28e>
	}

	if ((LCD->Bit) == 16) {
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	7a5b      	ldrb	r3, [r3, #9]
 8004148:	2b10      	cmp	r3, #16
 800414a:	d119      	bne.n	8004180 <_ZN3TFT5LineHElllt+0x150>
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	e011      	b.n	8004176 <_ZN3TFT5LineHElllt+0x146>
		{
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	fb03 f101 	mul.w	r1, r3, r1
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	440b      	add	r3, r1
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4413      	add	r3, r2
 800416c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800416e:	801a      	strh	r2, [r3, #0]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	3301      	adds	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	dde9      	ble.n	8004152 <_ZN3TFT5LineHElllt+0x122>
		}
		return;
 800417e:	e09e      	b.n	80042be <_ZN3TFT5LineHElllt+0x28e>
	}

	if ((LCD->Bit) == 4) {
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	7a5b      	ldrb	r3, [r3, #9]
 8004186:	2b04      	cmp	r3, #4
 8004188:	d177      	bne.n	800427a <_ZN3TFT5LineHElllt+0x24a>
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	e06f      	b.n	8004270 <_ZN3TFT5LineHElllt+0x240>
				{
			if (i % 2 == 0) {
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d134      	bne.n	8004204 <_ZN3TFT5LineHElllt+0x1d4>
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	0fd9      	lsrs	r1, r3, #31
 80041a4:	440b      	add	r3, r1
 80041a6:	105b      	asrs	r3, r3, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0fd9      	lsrs	r1, r3, #31
 80041b2:	440b      	add	r3, r1
 80041b4:	105b      	asrs	r3, r3, #1
 80041b6:	4619      	mov	r1, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	4403      	add	r3, r0
 80041c0:	4413      	add	r3, r2
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	b25b      	sxtb	r3, r3
								& (0x0F)) | (color << 4);
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	b25a      	sxtb	r2, r3
 80041cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	4313      	orrs	r3, r2
 80041d4:	b258      	sxtb	r0, r3
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	0fd9      	lsrs	r1, r3, #31
 80041e0:	440b      	add	r3, r1
 80041e2:	105b      	asrs	r3, r3, #1
 80041e4:	461c      	mov	r4, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0fd9      	lsrs	r1, r3, #31
 80041ee:	440b      	add	r3, r1
 80041f0:	105b      	asrs	r3, r3, #1
 80041f2:	4619      	mov	r1, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4423      	add	r3, r4
 80041fc:	4413      	add	r3, r2
								& (0x0F)) | (color << 4);
 80041fe:	b2c2      	uxtb	r2, r0
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e032      	b.n	800426a <_ZN3TFT5LineHElllt+0x23a>
			} else {
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	0fd9      	lsrs	r1, r3, #31
 800420e:	440b      	add	r3, r1
 8004210:	105b      	asrs	r3, r3, #1
 8004212:	4618      	mov	r0, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	0fd9      	lsrs	r1, r3, #31
 800421c:	440b      	add	r3, r1
 800421e:	105b      	asrs	r3, r3, #1
 8004220:	4619      	mov	r1, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4403      	add	r3, r0
 800422a:	4413      	add	r3, r2
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b25b      	sxtb	r3, r3
								& (0xF0)) | color;
 8004230:	f023 030f 	bic.w	r3, r3, #15
 8004234:	b25a      	sxtb	r2, r3
 8004236:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004238:	b25b      	sxtb	r3, r3
 800423a:	4313      	orrs	r3, r2
 800423c:	b258      	sxtb	r0, r3
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	0fd9      	lsrs	r1, r3, #31
 8004248:	440b      	add	r3, r1
 800424a:	105b      	asrs	r3, r3, #1
 800424c:	461c      	mov	r4, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0fd9      	lsrs	r1, r3, #31
 8004256:	440b      	add	r3, r1
 8004258:	105b      	asrs	r3, r3, #1
 800425a:	4619      	mov	r1, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4423      	add	r3, r4
 8004264:	4413      	add	r3, r2
								& (0xF0)) | color;
 8004266:	b2c2      	uxtb	r2, r0
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8004268:	701a      	strb	r2, [r3, #0]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3301      	adds	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	dd8b      	ble.n	8004190 <_ZN3TFT5LineHElllt+0x160>
			}
		}
		return;
 8004278:	e021      	b.n	80042be <_ZN3TFT5LineHElllt+0x28e>
	}

	if ((LCD->Bit) == 8) {
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	7a5b      	ldrb	r3, [r3, #9]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d11c      	bne.n	80042be <_ZN3TFT5LineHElllt+0x28e>
		int YY = Y * LCD->TFT_WIDTH;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	fb02 f303 	mul.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
		for (int32_t i = X1; i <= X2; i++)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	e00c      	b.n	80042b2 <_ZN3TFT5LineHElllt+0x282>
			LCD->buffer8[i + YY] = color;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	69b9      	ldr	r1, [r7, #24]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	440a      	add	r2, r1
 80042a4:	4413      	add	r3, r2
 80042a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
		for (int32_t i = X1; i <= X2; i++)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	3301      	adds	r3, #1
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	ddee      	ble.n	8004298 <_ZN3TFT5LineHElllt+0x268>
		return;
 80042ba:	e000      	b.n	80042be <_ZN3TFT5LineHElllt+0x28e>
	if (Y >= LCD->TFT_HEIGHT) return;
 80042bc:	bf00      	nop
	}

}
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc90      	pop	{r4, r7}
 80042c4:	4770      	bx	lr
	...

080042c8 <siprintf>:
 80042c8:	b40e      	push	{r1, r2, r3}
 80042ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042ce:	b500      	push	{lr}
 80042d0:	b09c      	sub	sp, #112	; 0x70
 80042d2:	ab1d      	add	r3, sp, #116	; 0x74
 80042d4:	9002      	str	r0, [sp, #8]
 80042d6:	9006      	str	r0, [sp, #24]
 80042d8:	9107      	str	r1, [sp, #28]
 80042da:	9104      	str	r1, [sp, #16]
 80042dc:	4808      	ldr	r0, [pc, #32]	; (8004300 <siprintf+0x38>)
 80042de:	4909      	ldr	r1, [pc, #36]	; (8004304 <siprintf+0x3c>)
 80042e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80042e4:	9105      	str	r1, [sp, #20]
 80042e6:	6800      	ldr	r0, [r0, #0]
 80042e8:	a902      	add	r1, sp, #8
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	f000 f98e 	bl	800460c <_svfiprintf_r>
 80042f0:	2200      	movs	r2, #0
 80042f2:	9b02      	ldr	r3, [sp, #8]
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	b01c      	add	sp, #112	; 0x70
 80042f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042fc:	b003      	add	sp, #12
 80042fe:	4770      	bx	lr
 8004300:	200000bc 	.word	0x200000bc
 8004304:	ffff0208 	.word	0xffff0208

08004308 <memset>:
 8004308:	4603      	mov	r3, r0
 800430a:	4402      	add	r2, r0
 800430c:	4293      	cmp	r3, r2
 800430e:	d100      	bne.n	8004312 <memset+0xa>
 8004310:	4770      	bx	lr
 8004312:	f803 1b01 	strb.w	r1, [r3], #1
 8004316:	e7f9      	b.n	800430c <memset+0x4>

08004318 <__errno>:
 8004318:	4b01      	ldr	r3, [pc, #4]	; (8004320 <__errno+0x8>)
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	200000bc 	.word	0x200000bc

08004324 <__libc_init_array>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	2600      	movs	r6, #0
 8004328:	4d0c      	ldr	r5, [pc, #48]	; (800435c <__libc_init_array+0x38>)
 800432a:	4c0d      	ldr	r4, [pc, #52]	; (8004360 <__libc_init_array+0x3c>)
 800432c:	1b64      	subs	r4, r4, r5
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	42a6      	cmp	r6, r4
 8004332:	d109      	bne.n	8004348 <__libc_init_array+0x24>
 8004334:	f000 fc7a 	bl	8004c2c <_init>
 8004338:	2600      	movs	r6, #0
 800433a:	4d0a      	ldr	r5, [pc, #40]	; (8004364 <__libc_init_array+0x40>)
 800433c:	4c0a      	ldr	r4, [pc, #40]	; (8004368 <__libc_init_array+0x44>)
 800433e:	1b64      	subs	r4, r4, r5
 8004340:	10a4      	asrs	r4, r4, #2
 8004342:	42a6      	cmp	r6, r4
 8004344:	d105      	bne.n	8004352 <__libc_init_array+0x2e>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f855 3b04 	ldr.w	r3, [r5], #4
 800434c:	4798      	blx	r3
 800434e:	3601      	adds	r6, #1
 8004350:	e7ee      	b.n	8004330 <__libc_init_array+0xc>
 8004352:	f855 3b04 	ldr.w	r3, [r5], #4
 8004356:	4798      	blx	r3
 8004358:	3601      	adds	r6, #1
 800435a:	e7f2      	b.n	8004342 <__libc_init_array+0x1e>
 800435c:	080054a4 	.word	0x080054a4
 8004360:	080054a4 	.word	0x080054a4
 8004364:	080054a4 	.word	0x080054a4
 8004368:	080054a8 	.word	0x080054a8

0800436c <__retarget_lock_acquire_recursive>:
 800436c:	4770      	bx	lr

0800436e <__retarget_lock_release_recursive>:
 800436e:	4770      	bx	lr

08004370 <_free_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4605      	mov	r5, r0
 8004374:	2900      	cmp	r1, #0
 8004376:	d040      	beq.n	80043fa <_free_r+0x8a>
 8004378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800437c:	1f0c      	subs	r4, r1, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	bfb8      	it	lt
 8004382:	18e4      	addlt	r4, r4, r3
 8004384:	f000 f8dc 	bl	8004540 <__malloc_lock>
 8004388:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <_free_r+0x8c>)
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	b933      	cbnz	r3, 800439c <_free_r+0x2c>
 800438e:	6063      	str	r3, [r4, #4]
 8004390:	6014      	str	r4, [r2, #0]
 8004392:	4628      	mov	r0, r5
 8004394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004398:	f000 b8d8 	b.w	800454c <__malloc_unlock>
 800439c:	42a3      	cmp	r3, r4
 800439e:	d908      	bls.n	80043b2 <_free_r+0x42>
 80043a0:	6820      	ldr	r0, [r4, #0]
 80043a2:	1821      	adds	r1, r4, r0
 80043a4:	428b      	cmp	r3, r1
 80043a6:	bf01      	itttt	eq
 80043a8:	6819      	ldreq	r1, [r3, #0]
 80043aa:	685b      	ldreq	r3, [r3, #4]
 80043ac:	1809      	addeq	r1, r1, r0
 80043ae:	6021      	streq	r1, [r4, #0]
 80043b0:	e7ed      	b.n	800438e <_free_r+0x1e>
 80043b2:	461a      	mov	r2, r3
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	b10b      	cbz	r3, 80043bc <_free_r+0x4c>
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	d9fa      	bls.n	80043b2 <_free_r+0x42>
 80043bc:	6811      	ldr	r1, [r2, #0]
 80043be:	1850      	adds	r0, r2, r1
 80043c0:	42a0      	cmp	r0, r4
 80043c2:	d10b      	bne.n	80043dc <_free_r+0x6c>
 80043c4:	6820      	ldr	r0, [r4, #0]
 80043c6:	4401      	add	r1, r0
 80043c8:	1850      	adds	r0, r2, r1
 80043ca:	4283      	cmp	r3, r0
 80043cc:	6011      	str	r1, [r2, #0]
 80043ce:	d1e0      	bne.n	8004392 <_free_r+0x22>
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4408      	add	r0, r1
 80043d6:	6010      	str	r0, [r2, #0]
 80043d8:	6053      	str	r3, [r2, #4]
 80043da:	e7da      	b.n	8004392 <_free_r+0x22>
 80043dc:	d902      	bls.n	80043e4 <_free_r+0x74>
 80043de:	230c      	movs	r3, #12
 80043e0:	602b      	str	r3, [r5, #0]
 80043e2:	e7d6      	b.n	8004392 <_free_r+0x22>
 80043e4:	6820      	ldr	r0, [r4, #0]
 80043e6:	1821      	adds	r1, r4, r0
 80043e8:	428b      	cmp	r3, r1
 80043ea:	bf01      	itttt	eq
 80043ec:	6819      	ldreq	r1, [r3, #0]
 80043ee:	685b      	ldreq	r3, [r3, #4]
 80043f0:	1809      	addeq	r1, r1, r0
 80043f2:	6021      	streq	r1, [r4, #0]
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	6054      	str	r4, [r2, #4]
 80043f8:	e7cb      	b.n	8004392 <_free_r+0x22>
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	200008b0 	.word	0x200008b0

08004400 <sbrk_aligned>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	4e0e      	ldr	r6, [pc, #56]	; (800443c <sbrk_aligned+0x3c>)
 8004404:	460c      	mov	r4, r1
 8004406:	6831      	ldr	r1, [r6, #0]
 8004408:	4605      	mov	r5, r0
 800440a:	b911      	cbnz	r1, 8004412 <sbrk_aligned+0x12>
 800440c:	f000 fbaa 	bl	8004b64 <_sbrk_r>
 8004410:	6030      	str	r0, [r6, #0]
 8004412:	4621      	mov	r1, r4
 8004414:	4628      	mov	r0, r5
 8004416:	f000 fba5 	bl	8004b64 <_sbrk_r>
 800441a:	1c43      	adds	r3, r0, #1
 800441c:	d00a      	beq.n	8004434 <sbrk_aligned+0x34>
 800441e:	1cc4      	adds	r4, r0, #3
 8004420:	f024 0403 	bic.w	r4, r4, #3
 8004424:	42a0      	cmp	r0, r4
 8004426:	d007      	beq.n	8004438 <sbrk_aligned+0x38>
 8004428:	1a21      	subs	r1, r4, r0
 800442a:	4628      	mov	r0, r5
 800442c:	f000 fb9a 	bl	8004b64 <_sbrk_r>
 8004430:	3001      	adds	r0, #1
 8004432:	d101      	bne.n	8004438 <sbrk_aligned+0x38>
 8004434:	f04f 34ff 	mov.w	r4, #4294967295
 8004438:	4620      	mov	r0, r4
 800443a:	bd70      	pop	{r4, r5, r6, pc}
 800443c:	200008b4 	.word	0x200008b4

08004440 <_malloc_r>:
 8004440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004444:	1ccd      	adds	r5, r1, #3
 8004446:	f025 0503 	bic.w	r5, r5, #3
 800444a:	3508      	adds	r5, #8
 800444c:	2d0c      	cmp	r5, #12
 800444e:	bf38      	it	cc
 8004450:	250c      	movcc	r5, #12
 8004452:	2d00      	cmp	r5, #0
 8004454:	4607      	mov	r7, r0
 8004456:	db01      	blt.n	800445c <_malloc_r+0x1c>
 8004458:	42a9      	cmp	r1, r5
 800445a:	d905      	bls.n	8004468 <_malloc_r+0x28>
 800445c:	230c      	movs	r3, #12
 800445e:	2600      	movs	r6, #0
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	4630      	mov	r0, r6
 8004464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004468:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800453c <_malloc_r+0xfc>
 800446c:	f000 f868 	bl	8004540 <__malloc_lock>
 8004470:	f8d8 3000 	ldr.w	r3, [r8]
 8004474:	461c      	mov	r4, r3
 8004476:	bb5c      	cbnz	r4, 80044d0 <_malloc_r+0x90>
 8004478:	4629      	mov	r1, r5
 800447a:	4638      	mov	r0, r7
 800447c:	f7ff ffc0 	bl	8004400 <sbrk_aligned>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	4604      	mov	r4, r0
 8004484:	d155      	bne.n	8004532 <_malloc_r+0xf2>
 8004486:	f8d8 4000 	ldr.w	r4, [r8]
 800448a:	4626      	mov	r6, r4
 800448c:	2e00      	cmp	r6, #0
 800448e:	d145      	bne.n	800451c <_malloc_r+0xdc>
 8004490:	2c00      	cmp	r4, #0
 8004492:	d048      	beq.n	8004526 <_malloc_r+0xe6>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	4631      	mov	r1, r6
 8004498:	4638      	mov	r0, r7
 800449a:	eb04 0903 	add.w	r9, r4, r3
 800449e:	f000 fb61 	bl	8004b64 <_sbrk_r>
 80044a2:	4581      	cmp	r9, r0
 80044a4:	d13f      	bne.n	8004526 <_malloc_r+0xe6>
 80044a6:	6821      	ldr	r1, [r4, #0]
 80044a8:	4638      	mov	r0, r7
 80044aa:	1a6d      	subs	r5, r5, r1
 80044ac:	4629      	mov	r1, r5
 80044ae:	f7ff ffa7 	bl	8004400 <sbrk_aligned>
 80044b2:	3001      	adds	r0, #1
 80044b4:	d037      	beq.n	8004526 <_malloc_r+0xe6>
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	442b      	add	r3, r5
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	f8d8 3000 	ldr.w	r3, [r8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d038      	beq.n	8004536 <_malloc_r+0xf6>
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	42a2      	cmp	r2, r4
 80044c8:	d12b      	bne.n	8004522 <_malloc_r+0xe2>
 80044ca:	2200      	movs	r2, #0
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	e00f      	b.n	80044f0 <_malloc_r+0xb0>
 80044d0:	6822      	ldr	r2, [r4, #0]
 80044d2:	1b52      	subs	r2, r2, r5
 80044d4:	d41f      	bmi.n	8004516 <_malloc_r+0xd6>
 80044d6:	2a0b      	cmp	r2, #11
 80044d8:	d917      	bls.n	800450a <_malloc_r+0xca>
 80044da:	1961      	adds	r1, r4, r5
 80044dc:	42a3      	cmp	r3, r4
 80044de:	6025      	str	r5, [r4, #0]
 80044e0:	bf18      	it	ne
 80044e2:	6059      	strne	r1, [r3, #4]
 80044e4:	6863      	ldr	r3, [r4, #4]
 80044e6:	bf08      	it	eq
 80044e8:	f8c8 1000 	streq.w	r1, [r8]
 80044ec:	5162      	str	r2, [r4, r5]
 80044ee:	604b      	str	r3, [r1, #4]
 80044f0:	4638      	mov	r0, r7
 80044f2:	f104 060b 	add.w	r6, r4, #11
 80044f6:	f000 f829 	bl	800454c <__malloc_unlock>
 80044fa:	f026 0607 	bic.w	r6, r6, #7
 80044fe:	1d23      	adds	r3, r4, #4
 8004500:	1af2      	subs	r2, r6, r3
 8004502:	d0ae      	beq.n	8004462 <_malloc_r+0x22>
 8004504:	1b9b      	subs	r3, r3, r6
 8004506:	50a3      	str	r3, [r4, r2]
 8004508:	e7ab      	b.n	8004462 <_malloc_r+0x22>
 800450a:	42a3      	cmp	r3, r4
 800450c:	6862      	ldr	r2, [r4, #4]
 800450e:	d1dd      	bne.n	80044cc <_malloc_r+0x8c>
 8004510:	f8c8 2000 	str.w	r2, [r8]
 8004514:	e7ec      	b.n	80044f0 <_malloc_r+0xb0>
 8004516:	4623      	mov	r3, r4
 8004518:	6864      	ldr	r4, [r4, #4]
 800451a:	e7ac      	b.n	8004476 <_malloc_r+0x36>
 800451c:	4634      	mov	r4, r6
 800451e:	6876      	ldr	r6, [r6, #4]
 8004520:	e7b4      	b.n	800448c <_malloc_r+0x4c>
 8004522:	4613      	mov	r3, r2
 8004524:	e7cc      	b.n	80044c0 <_malloc_r+0x80>
 8004526:	230c      	movs	r3, #12
 8004528:	4638      	mov	r0, r7
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	f000 f80e 	bl	800454c <__malloc_unlock>
 8004530:	e797      	b.n	8004462 <_malloc_r+0x22>
 8004532:	6025      	str	r5, [r4, #0]
 8004534:	e7dc      	b.n	80044f0 <_malloc_r+0xb0>
 8004536:	605b      	str	r3, [r3, #4]
 8004538:	deff      	udf	#255	; 0xff
 800453a:	bf00      	nop
 800453c:	200008b0 	.word	0x200008b0

08004540 <__malloc_lock>:
 8004540:	4801      	ldr	r0, [pc, #4]	; (8004548 <__malloc_lock+0x8>)
 8004542:	f7ff bf13 	b.w	800436c <__retarget_lock_acquire_recursive>
 8004546:	bf00      	nop
 8004548:	200008ac 	.word	0x200008ac

0800454c <__malloc_unlock>:
 800454c:	4801      	ldr	r0, [pc, #4]	; (8004554 <__malloc_unlock+0x8>)
 800454e:	f7ff bf0e 	b.w	800436e <__retarget_lock_release_recursive>
 8004552:	bf00      	nop
 8004554:	200008ac 	.word	0x200008ac

08004558 <__ssputs_r>:
 8004558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800455c:	461f      	mov	r7, r3
 800455e:	688e      	ldr	r6, [r1, #8]
 8004560:	4682      	mov	sl, r0
 8004562:	42be      	cmp	r6, r7
 8004564:	460c      	mov	r4, r1
 8004566:	4690      	mov	r8, r2
 8004568:	680b      	ldr	r3, [r1, #0]
 800456a:	d82c      	bhi.n	80045c6 <__ssputs_r+0x6e>
 800456c:	898a      	ldrh	r2, [r1, #12]
 800456e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004572:	d026      	beq.n	80045c2 <__ssputs_r+0x6a>
 8004574:	6965      	ldr	r5, [r4, #20]
 8004576:	6909      	ldr	r1, [r1, #16]
 8004578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800457c:	eba3 0901 	sub.w	r9, r3, r1
 8004580:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004584:	1c7b      	adds	r3, r7, #1
 8004586:	444b      	add	r3, r9
 8004588:	106d      	asrs	r5, r5, #1
 800458a:	429d      	cmp	r5, r3
 800458c:	bf38      	it	cc
 800458e:	461d      	movcc	r5, r3
 8004590:	0553      	lsls	r3, r2, #21
 8004592:	d527      	bpl.n	80045e4 <__ssputs_r+0x8c>
 8004594:	4629      	mov	r1, r5
 8004596:	f7ff ff53 	bl	8004440 <_malloc_r>
 800459a:	4606      	mov	r6, r0
 800459c:	b360      	cbz	r0, 80045f8 <__ssputs_r+0xa0>
 800459e:	464a      	mov	r2, r9
 80045a0:	6921      	ldr	r1, [r4, #16]
 80045a2:	f000 fafd 	bl	8004ba0 <memcpy>
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b0:	81a3      	strh	r3, [r4, #12]
 80045b2:	6126      	str	r6, [r4, #16]
 80045b4:	444e      	add	r6, r9
 80045b6:	6026      	str	r6, [r4, #0]
 80045b8:	463e      	mov	r6, r7
 80045ba:	6165      	str	r5, [r4, #20]
 80045bc:	eba5 0509 	sub.w	r5, r5, r9
 80045c0:	60a5      	str	r5, [r4, #8]
 80045c2:	42be      	cmp	r6, r7
 80045c4:	d900      	bls.n	80045c8 <__ssputs_r+0x70>
 80045c6:	463e      	mov	r6, r7
 80045c8:	4632      	mov	r2, r6
 80045ca:	4641      	mov	r1, r8
 80045cc:	6820      	ldr	r0, [r4, #0]
 80045ce:	f000 faaf 	bl	8004b30 <memmove>
 80045d2:	2000      	movs	r0, #0
 80045d4:	68a3      	ldr	r3, [r4, #8]
 80045d6:	1b9b      	subs	r3, r3, r6
 80045d8:	60a3      	str	r3, [r4, #8]
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	4433      	add	r3, r6
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e4:	462a      	mov	r2, r5
 80045e6:	f000 fae9 	bl	8004bbc <_realloc_r>
 80045ea:	4606      	mov	r6, r0
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d1e0      	bne.n	80045b2 <__ssputs_r+0x5a>
 80045f0:	4650      	mov	r0, sl
 80045f2:	6921      	ldr	r1, [r4, #16]
 80045f4:	f7ff febc 	bl	8004370 <_free_r>
 80045f8:	230c      	movs	r3, #12
 80045fa:	f8ca 3000 	str.w	r3, [sl]
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004608:	81a3      	strh	r3, [r4, #12]
 800460a:	e7e9      	b.n	80045e0 <__ssputs_r+0x88>

0800460c <_svfiprintf_r>:
 800460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004610:	4698      	mov	r8, r3
 8004612:	898b      	ldrh	r3, [r1, #12]
 8004614:	4607      	mov	r7, r0
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	460d      	mov	r5, r1
 800461a:	4614      	mov	r4, r2
 800461c:	b09d      	sub	sp, #116	; 0x74
 800461e:	d50e      	bpl.n	800463e <_svfiprintf_r+0x32>
 8004620:	690b      	ldr	r3, [r1, #16]
 8004622:	b963      	cbnz	r3, 800463e <_svfiprintf_r+0x32>
 8004624:	2140      	movs	r1, #64	; 0x40
 8004626:	f7ff ff0b 	bl	8004440 <_malloc_r>
 800462a:	6028      	str	r0, [r5, #0]
 800462c:	6128      	str	r0, [r5, #16]
 800462e:	b920      	cbnz	r0, 800463a <_svfiprintf_r+0x2e>
 8004630:	230c      	movs	r3, #12
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	e0d0      	b.n	80047dc <_svfiprintf_r+0x1d0>
 800463a:	2340      	movs	r3, #64	; 0x40
 800463c:	616b      	str	r3, [r5, #20]
 800463e:	2300      	movs	r3, #0
 8004640:	9309      	str	r3, [sp, #36]	; 0x24
 8004642:	2320      	movs	r3, #32
 8004644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004648:	2330      	movs	r3, #48	; 0x30
 800464a:	f04f 0901 	mov.w	r9, #1
 800464e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004652:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80047f4 <_svfiprintf_r+0x1e8>
 8004656:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800465a:	4623      	mov	r3, r4
 800465c:	469a      	mov	sl, r3
 800465e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004662:	b10a      	cbz	r2, 8004668 <_svfiprintf_r+0x5c>
 8004664:	2a25      	cmp	r2, #37	; 0x25
 8004666:	d1f9      	bne.n	800465c <_svfiprintf_r+0x50>
 8004668:	ebba 0b04 	subs.w	fp, sl, r4
 800466c:	d00b      	beq.n	8004686 <_svfiprintf_r+0x7a>
 800466e:	465b      	mov	r3, fp
 8004670:	4622      	mov	r2, r4
 8004672:	4629      	mov	r1, r5
 8004674:	4638      	mov	r0, r7
 8004676:	f7ff ff6f 	bl	8004558 <__ssputs_r>
 800467a:	3001      	adds	r0, #1
 800467c:	f000 80a9 	beq.w	80047d2 <_svfiprintf_r+0x1c6>
 8004680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004682:	445a      	add	r2, fp
 8004684:	9209      	str	r2, [sp, #36]	; 0x24
 8004686:	f89a 3000 	ldrb.w	r3, [sl]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80a1 	beq.w	80047d2 <_svfiprintf_r+0x1c6>
 8004690:	2300      	movs	r3, #0
 8004692:	f04f 32ff 	mov.w	r2, #4294967295
 8004696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800469a:	f10a 0a01 	add.w	sl, sl, #1
 800469e:	9304      	str	r3, [sp, #16]
 80046a0:	9307      	str	r3, [sp, #28]
 80046a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046a6:	931a      	str	r3, [sp, #104]	; 0x68
 80046a8:	4654      	mov	r4, sl
 80046aa:	2205      	movs	r2, #5
 80046ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b0:	4850      	ldr	r0, [pc, #320]	; (80047f4 <_svfiprintf_r+0x1e8>)
 80046b2:	f000 fa67 	bl	8004b84 <memchr>
 80046b6:	9a04      	ldr	r2, [sp, #16]
 80046b8:	b9d8      	cbnz	r0, 80046f2 <_svfiprintf_r+0xe6>
 80046ba:	06d0      	lsls	r0, r2, #27
 80046bc:	bf44      	itt	mi
 80046be:	2320      	movmi	r3, #32
 80046c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046c4:	0711      	lsls	r1, r2, #28
 80046c6:	bf44      	itt	mi
 80046c8:	232b      	movmi	r3, #43	; 0x2b
 80046ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ce:	f89a 3000 	ldrb.w	r3, [sl]
 80046d2:	2b2a      	cmp	r3, #42	; 0x2a
 80046d4:	d015      	beq.n	8004702 <_svfiprintf_r+0xf6>
 80046d6:	4654      	mov	r4, sl
 80046d8:	2000      	movs	r0, #0
 80046da:	f04f 0c0a 	mov.w	ip, #10
 80046de:	9a07      	ldr	r2, [sp, #28]
 80046e0:	4621      	mov	r1, r4
 80046e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046e6:	3b30      	subs	r3, #48	; 0x30
 80046e8:	2b09      	cmp	r3, #9
 80046ea:	d94d      	bls.n	8004788 <_svfiprintf_r+0x17c>
 80046ec:	b1b0      	cbz	r0, 800471c <_svfiprintf_r+0x110>
 80046ee:	9207      	str	r2, [sp, #28]
 80046f0:	e014      	b.n	800471c <_svfiprintf_r+0x110>
 80046f2:	eba0 0308 	sub.w	r3, r0, r8
 80046f6:	fa09 f303 	lsl.w	r3, r9, r3
 80046fa:	4313      	orrs	r3, r2
 80046fc:	46a2      	mov	sl, r4
 80046fe:	9304      	str	r3, [sp, #16]
 8004700:	e7d2      	b.n	80046a8 <_svfiprintf_r+0x9c>
 8004702:	9b03      	ldr	r3, [sp, #12]
 8004704:	1d19      	adds	r1, r3, #4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	9103      	str	r1, [sp, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	bfbb      	ittet	lt
 800470e:	425b      	neglt	r3, r3
 8004710:	f042 0202 	orrlt.w	r2, r2, #2
 8004714:	9307      	strge	r3, [sp, #28]
 8004716:	9307      	strlt	r3, [sp, #28]
 8004718:	bfb8      	it	lt
 800471a:	9204      	strlt	r2, [sp, #16]
 800471c:	7823      	ldrb	r3, [r4, #0]
 800471e:	2b2e      	cmp	r3, #46	; 0x2e
 8004720:	d10c      	bne.n	800473c <_svfiprintf_r+0x130>
 8004722:	7863      	ldrb	r3, [r4, #1]
 8004724:	2b2a      	cmp	r3, #42	; 0x2a
 8004726:	d134      	bne.n	8004792 <_svfiprintf_r+0x186>
 8004728:	9b03      	ldr	r3, [sp, #12]
 800472a:	3402      	adds	r4, #2
 800472c:	1d1a      	adds	r2, r3, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	9203      	str	r2, [sp, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	bfb8      	it	lt
 8004736:	f04f 33ff 	movlt.w	r3, #4294967295
 800473a:	9305      	str	r3, [sp, #20]
 800473c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80047f8 <_svfiprintf_r+0x1ec>
 8004740:	2203      	movs	r2, #3
 8004742:	4650      	mov	r0, sl
 8004744:	7821      	ldrb	r1, [r4, #0]
 8004746:	f000 fa1d 	bl	8004b84 <memchr>
 800474a:	b138      	cbz	r0, 800475c <_svfiprintf_r+0x150>
 800474c:	2240      	movs	r2, #64	; 0x40
 800474e:	9b04      	ldr	r3, [sp, #16]
 8004750:	eba0 000a 	sub.w	r0, r0, sl
 8004754:	4082      	lsls	r2, r0
 8004756:	4313      	orrs	r3, r2
 8004758:	3401      	adds	r4, #1
 800475a:	9304      	str	r3, [sp, #16]
 800475c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004760:	2206      	movs	r2, #6
 8004762:	4826      	ldr	r0, [pc, #152]	; (80047fc <_svfiprintf_r+0x1f0>)
 8004764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004768:	f000 fa0c 	bl	8004b84 <memchr>
 800476c:	2800      	cmp	r0, #0
 800476e:	d038      	beq.n	80047e2 <_svfiprintf_r+0x1d6>
 8004770:	4b23      	ldr	r3, [pc, #140]	; (8004800 <_svfiprintf_r+0x1f4>)
 8004772:	bb1b      	cbnz	r3, 80047bc <_svfiprintf_r+0x1b0>
 8004774:	9b03      	ldr	r3, [sp, #12]
 8004776:	3307      	adds	r3, #7
 8004778:	f023 0307 	bic.w	r3, r3, #7
 800477c:	3308      	adds	r3, #8
 800477e:	9303      	str	r3, [sp, #12]
 8004780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004782:	4433      	add	r3, r6
 8004784:	9309      	str	r3, [sp, #36]	; 0x24
 8004786:	e768      	b.n	800465a <_svfiprintf_r+0x4e>
 8004788:	460c      	mov	r4, r1
 800478a:	2001      	movs	r0, #1
 800478c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004790:	e7a6      	b.n	80046e0 <_svfiprintf_r+0xd4>
 8004792:	2300      	movs	r3, #0
 8004794:	f04f 0c0a 	mov.w	ip, #10
 8004798:	4619      	mov	r1, r3
 800479a:	3401      	adds	r4, #1
 800479c:	9305      	str	r3, [sp, #20]
 800479e:	4620      	mov	r0, r4
 80047a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047a4:	3a30      	subs	r2, #48	; 0x30
 80047a6:	2a09      	cmp	r2, #9
 80047a8:	d903      	bls.n	80047b2 <_svfiprintf_r+0x1a6>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0c6      	beq.n	800473c <_svfiprintf_r+0x130>
 80047ae:	9105      	str	r1, [sp, #20]
 80047b0:	e7c4      	b.n	800473c <_svfiprintf_r+0x130>
 80047b2:	4604      	mov	r4, r0
 80047b4:	2301      	movs	r3, #1
 80047b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047ba:	e7f0      	b.n	800479e <_svfiprintf_r+0x192>
 80047bc:	ab03      	add	r3, sp, #12
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	462a      	mov	r2, r5
 80047c2:	4638      	mov	r0, r7
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <_svfiprintf_r+0x1f8>)
 80047c6:	a904      	add	r1, sp, #16
 80047c8:	f3af 8000 	nop.w
 80047cc:	1c42      	adds	r2, r0, #1
 80047ce:	4606      	mov	r6, r0
 80047d0:	d1d6      	bne.n	8004780 <_svfiprintf_r+0x174>
 80047d2:	89ab      	ldrh	r3, [r5, #12]
 80047d4:	065b      	lsls	r3, r3, #25
 80047d6:	f53f af2d 	bmi.w	8004634 <_svfiprintf_r+0x28>
 80047da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047dc:	b01d      	add	sp, #116	; 0x74
 80047de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e2:	ab03      	add	r3, sp, #12
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	462a      	mov	r2, r5
 80047e8:	4638      	mov	r0, r7
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <_svfiprintf_r+0x1f8>)
 80047ec:	a904      	add	r1, sp, #16
 80047ee:	f000 f87d 	bl	80048ec <_printf_i>
 80047f2:	e7eb      	b.n	80047cc <_svfiprintf_r+0x1c0>
 80047f4:	08005470 	.word	0x08005470
 80047f8:	08005476 	.word	0x08005476
 80047fc:	0800547a 	.word	0x0800547a
 8004800:	00000000 	.word	0x00000000
 8004804:	08004559 	.word	0x08004559

08004808 <_printf_common>:
 8004808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480c:	4616      	mov	r6, r2
 800480e:	4699      	mov	r9, r3
 8004810:	688a      	ldr	r2, [r1, #8]
 8004812:	690b      	ldr	r3, [r1, #16]
 8004814:	4607      	mov	r7, r0
 8004816:	4293      	cmp	r3, r2
 8004818:	bfb8      	it	lt
 800481a:	4613      	movlt	r3, r2
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004822:	460c      	mov	r4, r1
 8004824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004828:	b10a      	cbz	r2, 800482e <_printf_common+0x26>
 800482a:	3301      	adds	r3, #1
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	0699      	lsls	r1, r3, #26
 8004832:	bf42      	ittt	mi
 8004834:	6833      	ldrmi	r3, [r6, #0]
 8004836:	3302      	addmi	r3, #2
 8004838:	6033      	strmi	r3, [r6, #0]
 800483a:	6825      	ldr	r5, [r4, #0]
 800483c:	f015 0506 	ands.w	r5, r5, #6
 8004840:	d106      	bne.n	8004850 <_printf_common+0x48>
 8004842:	f104 0a19 	add.w	sl, r4, #25
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	6832      	ldr	r2, [r6, #0]
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	42ab      	cmp	r3, r5
 800484e:	dc2b      	bgt.n	80048a8 <_printf_common+0xa0>
 8004850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004854:	1e13      	subs	r3, r2, #0
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	bf18      	it	ne
 800485a:	2301      	movne	r3, #1
 800485c:	0692      	lsls	r2, r2, #26
 800485e:	d430      	bmi.n	80048c2 <_printf_common+0xba>
 8004860:	4649      	mov	r1, r9
 8004862:	4638      	mov	r0, r7
 8004864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004868:	47c0      	blx	r8
 800486a:	3001      	adds	r0, #1
 800486c:	d023      	beq.n	80048b6 <_printf_common+0xae>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6922      	ldr	r2, [r4, #16]
 8004872:	f003 0306 	and.w	r3, r3, #6
 8004876:	2b04      	cmp	r3, #4
 8004878:	bf14      	ite	ne
 800487a:	2500      	movne	r5, #0
 800487c:	6833      	ldreq	r3, [r6, #0]
 800487e:	f04f 0600 	mov.w	r6, #0
 8004882:	bf08      	it	eq
 8004884:	68e5      	ldreq	r5, [r4, #12]
 8004886:	f104 041a 	add.w	r4, r4, #26
 800488a:	bf08      	it	eq
 800488c:	1aed      	subeq	r5, r5, r3
 800488e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004892:	bf08      	it	eq
 8004894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004898:	4293      	cmp	r3, r2
 800489a:	bfc4      	itt	gt
 800489c:	1a9b      	subgt	r3, r3, r2
 800489e:	18ed      	addgt	r5, r5, r3
 80048a0:	42b5      	cmp	r5, r6
 80048a2:	d11a      	bne.n	80048da <_printf_common+0xd2>
 80048a4:	2000      	movs	r0, #0
 80048a6:	e008      	b.n	80048ba <_printf_common+0xb2>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4652      	mov	r2, sl
 80048ac:	4649      	mov	r1, r9
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c0      	blx	r8
 80048b2:	3001      	adds	r0, #1
 80048b4:	d103      	bne.n	80048be <_printf_common+0xb6>
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048be:	3501      	adds	r5, #1
 80048c0:	e7c1      	b.n	8004846 <_printf_common+0x3e>
 80048c2:	2030      	movs	r0, #48	; 0x30
 80048c4:	18e1      	adds	r1, r4, r3
 80048c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048d0:	4422      	add	r2, r4
 80048d2:	3302      	adds	r3, #2
 80048d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048d8:	e7c2      	b.n	8004860 <_printf_common+0x58>
 80048da:	2301      	movs	r3, #1
 80048dc:	4622      	mov	r2, r4
 80048de:	4649      	mov	r1, r9
 80048e0:	4638      	mov	r0, r7
 80048e2:	47c0      	blx	r8
 80048e4:	3001      	adds	r0, #1
 80048e6:	d0e6      	beq.n	80048b6 <_printf_common+0xae>
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7d9      	b.n	80048a0 <_printf_common+0x98>

080048ec <_printf_i>:
 80048ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	7e0f      	ldrb	r7, [r1, #24]
 80048f2:	4691      	mov	r9, r2
 80048f4:	2f78      	cmp	r7, #120	; 0x78
 80048f6:	4680      	mov	r8, r0
 80048f8:	460c      	mov	r4, r1
 80048fa:	469a      	mov	sl, r3
 80048fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004902:	d807      	bhi.n	8004914 <_printf_i+0x28>
 8004904:	2f62      	cmp	r7, #98	; 0x62
 8004906:	d80a      	bhi.n	800491e <_printf_i+0x32>
 8004908:	2f00      	cmp	r7, #0
 800490a:	f000 80d5 	beq.w	8004ab8 <_printf_i+0x1cc>
 800490e:	2f58      	cmp	r7, #88	; 0x58
 8004910:	f000 80c1 	beq.w	8004a96 <_printf_i+0x1aa>
 8004914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800491c:	e03a      	b.n	8004994 <_printf_i+0xa8>
 800491e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004922:	2b15      	cmp	r3, #21
 8004924:	d8f6      	bhi.n	8004914 <_printf_i+0x28>
 8004926:	a101      	add	r1, pc, #4	; (adr r1, 800492c <_printf_i+0x40>)
 8004928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800492c:	08004985 	.word	0x08004985
 8004930:	08004999 	.word	0x08004999
 8004934:	08004915 	.word	0x08004915
 8004938:	08004915 	.word	0x08004915
 800493c:	08004915 	.word	0x08004915
 8004940:	08004915 	.word	0x08004915
 8004944:	08004999 	.word	0x08004999
 8004948:	08004915 	.word	0x08004915
 800494c:	08004915 	.word	0x08004915
 8004950:	08004915 	.word	0x08004915
 8004954:	08004915 	.word	0x08004915
 8004958:	08004a9f 	.word	0x08004a9f
 800495c:	080049c5 	.word	0x080049c5
 8004960:	08004a59 	.word	0x08004a59
 8004964:	08004915 	.word	0x08004915
 8004968:	08004915 	.word	0x08004915
 800496c:	08004ac1 	.word	0x08004ac1
 8004970:	08004915 	.word	0x08004915
 8004974:	080049c5 	.word	0x080049c5
 8004978:	08004915 	.word	0x08004915
 800497c:	08004915 	.word	0x08004915
 8004980:	08004a61 	.word	0x08004a61
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	1d1a      	adds	r2, r3, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	602a      	str	r2, [r5, #0]
 800498c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004994:	2301      	movs	r3, #1
 8004996:	e0a0      	b.n	8004ada <_printf_i+0x1ee>
 8004998:	6820      	ldr	r0, [r4, #0]
 800499a:	682b      	ldr	r3, [r5, #0]
 800499c:	0607      	lsls	r7, r0, #24
 800499e:	f103 0104 	add.w	r1, r3, #4
 80049a2:	6029      	str	r1, [r5, #0]
 80049a4:	d501      	bpl.n	80049aa <_printf_i+0xbe>
 80049a6:	681e      	ldr	r6, [r3, #0]
 80049a8:	e003      	b.n	80049b2 <_printf_i+0xc6>
 80049aa:	0646      	lsls	r6, r0, #25
 80049ac:	d5fb      	bpl.n	80049a6 <_printf_i+0xba>
 80049ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049b2:	2e00      	cmp	r6, #0
 80049b4:	da03      	bge.n	80049be <_printf_i+0xd2>
 80049b6:	232d      	movs	r3, #45	; 0x2d
 80049b8:	4276      	negs	r6, r6
 80049ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049be:	230a      	movs	r3, #10
 80049c0:	4859      	ldr	r0, [pc, #356]	; (8004b28 <_printf_i+0x23c>)
 80049c2:	e012      	b.n	80049ea <_printf_i+0xfe>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	6820      	ldr	r0, [r4, #0]
 80049c8:	1d19      	adds	r1, r3, #4
 80049ca:	6029      	str	r1, [r5, #0]
 80049cc:	0605      	lsls	r5, r0, #24
 80049ce:	d501      	bpl.n	80049d4 <_printf_i+0xe8>
 80049d0:	681e      	ldr	r6, [r3, #0]
 80049d2:	e002      	b.n	80049da <_printf_i+0xee>
 80049d4:	0641      	lsls	r1, r0, #25
 80049d6:	d5fb      	bpl.n	80049d0 <_printf_i+0xe4>
 80049d8:	881e      	ldrh	r6, [r3, #0]
 80049da:	2f6f      	cmp	r7, #111	; 0x6f
 80049dc:	bf0c      	ite	eq
 80049de:	2308      	moveq	r3, #8
 80049e0:	230a      	movne	r3, #10
 80049e2:	4851      	ldr	r0, [pc, #324]	; (8004b28 <_printf_i+0x23c>)
 80049e4:	2100      	movs	r1, #0
 80049e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ea:	6865      	ldr	r5, [r4, #4]
 80049ec:	2d00      	cmp	r5, #0
 80049ee:	bfa8      	it	ge
 80049f0:	6821      	ldrge	r1, [r4, #0]
 80049f2:	60a5      	str	r5, [r4, #8]
 80049f4:	bfa4      	itt	ge
 80049f6:	f021 0104 	bicge.w	r1, r1, #4
 80049fa:	6021      	strge	r1, [r4, #0]
 80049fc:	b90e      	cbnz	r6, 8004a02 <_printf_i+0x116>
 80049fe:	2d00      	cmp	r5, #0
 8004a00:	d04b      	beq.n	8004a9a <_printf_i+0x1ae>
 8004a02:	4615      	mov	r5, r2
 8004a04:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a08:	fb03 6711 	mls	r7, r3, r1, r6
 8004a0c:	5dc7      	ldrb	r7, [r0, r7]
 8004a0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a12:	4637      	mov	r7, r6
 8004a14:	42bb      	cmp	r3, r7
 8004a16:	460e      	mov	r6, r1
 8004a18:	d9f4      	bls.n	8004a04 <_printf_i+0x118>
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d10b      	bne.n	8004a36 <_printf_i+0x14a>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	07de      	lsls	r6, r3, #31
 8004a22:	d508      	bpl.n	8004a36 <_printf_i+0x14a>
 8004a24:	6923      	ldr	r3, [r4, #16]
 8004a26:	6861      	ldr	r1, [r4, #4]
 8004a28:	4299      	cmp	r1, r3
 8004a2a:	bfde      	ittt	le
 8004a2c:	2330      	movle	r3, #48	; 0x30
 8004a2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a36:	1b52      	subs	r2, r2, r5
 8004a38:	6122      	str	r2, [r4, #16]
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4640      	mov	r0, r8
 8004a40:	f8cd a000 	str.w	sl, [sp]
 8004a44:	aa03      	add	r2, sp, #12
 8004a46:	f7ff fedf 	bl	8004808 <_printf_common>
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d14a      	bne.n	8004ae4 <_printf_i+0x1f8>
 8004a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a52:	b004      	add	sp, #16
 8004a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	f043 0320 	orr.w	r3, r3, #32
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	2778      	movs	r7, #120	; 0x78
 8004a62:	4832      	ldr	r0, [pc, #200]	; (8004b2c <_printf_i+0x240>)
 8004a64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	6829      	ldr	r1, [r5, #0]
 8004a6c:	061f      	lsls	r7, r3, #24
 8004a6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a72:	d402      	bmi.n	8004a7a <_printf_i+0x18e>
 8004a74:	065f      	lsls	r7, r3, #25
 8004a76:	bf48      	it	mi
 8004a78:	b2b6      	uxthmi	r6, r6
 8004a7a:	07df      	lsls	r7, r3, #31
 8004a7c:	bf48      	it	mi
 8004a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8004a82:	6029      	str	r1, [r5, #0]
 8004a84:	bf48      	it	mi
 8004a86:	6023      	strmi	r3, [r4, #0]
 8004a88:	b91e      	cbnz	r6, 8004a92 <_printf_i+0x1a6>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	f023 0320 	bic.w	r3, r3, #32
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	2310      	movs	r3, #16
 8004a94:	e7a6      	b.n	80049e4 <_printf_i+0xf8>
 8004a96:	4824      	ldr	r0, [pc, #144]	; (8004b28 <_printf_i+0x23c>)
 8004a98:	e7e4      	b.n	8004a64 <_printf_i+0x178>
 8004a9a:	4615      	mov	r5, r2
 8004a9c:	e7bd      	b.n	8004a1a <_printf_i+0x12e>
 8004a9e:	682b      	ldr	r3, [r5, #0]
 8004aa0:	6826      	ldr	r6, [r4, #0]
 8004aa2:	1d18      	adds	r0, r3, #4
 8004aa4:	6961      	ldr	r1, [r4, #20]
 8004aa6:	6028      	str	r0, [r5, #0]
 8004aa8:	0635      	lsls	r5, r6, #24
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	d501      	bpl.n	8004ab2 <_printf_i+0x1c6>
 8004aae:	6019      	str	r1, [r3, #0]
 8004ab0:	e002      	b.n	8004ab8 <_printf_i+0x1cc>
 8004ab2:	0670      	lsls	r0, r6, #25
 8004ab4:	d5fb      	bpl.n	8004aae <_printf_i+0x1c2>
 8004ab6:	8019      	strh	r1, [r3, #0]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4615      	mov	r5, r2
 8004abc:	6123      	str	r3, [r4, #16]
 8004abe:	e7bc      	b.n	8004a3a <_printf_i+0x14e>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	1d1a      	adds	r2, r3, #4
 8004ac6:	602a      	str	r2, [r5, #0]
 8004ac8:	681d      	ldr	r5, [r3, #0]
 8004aca:	6862      	ldr	r2, [r4, #4]
 8004acc:	4628      	mov	r0, r5
 8004ace:	f000 f859 	bl	8004b84 <memchr>
 8004ad2:	b108      	cbz	r0, 8004ad8 <_printf_i+0x1ec>
 8004ad4:	1b40      	subs	r0, r0, r5
 8004ad6:	6060      	str	r0, [r4, #4]
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	6123      	str	r3, [r4, #16]
 8004adc:	2300      	movs	r3, #0
 8004ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae2:	e7aa      	b.n	8004a3a <_printf_i+0x14e>
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	4640      	mov	r0, r8
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	47d0      	blx	sl
 8004aee:	3001      	adds	r0, #1
 8004af0:	d0ad      	beq.n	8004a4e <_printf_i+0x162>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	079b      	lsls	r3, r3, #30
 8004af6:	d413      	bmi.n	8004b20 <_printf_i+0x234>
 8004af8:	68e0      	ldr	r0, [r4, #12]
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	4298      	cmp	r0, r3
 8004afe:	bfb8      	it	lt
 8004b00:	4618      	movlt	r0, r3
 8004b02:	e7a6      	b.n	8004a52 <_printf_i+0x166>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4632      	mov	r2, r6
 8004b08:	4649      	mov	r1, r9
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	47d0      	blx	sl
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d09d      	beq.n	8004a4e <_printf_i+0x162>
 8004b12:	3501      	adds	r5, #1
 8004b14:	68e3      	ldr	r3, [r4, #12]
 8004b16:	9903      	ldr	r1, [sp, #12]
 8004b18:	1a5b      	subs	r3, r3, r1
 8004b1a:	42ab      	cmp	r3, r5
 8004b1c:	dcf2      	bgt.n	8004b04 <_printf_i+0x218>
 8004b1e:	e7eb      	b.n	8004af8 <_printf_i+0x20c>
 8004b20:	2500      	movs	r5, #0
 8004b22:	f104 0619 	add.w	r6, r4, #25
 8004b26:	e7f5      	b.n	8004b14 <_printf_i+0x228>
 8004b28:	08005481 	.word	0x08005481
 8004b2c:	08005492 	.word	0x08005492

08004b30 <memmove>:
 8004b30:	4288      	cmp	r0, r1
 8004b32:	b510      	push	{r4, lr}
 8004b34:	eb01 0402 	add.w	r4, r1, r2
 8004b38:	d902      	bls.n	8004b40 <memmove+0x10>
 8004b3a:	4284      	cmp	r4, r0
 8004b3c:	4623      	mov	r3, r4
 8004b3e:	d807      	bhi.n	8004b50 <memmove+0x20>
 8004b40:	1e43      	subs	r3, r0, #1
 8004b42:	42a1      	cmp	r1, r4
 8004b44:	d008      	beq.n	8004b58 <memmove+0x28>
 8004b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b4e:	e7f8      	b.n	8004b42 <memmove+0x12>
 8004b50:	4601      	mov	r1, r0
 8004b52:	4402      	add	r2, r0
 8004b54:	428a      	cmp	r2, r1
 8004b56:	d100      	bne.n	8004b5a <memmove+0x2a>
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b62:	e7f7      	b.n	8004b54 <memmove+0x24>

08004b64 <_sbrk_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	2300      	movs	r3, #0
 8004b68:	4d05      	ldr	r5, [pc, #20]	; (8004b80 <_sbrk_r+0x1c>)
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	f7fc fc60 	bl	8001434 <_sbrk>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_sbrk_r+0x1a>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_sbrk_r+0x1a>
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	200008a8 	.word	0x200008a8

08004b84 <memchr>:
 8004b84:	4603      	mov	r3, r0
 8004b86:	b510      	push	{r4, lr}
 8004b88:	b2c9      	uxtb	r1, r1
 8004b8a:	4402      	add	r2, r0
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	d101      	bne.n	8004b96 <memchr+0x12>
 8004b92:	2000      	movs	r0, #0
 8004b94:	e003      	b.n	8004b9e <memchr+0x1a>
 8004b96:	7804      	ldrb	r4, [r0, #0]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	428c      	cmp	r4, r1
 8004b9c:	d1f6      	bne.n	8004b8c <memchr+0x8>
 8004b9e:	bd10      	pop	{r4, pc}

08004ba0 <memcpy>:
 8004ba0:	440a      	add	r2, r1
 8004ba2:	4291      	cmp	r1, r2
 8004ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ba8:	d100      	bne.n	8004bac <memcpy+0xc>
 8004baa:	4770      	bx	lr
 8004bac:	b510      	push	{r4, lr}
 8004bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bb2:	4291      	cmp	r1, r2
 8004bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bb8:	d1f9      	bne.n	8004bae <memcpy+0xe>
 8004bba:	bd10      	pop	{r4, pc}

08004bbc <_realloc_r>:
 8004bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	4614      	mov	r4, r2
 8004bc4:	460e      	mov	r6, r1
 8004bc6:	b921      	cbnz	r1, 8004bd2 <_realloc_r+0x16>
 8004bc8:	4611      	mov	r1, r2
 8004bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bce:	f7ff bc37 	b.w	8004440 <_malloc_r>
 8004bd2:	b92a      	cbnz	r2, 8004be0 <_realloc_r+0x24>
 8004bd4:	f7ff fbcc 	bl	8004370 <_free_r>
 8004bd8:	4625      	mov	r5, r4
 8004bda:	4628      	mov	r0, r5
 8004bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be0:	f000 f81b 	bl	8004c1a <_malloc_usable_size_r>
 8004be4:	4284      	cmp	r4, r0
 8004be6:	4607      	mov	r7, r0
 8004be8:	d802      	bhi.n	8004bf0 <_realloc_r+0x34>
 8004bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bee:	d812      	bhi.n	8004c16 <_realloc_r+0x5a>
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	f7ff fc24 	bl	8004440 <_malloc_r>
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d0ed      	beq.n	8004bda <_realloc_r+0x1e>
 8004bfe:	42bc      	cmp	r4, r7
 8004c00:	4622      	mov	r2, r4
 8004c02:	4631      	mov	r1, r6
 8004c04:	bf28      	it	cs
 8004c06:	463a      	movcs	r2, r7
 8004c08:	f7ff ffca 	bl	8004ba0 <memcpy>
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4640      	mov	r0, r8
 8004c10:	f7ff fbae 	bl	8004370 <_free_r>
 8004c14:	e7e1      	b.n	8004bda <_realloc_r+0x1e>
 8004c16:	4635      	mov	r5, r6
 8004c18:	e7df      	b.n	8004bda <_realloc_r+0x1e>

08004c1a <_malloc_usable_size_r>:
 8004c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1e:	1f18      	subs	r0, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bfbc      	itt	lt
 8004c24:	580b      	ldrlt	r3, [r1, r0]
 8004c26:	18c0      	addlt	r0, r0, r3
 8004c28:	4770      	bx	lr
	...

08004c2c <_init>:
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	bf00      	nop
 8004c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c32:	bc08      	pop	{r3}
 8004c34:	469e      	mov	lr, r3
 8004c36:	4770      	bx	lr

08004c38 <_fini>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr
