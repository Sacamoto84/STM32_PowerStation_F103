
STM32_PowerStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08003d40  08003d40  00013d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a0  080045a0  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  080045a0  080045a0  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045a0  080045a0  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a0  080045a0  000145a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045a4  080045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080045a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  200000c0  08004668  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  08004668  00020868  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001529c  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f60  00000000  00000000  000353c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00038328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a89  00000000  00000000  000390d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4d8  00000000  00000000  00039b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014fba  00000000  00000000  00055039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b17f  00000000  00000000  00069ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c0c  00000000  00000000  000f5174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000f8d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d28 	.word	0x08003d28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08003d28 	.word	0x08003d28

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	4b23      	ldr	r3, [pc, #140]	; (8000200 <MX_GPIO_Init+0xa4>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a22      	ldr	r2, [pc, #136]	; (8000200 <MX_GPIO_Init+0xa4>)
 8000176:	f043 0320 	orr.w	r3, r3, #32
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b20      	ldr	r3, [pc, #128]	; (8000200 <MX_GPIO_Init+0xa4>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0320 	and.w	r3, r3, #32
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b1d      	ldr	r3, [pc, #116]	; (8000200 <MX_GPIO_Init+0xa4>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a1c      	ldr	r2, [pc, #112]	; (8000200 <MX_GPIO_Init+0xa4>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b1a      	ldr	r3, [pc, #104]	; (8000200 <MX_GPIO_Init+0xa4>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b17      	ldr	r3, [pc, #92]	; (8000200 <MX_GPIO_Init+0xa4>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a16      	ldr	r2, [pc, #88]	; (8000200 <MX_GPIO_Init+0xa4>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b14      	ldr	r3, [pc, #80]	; (8000200 <MX_GPIO_Init+0xa4>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	2110      	movs	r1, #16
 80001bc:	4811      	ldr	r0, [pc, #68]	; (8000204 <MX_GPIO_Init+0xa8>)
 80001be:	f001 f86d 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80001c2:	2310      	movs	r3, #16
 80001c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	480a      	ldr	r0, [pc, #40]	; (8000204 <MX_GPIO_Init+0xa8>)
 80001da:	f000 fedb 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY_Pin|KEY_Pin;
 80001de:	2341      	movs	r3, #65	; 0x41
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	4805      	ldr	r0, [pc, #20]	; (8000208 <MX_GPIO_Init+0xac>)
 80001f2:	f000 fecf 	bl	8000f94 <HAL_GPIO_Init>

}
 80001f6:	bf00      	nop
 80001f8:	3720      	adds	r7, #32
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40021000 	.word	0x40021000
 8000204:	40010800 	.word	0x40010800
 8000208:	40010c00 	.word	0x40010c00

0800020c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <MX_I2C2_Init+0x50>)
 8000212:	4a13      	ldr	r2, [pc, #76]	; (8000260 <MX_I2C2_Init+0x54>)
 8000214:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000216:	4b11      	ldr	r3, [pc, #68]	; (800025c <MX_I2C2_Init+0x50>)
 8000218:	4a12      	ldr	r2, [pc, #72]	; (8000264 <MX_I2C2_Init+0x58>)
 800021a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_I2C2_Init+0x50>)
 800021e:	2200      	movs	r2, #0
 8000220:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <MX_I2C2_Init+0x50>)
 8000224:	2200      	movs	r2, #0
 8000226:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_I2C2_Init+0x50>)
 800022a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800022e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_I2C2_Init+0x50>)
 8000232:	2200      	movs	r2, #0
 8000234:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_I2C2_Init+0x50>)
 8000238:	2200      	movs	r2, #0
 800023a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_I2C2_Init+0x50>)
 800023e:	2200      	movs	r2, #0
 8000240:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_I2C2_Init+0x50>)
 8000244:	2200      	movs	r2, #0
 8000246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_I2C2_Init+0x50>)
 800024a:	f001 f83f 	bl	80012cc <HAL_I2C_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000254:	f000 fb7c 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200000dc 	.word	0x200000dc
 8000260:	40005800 	.word	0x40005800
 8000264:	000186a0 	.word	0x000186a0

08000268 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000270:	f107 0310 	add.w	r3, r7, #16
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a16      	ldr	r2, [pc, #88]	; (80002dc <HAL_I2C_MspInit+0x74>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d124      	bne.n	80002d2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0308 	and.w	r3, r3, #8
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80002a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80002a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002a6:	2312      	movs	r3, #18
 80002a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002aa:	2303      	movs	r3, #3
 80002ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	4619      	mov	r1, r3
 80002b4:	480b      	ldr	r0, [pc, #44]	; (80002e4 <HAL_I2C_MspInit+0x7c>)
 80002b6:	f000 fe6d 	bl	8000f94 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 80002c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c4:	61d3      	str	r3, [r2, #28]
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <HAL_I2C_MspInit+0x78>)
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002ce:	60bb      	str	r3, [r7, #8]
 80002d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80002d2:	bf00      	nop
 80002d4:	3720      	adds	r7, #32
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40005800 	.word	0x40005800
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <_ZN10TFT_Driver4initEP9TFT_LCD_t>:

	uint32_t DMA_TX_Complete; //����� ������ ��������� DMA �������� ������ ��� �����
	uint32_t blockUpdate;
	uint32_t needUpdate;

	void init(TFT_LCD_t *_LCD) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
		LCD = _LCD;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	601a      	str	r2, [r3, #0]

		switch (LCD->LCD_Driver) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	7a1b      	ldrb	r3, [r3, #8]
 80002fe:	2b03      	cmp	r3, #3
 8000300:	d103      	bne.n	800030a <_ZN10TFT_Driver4initEP9TFT_LCD_t+0x22>

#if defined(TFT_DRIVER_SSD1306)
		case SSD1306:
			SSD1306_Init();
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f002 fda2 	bl	8002e4c <_ZN10TFT_Driver12SSD1306_InitEv>
			break;
 8000308:	e000      	b.n	800030c <_ZN10TFT_Driver4initEP9TFT_LCD_t+0x24>
			  ST7735S_init();
			  break;
#endif

		default:
			break;
 800030a:	bf00      	nop
		}
	}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <_ZN10TFT_Driver6UpdateEv>:

	void Update(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
		switch (LCD->LCD_Driver) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	7a1b      	ldrb	r3, [r3, #8]
 8000322:	2b03      	cmp	r3, #3
 8000324:	d103      	bne.n	800032e <_ZN10TFT_Driver6UpdateEv+0x1a>

#if defined(TFT_DRIVER_SSD1306)
		case SSD1306:
			SSD1306_UpdateScreen();
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f002 fe1c 	bl	8002f64 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
			break;
 800032c:	e000      	b.n	8000330 <_ZN10TFT_Driver6UpdateEv+0x1c>
			uTFT_USB_Update();
			break;
#endif

		default:
			break;
 800032e:	bf00      	nop
		}
	}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <_ZN3TFT4initEP9TFT_LCD_t>:

	int16_t _xPivot;   // TFT x pivot point coordinate for rotated Sprites
	int16_t _yPivot;   // TFT x pivot point coordinate for rotated Sprites

	////////////////////////////////////////////////////////////////////////////////////////////
	void init(TFT_LCD_t *_LCD) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
		LCD = _LCD;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	601a      	str	r2, [r3, #0]
		driver.init(_LCD);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3304      	adds	r3, #4
 800034c:	6839      	ldr	r1, [r7, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ffca 	bl	80002e8 <_ZN10TFT_Driver4initEP9TFT_LCD_t>
	}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <_ZN3TFT12SetFontColorEtt>:

	void Gradient_Vertical(u32 x0, u32 y0, u32 w, u32 h,
			u8 otR, u8 otG, u8 otB, u8 doR, u8 doG,	u8 doB);

	//Работает на все фонты//////////////////////////////////////////////////////////////
	void SetFontColor(u16 Color, u16 BColor) {
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	807b      	strh	r3, [r7, #2]
 8000368:	4613      	mov	r3, r2
 800036a:	803b      	strh	r3, [r7, #0]
		uTFT.Color = Color;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	887a      	ldrh	r2, [r7, #2]
 8000370:	831a      	strh	r2, [r3, #24]
		uTFT.BColor = BColor;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	883a      	ldrh	r2, [r7, #0]
 8000376:	835a      	strh	r2, [r3, #26]
	}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr

08000382 <_ZN3TFT6GotoXYEss>:
		uTFT.Color = Color;
	}
	void SetBColor(u16 BColor) {
		uTFT.BColor = BColor;
	}
	void GotoXY(i16 x, i16 y) {
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	460b      	mov	r3, r1
 800038c:	807b      	strh	r3, [r7, #2]
 800038e:	4613      	mov	r3, r2
 8000390:	803b      	strh	r3, [r7, #0]
		uTFT.CurrentX = x;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	887a      	ldrh	r2, [r7, #2]
 8000396:	829a      	strh	r2, [r3, #20]
		uTFT.CurrentY = y;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	883a      	ldrh	r2, [r7, #0]
 800039c:	82da      	strh	r2, [r3, #22]
	}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <_ZL15FontClassicPutcP3TFTcP9FontDef_th>:
  * @param  ch символ.
  * @param  Font указатель на структуру
  * @param  NoBack true если не нужен задний фон за символом, по умолчанию 0
  * @retval ch status
  */
static inline char FontClassicPutc(TFT * tft, char ch, FontDef_t* Font, uint8_t NoBack ) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	607a      	str	r2, [r7, #4]
 80003b2:	461a      	mov	r2, r3
 80003b4:	460b      	mov	r3, r1
 80003b6:	72fb      	strb	r3, [r7, #11]
 80003b8:	4613      	mov	r3, r2
 80003ba:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	if (NoBack)
 80003bc:	7abb      	ldrb	r3, [r7, #10]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d042      	beq.n	8000448 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0xa0>
	for (i = 0; i < Font->FontHeight; i++) {
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	e038      	b.n	800043a <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x92>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	685a      	ldr	r2, [r3, #4]
 80003cc:	7afb      	ldrb	r3, [r7, #11]
 80003ce:	3b20      	subs	r3, #32
 80003d0:	6879      	ldr	r1, [r7, #4]
 80003d2:	7849      	ldrb	r1, [r1, #1]
 80003d4:	fb01 f303 	mul.w	r3, r1, r3
 80003d8:	4619      	mov	r1, r3
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	440b      	add	r3, r1
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
 80003ea:	e01d      	b.n	8000428 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x80>
			if ((b << j) & 0x8000) {
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	69bb      	ldr	r3, [r7, #24]
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d012      	beq.n	8000422 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x7a>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000402:	461a      	mov	r2, r3
 8000404:	69bb      	ldr	r3, [r7, #24]
 8000406:	4413      	add	r3, r2
 8000408:	4619      	mov	r1, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000410:	461a      	mov	r2, r3
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	4413      	add	r3, r2
 8000416:	461a      	mov	r2, r3
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	8b1b      	ldrh	r3, [r3, #24]
 800041c:	68f8      	ldr	r0, [r7, #12]
 800041e:	f002 fddb 	bl	8002fd8 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	3301      	adds	r3, #1
 8000426:	61bb      	str	r3, [r7, #24]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	4293      	cmp	r3, r2
 8000432:	d3db      	bcc.n	80003ec <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x44>
	for (i = 0; i < Font->FontHeight; i++) {
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	3301      	adds	r3, #1
 8000438:	61fb      	str	r3, [r7, #28]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	785b      	ldrb	r3, [r3, #1]
 800043e:	461a      	mov	r2, r3
 8000440:	69fb      	ldr	r3, [r7, #28]
 8000442:	4293      	cmp	r3, r2
 8000444:	d3c0      	bcc.n	80003c8 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x20>
 8000446:	e055      	b.n	80004f4 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x14c>
		}
	}
	else
	for (i = 0; i < Font->FontHeight; i++) {
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
 800044c:	e04c      	b.n	80004e8 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x140>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	685a      	ldr	r2, [r3, #4]
 8000452:	7afb      	ldrb	r3, [r7, #11]
 8000454:	3b20      	subs	r3, #32
 8000456:	6879      	ldr	r1, [r7, #4]
 8000458:	7849      	ldrb	r1, [r1, #1]
 800045a:	fb01 f303 	mul.w	r3, r1, r3
 800045e:	4619      	mov	r1, r3
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	440b      	add	r3, r1
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	4413      	add	r3, r2
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
 8000470:	e031      	b.n	80004d6 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x12e>
			if ((b << j) & 0x8000) {
 8000472:	697a      	ldr	r2, [r7, #20]
 8000474:	69bb      	ldr	r3, [r7, #24]
 8000476:	fa02 f303 	lsl.w	r3, r2, r3
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d013      	beq.n	80004aa <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x102>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000488:	461a      	mov	r2, r3
 800048a:	69bb      	ldr	r3, [r7, #24]
 800048c:	4413      	add	r3, r2
 800048e:	4619      	mov	r1, r3
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000496:	461a      	mov	r2, r3
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	4413      	add	r3, r2
 800049c:	461a      	mov	r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	8b1b      	ldrh	r3, [r3, #24]
 80004a2:	68f8      	ldr	r0, [r7, #12]
 80004a4:	f002 fd98 	bl	8002fd8 <_ZN3TFT8SetPixelEllt>
 80004a8:	e012      	b.n	80004d0 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x128>
			else {
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80004b0:	461a      	mov	r2, r3
 80004b2:	69bb      	ldr	r3, [r7, #24]
 80004b4:	4413      	add	r3, r2
 80004b6:	4619      	mov	r1, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80004be:	461a      	mov	r2, r3
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	4413      	add	r3, r2
 80004c4:	461a      	mov	r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	8b5b      	ldrh	r3, [r3, #26]
 80004ca:	68f8      	ldr	r0, [r7, #12]
 80004cc:	f002 fd84 	bl	8002fd8 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 80004d0:	69bb      	ldr	r3, [r7, #24]
 80004d2:	3301      	adds	r3, #1
 80004d4:	61bb      	str	r3, [r7, #24]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	69bb      	ldr	r3, [r7, #24]
 80004de:	4293      	cmp	r3, r2
 80004e0:	d3c7      	bcc.n	8000472 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0xca>
	for (i = 0; i < Font->FontHeight; i++) {
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	3301      	adds	r3, #1
 80004e6:	61fb      	str	r3, [r7, #28]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	785b      	ldrb	r3, [r3, #1]
 80004ec:	461a      	mov	r2, r3
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d3ac      	bcc.n	800044e <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0xa6>
		}
	}

	/* Increase pointer */
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b29b      	uxth	r3, r3
 8000502:	4413      	add	r3, r2
 8000504:	b29b      	uxth	r3, r3
 8000506:	3b01      	subs	r3, #1
 8000508:	b29b      	uxth	r3, r3
 800050a:	b21a      	sxth	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	829a      	strh	r2, [r3, #20]

	/* Return character written */
	return ch;
 8000510:	7afb      	ldrb	r3, [r7, #11]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3720      	adds	r7, #32
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_ZL15FontClassicPutsP3TFTPcP9FontDef_th>:
  * @param  sMasterConfig pointer to a TIM_MasterConfigTypeDef structure that
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
static inline char FontClassicPuts(TFT * tft, char* str, FontDef_t* Font, uint8_t NoBack) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b084      	sub	sp, #16
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
 8000526:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 8000528:	e017      	b.n	800055a <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x40>
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	7819      	ldrb	r1, [r3, #0]
 800052e:	78fb      	ldrb	r3, [r7, #3]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	f7ff ff38 	bl	80003a8 <_ZL15FontClassicPutcP3TFTcP9FontDef_th>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	429a      	cmp	r2, r3
 8000542:	bf14      	ite	ne
 8000544:	2301      	movne	r3, #1
 8000546:	2300      	moveq	r3, #0
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x3a>
			return *str;
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	e008      	b.n	8000566 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x4c>
		}
		str++;
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	3301      	adds	r3, #1
 8000558:	60bb      	str	r3, [r7, #8]
	while (*str) {
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d1e3      	bne.n	800052a <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x10>
	}
	/* Everything OK, zero should be returned */
	return *str;
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	781b      	ldrb	r3, [r3, #0]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <_ZN7ADS12438XferByteEh>:
	ADS124xRegister ADSregister;

	uint32_t ValueData;

	// Получить байт, одновременно отправить данные
	unsigned char XferByte(uint8_t txData)
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
	{
		uint8_t rxData;
		while(hspi1.State == HAL_SPI_STATE_BUSY);
 800057c:	bf00      	nop
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <_ZN7ADS12438XferByteEh+0x48>)
 8000580:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b02      	cmp	r3, #2
 8000588:	bf0c      	ite	eq
 800058a:	2301      	moveq	r3, #1
 800058c:	2300      	movne	r3, #0
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f4      	bne.n	800057e <_ZN7ADS12438XferByteEh+0xe>
		HAL_StatusTypeDef s = HAL_SPI_TransmitReceive( &hspi1, &txData, &rxData, 1, 1000);
 8000594:	f107 020e 	add.w	r2, r7, #14
 8000598:	1cf9      	adds	r1, r7, #3
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2301      	movs	r3, #1
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <_ZN7ADS12438XferByteEh+0x48>)
 80005a4:	f001 ffc2 	bl	800252c <HAL_SPI_TransmitReceive>
 80005a8:	4603      	mov	r3, r0
 80005aa:	73fb      	strb	r3, [r7, #15]
		return (unsigned char) rxData;
 80005ac:	7bbb      	ldrb	r3, [r7, #14]
	}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000674 	.word	0x20000674

080005bc <_ZN7ADS124315readAllRegisterEv>:


	void readAllRegister()
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	{
		ADS124x_CS_0;
 80005c4:	2200      	movs	r2, #0
 80005c6:	2110      	movs	r1, #16
 80005c8:	484c      	ldr	r0, [pc, #304]	; (80006fc <_ZN7ADS124315readAllRegisterEv+0x140>)
 80005ca:	f000 fe67 	bl	800129c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fbd8 	bl	8000d84 <HAL_Delay>

		XferByte(0x10);
 80005d4:	2110      	movs	r1, #16
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ffca 	bl	8000570 <_ZN7ADS12438XferByteEh>
		XferByte(15);
 80005dc:	210f      	movs	r1, #15
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ffc6 	bl	8000570 <_ZN7ADS12438XferByteEh>

		ADSregister.SETUP = XferByte(0);
 80005e4:	2100      	movs	r1, #0
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff ffc2 	bl	8000570 <_ZN7ADS12438XferByteEh>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	701a      	strb	r2, [r3, #0]
		ADSregister.MUX=XferByte(0);
 80005f4:	2100      	movs	r1, #0
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff ffba 	bl	8000570 <_ZN7ADS12438XferByteEh>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	705a      	strb	r2, [r3, #1]
		ADSregister.ACR=XferByte(0);
 8000604:	2100      	movs	r1, #0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff ffb2 	bl	8000570 <_ZN7ADS12438XferByteEh>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	709a      	strb	r2, [r3, #2]
		ADSregister.ODAC=XferByte(0);
 8000614:	2100      	movs	r1, #0
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff ffaa 	bl	8000570 <_ZN7ADS12438XferByteEh>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	70da      	strb	r2, [r3, #3]
		ADSregister.DIO=XferByte(0);
 8000624:	2100      	movs	r1, #0
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ffa2 	bl	8000570 <_ZN7ADS12438XferByteEh>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	711a      	strb	r2, [r3, #4]
		ADSregister.DIR=XferByte(0);
 8000634:	2100      	movs	r1, #0
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ff9a 	bl	8000570 <_ZN7ADS12438XferByteEh>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	715a      	strb	r2, [r3, #5]
		ADSregister.IOCON=XferByte(0);
 8000644:	2100      	movs	r1, #0
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff ff92 	bl	8000570 <_ZN7ADS12438XferByteEh>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	719a      	strb	r2, [r3, #6]
		ADSregister.OCR0=XferByte(0);
 8000654:	2100      	movs	r1, #0
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ff8a 	bl	8000570 <_ZN7ADS12438XferByteEh>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	71da      	strb	r2, [r3, #7]
		ADSregister.OCR1=XferByte(0);
 8000664:	2100      	movs	r1, #0
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff82 	bl	8000570 <_ZN7ADS12438XferByteEh>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	721a      	strb	r2, [r3, #8]
		ADSregister.OCR2=XferByte(0);
 8000674:	2100      	movs	r1, #0
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ff7a 	bl	8000570 <_ZN7ADS12438XferByteEh>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	725a      	strb	r2, [r3, #9]
		ADSregister.FSR0=XferByte(0);
 8000684:	2100      	movs	r1, #0
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ff72 	bl	8000570 <_ZN7ADS12438XferByteEh>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	729a      	strb	r2, [r3, #10]
		ADSregister.FSR1=XferByte(0);
 8000694:	2100      	movs	r1, #0
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff6a 	bl	8000570 <_ZN7ADS12438XferByteEh>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	72da      	strb	r2, [r3, #11]
		ADSregister.FSR2=XferByte(0);
 80006a4:	2100      	movs	r1, #0
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ff62 	bl	8000570 <_ZN7ADS12438XferByteEh>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	731a      	strb	r2, [r3, #12]
		ADSregister.DOR2=XferByte(0);
 80006b4:	2100      	movs	r1, #0
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff5a 	bl	8000570 <_ZN7ADS12438XferByteEh>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	735a      	strb	r2, [r3, #13]
		ADSregister.DOR1=XferByte(0);
 80006c4:	2100      	movs	r1, #0
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ff52 	bl	8000570 <_ZN7ADS12438XferByteEh>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	739a      	strb	r2, [r3, #14]
		ADSregister.DOR0=XferByte(0);
 80006d4:	2100      	movs	r1, #0
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff4a 	bl	8000570 <_ZN7ADS12438XferByteEh>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	73da      	strb	r2, [r3, #15]
		HAL_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 fb4d 	bl	8000d84 <HAL_Delay>
		ADS124x_CS_1;
 80006ea:	2201      	movs	r2, #1
 80006ec:	2110      	movs	r1, #16
 80006ee:	4803      	ldr	r0, [pc, #12]	; (80006fc <_ZN7ADS124315readAllRegisterEv+0x140>)
 80006f0:	f000 fdd4 	bl	800129c <HAL_GPIO_WritePin>

	}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40010800 	.word	0x40010800

08000700 <_ZN8classLog4initEP20__UART_HandleTypeDef>:
#define COLOR_RESET   "\33[0m"

class classLog {
public:

	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <_ZN8classLog7printlnEPKc>:
			strcat(str, "\n");
			HAL_UART_Transmit(huart, (uint8_t*) str, strlen(str), 1000);

	}

	void println(char const *format) {
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
      HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 800072c:	6838      	ldr	r0, [r7, #0]
 800072e:	f7ff fd0d 	bl	800014c <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	6839      	ldr	r1, [r7, #0]
 800073c:	4620      	mov	r0, r4
 800073e:	f002 f99b 	bl	8002a78 <HAL_UART_Transmit>
	}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bd90      	pop	{r4, r7, pc}

0800074a <_ZN8classLog1iEPKc>:

	UART_HandleTypeDef *huart;

	void w(char const *const format) {colorStringln(11, format);}
	void e(char const *const format) {colorStringln(9, format);}
	void i(char const *const format) {colorStringln(45, format);}
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	212d      	movs	r1, #45	; 0x2d
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f002 fb3d 	bl	8002dd8 <_ZN8classLog13colorStringlnEiPKc>
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <setup>:

ADS1243 adc;

classLog Log;

extern "C" void setup() {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af02      	add	r7, sp, #8
	tft.init(&LCD_0);
 800076e:	4919      	ldr	r1, [pc, #100]	; (80007d4 <setup+0x6c>)
 8000770:	4819      	ldr	r0, [pc, #100]	; (80007d8 <setup+0x70>)
 8000772:	f7ff fde1 	bl	8000338 <_ZN3TFT4initEP9TFT_LCD_t>
	tft.Fill1(0);
 8000776:	2100      	movs	r1, #0
 8000778:	4817      	ldr	r0, [pc, #92]	; (80007d8 <setup+0x70>)
 800077a:	f002 fca7 	bl	80030cc <_ZN3TFT5Fill1Et>
	tft.driver.Update();
 800077e:	4817      	ldr	r0, [pc, #92]	; (80007dc <setup+0x74>)
 8000780:	f7ff fdc8 	bl	8000314 <_ZN10TFT_Driver6UpdateEv>
	tft.SetFontColor(1, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2101      	movs	r1, #1
 8000788:	4813      	ldr	r0, [pc, #76]	; (80007d8 <setup+0x70>)
 800078a:	f7ff fde7 	bl	800035c <_ZN3TFT12SetFontColorEtt>
	tft.GotoXY(20, 20);
 800078e:	2214      	movs	r2, #20
 8000790:	2114      	movs	r1, #20
 8000792:	4811      	ldr	r0, [pc, #68]	; (80007d8 <setup+0x70>)
 8000794:	f7ff fdf5 	bl	8000382 <_ZN3TFT6GotoXYEss>
	FontClassicPuts(&tft, (char*) "1111", &Font_7x10, 0);
 8000798:	2300      	movs	r3, #0
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <setup+0x78>)
 800079c:	4911      	ldr	r1, [pc, #68]	; (80007e4 <setup+0x7c>)
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <setup+0x70>)
 80007a0:	f7ff febb 	bl	800051a <_ZL15FontClassicPutsP3TFTPcP9FontDef_th>
	tft.LineH(10, 10, 50, 1);
 80007a4:	2301      	movs	r3, #1
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2332      	movs	r3, #50	; 0x32
 80007aa:	220a      	movs	r2, #10
 80007ac:	210a      	movs	r1, #10
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <setup+0x70>)
 80007b0:	f002 fcbc 	bl	800312c <_ZN3TFT5LineHElllt>
	tft.driver.Update();
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <setup+0x74>)
 80007b6:	f7ff fdad 	bl	8000314 <_ZN10TFT_Driver6UpdateEv>

	Log.init(&huart1);
 80007ba:	490b      	ldr	r1, [pc, #44]	; (80007e8 <setup+0x80>)
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <setup+0x84>)
 80007be:	f7ff ff9f 	bl	8000700 <_ZN8classLog4initEP20__UART_HandleTypeDef>
	Log.i("Start");
 80007c2:	490b      	ldr	r1, [pc, #44]	; (80007f0 <setup+0x88>)
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <setup+0x84>)
 80007c6:	f7ff ffc0 	bl	800074a <_ZN8classLog1iEPKc>
//	Log.println("FSR2  0Ch %d", adc.readRegister(12));
//	Log.println("DOR2  0Dh %d", adc.readRegister(13));
//	Log.println("DOR1  0Eh %d", adc.readRegister(14));
//	Log.println("DOR0  0Fh %d", adc.readRegister(15));

	loop();
 80007ca:	f000 f813 	bl	80007f4 <_Z4loopv>
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000530 	.word	0x20000530
 80007dc:	20000534 	.word	0x20000534
 80007e0:	20000068 	.word	0x20000068
 80007e4:	08003d40 	.word	0x08003d40
 80007e8:	200006d0 	.word	0x200006d0
 80007ec:	2000056c 	.word	0x2000056c
 80007f0:	08003d48 	.word	0x08003d48

080007f4 <_Z4loopv>:
uint32_t v;
void loop() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	while (1) {

		adc.readAllRegister();
 80007f8:	480e      	ldr	r0, [pc, #56]	; (8000834 <_Z4loopv+0x40>)
 80007fa:	f7ff fedf 	bl	80005bc <_ZN7ADS124315readAllRegisterEv>

		v = (adc.ADSregister.DOR2<<16) | (adc.ADSregister.DOR1<<8) | adc.ADSregister.DOR0;
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <_Z4loopv+0x40>)
 8000800:	7b5b      	ldrb	r3, [r3, #13]
 8000802:	041a      	lsls	r2, r3, #16
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <_Z4loopv+0x40>)
 8000806:	7b9b      	ldrb	r3, [r3, #14]
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	4313      	orrs	r3, r2
 800080c:	4a09      	ldr	r2, [pc, #36]	; (8000834 <_Z4loopv+0x40>)
 800080e:	7bd2      	ldrb	r2, [r2, #15]
 8000810:	4313      	orrs	r3, r2
 8000812:	461a      	mov	r2, r3
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <_Z4loopv+0x44>)
 8000816:	601a      	str	r2, [r3, #0]

		//Log.clear();
		Log.println("----");
 8000818:	4908      	ldr	r1, [pc, #32]	; (800083c <_Z4loopv+0x48>)
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <_Z4loopv+0x4c>)
 800081c:	f7ff ff7e 	bl	800071c <_ZN8classLog7printlnEPKc>
		Log.println("SETUP 00h %d", adc.ADSregister.SETUP);
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <_Z4loopv+0x40>)
 8000822:	4908      	ldr	r1, [pc, #32]	; (8000844 <_Z4loopv+0x50>)
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <_Z4loopv+0x4c>)
 8000826:	f000 f80f 	bl	8000848 <_ZN8classLog7printlnIJhEEEvPKcDpRKT_>
//		Log.println("FSR2  0Ch %d", adc.readRegister(12));
//		Log.println("DOR2  0Dh %d", adc.readRegister(13));
//		Log.println("DOR1  0Eh %d", adc.readRegister(14));
//		Log.println("DOR0  0Fh %d", adc.readRegister(15));

		HAL_Delay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 faaa 	bl	8000d84 <HAL_Delay>
		adc.readAllRegister();
 8000830:	e7e2      	b.n	80007f8 <_Z4loopv+0x4>
 8000832:	bf00      	nop
 8000834:	20000558 	.word	0x20000558
 8000838:	20000670 	.word	0x20000670
 800083c:	08003d50 	.word	0x08003d50
 8000840:	2000056c 	.word	0x2000056c
 8000844:	08003d58 	.word	0x08003d58

08000848 <_ZN8classLog7printlnIJhEEEvPKcDpRKT_>:
	void println(char const *const format, Args const &... args) noexcept {
 8000848:	b5b0      	push	{r4, r5, r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
			sprintf(str, format, args ...);
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	f002 fdb1 	bl	80033c4 <siprintf>
			strcat(str, "\n");
 8000862:	68fc      	ldr	r4, [r7, #12]
 8000864:	4620      	mov	r0, r4
 8000866:	f7ff fc71 	bl	800014c <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	4423      	add	r3, r4
 800086e:	490c      	ldr	r1, [pc, #48]	; (80008a0 <_ZN8classLog7printlnIJhEEEvPKcDpRKT_+0x58>)
 8000870:	461a      	mov	r2, r3
 8000872:	460b      	mov	r3, r1
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(huart, (uint8_t*) str, strlen(str), 1000);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 800087e:	68fd      	ldr	r5, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fc62 	bl	800014c <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	b29a      	uxth	r2, r3
 800088c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000890:	4629      	mov	r1, r5
 8000892:	4620      	mov	r0, r4
 8000894:	f002 f8f0 	bl	8002a78 <HAL_UART_Transmit>
	}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bdb0      	pop	{r4, r5, r7, pc}
 80008a0:	08003d68 	.word	0x08003d68

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a8:	f000 fa0a 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ac:	f000 f80b 	bl	80008c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b0:	f7ff fc54 	bl	800015c <MX_GPIO_Init>
  MX_I2C2_Init();
 80008b4:	f7ff fcaa 	bl	800020c <MX_I2C2_Init>
  MX_SPI1_Init();
 80008b8:	f000 f850 	bl	800095c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008bc:	f000 f964 	bl	8000b88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80008c0:	f7ff ff52 	bl	8000768 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <main+0x20>

080008c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b090      	sub	sp, #64	; 0x40
 80008ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	2228      	movs	r2, #40	; 0x28
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fd95 	bl	8003404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f6:	2301      	movs	r3, #1
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000902:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000904:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000908:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f978 	bl	8001c04 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800091a:	f000 f819 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2302      	movs	r3, #2
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2102      	movs	r1, #2
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fbe5 	bl	8002108 <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000944:	f000 f804 	bl	8000950 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3740      	adds	r7, #64	; 0x40
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_SPI1_Init+0x64>)
 8000962:	4a18      	ldr	r2, [pc, #96]	; (80009c4 <MX_SPI1_Init+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_SPI1_Init+0x64>)
 8000968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800096c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_SPI1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_SPI1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_SPI1_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_SPI1_Init+0x64>)
 8000982:	2201      	movs	r2, #1
 8000984:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_SPI1_Init+0x64>)
 8000988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_SPI1_Init+0x64>)
 8000990:	2228      	movs	r2, #40	; 0x28
 8000992:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_SPI1_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_SPI1_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_SPI1_Init+0x64>)
 80009a8:	220a      	movs	r2, #10
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_SPI1_Init+0x64>)
 80009ae:	f001 fd39 	bl	8002424 <HAL_SPI_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009b8:	f7ff ffca 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000674 	.word	0x20000674
 80009c4:	40013000 	.word	0x40013000

080009c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d12f      	bne.n	8000a48 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_SPI_MspInit+0x8c>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_SPI_MspInit+0x8c>)
 80009ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_SPI_MspInit+0x8c>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_SPI_MspInit+0x8c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <HAL_SPI_MspInit+0x8c>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_SPI_MspInit+0x8c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a18:	23a0      	movs	r3, #160	; 0xa0
 8000a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480b      	ldr	r0, [pc, #44]	; (8000a58 <HAL_SPI_MspInit+0x90>)
 8000a2c:	f000 fab2 	bl	8000f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a30:	2340      	movs	r3, #64	; 0x40
 8000a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_SPI_MspInit+0x90>)
 8000a44:	f000 faa6 	bl	8000f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40013000 	.word	0x40013000
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010800 	.word	0x40010800

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6193      	str	r3, [r2, #24]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x5c>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_MspInit+0x60>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_MspInit+0x60>)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010000 	.word	0x40010000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 f921 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f002 fc68 	bl	8003414 <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20005000 	.word	0x20005000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	200006cc 	.word	0x200006cc
 8000b78:	20000868 	.word	0x20000868

08000b7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART1_UART_Init+0x48>)
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USART1_UART_Init+0x48>)
 8000b94:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <MX_USART1_UART_Init+0x50>)
 8000b96:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_USART1_UART_Init+0x48>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART1_UART_Init+0x48>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_USART1_UART_Init+0x48>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART1_UART_Init+0x48>)
 8000bac:	220c      	movs	r2, #12
 8000bae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_USART1_UART_Init+0x48>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART1_UART_Init+0x48>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_USART1_UART_Init+0x48>)
 8000bbe:	f001 ff0b 	bl	80029d8 <HAL_UART_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000bc8:	f7ff fec2 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200006d0 	.word	0x200006d0
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	001e8480 	.word	0x001e8480

08000bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <HAL_UART_MspInit+0x8c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d131      	bne.n	8000c60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_UART_MspInit+0x90>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <HAL_UART_MspInit+0x90>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0x90>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x90>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <HAL_UART_MspInit+0x90>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_UART_MspInit+0x90>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <HAL_UART_MspInit+0x94>)
 8000c42:	f000 f9a7 	bl	8000f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_UART_MspInit+0x94>)
 8000c5c:	f000 f99a 	bl	8000f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c60:	bf00      	nop
 8000c62:	3720      	adds	r7, #32
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010800 	.word	0x40010800

08000c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff ff82 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c7a:	490c      	ldr	r1, [pc, #48]	; (8000cac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c90:	4c09      	ldr	r4, [pc, #36]	; (8000cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f002 fbbf 	bl	8003420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca2:	f7ff fdff 	bl	80008a4 <main>
  bx lr
 8000ca6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000cb0:	080045a8 	.word	0x080045a8
  ldr r2, =_sbss
 8000cb4:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000cb8:	20000868 	.word	0x20000868

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_Init+0x28>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_Init+0x28>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f92b 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	200f      	movs	r0, #15
 8000cd8:	f000 f808 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff febe 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40022000 	.word	0x40022000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x54>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x58>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f935 	bl	8000f7a <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00e      	b.n	8000d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d80a      	bhi.n	8000d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f90b 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d2c:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_InitTick+0x5c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2000005c 	.word	0x2000005c
 8000d44:	20000064 	.word	0x20000064
 8000d48:	20000060 	.word	0x20000060

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x20>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <HAL_IncTick+0x20>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	20000064 	.word	0x20000064
 8000d6c:	20000718 	.word	0x20000718

08000d70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <HAL_GetTick+0x10>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	20000718 	.word	0x20000718

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff fff0 	bl	8000d70 <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffe0 	bl	8000d70 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000064 	.word	0x20000064

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff90 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff49 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff5e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff90 	bl	8000e84 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5f 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffb0 	bl	8000ee8 <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	e169      	b.n	800127c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8158 	bne.w	8001276 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4a9a      	ldr	r2, [pc, #616]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d05e      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fd0:	4a98      	ldr	r2, [pc, #608]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d875      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fd6:	4a98      	ldr	r2, [pc, #608]	; (8001238 <HAL_GPIO_Init+0x2a4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d058      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fdc:	4a96      	ldr	r2, [pc, #600]	; (8001238 <HAL_GPIO_Init+0x2a4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d86f      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fe2:	4a96      	ldr	r2, [pc, #600]	; (800123c <HAL_GPIO_Init+0x2a8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d052      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fe8:	4a94      	ldr	r2, [pc, #592]	; (800123c <HAL_GPIO_Init+0x2a8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d869      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fee:	4a94      	ldr	r2, [pc, #592]	; (8001240 <HAL_GPIO_Init+0x2ac>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d04c      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000ff4:	4a92      	ldr	r2, [pc, #584]	; (8001240 <HAL_GPIO_Init+0x2ac>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d863      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000ffa:	4a92      	ldr	r2, [pc, #584]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d046      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8001000:	4a90      	ldr	r2, [pc, #576]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d85d      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8001006:	2b12      	cmp	r3, #18
 8001008:	d82a      	bhi.n	8001060 <HAL_GPIO_Init+0xcc>
 800100a:	2b12      	cmp	r3, #18
 800100c:	d859      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 800100e:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <HAL_GPIO_Init+0x80>)
 8001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001014:	0800108f 	.word	0x0800108f
 8001018:	08001069 	.word	0x08001069
 800101c:	0800107b 	.word	0x0800107b
 8001020:	080010bd 	.word	0x080010bd
 8001024:	080010c3 	.word	0x080010c3
 8001028:	080010c3 	.word	0x080010c3
 800102c:	080010c3 	.word	0x080010c3
 8001030:	080010c3 	.word	0x080010c3
 8001034:	080010c3 	.word	0x080010c3
 8001038:	080010c3 	.word	0x080010c3
 800103c:	080010c3 	.word	0x080010c3
 8001040:	080010c3 	.word	0x080010c3
 8001044:	080010c3 	.word	0x080010c3
 8001048:	080010c3 	.word	0x080010c3
 800104c:	080010c3 	.word	0x080010c3
 8001050:	080010c3 	.word	0x080010c3
 8001054:	080010c3 	.word	0x080010c3
 8001058:	08001071 	.word	0x08001071
 800105c:	08001085 	.word	0x08001085
 8001060:	4a79      	ldr	r2, [pc, #484]	; (8001248 <HAL_GPIO_Init+0x2b4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001066:	e02c      	b.n	80010c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e029      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	3304      	adds	r3, #4
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e024      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	3308      	adds	r3, #8
 8001080:	623b      	str	r3, [r7, #32]
          break;
 8001082:	e01f      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	330c      	adds	r3, #12
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e01a      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001096:	2304      	movs	r3, #4
 8001098:	623b      	str	r3, [r7, #32]
          break;
 800109a:	e013      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d105      	bne.n	80010b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a4:	2308      	movs	r3, #8
 80010a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	611a      	str	r2, [r3, #16]
          break;
 80010ae:	e009      	b.n	80010c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b0:	2308      	movs	r3, #8
 80010b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	615a      	str	r2, [r3, #20]
          break;
 80010ba:	e003      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          break;
 80010c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2bff      	cmp	r3, #255	; 0xff
 80010c8:	d801      	bhi.n	80010ce <HAL_GPIO_Init+0x13a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	e001      	b.n	80010d2 <HAL_GPIO_Init+0x13e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3304      	adds	r3, #4
 80010d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2bff      	cmp	r3, #255	; 0xff
 80010d8:	d802      	bhi.n	80010e0 <HAL_GPIO_Init+0x14c>
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x152>
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	3b08      	subs	r3, #8
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	210f      	movs	r1, #15
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	401a      	ands	r2, r3
 80010f8:	6a39      	ldr	r1, [r7, #32]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	431a      	orrs	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80b1 	beq.w	8001276 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001114:	4b4d      	ldr	r3, [pc, #308]	; (800124c <HAL_GPIO_Init+0x2b8>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a4c      	ldr	r2, [pc, #304]	; (800124c <HAL_GPIO_Init+0x2b8>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b4a      	ldr	r3, [pc, #296]	; (800124c <HAL_GPIO_Init+0x2b8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_GPIO_Init+0x2bc>)
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a40      	ldr	r2, [pc, #256]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d013      	beq.n	8001180 <HAL_GPIO_Init+0x1ec>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3f      	ldr	r2, [pc, #252]	; (8001258 <HAL_GPIO_Init+0x2c4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d00d      	beq.n	800117c <HAL_GPIO_Init+0x1e8>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3e      	ldr	r2, [pc, #248]	; (800125c <HAL_GPIO_Init+0x2c8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_Init+0x1e4>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a3d      	ldr	r2, [pc, #244]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d101      	bne.n	8001174 <HAL_GPIO_Init+0x1e0>
 8001170:	2303      	movs	r3, #3
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001174:	2304      	movs	r3, #4
 8001176:	e004      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001178:	2302      	movs	r3, #2
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <HAL_GPIO_Init+0x1ee>
 8001180:	2300      	movs	r3, #0
 8001182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4093      	lsls	r3, r2
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001192:	492f      	ldr	r1, [pc, #188]	; (8001250 <HAL_GPIO_Init+0x2bc>)
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	492c      	ldr	r1, [pc, #176]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	608b      	str	r3, [r1, #8]
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4928      	ldr	r1, [pc, #160]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	4922      	ldr	r1, [pc, #136]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	60cb      	str	r3, [r1, #12]
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	491e      	ldr	r1, [pc, #120]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4918      	ldr	r1, [pc, #96]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	43db      	mvns	r3, r3
 8001212:	4914      	ldr	r1, [pc, #80]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001214:	4013      	ands	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d021      	beq.n	8001268 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	490e      	ldr	r1, [pc, #56]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	e021      	b.n	8001276 <HAL_GPIO_Init+0x2e2>
 8001232:	bf00      	nop
 8001234:	10320000 	.word	0x10320000
 8001238:	10310000 	.word	0x10310000
 800123c:	10220000 	.word	0x10220000
 8001240:	10210000 	.word	0x10210000
 8001244:	10120000 	.word	0x10120000
 8001248:	10110000 	.word	0x10110000
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	40010800 	.word	0x40010800
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40011000 	.word	0x40011000
 8001260:	40011400 	.word	0x40011400
 8001264:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_GPIO_Init+0x304>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	43db      	mvns	r3, r3
 8001270:	4909      	ldr	r1, [pc, #36]	; (8001298 <HAL_GPIO_Init+0x304>)
 8001272:	4013      	ands	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	3301      	adds	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	f47f ae8e 	bne.w	8000fa8 <HAL_GPIO_Init+0x14>
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	372c      	adds	r7, #44	; 0x2c
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	611a      	str	r2, [r3, #16]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e12b      	b.n	8001536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d106      	bne.n	80012f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7fe ffb8 	bl	8000268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2224      	movs	r2, #36	; 0x24
 80012fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800131e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800132e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001330:	f001 f832 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8001334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4a81      	ldr	r2, [pc, #516]	; (8001540 <HAL_I2C_Init+0x274>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d807      	bhi.n	8001350 <HAL_I2C_Init+0x84>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4a80      	ldr	r2, [pc, #512]	; (8001544 <HAL_I2C_Init+0x278>)
 8001344:	4293      	cmp	r3, r2
 8001346:	bf94      	ite	ls
 8001348:	2301      	movls	r3, #1
 800134a:	2300      	movhi	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	e006      	b.n	800135e <HAL_I2C_Init+0x92>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a7d      	ldr	r2, [pc, #500]	; (8001548 <HAL_I2C_Init+0x27c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	bf94      	ite	ls
 8001358:	2301      	movls	r3, #1
 800135a:	2300      	movhi	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0e7      	b.n	8001536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4a78      	ldr	r2, [pc, #480]	; (800154c <HAL_I2C_Init+0x280>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0c9b      	lsrs	r3, r3, #18
 8001370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	430a      	orrs	r2, r1
 8001384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a6a      	ldr	r2, [pc, #424]	; (8001540 <HAL_I2C_Init+0x274>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d802      	bhi.n	80013a0 <HAL_I2C_Init+0xd4>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3301      	adds	r3, #1
 800139e:	e009      	b.n	80013b4 <HAL_I2C_Init+0xe8>
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4a69      	ldr	r2, [pc, #420]	; (8001550 <HAL_I2C_Init+0x284>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	3301      	adds	r3, #1
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	495c      	ldr	r1, [pc, #368]	; (8001540 <HAL_I2C_Init+0x274>)
 80013d0:	428b      	cmp	r3, r1
 80013d2:	d819      	bhi.n	8001408 <HAL_I2C_Init+0x13c>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e2:	1c59      	adds	r1, r3, #1
 80013e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013e8:	400b      	ands	r3, r1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00a      	beq.n	8001404 <HAL_I2C_Init+0x138>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1e59      	subs	r1, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013fc:	3301      	adds	r3, #1
 80013fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001402:	e051      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001404:	2304      	movs	r3, #4
 8001406:	e04f      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d111      	bne.n	8001434 <HAL_I2C_Init+0x168>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1e58      	subs	r0, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001422:	3301      	adds	r3, #1
 8001424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf0c      	ite	eq
 800142c:	2301      	moveq	r3, #1
 800142e:	2300      	movne	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	e012      	b.n	800145a <HAL_I2C_Init+0x18e>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1e58      	subs	r0, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	0099      	lsls	r1, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	fbb0 f3f3 	udiv	r3, r0, r3
 800144a:	3301      	adds	r3, #1
 800144c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_Init+0x196>
 800145e:	2301      	movs	r3, #1
 8001460:	e022      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10e      	bne.n	8001488 <HAL_I2C_Init+0x1bc>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1e58      	subs	r0, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6859      	ldr	r1, [r3, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	440b      	add	r3, r1
 8001478:	fbb0 f3f3 	udiv	r3, r0, r3
 800147c:	3301      	adds	r3, #1
 800147e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001486:	e00f      	b.n	80014a8 <HAL_I2C_Init+0x1dc>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e58      	subs	r0, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	0099      	lsls	r1, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	6809      	ldr	r1, [r1, #0]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69da      	ldr	r2, [r3, #28]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6911      	ldr	r1, [r2, #16]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68d2      	ldr	r2, [r2, #12]
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	430b      	orrs	r3, r1
 80014ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2220      	movs	r2, #32
 8001522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	000186a0 	.word	0x000186a0
 8001544:	001e847f 	.word	0x001e847f
 8001548:	003d08ff 	.word	0x003d08ff
 800154c:	431bde83 	.word	0x431bde83
 8001550:	10624dd3 	.word	0x10624dd3

08001554 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	461a      	mov	r2, r3
 8001560:	460b      	mov	r3, r1
 8001562:	817b      	strh	r3, [r7, #10]
 8001564:	4613      	mov	r3, r2
 8001566:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff fc02 	bl	8000d70 <HAL_GetTick>
 800156c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b20      	cmp	r3, #32
 8001578:	f040 80e0 	bne.w	800173c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2319      	movs	r3, #25
 8001582:	2201      	movs	r2, #1
 8001584:	4970      	ldr	r1, [pc, #448]	; (8001748 <HAL_I2C_Master_Transmit+0x1f4>)
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f964 	bl	8001854 <I2C_WaitOnFlagUntilTimeout>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001592:	2302      	movs	r3, #2
 8001594:	e0d3      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_I2C_Master_Transmit+0x50>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e0cc      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d007      	beq.n	80015ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0201 	orr.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2221      	movs	r2, #33	; 0x21
 80015de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2210      	movs	r2, #16
 80015e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	893a      	ldrh	r2, [r7, #8]
 80015fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001600:	b29a      	uxth	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a50      	ldr	r2, [pc, #320]	; (800174c <HAL_I2C_Master_Transmit+0x1f8>)
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800160c:	8979      	ldrh	r1, [r7, #10]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	6a3a      	ldr	r2, [r7, #32]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f89c 	bl	8001750 <I2C_MasterRequestWrite>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e08d      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001638:	e066      	b.n	8001708 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	6a39      	ldr	r1, [r7, #32]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fa22 	bl	8001a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00d      	beq.n	8001666 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	2b04      	cmp	r3, #4
 8001650:	d107      	bne.n	8001662 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001660:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06b      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001680:	b29b      	uxth	r3, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168e:	3b01      	subs	r3, #1
 8001690:	b29a      	uxth	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d11b      	bne.n	80016dc <HAL_I2C_Master_Transmit+0x188>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d017      	beq.n	80016dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	6a39      	ldr	r1, [r7, #32]
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 fa19 	bl	8001b18 <I2C_WaitOnBTFFlagUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00d      	beq.n	8001708 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d107      	bne.n	8001704 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001702:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e01a      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d194      	bne.n	800163a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	e000      	b.n	800173e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800173c:	2302      	movs	r3, #2
  }
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	00100002 	.word	0x00100002
 800174c:	ffff0000 	.word	0xffff0000

08001750 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	460b      	mov	r3, r1
 800175e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d006      	beq.n	800177a <I2C_MasterRequestWrite+0x2a>
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d003      	beq.n	800177a <I2C_MasterRequestWrite+0x2a>
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001778:	d108      	bne.n	800178c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e00b      	b.n	80017a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	2b12      	cmp	r3, #18
 8001792:	d107      	bne.n	80017a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f84f 	bl	8001854 <I2C_WaitOnFlagUntilTimeout>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00d      	beq.n	80017d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ca:	d103      	bne.n	80017d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e035      	b.n	8001844 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e0:	d108      	bne.n	80017f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017e2:	897b      	ldrh	r3, [r7, #10]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017f0:	611a      	str	r2, [r3, #16]
 80017f2:	e01b      	b.n	800182c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017f4:	897b      	ldrh	r3, [r7, #10]
 80017f6:	11db      	asrs	r3, r3, #7
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f003 0306 	and.w	r3, r3, #6
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f063 030f 	orn	r3, r3, #15
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	490e      	ldr	r1, [pc, #56]	; (800184c <I2C_MasterRequestWrite+0xfc>)
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f898 	bl	8001948 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e010      	b.n	8001844 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001822:	897b      	ldrh	r3, [r7, #10]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4907      	ldr	r1, [pc, #28]	; (8001850 <I2C_MasterRequestWrite+0x100>)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 f888 	bl	8001948 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	00010008 	.word	0x00010008
 8001850:	00010002 	.word	0x00010002

08001854 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001864:	e048      	b.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d044      	beq.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7ff fa7f 	bl	8000d70 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <I2C_WaitOnFlagUntilTimeout+0x30>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d139      	bne.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10d      	bne.n	80018aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	43da      	mvns	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4013      	ands	r3, r2
 800189a:	b29b      	uxth	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	e00c      	b.n	80018c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	43da      	mvns	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4013      	ands	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d116      	bne.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e023      	b.n	8001940 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	0c1b      	lsrs	r3, r3, #16
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10d      	bne.n	800191e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	43da      	mvns	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	4013      	ands	r3, r2
 800190e:	b29b      	uxth	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	e00c      	b.n	8001938 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	43da      	mvns	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4013      	ands	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf0c      	ite	eq
 8001930:	2301      	moveq	r3, #1
 8001932:	2300      	movne	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	429a      	cmp	r2, r3
 800193c:	d093      	beq.n	8001866 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001956:	e071      	b.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001966:	d123      	bne.n	80019b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001976:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001980:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2220      	movs	r2, #32
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f043 0204 	orr.w	r2, r3, #4
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e067      	b.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b6:	d041      	beq.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b8:	f7ff f9da 	bl	8000d70 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d302      	bcc.n	80019ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d136      	bne.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10c      	bne.n	80019f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4013      	ands	r3, r2
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf14      	ite	ne
 80019ea:	2301      	movne	r3, #1
 80019ec:	2300      	moveq	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	e00b      	b.n	8001a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	43da      	mvns	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	4013      	ands	r3, r2
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf14      	ite	ne
 8001a04:	2301      	movne	r3, #1
 8001a06:	2300      	moveq	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e021      	b.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	0c1b      	lsrs	r3, r3, #16
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10c      	bne.n	8001a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	43da      	mvns	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4013      	ands	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	e00b      	b.n	8001a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f47f af6d 	bne.w	8001958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a94:	e034      	b.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f886 	bl	8001ba8 <I2C_IsAcknowledgeFailed>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e034      	b.n	8001b10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d028      	beq.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aae:	f7ff f95f 	bl	8000d70 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d302      	bcc.n	8001ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d11d      	bne.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	2b80      	cmp	r3, #128	; 0x80
 8001ad0:	d016      	beq.n	8001b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e007      	b.n	8001b10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	2b80      	cmp	r3, #128	; 0x80
 8001b0c:	d1c3      	bne.n	8001a96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b24:	e034      	b.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f83e 	bl	8001ba8 <I2C_IsAcknowledgeFailed>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e034      	b.n	8001ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d028      	beq.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3e:	f7ff f917 	bl	8000d70 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d11d      	bne.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d016      	beq.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e007      	b.n	8001ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d1c3      	bne.n	8001b26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d11b      	bne.n	8001bf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f043 0204 	orr.w	r2, r3, #4
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e272      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8087 	beq.w	8001d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c24:	4b92      	ldr	r3, [pc, #584]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d00c      	beq.n	8001c4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c30:	4b8f      	ldr	r3, [pc, #572]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d112      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
 8001c3c:	4b8c      	ldr	r3, [pc, #560]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d10b      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4a:	4b89      	ldr	r3, [pc, #548]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d06c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x12c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d168      	bne.n	8001d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e24c      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x76>
 8001c6c:	4b80      	ldr	r3, [pc, #512]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a7f      	ldr	r2, [pc, #508]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e02e      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x98>
 8001c82:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a7a      	ldr	r2, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b78      	ldr	r3, [pc, #480]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xbc>
 8001ca6:	4b72      	ldr	r3, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a71      	ldr	r2, [pc, #452]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6e      	ldr	r2, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001cc0:	4b6b      	ldr	r3, [pc, #428]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6a      	ldr	r2, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a67      	ldr	r2, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f846 	bl	8000d70 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f842 	bl	8000d70 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e200      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe4>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff f832 	bl	8000d70 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f82e 	bl	8000d70 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1ec      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x10c>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d063      	beq.n	8001e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3e:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00b      	beq.n	8001d62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4a:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d11c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d116      	bne.n	8001d90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1c0      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4939      	ldr	r1, [pc, #228]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	e03a      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d98:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ffe7 	bl	8000d70 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da6:	f7fe ffe3 	bl	8000d70 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1a1      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4927      	ldr	r1, [pc, #156]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe ffc6 	bl	8000d70 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7fe ffc2 	bl	8000d70 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e180      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d03a      	beq.n	8001e88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d019      	beq.n	8001e4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7fe ffa6 	bl	8000d70 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7fe ffa2 	bl	8000d70 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e160      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f000 face 	bl	80023e8 <RCC_Delay>
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_OscConfig+0x274>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7fe ff8c 	bl	8000d70 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7fe ff88 	bl	8000d70 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d908      	bls.n	8001e7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e146      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	42420000 	.word	0x42420000
 8001e78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b92      	ldr	r3, [pc, #584]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e9      	bne.n	8001e5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a6 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a87      	ldr	r2, [pc, #540]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b85      	ldr	r3, [pc, #532]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b82      	ldr	r3, [pc, #520]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ece:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7e      	ldr	r2, [pc, #504]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eda:	f7fe ff49 	bl	8000d70 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7fe ff45 	bl	8000d70 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b64      	cmp	r3, #100	; 0x64
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e103      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	4b75      	ldr	r3, [pc, #468]	; (80020cc <HAL_RCC_OscConfig+0x4c8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x312>
 8001f08:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a6e      	ldr	r2, [pc, #440]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e02d      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x334>
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a69      	ldr	r2, [pc, #420]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a66      	ldr	r2, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	e01c      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x356>
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a60      	ldr	r2, [pc, #384]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a5d      	ldr	r2, [pc, #372]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a5a      	ldr	r2, [pc, #360]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a57      	ldr	r2, [pc, #348]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe fef9 	bl	8000d70 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fef5 	bl	8000d70 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0b1      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCC_OscConfig+0x37e>
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fee3 	bl	8000d70 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe fedf 	bl	8000d70 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e09b      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8087 	beq.w	80020fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d061      	beq.n	80020bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d146      	bne.n	800208e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe feb3 	bl	8000d70 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe feaf 	bl	8000d70 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e06d      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d108      	bne.n	8002048 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4921      	ldr	r1, [pc, #132]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a19      	ldr	r1, [r3, #32]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	430b      	orrs	r3, r1
 800205a:	491b      	ldr	r1, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe fe83 	bl	8000d70 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7fe fe7f 	bl	8000d70 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e03d      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x46a>
 800208c:	e035      	b.n	80020fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_RCC_OscConfig+0x4cc>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe fe6c 	bl	8000d70 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7fe fe68 	bl	8000d70 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e026      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x498>
 80020ba:	e01e      	b.n	80020fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e019      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
 80020d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x500>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0d0      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4965      	ldr	r1, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800216e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d040      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e073      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4936      	ldr	r1, [pc, #216]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fdba 	bl	8000d70 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fdb6 	bl	8000d70 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e053      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d210      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	490a      	ldr	r1, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1cc>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1d0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fd18 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08003dd4 	.word	0x08003dd4
 80022d4:	2000005c 	.word	0x2000005c
 80022d8:	20000060 	.word	0x20000060

080022dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_RCC_GetSysClockFreq+0x94>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b04      	cmp	r3, #4
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x30>
 8002306:	2b08      	cmp	r3, #8
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x36>
 800230a:	e027      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_GetSysClockFreq+0x98>)
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	e027      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	0c9b      	lsrs	r3, r3, #18
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	4a17      	ldr	r2, [pc, #92]	; (8002378 <HAL_RCC_GetSysClockFreq+0x9c>)
 800231c:	5cd3      	ldrb	r3, [r2, r3]
 800231e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_RCC_GetSysClockFreq+0x94>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0c5b      	lsrs	r3, r3, #17
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	4a11      	ldr	r2, [pc, #68]	; (800237c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <HAL_RCC_GetSysClockFreq+0x98>)
 800233e:	fb03 f202 	mul.w	r2, r3, r2
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e004      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	613b      	str	r3, [r7, #16]
      break;
 800235a:	e002      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetSysClockFreq+0x98>)
 800235e:	613b      	str	r3, [r7, #16]
      break;
 8002360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002362:	693b      	ldr	r3, [r7, #16]
}
 8002364:	4618      	mov	r0, r3
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	007a1200 	.word	0x007a1200
 8002378:	08003dec 	.word	0x08003dec
 800237c:	08003dfc 	.word	0x08003dfc
 8002380:	003d0900 	.word	0x003d0900

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b02      	ldr	r3, [pc, #8]	; (8002394 <HAL_RCC_GetHCLKFreq+0x10>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	2000005c 	.word	0x2000005c

08002398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800239c:	f7ff fff2 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08003de4 	.word	0x08003de4

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c4:	f7ff ffde 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	0adb      	lsrs	r3, r3, #11
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4903      	ldr	r1, [pc, #12]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08003de4 	.word	0x08003de4

080023e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <RCC_Delay+0x34>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <RCC_Delay+0x38>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0a5b      	lsrs	r3, r3, #9
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002404:	bf00      	nop
  }
  while (Delay --);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1e5a      	subs	r2, r3, #1
 800240a:	60fa      	str	r2, [r7, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f9      	bne.n	8002404 <RCC_Delay+0x1c>
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	2000005c 	.word	0x2000005c
 8002420:	10624dd3 	.word	0x10624dd3

08002424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e076      	b.n	8002524 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002446:	d009      	beq.n	800245c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
 800244e:	e005      	b.n	800245c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe faa6 	bl	80009c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	ea42 0103 	orr.w	r1, r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	0c1a      	lsrs	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f002 0204 	and.w	r2, r2, #4
 8002502:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69da      	ldr	r2, [r3, #28]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002512:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	; 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800253a:	2301      	movs	r3, #1
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_SPI_TransmitReceive+0x26>
 800254e:	2302      	movs	r3, #2
 8002550:	e198      	b.n	8002884 <HAL_SPI_TransmitReceive+0x358>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800255a:	f7fe fc09 	bl	8000d70 <HAL_GetTick>
 800255e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002578:	2b01      	cmp	r3, #1
 800257a:	d00f      	beq.n	800259c <HAL_SPI_TransmitReceive+0x70>
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002582:	d107      	bne.n	8002594 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d103      	bne.n	8002594 <HAL_SPI_TransmitReceive+0x68>
 800258c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002590:	2b04      	cmp	r3, #4
 8002592:	d003      	beq.n	800259c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002594:	2302      	movs	r3, #2
 8002596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800259a:	e16d      	b.n	8002878 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_SPI_TransmitReceive+0x82>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_SPI_TransmitReceive+0x82>
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025b4:	e160      	b.n	8002878 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d003      	beq.n	80025ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2205      	movs	r2, #5
 80025c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	887a      	ldrh	r2, [r7, #2]
 80025da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	887a      	ldrh	r2, [r7, #2]
 80025f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d007      	beq.n	800261e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002626:	d17c      	bne.n	8002722 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_SPI_TransmitReceive+0x10a>
 8002630:	8b7b      	ldrh	r3, [r7, #26]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d16a      	bne.n	800270c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	881a      	ldrh	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	1c9a      	adds	r2, r3, #2
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800265a:	e057      	b.n	800270c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d11b      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x176>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d016      	beq.n	80026a2 <HAL_SPI_TransmitReceive+0x176>
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	2b01      	cmp	r3, #1
 8002678:	d113      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	1c9a      	adds	r2, r3, #2
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d119      	bne.n	80026e4 <HAL_SPI_TransmitReceive+0x1b8>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d014      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	b292      	uxth	r2, r2
 80026c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	1c9a      	adds	r2, r3, #2
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026e0:	2301      	movs	r3, #1
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026e4:	f7fe fb44 	bl	8000d70 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d80b      	bhi.n	800270c <HAL_SPI_TransmitReceive+0x1e0>
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fa:	d007      	beq.n	800270c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800270a:	e0b5      	b.n	8002878 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1a2      	bne.n	800265c <HAL_SPI_TransmitReceive+0x130>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d19d      	bne.n	800265c <HAL_SPI_TransmitReceive+0x130>
 8002720:	e080      	b.n	8002824 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_SPI_TransmitReceive+0x204>
 800272a:	8b7b      	ldrh	r3, [r7, #26]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d16f      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	7812      	ldrb	r2, [r2, #0]
 800273c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002756:	e05b      	b.n	8002810 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b02      	cmp	r3, #2
 8002764:	d11c      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x274>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d017      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x274>
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	2b01      	cmp	r3, #1
 8002774:	d114      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	330c      	adds	r3, #12
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d119      	bne.n	80027e2 <HAL_SPI_TransmitReceive+0x2b6>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d014      	beq.n	80027e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027de:	2301      	movs	r3, #1
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027e2:	f7fe fac5 	bl	8000d70 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d803      	bhi.n	80027fa <HAL_SPI_TransmitReceive+0x2ce>
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d102      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x2d4>
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800280e:	e033      	b.n	8002878 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d19e      	bne.n	8002758 <HAL_SPI_TransmitReceive+0x22c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d199      	bne.n	8002758 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f8b7 	bl	800299c <SPI_EndRxTxTransaction>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d006      	beq.n	8002842 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002840:	e01a      	b.n	8002878 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800286e:	e003      	b.n	8002878 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002880:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002884:	4618      	mov	r0, r3
 8002886:	3730      	adds	r7, #48	; 0x30
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800289c:	f7fe fa68 	bl	8000d70 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028ac:	f7fe fa60 	bl	8000d70 <HAL_GetTick>
 80028b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028b2:	4b39      	ldr	r3, [pc, #228]	; (8002998 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	015b      	lsls	r3, r3, #5
 80028b8:	0d1b      	lsrs	r3, r3, #20
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028c2:	e054      	b.n	800296e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d050      	beq.n	800296e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028cc:	f7fe fa50 	bl	8000d70 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d902      	bls.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d13d      	bne.n	800295e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028fa:	d111      	bne.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002904:	d004      	beq.n	8002910 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290e:	d107      	bne.n	8002920 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800291e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002928:	d10f      	bne.n	800294a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002948:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e017      	b.n	800298e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3b01      	subs	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4013      	ands	r3, r2
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	429a      	cmp	r2, r3
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2300      	movne	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	429a      	cmp	r2, r3
 800298a:	d19b      	bne.n	80028c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	2000005c 	.word	0x2000005c

0800299c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2200      	movs	r2, #0
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f7ff ff6a 	bl	800288c <SPI_WaitFlagStateUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f043 0220 	orr.w	r2, r3, #32
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e000      	b.n	80029d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e042      	b.n	8002a70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe f8ec 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2224      	movs	r2, #36	; 0x24
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f91d 	bl	8002c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d16d      	bne.n	8002b74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_UART_Transmit+0x2c>
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e066      	b.n	8002b76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ab6:	f7fe f95b 	bl	8000d70 <HAL_GetTick>
 8002aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_UART_Transmit+0x6c>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e003      	b.n	8002aec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002aec:	e02a      	b.n	8002b44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f840 	bl	8002b7e <UART_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e036      	b.n	8002b76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	3302      	adds	r3, #2
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e007      	b.n	8002b36 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3301      	adds	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1cf      	bne.n	8002aee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2200      	movs	r2, #0
 8002b56:	2140      	movs	r1, #64	; 0x40
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f810 	bl	8002b7e <UART_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e006      	b.n	8002b76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b090      	sub	sp, #64	; 0x40
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8e:	e050      	b.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d04c      	beq.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x30>
 8002b9e:	f7fe f8e7 	bl	8000d70 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d241      	bcs.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	330c      	adds	r3, #12
 8002bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bce:	637a      	str	r2, [r7, #52]	; 0x34
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd6:	e841 2300 	strex	r3, r2, [r1]
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1e5      	bne.n	8002bae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3314      	adds	r3, #20
 8002c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c02:	623a      	str	r2, [r7, #32]
 8002c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	69f9      	ldr	r1, [r7, #28]
 8002c08:	6a3a      	ldr	r2, [r7, #32]
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e5      	bne.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e00f      	b.n	8002c52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d09f      	beq.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3740      	adds	r7, #64	; 0x40
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c96:	f023 030c 	bic.w	r3, r3, #12
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <UART_SetConfig+0x114>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d103      	bne.n	8002ccc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cc4:	f7ff fb7c 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	e002      	b.n	8002cd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ccc:	f7ff fb64 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8002cd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009a      	lsls	r2, r3, #2
 8002cdc:	441a      	add	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <UART_SetConfig+0x118>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	0119      	lsls	r1, r3, #4
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009a      	lsls	r2, r3, #2
 8002cfc:	441a      	add	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <UART_SetConfig+0x118>)
 8002d0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2064      	movs	r0, #100	; 0x64
 8002d12:	fb00 f303 	mul.w	r3, r0, r3
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	3332      	adds	r3, #50	; 0x32
 8002d1c:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <UART_SetConfig+0x118>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d28:	4419      	add	r1, r3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	009a      	lsls	r2, r3, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <UART_SetConfig+0x118>)
 8002d42:	fba3 0302 	umull	r0, r3, r3, r2
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2064      	movs	r0, #100	; 0x64
 8002d4a:	fb00 f303 	mul.w	r3, r0, r3
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	3332      	adds	r3, #50	; 0x32
 8002d54:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <UART_SetConfig+0x118>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	f003 020f 	and.w	r2, r3, #15
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	440a      	add	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40013800 	.word	0x40013800
 8002d74:	51eb851f 	.word	0x51eb851f

08002d78 <_ZN8classLog5printEPKc>:
	void print(char const *format) {
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
			HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 8002d88:	6838      	ldr	r0, [r7, #0]
 8002d8a:	f7fd f9df 	bl	800014c <strlen>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff fe6d 	bl	8002a78 <HAL_UART_Transmit>
	}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}
	...

08002da8 <_ZN8classLog5colorEi>:
	char s[16];
	sprintf(s, "\33[08m");
	print(s);
}
void classLog::color(int color)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
	char s[16];
	sprintf(s, "\33[38;05;%dm",color);
 8002db2:	f107 0308 	add.w	r3, r7, #8
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	4906      	ldr	r1, [pc, #24]	; (8002dd4 <_ZN8classLog5colorEi+0x2c>)
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fb02 	bl	80033c4 <siprintf>
	print(s);
 8002dc0:	f107 0308 	add.w	r3, r7, #8
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ffd6 	bl	8002d78 <_ZN8classLog5printEPKc>
}
 8002dcc:	bf00      	nop
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	08003d94 	.word	0x08003d94

08002dd8 <_ZN8classLog13colorStringlnEiPKc>:
	print(s);
	print(format);
	print("\33[0m");
}
void classLog::colorStringln(int c, char const *const format)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
	color(c);
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ffde 	bl	8002da8 <_ZN8classLog5colorEi>
	print(format);
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f7ff ffc2 	bl	8002d78 <_ZN8classLog5printEPKc>
	print("\33[0m\n");
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <_ZN8classLog13colorStringlnEiPKc+0x2c>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff ffbe 	bl	8002d78 <_ZN8classLog5printEPKc>
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	08003dcc 	.word	0x08003dcc

08002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>:
//* Write command */
//#define SSD1306_WRITECOMMAND(command)      ssd1306_I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0x00, (command))
///* Write data */
//#define SSD1306_WRITEDATA(data)            ssd1306_I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0x40, (data))

void TFT_Driver::SSD1306_WRITECOMMAND(uint8_t data) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
	if (LCD->hi2c)  //I2C
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d012      	beq.n	8002e44 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh+0x3c>
	{
		uint8_t dt[2];
		dt[0] = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	733b      	strb	r3, [r7, #12]
		dt[1] = data;
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6918      	ldr	r0, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	7d1b      	ldrb	r3, [r3, #20]
 8002e32:	b299      	uxth	r1, r3
 8002e34:	f107 020c 	add.w	r2, r7, #12
 8002e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f7fe fb88 	bl	8001554 <HAL_I2C_Master_Transmit>
#if defined(TFT_USE_SPI)
		SPI.SendCmd(data);
#endif
	}

}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZN10TFT_Driver12SSD1306_InitEv>:
	}

}

//Инициализация первого экрана
void TFT_Driver::SSD1306_Init(void) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	if (LCD->GPIO_CS != NULL)	
		CS_0;
#endif

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002e54:	21ae      	movs	r1, #174	; 0xae
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff ffd6 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002e5c:	2120      	movs	r1, #32
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ffd2 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002e64:	2110      	movs	r1, #16
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff ffce 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e6c:	21b0      	movs	r1, #176	; 0xb0
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffca 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002e74:	21c8      	movs	r1, #200	; 0xc8
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ffc6 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ffc2 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002e84:	2110      	movs	r1, #16
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ffbe 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002e8c:	2140      	movs	r1, #64	; 0x40
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ffba 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002e94:	2181      	movs	r1, #129	; 0x81
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ffb6 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xFF);
 8002e9c:	21ff      	movs	r1, #255	; 0xff
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ffb2 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002ea4:	21a1      	movs	r1, #161	; 0xa1
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ffae 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002eac:	21a6      	movs	r1, #166	; 0xa6
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ffaa 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002eb4:	21a8      	movs	r1, #168	; 0xa8
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ffa6 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	if (LCD->TFT_HEIGHT == 64)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d104      	bne.n	8002ed0 <_ZN10TFT_Driver12SSD1306_InitEv+0x84>
		SSD1306_WRITECOMMAND(0x3F); //64
 8002ec6:	213f      	movs	r1, #63	; 0x3f
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff9d 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
 8002ece:	e003      	b.n	8002ed8 <_ZN10TFT_Driver12SSD1306_InitEv+0x8c>
	else
		SSD1306_WRITECOMMAND(0x1F); //32
 8002ed0:	211f      	movs	r1, #31
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ff98 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002ed8:	21a4      	movs	r1, #164	; 0xa4
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff94 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002ee0:	21d3      	movs	r1, #211	; 0xd3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ff90 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002ee8:	2100      	movs	r1, #0
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff ff8c 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002ef0:	21d5      	movs	r1, #213	; 0xd5
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ff88 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002ef8:	21f0      	movs	r1, #240	; 0xf0
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ff84 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002f00:	21d9      	movs	r1, #217	; 0xd9
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ff80 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x22); //
 8002f08:	2122      	movs	r1, #34	; 0x22
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff7c 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002f10:	21da      	movs	r1, #218	; 0xda
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ff78 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	if (LCD->TFT_HEIGHT == 64)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d104      	bne.n	8002f2c <_ZN10TFT_Driver12SSD1306_InitEv+0xe0>
		SSD1306_WRITECOMMAND(0x12); //64
 8002f22:	2112      	movs	r1, #18
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff6f 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
 8002f2a:	e003      	b.n	8002f34 <_ZN10TFT_Driver12SSD1306_InitEv+0xe8>
	else
		SSD1306_WRITECOMMAND(0x02); //32
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ff6a 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002f34:	21db      	movs	r1, #219	; 0xdb
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ff66 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002f3c:	2120      	movs	r1, #32
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff62 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002f44:	218d      	movs	r1, #141	; 0x8d
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ff5e 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x14); //
 8002f4c:	2114      	movs	r1, #20
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ff5a 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002f54:	21af      	movs	r1, #175	; 0xaf
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ff56 	bl	8002e08 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
		CS_1;
    #endif
	/* Set default values */
	//uTFT.CurrentX = 0;
	//uTFT.CurrentY = 0;
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>:

volatile HAL_StatusTypeDef res;

//490uS-72MHz
void TFT_Driver::SSD1306_UpdateScreen(void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	6078      	str	r0, [r7, #4]
	uint8_t *p;

	if (LCD->hi2c)  //I2C
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d02a      	beq.n	8002fcc <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x68>
			osDelay(2);
		#else
		//HAL_Delay(10);
#endif

		p = &LCD->buffer8[0];
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	60fb      	str	r3, [r7, #12]
		p--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
		*p = 0x40;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2240      	movs	r2, #64	; 0x40
 8002f88:	701a      	strb	r2, [r3, #0]

		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6918      	ldr	r0, [r3, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	7d1b      	ldrb	r3, [r3, #20]
 8002f96:	b299      	uxth	r1, r3
				(LCD->TFT_HEIGHT * LCD->TFT_WIDTH) / 8 + 1, 1000);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da00      	bge.n	8002fae <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x4a>
 8002fac:	3307      	adds	r3, #7
 8002fae:	10db      	asrs	r3, r3, #3
		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fba:	9200      	str	r2, [sp, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	f7fe fac9 	bl	8001554 <HAL_I2C_Master_Transmit>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x70>)
 8002fc8:	701a      	strb	r2, [r3, #0]


		return;
 8002fca:	bf00      	nop

#endif

	}

}
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2000071c 	.word	0x2000071c

08002fd8 <_ZN3TFT8SetPixelEllt>:
#include "TFT_config.h"

#include <math.h>
#include <stdio.h>

void TFT::SetPixel(int32_t x, int32_t y, uint16_t color) {
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	807b      	strh	r3, [r7, #2]

	if ((x < 0) || (y < 0) || (x >= LCD->TFT_WIDTH) || (y >= LCD->TFT_HEIGHT))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db6a      	blt.n	80030c2 <_ZN3TFT8SetPixelEllt+0xea>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db67      	blt.n	80030c2 <_ZN3TFT8SetPixelEllt+0xea>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	da61      	bge.n	80030c2 <_ZN3TFT8SetPixelEllt+0xea>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	da5b      	bge.n	80030c2 <_ZN3TFT8SetPixelEllt+0xea>
		return;

#if defined(TFT_USE_1BIT)
#if !defined (TFT_USE_ONLY_ONE_BIT_COLOR)
  if (LCD->Bit == 1)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	7a5b      	ldrb	r3, [r3, #9]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d157      	bne.n	80030c4 <_ZN3TFT8SetPixelEllt+0xec>
#endif
	{
		if (color != 0)
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d028      	beq.n	800306c <_ZN3TFT8SetPixelEllt+0x94>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] |= 1 << (y % 8);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	da00      	bge.n	8003028 <_ZN3TFT8SetPixelEllt+0x50>
 8003026:	3307      	adds	r3, #7
 8003028:	10db      	asrs	r3, r3, #3
 800302a:	68f9      	ldr	r1, [r7, #12]
 800302c:	6809      	ldr	r1, [r1, #0]
 800302e:	6809      	ldr	r1, [r1, #0]
 8003030:	fb01 f003 	mul.w	r0, r1, r3
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	4401      	add	r1, r0
 8003038:	440a      	add	r2, r1
 800303a:	7812      	ldrb	r2, [r2, #0]
 800303c:	b251      	sxtb	r1, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	f002 0207 	and.w	r2, r2, #7
 8003044:	2001      	movs	r0, #1
 8003046:	fa00 f202 	lsl.w	r2, r0, r2
 800304a:	b252      	sxtb	r2, r2
 800304c:	430a      	orrs	r2, r1
 800304e:	b250      	sxtb	r0, r2
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	69d2      	ldr	r2, [r2, #28]
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	6809      	ldr	r1, [r1, #0]
 800305a:	6809      	ldr	r1, [r1, #0]
 800305c:	fb03 f101 	mul.w	r1, r3, r1
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	440b      	add	r3, r1
 8003064:	4413      	add	r3, r2
 8003066:	b2c2      	uxtb	r2, r0
 8003068:	701a      	strb	r2, [r3, #0]
		else
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] &= ~(1 << (y % 8));
		return;
 800306a:	e02b      	b.n	80030c4 <_ZN3TFT8SetPixelEllt+0xec>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] &= ~(1 << (y % 8));
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	da00      	bge.n	800307a <_ZN3TFT8SetPixelEllt+0xa2>
 8003078:	3307      	adds	r3, #7
 800307a:	10db      	asrs	r3, r3, #3
 800307c:	68f9      	ldr	r1, [r7, #12]
 800307e:	6809      	ldr	r1, [r1, #0]
 8003080:	6809      	ldr	r1, [r1, #0]
 8003082:	fb01 f003 	mul.w	r0, r1, r3
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	4401      	add	r1, r0
 800308a:	440a      	add	r2, r1
 800308c:	7812      	ldrb	r2, [r2, #0]
 800308e:	b251      	sxtb	r1, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	f002 0207 	and.w	r2, r2, #7
 8003096:	2001      	movs	r0, #1
 8003098:	fa00 f202 	lsl.w	r2, r0, r2
 800309c:	b252      	sxtb	r2, r2
 800309e:	43d2      	mvns	r2, r2
 80030a0:	b252      	sxtb	r2, r2
 80030a2:	400a      	ands	r2, r1
 80030a4:	b250      	sxtb	r0, r2
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	69d2      	ldr	r2, [r2, #28]
 80030ac:	68f9      	ldr	r1, [r7, #12]
 80030ae:	6809      	ldr	r1, [r1, #0]
 80030b0:	6809      	ldr	r1, [r1, #0]
 80030b2:	fb03 f101 	mul.w	r1, r3, r1
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	440b      	add	r3, r1
 80030ba:	4413      	add	r3, r2
 80030bc:	b2c2      	uxtb	r2, r0
 80030be:	701a      	strb	r2, [r3, #0]
		return;
 80030c0:	e000      	b.n	80030c4 <_ZN3TFT8SetPixelEllt+0xec>
		return;
 80030c2:	bf00      	nop
		LCD->buffer16[x + y * LCD->TFT_WIDTH] = color;
		return;
	}
#endif

}
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <_ZN3TFT5Fill1Et>:

	}

}

void TFT::Fill1(uint16_t color) {
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]

	uint8_t c;
	if (color)
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <_ZN3TFT5Fill1Et+0x18>
		c = 0xFF;
 80030de:	23ff      	movs	r3, #255	; 0xff
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	e001      	b.n	80030e8 <_ZN3TFT5Fill1Et+0x1c>
	else
		c = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]

	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	e009      	b.n	8003102 <_ZN3TFT5Fill1Et+0x36>
		LCD->buffer8[i] = c;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4413      	add	r3, r2
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	701a      	strb	r2, [r3, #0]
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3301      	adds	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	da00      	bge.n	8003118 <_ZN3TFT5Fill1Et+0x4c>
 8003116:	3307      	adds	r3, #7
 8003118:	10db      	asrs	r3, r3, #3
 800311a:	461a      	mov	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4293      	cmp	r3, r2
 8003120:	dbe5      	blt.n	80030ee <_ZN3TFT5Fill1Et+0x22>
	return;
 8003122:	bf00      	nop
}
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <_ZN3TFT5LineHElllt>:
		}
	}

}

void TFT::LineH(int32_t Y, int32_t X1, int32_t X2, uint16_t color) {
 800312c:	b490      	push	{r4, r7}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]

	int32_t i;

	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	db04      	blt.n	8003150 <_ZN3TFT5LineHElllt+0x24>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	603b      	str	r3, [r7, #0]
	if (Y >= LCD->TFT_HEIGHT) return;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	429a      	cmp	r2, r3
 800315a:	f280 812d 	bge.w	80033b8 <_ZN3TFT5LineHElllt+0x28c>

	if ((LCD->Bit) == 1) {
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	7a5b      	ldrb	r3, [r3, #9]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d16a      	bne.n	800323e <_ZN3TFT5LineHElllt+0x112>
		if (color == 1) {
 8003168:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800316a:	2b01      	cmp	r3, #1
 800316c:	d132      	bne.n	80031d4 <_ZN3TFT5LineHElllt+0xa8>
			for (i = X1; i <= X2; i++)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e02a      	b.n	80031ca <_ZN3TFT5LineHElllt+0x9e>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	da00      	bge.n	8003182 <_ZN3TFT5LineHElllt+0x56>
 8003180:	3307      	adds	r3, #7
 8003182:	10db      	asrs	r3, r3, #3
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	6809      	ldr	r1, [r1, #0]
 8003188:	6809      	ldr	r1, [r1, #0]
 800318a:	fb01 f003 	mul.w	r0, r1, r3
 800318e:	69f9      	ldr	r1, [r7, #28]
 8003190:	4401      	add	r1, r0
 8003192:	440a      	add	r2, r1
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	b251      	sxtb	r1, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	f002 0207 	and.w	r2, r2, #7
 800319e:	2001      	movs	r0, #1
 80031a0:	fa00 f202 	lsl.w	r2, r0, r2
 80031a4:	b252      	sxtb	r2, r2
 80031a6:	430a      	orrs	r2, r1
 80031a8:	b250      	sxtb	r0, r2
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	69d2      	ldr	r2, [r2, #28]
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	6809      	ldr	r1, [r1, #0]
 80031b4:	6809      	ldr	r1, [r1, #0]
 80031b6:	fb03 f101 	mul.w	r1, r3, r1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	440b      	add	r3, r1
 80031be:	4413      	add	r3, r2
 80031c0:	b2c2      	uxtb	r2, r0
 80031c2:	701a      	strb	r2, [r3, #0]
			for (i = X1; i <= X2; i++)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	3301      	adds	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	ddd0      	ble.n	8003174 <_ZN3TFT5LineHElllt+0x48>
		} else {
			for (i = X1; i <= X2; i++)
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
		}
		return;
 80031d2:	e0f2      	b.n	80033ba <_ZN3TFT5LineHElllt+0x28e>
			for (i = X1; i <= X2; i++)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	e02c      	b.n	8003234 <_ZN3TFT5LineHElllt+0x108>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	da00      	bge.n	80031e8 <_ZN3TFT5LineHElllt+0xbc>
 80031e6:	3307      	adds	r3, #7
 80031e8:	10db      	asrs	r3, r3, #3
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	6809      	ldr	r1, [r1, #0]
 80031ee:	6809      	ldr	r1, [r1, #0]
 80031f0:	fb01 f003 	mul.w	r0, r1, r3
 80031f4:	69f9      	ldr	r1, [r7, #28]
 80031f6:	4401      	add	r1, r0
 80031f8:	440a      	add	r2, r1
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	b251      	sxtb	r1, r2
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	f002 0207 	and.w	r2, r2, #7
 8003204:	2001      	movs	r0, #1
 8003206:	fa00 f202 	lsl.w	r2, r0, r2
 800320a:	b252      	sxtb	r2, r2
 800320c:	43d2      	mvns	r2, r2
 800320e:	b252      	sxtb	r2, r2
 8003210:	400a      	ands	r2, r1
 8003212:	b250      	sxtb	r0, r2
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	69d2      	ldr	r2, [r2, #28]
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	6809      	ldr	r1, [r1, #0]
 800321e:	6809      	ldr	r1, [r1, #0]
 8003220:	fb03 f101 	mul.w	r1, r3, r1
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	440b      	add	r3, r1
 8003228:	4413      	add	r3, r2
 800322a:	b2c2      	uxtb	r2, r0
 800322c:	701a      	strb	r2, [r3, #0]
			for (i = X1; i <= X2; i++)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3301      	adds	r3, #1
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	ddce      	ble.n	80031da <_ZN3TFT5LineHElllt+0xae>
		return;
 800323c:	e0bd      	b.n	80033ba <_ZN3TFT5LineHElllt+0x28e>
	}

	if ((LCD->Bit) == 16) {
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	7a5b      	ldrb	r3, [r3, #9]
 8003244:	2b10      	cmp	r3, #16
 8003246:	d119      	bne.n	800327c <_ZN3TFT5LineHElllt+0x150>
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	e011      	b.n	8003272 <_ZN3TFT5LineHElllt+0x146>
		{
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	fb03 f101 	mul.w	r1, r3, r1
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	440b      	add	r3, r1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800326a:	801a      	strh	r2, [r3, #0]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	3301      	adds	r3, #1
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	dde9      	ble.n	800324e <_ZN3TFT5LineHElllt+0x122>
		}
		return;
 800327a:	e09e      	b.n	80033ba <_ZN3TFT5LineHElllt+0x28e>
	}

	if ((LCD->Bit) == 4) {
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	7a5b      	ldrb	r3, [r3, #9]
 8003282:	2b04      	cmp	r3, #4
 8003284:	d177      	bne.n	8003376 <_ZN3TFT5LineHElllt+0x24a>
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e06f      	b.n	800336c <_ZN3TFT5LineHElllt+0x240>
				{
			if (i % 2 == 0) {
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d134      	bne.n	8003300 <_ZN3TFT5LineHElllt+0x1d4>
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	0fd9      	lsrs	r1, r3, #31
 80032a0:	440b      	add	r3, r1
 80032a2:	105b      	asrs	r3, r3, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0fd9      	lsrs	r1, r3, #31
 80032ae:	440b      	add	r3, r1
 80032b0:	105b      	asrs	r3, r3, #1
 80032b2:	4619      	mov	r1, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4403      	add	r3, r0
 80032bc:	4413      	add	r3, r2
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b25b      	sxtb	r3, r3
								& (0x0F)) | (color << 4);
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	b25a      	sxtb	r2, r3
 80032c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	4313      	orrs	r3, r2
 80032d0:	b258      	sxtb	r0, r3
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	0fd9      	lsrs	r1, r3, #31
 80032dc:	440b      	add	r3, r1
 80032de:	105b      	asrs	r3, r3, #1
 80032e0:	461c      	mov	r4, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0fd9      	lsrs	r1, r3, #31
 80032ea:	440b      	add	r3, r1
 80032ec:	105b      	asrs	r3, r3, #1
 80032ee:	4619      	mov	r1, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4423      	add	r3, r4
 80032f8:	4413      	add	r3, r2
								& (0x0F)) | (color << 4);
 80032fa:	b2c2      	uxtb	r2, r0
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e032      	b.n	8003366 <_ZN3TFT5LineHElllt+0x23a>
			} else {
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	0fd9      	lsrs	r1, r3, #31
 800330a:	440b      	add	r3, r1
 800330c:	105b      	asrs	r3, r3, #1
 800330e:	4618      	mov	r0, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0fd9      	lsrs	r1, r3, #31
 8003318:	440b      	add	r3, r1
 800331a:	105b      	asrs	r3, r3, #1
 800331c:	4619      	mov	r1, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4403      	add	r3, r0
 8003326:	4413      	add	r3, r2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b25b      	sxtb	r3, r3
								& (0xF0)) | color;
 800332c:	f023 030f 	bic.w	r3, r3, #15
 8003330:	b25a      	sxtb	r2, r3
 8003332:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003334:	b25b      	sxtb	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	b258      	sxtb	r0, r3
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	0fd9      	lsrs	r1, r3, #31
 8003344:	440b      	add	r3, r1
 8003346:	105b      	asrs	r3, r3, #1
 8003348:	461c      	mov	r4, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0fd9      	lsrs	r1, r3, #31
 8003352:	440b      	add	r3, r1
 8003354:	105b      	asrs	r3, r3, #1
 8003356:	4619      	mov	r1, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4423      	add	r3, r4
 8003360:	4413      	add	r3, r2
								& (0xF0)) | color;
 8003362:	b2c2      	uxtb	r2, r0
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8003364:	701a      	strb	r2, [r3, #0]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3301      	adds	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	dd8b      	ble.n	800328c <_ZN3TFT5LineHElllt+0x160>
			}
		}
		return;
 8003374:	e021      	b.n	80033ba <_ZN3TFT5LineHElllt+0x28e>
	}

	if ((LCD->Bit) == 8) {
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	7a5b      	ldrb	r3, [r3, #9]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d11c      	bne.n	80033ba <_ZN3TFT5LineHElllt+0x28e>
		int YY = Y * LCD->TFT_WIDTH;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	fb02 f303 	mul.w	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]
		for (int32_t i = X1; i <= X2; i++)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e00c      	b.n	80033ae <_ZN3TFT5LineHElllt+0x282>
			LCD->buffer8[i + YY] = color;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	69b9      	ldr	r1, [r7, #24]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	440a      	add	r2, r1
 80033a0:	4413      	add	r3, r2
 80033a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]
		for (int32_t i = X1; i <= X2; i++)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	3301      	adds	r3, #1
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	ddee      	ble.n	8003394 <_ZN3TFT5LineHElllt+0x268>
		return;
 80033b6:	e000      	b.n	80033ba <_ZN3TFT5LineHElllt+0x28e>
	if (Y >= LCD->TFT_HEIGHT) return;
 80033b8:	bf00      	nop
	}

}
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc90      	pop	{r4, r7}
 80033c0:	4770      	bx	lr
	...

080033c4 <siprintf>:
 80033c4:	b40e      	push	{r1, r2, r3}
 80033c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033ca:	b500      	push	{lr}
 80033cc:	b09c      	sub	sp, #112	; 0x70
 80033ce:	ab1d      	add	r3, sp, #116	; 0x74
 80033d0:	9002      	str	r0, [sp, #8]
 80033d2:	9006      	str	r0, [sp, #24]
 80033d4:	9107      	str	r1, [sp, #28]
 80033d6:	9104      	str	r1, [sp, #16]
 80033d8:	4808      	ldr	r0, [pc, #32]	; (80033fc <siprintf+0x38>)
 80033da:	4909      	ldr	r1, [pc, #36]	; (8003400 <siprintf+0x3c>)
 80033dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80033e0:	9105      	str	r1, [sp, #20]
 80033e2:	6800      	ldr	r0, [r0, #0]
 80033e4:	a902      	add	r1, sp, #8
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	f000 f98e 	bl	8003708 <_svfiprintf_r>
 80033ec:	2200      	movs	r2, #0
 80033ee:	9b02      	ldr	r3, [sp, #8]
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	b01c      	add	sp, #112	; 0x70
 80033f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80033f8:	b003      	add	sp, #12
 80033fa:	4770      	bx	lr
 80033fc:	200000bc 	.word	0x200000bc
 8003400:	ffff0208 	.word	0xffff0208

08003404 <memset>:
 8003404:	4603      	mov	r3, r0
 8003406:	4402      	add	r2, r0
 8003408:	4293      	cmp	r3, r2
 800340a:	d100      	bne.n	800340e <memset+0xa>
 800340c:	4770      	bx	lr
 800340e:	f803 1b01 	strb.w	r1, [r3], #1
 8003412:	e7f9      	b.n	8003408 <memset+0x4>

08003414 <__errno>:
 8003414:	4b01      	ldr	r3, [pc, #4]	; (800341c <__errno+0x8>)
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	200000bc 	.word	0x200000bc

08003420 <__libc_init_array>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	2600      	movs	r6, #0
 8003424:	4d0c      	ldr	r5, [pc, #48]	; (8003458 <__libc_init_array+0x38>)
 8003426:	4c0d      	ldr	r4, [pc, #52]	; (800345c <__libc_init_array+0x3c>)
 8003428:	1b64      	subs	r4, r4, r5
 800342a:	10a4      	asrs	r4, r4, #2
 800342c:	42a6      	cmp	r6, r4
 800342e:	d109      	bne.n	8003444 <__libc_init_array+0x24>
 8003430:	f000 fc7a 	bl	8003d28 <_init>
 8003434:	2600      	movs	r6, #0
 8003436:	4d0a      	ldr	r5, [pc, #40]	; (8003460 <__libc_init_array+0x40>)
 8003438:	4c0a      	ldr	r4, [pc, #40]	; (8003464 <__libc_init_array+0x44>)
 800343a:	1b64      	subs	r4, r4, r5
 800343c:	10a4      	asrs	r4, r4, #2
 800343e:	42a6      	cmp	r6, r4
 8003440:	d105      	bne.n	800344e <__libc_init_array+0x2e>
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	f855 3b04 	ldr.w	r3, [r5], #4
 8003448:	4798      	blx	r3
 800344a:	3601      	adds	r6, #1
 800344c:	e7ee      	b.n	800342c <__libc_init_array+0xc>
 800344e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003452:	4798      	blx	r3
 8003454:	3601      	adds	r6, #1
 8003456:	e7f2      	b.n	800343e <__libc_init_array+0x1e>
 8003458:	080045a0 	.word	0x080045a0
 800345c:	080045a0 	.word	0x080045a0
 8003460:	080045a0 	.word	0x080045a0
 8003464:	080045a4 	.word	0x080045a4

08003468 <__retarget_lock_acquire_recursive>:
 8003468:	4770      	bx	lr

0800346a <__retarget_lock_release_recursive>:
 800346a:	4770      	bx	lr

0800346c <_free_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	4605      	mov	r5, r0
 8003470:	2900      	cmp	r1, #0
 8003472:	d040      	beq.n	80034f6 <_free_r+0x8a>
 8003474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003478:	1f0c      	subs	r4, r1, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	bfb8      	it	lt
 800347e:	18e4      	addlt	r4, r4, r3
 8003480:	f000 f8dc 	bl	800363c <__malloc_lock>
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <_free_r+0x8c>)
 8003486:	6813      	ldr	r3, [r2, #0]
 8003488:	b933      	cbnz	r3, 8003498 <_free_r+0x2c>
 800348a:	6063      	str	r3, [r4, #4]
 800348c:	6014      	str	r4, [r2, #0]
 800348e:	4628      	mov	r0, r5
 8003490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003494:	f000 b8d8 	b.w	8003648 <__malloc_unlock>
 8003498:	42a3      	cmp	r3, r4
 800349a:	d908      	bls.n	80034ae <_free_r+0x42>
 800349c:	6820      	ldr	r0, [r4, #0]
 800349e:	1821      	adds	r1, r4, r0
 80034a0:	428b      	cmp	r3, r1
 80034a2:	bf01      	itttt	eq
 80034a4:	6819      	ldreq	r1, [r3, #0]
 80034a6:	685b      	ldreq	r3, [r3, #4]
 80034a8:	1809      	addeq	r1, r1, r0
 80034aa:	6021      	streq	r1, [r4, #0]
 80034ac:	e7ed      	b.n	800348a <_free_r+0x1e>
 80034ae:	461a      	mov	r2, r3
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	b10b      	cbz	r3, 80034b8 <_free_r+0x4c>
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	d9fa      	bls.n	80034ae <_free_r+0x42>
 80034b8:	6811      	ldr	r1, [r2, #0]
 80034ba:	1850      	adds	r0, r2, r1
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d10b      	bne.n	80034d8 <_free_r+0x6c>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	4401      	add	r1, r0
 80034c4:	1850      	adds	r0, r2, r1
 80034c6:	4283      	cmp	r3, r0
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	d1e0      	bne.n	800348e <_free_r+0x22>
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4408      	add	r0, r1
 80034d2:	6010      	str	r0, [r2, #0]
 80034d4:	6053      	str	r3, [r2, #4]
 80034d6:	e7da      	b.n	800348e <_free_r+0x22>
 80034d8:	d902      	bls.n	80034e0 <_free_r+0x74>
 80034da:	230c      	movs	r3, #12
 80034dc:	602b      	str	r3, [r5, #0]
 80034de:	e7d6      	b.n	800348e <_free_r+0x22>
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	1821      	adds	r1, r4, r0
 80034e4:	428b      	cmp	r3, r1
 80034e6:	bf01      	itttt	eq
 80034e8:	6819      	ldreq	r1, [r3, #0]
 80034ea:	685b      	ldreq	r3, [r3, #4]
 80034ec:	1809      	addeq	r1, r1, r0
 80034ee:	6021      	streq	r1, [r4, #0]
 80034f0:	6063      	str	r3, [r4, #4]
 80034f2:	6054      	str	r4, [r2, #4]
 80034f4:	e7cb      	b.n	800348e <_free_r+0x22>
 80034f6:	bd38      	pop	{r3, r4, r5, pc}
 80034f8:	20000860 	.word	0x20000860

080034fc <sbrk_aligned>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	4e0e      	ldr	r6, [pc, #56]	; (8003538 <sbrk_aligned+0x3c>)
 8003500:	460c      	mov	r4, r1
 8003502:	6831      	ldr	r1, [r6, #0]
 8003504:	4605      	mov	r5, r0
 8003506:	b911      	cbnz	r1, 800350e <sbrk_aligned+0x12>
 8003508:	f000 fbaa 	bl	8003c60 <_sbrk_r>
 800350c:	6030      	str	r0, [r6, #0]
 800350e:	4621      	mov	r1, r4
 8003510:	4628      	mov	r0, r5
 8003512:	f000 fba5 	bl	8003c60 <_sbrk_r>
 8003516:	1c43      	adds	r3, r0, #1
 8003518:	d00a      	beq.n	8003530 <sbrk_aligned+0x34>
 800351a:	1cc4      	adds	r4, r0, #3
 800351c:	f024 0403 	bic.w	r4, r4, #3
 8003520:	42a0      	cmp	r0, r4
 8003522:	d007      	beq.n	8003534 <sbrk_aligned+0x38>
 8003524:	1a21      	subs	r1, r4, r0
 8003526:	4628      	mov	r0, r5
 8003528:	f000 fb9a 	bl	8003c60 <_sbrk_r>
 800352c:	3001      	adds	r0, #1
 800352e:	d101      	bne.n	8003534 <sbrk_aligned+0x38>
 8003530:	f04f 34ff 	mov.w	r4, #4294967295
 8003534:	4620      	mov	r0, r4
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	20000864 	.word	0x20000864

0800353c <_malloc_r>:
 800353c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003540:	1ccd      	adds	r5, r1, #3
 8003542:	f025 0503 	bic.w	r5, r5, #3
 8003546:	3508      	adds	r5, #8
 8003548:	2d0c      	cmp	r5, #12
 800354a:	bf38      	it	cc
 800354c:	250c      	movcc	r5, #12
 800354e:	2d00      	cmp	r5, #0
 8003550:	4607      	mov	r7, r0
 8003552:	db01      	blt.n	8003558 <_malloc_r+0x1c>
 8003554:	42a9      	cmp	r1, r5
 8003556:	d905      	bls.n	8003564 <_malloc_r+0x28>
 8003558:	230c      	movs	r3, #12
 800355a:	2600      	movs	r6, #0
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4630      	mov	r0, r6
 8003560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003564:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003638 <_malloc_r+0xfc>
 8003568:	f000 f868 	bl	800363c <__malloc_lock>
 800356c:	f8d8 3000 	ldr.w	r3, [r8]
 8003570:	461c      	mov	r4, r3
 8003572:	bb5c      	cbnz	r4, 80035cc <_malloc_r+0x90>
 8003574:	4629      	mov	r1, r5
 8003576:	4638      	mov	r0, r7
 8003578:	f7ff ffc0 	bl	80034fc <sbrk_aligned>
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	4604      	mov	r4, r0
 8003580:	d155      	bne.n	800362e <_malloc_r+0xf2>
 8003582:	f8d8 4000 	ldr.w	r4, [r8]
 8003586:	4626      	mov	r6, r4
 8003588:	2e00      	cmp	r6, #0
 800358a:	d145      	bne.n	8003618 <_malloc_r+0xdc>
 800358c:	2c00      	cmp	r4, #0
 800358e:	d048      	beq.n	8003622 <_malloc_r+0xe6>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	4631      	mov	r1, r6
 8003594:	4638      	mov	r0, r7
 8003596:	eb04 0903 	add.w	r9, r4, r3
 800359a:	f000 fb61 	bl	8003c60 <_sbrk_r>
 800359e:	4581      	cmp	r9, r0
 80035a0:	d13f      	bne.n	8003622 <_malloc_r+0xe6>
 80035a2:	6821      	ldr	r1, [r4, #0]
 80035a4:	4638      	mov	r0, r7
 80035a6:	1a6d      	subs	r5, r5, r1
 80035a8:	4629      	mov	r1, r5
 80035aa:	f7ff ffa7 	bl	80034fc <sbrk_aligned>
 80035ae:	3001      	adds	r0, #1
 80035b0:	d037      	beq.n	8003622 <_malloc_r+0xe6>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	442b      	add	r3, r5
 80035b6:	6023      	str	r3, [r4, #0]
 80035b8:	f8d8 3000 	ldr.w	r3, [r8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d038      	beq.n	8003632 <_malloc_r+0xf6>
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	42a2      	cmp	r2, r4
 80035c4:	d12b      	bne.n	800361e <_malloc_r+0xe2>
 80035c6:	2200      	movs	r2, #0
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	e00f      	b.n	80035ec <_malloc_r+0xb0>
 80035cc:	6822      	ldr	r2, [r4, #0]
 80035ce:	1b52      	subs	r2, r2, r5
 80035d0:	d41f      	bmi.n	8003612 <_malloc_r+0xd6>
 80035d2:	2a0b      	cmp	r2, #11
 80035d4:	d917      	bls.n	8003606 <_malloc_r+0xca>
 80035d6:	1961      	adds	r1, r4, r5
 80035d8:	42a3      	cmp	r3, r4
 80035da:	6025      	str	r5, [r4, #0]
 80035dc:	bf18      	it	ne
 80035de:	6059      	strne	r1, [r3, #4]
 80035e0:	6863      	ldr	r3, [r4, #4]
 80035e2:	bf08      	it	eq
 80035e4:	f8c8 1000 	streq.w	r1, [r8]
 80035e8:	5162      	str	r2, [r4, r5]
 80035ea:	604b      	str	r3, [r1, #4]
 80035ec:	4638      	mov	r0, r7
 80035ee:	f104 060b 	add.w	r6, r4, #11
 80035f2:	f000 f829 	bl	8003648 <__malloc_unlock>
 80035f6:	f026 0607 	bic.w	r6, r6, #7
 80035fa:	1d23      	adds	r3, r4, #4
 80035fc:	1af2      	subs	r2, r6, r3
 80035fe:	d0ae      	beq.n	800355e <_malloc_r+0x22>
 8003600:	1b9b      	subs	r3, r3, r6
 8003602:	50a3      	str	r3, [r4, r2]
 8003604:	e7ab      	b.n	800355e <_malloc_r+0x22>
 8003606:	42a3      	cmp	r3, r4
 8003608:	6862      	ldr	r2, [r4, #4]
 800360a:	d1dd      	bne.n	80035c8 <_malloc_r+0x8c>
 800360c:	f8c8 2000 	str.w	r2, [r8]
 8003610:	e7ec      	b.n	80035ec <_malloc_r+0xb0>
 8003612:	4623      	mov	r3, r4
 8003614:	6864      	ldr	r4, [r4, #4]
 8003616:	e7ac      	b.n	8003572 <_malloc_r+0x36>
 8003618:	4634      	mov	r4, r6
 800361a:	6876      	ldr	r6, [r6, #4]
 800361c:	e7b4      	b.n	8003588 <_malloc_r+0x4c>
 800361e:	4613      	mov	r3, r2
 8003620:	e7cc      	b.n	80035bc <_malloc_r+0x80>
 8003622:	230c      	movs	r3, #12
 8003624:	4638      	mov	r0, r7
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	f000 f80e 	bl	8003648 <__malloc_unlock>
 800362c:	e797      	b.n	800355e <_malloc_r+0x22>
 800362e:	6025      	str	r5, [r4, #0]
 8003630:	e7dc      	b.n	80035ec <_malloc_r+0xb0>
 8003632:	605b      	str	r3, [r3, #4]
 8003634:	deff      	udf	#255	; 0xff
 8003636:	bf00      	nop
 8003638:	20000860 	.word	0x20000860

0800363c <__malloc_lock>:
 800363c:	4801      	ldr	r0, [pc, #4]	; (8003644 <__malloc_lock+0x8>)
 800363e:	f7ff bf13 	b.w	8003468 <__retarget_lock_acquire_recursive>
 8003642:	bf00      	nop
 8003644:	2000085c 	.word	0x2000085c

08003648 <__malloc_unlock>:
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <__malloc_unlock+0x8>)
 800364a:	f7ff bf0e 	b.w	800346a <__retarget_lock_release_recursive>
 800364e:	bf00      	nop
 8003650:	2000085c 	.word	0x2000085c

08003654 <__ssputs_r>:
 8003654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	461f      	mov	r7, r3
 800365a:	688e      	ldr	r6, [r1, #8]
 800365c:	4682      	mov	sl, r0
 800365e:	42be      	cmp	r6, r7
 8003660:	460c      	mov	r4, r1
 8003662:	4690      	mov	r8, r2
 8003664:	680b      	ldr	r3, [r1, #0]
 8003666:	d82c      	bhi.n	80036c2 <__ssputs_r+0x6e>
 8003668:	898a      	ldrh	r2, [r1, #12]
 800366a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800366e:	d026      	beq.n	80036be <__ssputs_r+0x6a>
 8003670:	6965      	ldr	r5, [r4, #20]
 8003672:	6909      	ldr	r1, [r1, #16]
 8003674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003678:	eba3 0901 	sub.w	r9, r3, r1
 800367c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003680:	1c7b      	adds	r3, r7, #1
 8003682:	444b      	add	r3, r9
 8003684:	106d      	asrs	r5, r5, #1
 8003686:	429d      	cmp	r5, r3
 8003688:	bf38      	it	cc
 800368a:	461d      	movcc	r5, r3
 800368c:	0553      	lsls	r3, r2, #21
 800368e:	d527      	bpl.n	80036e0 <__ssputs_r+0x8c>
 8003690:	4629      	mov	r1, r5
 8003692:	f7ff ff53 	bl	800353c <_malloc_r>
 8003696:	4606      	mov	r6, r0
 8003698:	b360      	cbz	r0, 80036f4 <__ssputs_r+0xa0>
 800369a:	464a      	mov	r2, r9
 800369c:	6921      	ldr	r1, [r4, #16]
 800369e:	f000 fafd 	bl	8003c9c <memcpy>
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ac:	81a3      	strh	r3, [r4, #12]
 80036ae:	6126      	str	r6, [r4, #16]
 80036b0:	444e      	add	r6, r9
 80036b2:	6026      	str	r6, [r4, #0]
 80036b4:	463e      	mov	r6, r7
 80036b6:	6165      	str	r5, [r4, #20]
 80036b8:	eba5 0509 	sub.w	r5, r5, r9
 80036bc:	60a5      	str	r5, [r4, #8]
 80036be:	42be      	cmp	r6, r7
 80036c0:	d900      	bls.n	80036c4 <__ssputs_r+0x70>
 80036c2:	463e      	mov	r6, r7
 80036c4:	4632      	mov	r2, r6
 80036c6:	4641      	mov	r1, r8
 80036c8:	6820      	ldr	r0, [r4, #0]
 80036ca:	f000 faaf 	bl	8003c2c <memmove>
 80036ce:	2000      	movs	r0, #0
 80036d0:	68a3      	ldr	r3, [r4, #8]
 80036d2:	1b9b      	subs	r3, r3, r6
 80036d4:	60a3      	str	r3, [r4, #8]
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	4433      	add	r3, r6
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e0:	462a      	mov	r2, r5
 80036e2:	f000 fae9 	bl	8003cb8 <_realloc_r>
 80036e6:	4606      	mov	r6, r0
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d1e0      	bne.n	80036ae <__ssputs_r+0x5a>
 80036ec:	4650      	mov	r0, sl
 80036ee:	6921      	ldr	r1, [r4, #16]
 80036f0:	f7ff febc 	bl	800346c <_free_r>
 80036f4:	230c      	movs	r3, #12
 80036f6:	f8ca 3000 	str.w	r3, [sl]
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	e7e9      	b.n	80036dc <__ssputs_r+0x88>

08003708 <_svfiprintf_r>:
 8003708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	4698      	mov	r8, r3
 800370e:	898b      	ldrh	r3, [r1, #12]
 8003710:	4607      	mov	r7, r0
 8003712:	061b      	lsls	r3, r3, #24
 8003714:	460d      	mov	r5, r1
 8003716:	4614      	mov	r4, r2
 8003718:	b09d      	sub	sp, #116	; 0x74
 800371a:	d50e      	bpl.n	800373a <_svfiprintf_r+0x32>
 800371c:	690b      	ldr	r3, [r1, #16]
 800371e:	b963      	cbnz	r3, 800373a <_svfiprintf_r+0x32>
 8003720:	2140      	movs	r1, #64	; 0x40
 8003722:	f7ff ff0b 	bl	800353c <_malloc_r>
 8003726:	6028      	str	r0, [r5, #0]
 8003728:	6128      	str	r0, [r5, #16]
 800372a:	b920      	cbnz	r0, 8003736 <_svfiprintf_r+0x2e>
 800372c:	230c      	movs	r3, #12
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	e0d0      	b.n	80038d8 <_svfiprintf_r+0x1d0>
 8003736:	2340      	movs	r3, #64	; 0x40
 8003738:	616b      	str	r3, [r5, #20]
 800373a:	2300      	movs	r3, #0
 800373c:	9309      	str	r3, [sp, #36]	; 0x24
 800373e:	2320      	movs	r3, #32
 8003740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003744:	2330      	movs	r3, #48	; 0x30
 8003746:	f04f 0901 	mov.w	r9, #1
 800374a:	f8cd 800c 	str.w	r8, [sp, #12]
 800374e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80038f0 <_svfiprintf_r+0x1e8>
 8003752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003756:	4623      	mov	r3, r4
 8003758:	469a      	mov	sl, r3
 800375a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800375e:	b10a      	cbz	r2, 8003764 <_svfiprintf_r+0x5c>
 8003760:	2a25      	cmp	r2, #37	; 0x25
 8003762:	d1f9      	bne.n	8003758 <_svfiprintf_r+0x50>
 8003764:	ebba 0b04 	subs.w	fp, sl, r4
 8003768:	d00b      	beq.n	8003782 <_svfiprintf_r+0x7a>
 800376a:	465b      	mov	r3, fp
 800376c:	4622      	mov	r2, r4
 800376e:	4629      	mov	r1, r5
 8003770:	4638      	mov	r0, r7
 8003772:	f7ff ff6f 	bl	8003654 <__ssputs_r>
 8003776:	3001      	adds	r0, #1
 8003778:	f000 80a9 	beq.w	80038ce <_svfiprintf_r+0x1c6>
 800377c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800377e:	445a      	add	r2, fp
 8003780:	9209      	str	r2, [sp, #36]	; 0x24
 8003782:	f89a 3000 	ldrb.w	r3, [sl]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80a1 	beq.w	80038ce <_svfiprintf_r+0x1c6>
 800378c:	2300      	movs	r3, #0
 800378e:	f04f 32ff 	mov.w	r2, #4294967295
 8003792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003796:	f10a 0a01 	add.w	sl, sl, #1
 800379a:	9304      	str	r3, [sp, #16]
 800379c:	9307      	str	r3, [sp, #28]
 800379e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037a2:	931a      	str	r3, [sp, #104]	; 0x68
 80037a4:	4654      	mov	r4, sl
 80037a6:	2205      	movs	r2, #5
 80037a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ac:	4850      	ldr	r0, [pc, #320]	; (80038f0 <_svfiprintf_r+0x1e8>)
 80037ae:	f000 fa67 	bl	8003c80 <memchr>
 80037b2:	9a04      	ldr	r2, [sp, #16]
 80037b4:	b9d8      	cbnz	r0, 80037ee <_svfiprintf_r+0xe6>
 80037b6:	06d0      	lsls	r0, r2, #27
 80037b8:	bf44      	itt	mi
 80037ba:	2320      	movmi	r3, #32
 80037bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037c0:	0711      	lsls	r1, r2, #28
 80037c2:	bf44      	itt	mi
 80037c4:	232b      	movmi	r3, #43	; 0x2b
 80037c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ca:	f89a 3000 	ldrb.w	r3, [sl]
 80037ce:	2b2a      	cmp	r3, #42	; 0x2a
 80037d0:	d015      	beq.n	80037fe <_svfiprintf_r+0xf6>
 80037d2:	4654      	mov	r4, sl
 80037d4:	2000      	movs	r0, #0
 80037d6:	f04f 0c0a 	mov.w	ip, #10
 80037da:	9a07      	ldr	r2, [sp, #28]
 80037dc:	4621      	mov	r1, r4
 80037de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037e2:	3b30      	subs	r3, #48	; 0x30
 80037e4:	2b09      	cmp	r3, #9
 80037e6:	d94d      	bls.n	8003884 <_svfiprintf_r+0x17c>
 80037e8:	b1b0      	cbz	r0, 8003818 <_svfiprintf_r+0x110>
 80037ea:	9207      	str	r2, [sp, #28]
 80037ec:	e014      	b.n	8003818 <_svfiprintf_r+0x110>
 80037ee:	eba0 0308 	sub.w	r3, r0, r8
 80037f2:	fa09 f303 	lsl.w	r3, r9, r3
 80037f6:	4313      	orrs	r3, r2
 80037f8:	46a2      	mov	sl, r4
 80037fa:	9304      	str	r3, [sp, #16]
 80037fc:	e7d2      	b.n	80037a4 <_svfiprintf_r+0x9c>
 80037fe:	9b03      	ldr	r3, [sp, #12]
 8003800:	1d19      	adds	r1, r3, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	9103      	str	r1, [sp, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	bfbb      	ittet	lt
 800380a:	425b      	neglt	r3, r3
 800380c:	f042 0202 	orrlt.w	r2, r2, #2
 8003810:	9307      	strge	r3, [sp, #28]
 8003812:	9307      	strlt	r3, [sp, #28]
 8003814:	bfb8      	it	lt
 8003816:	9204      	strlt	r2, [sp, #16]
 8003818:	7823      	ldrb	r3, [r4, #0]
 800381a:	2b2e      	cmp	r3, #46	; 0x2e
 800381c:	d10c      	bne.n	8003838 <_svfiprintf_r+0x130>
 800381e:	7863      	ldrb	r3, [r4, #1]
 8003820:	2b2a      	cmp	r3, #42	; 0x2a
 8003822:	d134      	bne.n	800388e <_svfiprintf_r+0x186>
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	3402      	adds	r4, #2
 8003828:	1d1a      	adds	r2, r3, #4
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	9203      	str	r2, [sp, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	bfb8      	it	lt
 8003832:	f04f 33ff 	movlt.w	r3, #4294967295
 8003836:	9305      	str	r3, [sp, #20]
 8003838:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80038f4 <_svfiprintf_r+0x1ec>
 800383c:	2203      	movs	r2, #3
 800383e:	4650      	mov	r0, sl
 8003840:	7821      	ldrb	r1, [r4, #0]
 8003842:	f000 fa1d 	bl	8003c80 <memchr>
 8003846:	b138      	cbz	r0, 8003858 <_svfiprintf_r+0x150>
 8003848:	2240      	movs	r2, #64	; 0x40
 800384a:	9b04      	ldr	r3, [sp, #16]
 800384c:	eba0 000a 	sub.w	r0, r0, sl
 8003850:	4082      	lsls	r2, r0
 8003852:	4313      	orrs	r3, r2
 8003854:	3401      	adds	r4, #1
 8003856:	9304      	str	r3, [sp, #16]
 8003858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800385c:	2206      	movs	r2, #6
 800385e:	4826      	ldr	r0, [pc, #152]	; (80038f8 <_svfiprintf_r+0x1f0>)
 8003860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003864:	f000 fa0c 	bl	8003c80 <memchr>
 8003868:	2800      	cmp	r0, #0
 800386a:	d038      	beq.n	80038de <_svfiprintf_r+0x1d6>
 800386c:	4b23      	ldr	r3, [pc, #140]	; (80038fc <_svfiprintf_r+0x1f4>)
 800386e:	bb1b      	cbnz	r3, 80038b8 <_svfiprintf_r+0x1b0>
 8003870:	9b03      	ldr	r3, [sp, #12]
 8003872:	3307      	adds	r3, #7
 8003874:	f023 0307 	bic.w	r3, r3, #7
 8003878:	3308      	adds	r3, #8
 800387a:	9303      	str	r3, [sp, #12]
 800387c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800387e:	4433      	add	r3, r6
 8003880:	9309      	str	r3, [sp, #36]	; 0x24
 8003882:	e768      	b.n	8003756 <_svfiprintf_r+0x4e>
 8003884:	460c      	mov	r4, r1
 8003886:	2001      	movs	r0, #1
 8003888:	fb0c 3202 	mla	r2, ip, r2, r3
 800388c:	e7a6      	b.n	80037dc <_svfiprintf_r+0xd4>
 800388e:	2300      	movs	r3, #0
 8003890:	f04f 0c0a 	mov.w	ip, #10
 8003894:	4619      	mov	r1, r3
 8003896:	3401      	adds	r4, #1
 8003898:	9305      	str	r3, [sp, #20]
 800389a:	4620      	mov	r0, r4
 800389c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038a0:	3a30      	subs	r2, #48	; 0x30
 80038a2:	2a09      	cmp	r2, #9
 80038a4:	d903      	bls.n	80038ae <_svfiprintf_r+0x1a6>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0c6      	beq.n	8003838 <_svfiprintf_r+0x130>
 80038aa:	9105      	str	r1, [sp, #20]
 80038ac:	e7c4      	b.n	8003838 <_svfiprintf_r+0x130>
 80038ae:	4604      	mov	r4, r0
 80038b0:	2301      	movs	r3, #1
 80038b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80038b6:	e7f0      	b.n	800389a <_svfiprintf_r+0x192>
 80038b8:	ab03      	add	r3, sp, #12
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	462a      	mov	r2, r5
 80038be:	4638      	mov	r0, r7
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <_svfiprintf_r+0x1f8>)
 80038c2:	a904      	add	r1, sp, #16
 80038c4:	f3af 8000 	nop.w
 80038c8:	1c42      	adds	r2, r0, #1
 80038ca:	4606      	mov	r6, r0
 80038cc:	d1d6      	bne.n	800387c <_svfiprintf_r+0x174>
 80038ce:	89ab      	ldrh	r3, [r5, #12]
 80038d0:	065b      	lsls	r3, r3, #25
 80038d2:	f53f af2d 	bmi.w	8003730 <_svfiprintf_r+0x28>
 80038d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038d8:	b01d      	add	sp, #116	; 0x74
 80038da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038de:	ab03      	add	r3, sp, #12
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	462a      	mov	r2, r5
 80038e4:	4638      	mov	r0, r7
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <_svfiprintf_r+0x1f8>)
 80038e8:	a904      	add	r1, sp, #16
 80038ea:	f000 f87d 	bl	80039e8 <_printf_i>
 80038ee:	e7eb      	b.n	80038c8 <_svfiprintf_r+0x1c0>
 80038f0:	0800456c 	.word	0x0800456c
 80038f4:	08004572 	.word	0x08004572
 80038f8:	08004576 	.word	0x08004576
 80038fc:	00000000 	.word	0x00000000
 8003900:	08003655 	.word	0x08003655

08003904 <_printf_common>:
 8003904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003908:	4616      	mov	r6, r2
 800390a:	4699      	mov	r9, r3
 800390c:	688a      	ldr	r2, [r1, #8]
 800390e:	690b      	ldr	r3, [r1, #16]
 8003910:	4607      	mov	r7, r0
 8003912:	4293      	cmp	r3, r2
 8003914:	bfb8      	it	lt
 8003916:	4613      	movlt	r3, r2
 8003918:	6033      	str	r3, [r6, #0]
 800391a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800391e:	460c      	mov	r4, r1
 8003920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003924:	b10a      	cbz	r2, 800392a <_printf_common+0x26>
 8003926:	3301      	adds	r3, #1
 8003928:	6033      	str	r3, [r6, #0]
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	0699      	lsls	r1, r3, #26
 800392e:	bf42      	ittt	mi
 8003930:	6833      	ldrmi	r3, [r6, #0]
 8003932:	3302      	addmi	r3, #2
 8003934:	6033      	strmi	r3, [r6, #0]
 8003936:	6825      	ldr	r5, [r4, #0]
 8003938:	f015 0506 	ands.w	r5, r5, #6
 800393c:	d106      	bne.n	800394c <_printf_common+0x48>
 800393e:	f104 0a19 	add.w	sl, r4, #25
 8003942:	68e3      	ldr	r3, [r4, #12]
 8003944:	6832      	ldr	r2, [r6, #0]
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	42ab      	cmp	r3, r5
 800394a:	dc2b      	bgt.n	80039a4 <_printf_common+0xa0>
 800394c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003950:	1e13      	subs	r3, r2, #0
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	bf18      	it	ne
 8003956:	2301      	movne	r3, #1
 8003958:	0692      	lsls	r2, r2, #26
 800395a:	d430      	bmi.n	80039be <_printf_common+0xba>
 800395c:	4649      	mov	r1, r9
 800395e:	4638      	mov	r0, r7
 8003960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003964:	47c0      	blx	r8
 8003966:	3001      	adds	r0, #1
 8003968:	d023      	beq.n	80039b2 <_printf_common+0xae>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	6922      	ldr	r2, [r4, #16]
 800396e:	f003 0306 	and.w	r3, r3, #6
 8003972:	2b04      	cmp	r3, #4
 8003974:	bf14      	ite	ne
 8003976:	2500      	movne	r5, #0
 8003978:	6833      	ldreq	r3, [r6, #0]
 800397a:	f04f 0600 	mov.w	r6, #0
 800397e:	bf08      	it	eq
 8003980:	68e5      	ldreq	r5, [r4, #12]
 8003982:	f104 041a 	add.w	r4, r4, #26
 8003986:	bf08      	it	eq
 8003988:	1aed      	subeq	r5, r5, r3
 800398a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800398e:	bf08      	it	eq
 8003990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003994:	4293      	cmp	r3, r2
 8003996:	bfc4      	itt	gt
 8003998:	1a9b      	subgt	r3, r3, r2
 800399a:	18ed      	addgt	r5, r5, r3
 800399c:	42b5      	cmp	r5, r6
 800399e:	d11a      	bne.n	80039d6 <_printf_common+0xd2>
 80039a0:	2000      	movs	r0, #0
 80039a2:	e008      	b.n	80039b6 <_printf_common+0xb2>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4652      	mov	r2, sl
 80039a8:	4649      	mov	r1, r9
 80039aa:	4638      	mov	r0, r7
 80039ac:	47c0      	blx	r8
 80039ae:	3001      	adds	r0, #1
 80039b0:	d103      	bne.n	80039ba <_printf_common+0xb6>
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295
 80039b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ba:	3501      	adds	r5, #1
 80039bc:	e7c1      	b.n	8003942 <_printf_common+0x3e>
 80039be:	2030      	movs	r0, #48	; 0x30
 80039c0:	18e1      	adds	r1, r4, r3
 80039c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039cc:	4422      	add	r2, r4
 80039ce:	3302      	adds	r3, #2
 80039d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039d4:	e7c2      	b.n	800395c <_printf_common+0x58>
 80039d6:	2301      	movs	r3, #1
 80039d8:	4622      	mov	r2, r4
 80039da:	4649      	mov	r1, r9
 80039dc:	4638      	mov	r0, r7
 80039de:	47c0      	blx	r8
 80039e0:	3001      	adds	r0, #1
 80039e2:	d0e6      	beq.n	80039b2 <_printf_common+0xae>
 80039e4:	3601      	adds	r6, #1
 80039e6:	e7d9      	b.n	800399c <_printf_common+0x98>

080039e8 <_printf_i>:
 80039e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039ec:	7e0f      	ldrb	r7, [r1, #24]
 80039ee:	4691      	mov	r9, r2
 80039f0:	2f78      	cmp	r7, #120	; 0x78
 80039f2:	4680      	mov	r8, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	469a      	mov	sl, r3
 80039f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039fe:	d807      	bhi.n	8003a10 <_printf_i+0x28>
 8003a00:	2f62      	cmp	r7, #98	; 0x62
 8003a02:	d80a      	bhi.n	8003a1a <_printf_i+0x32>
 8003a04:	2f00      	cmp	r7, #0
 8003a06:	f000 80d5 	beq.w	8003bb4 <_printf_i+0x1cc>
 8003a0a:	2f58      	cmp	r7, #88	; 0x58
 8003a0c:	f000 80c1 	beq.w	8003b92 <_printf_i+0x1aa>
 8003a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a18:	e03a      	b.n	8003a90 <_printf_i+0xa8>
 8003a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a1e:	2b15      	cmp	r3, #21
 8003a20:	d8f6      	bhi.n	8003a10 <_printf_i+0x28>
 8003a22:	a101      	add	r1, pc, #4	; (adr r1, 8003a28 <_printf_i+0x40>)
 8003a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a28:	08003a81 	.word	0x08003a81
 8003a2c:	08003a95 	.word	0x08003a95
 8003a30:	08003a11 	.word	0x08003a11
 8003a34:	08003a11 	.word	0x08003a11
 8003a38:	08003a11 	.word	0x08003a11
 8003a3c:	08003a11 	.word	0x08003a11
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	08003a11 	.word	0x08003a11
 8003a48:	08003a11 	.word	0x08003a11
 8003a4c:	08003a11 	.word	0x08003a11
 8003a50:	08003a11 	.word	0x08003a11
 8003a54:	08003b9b 	.word	0x08003b9b
 8003a58:	08003ac1 	.word	0x08003ac1
 8003a5c:	08003b55 	.word	0x08003b55
 8003a60:	08003a11 	.word	0x08003a11
 8003a64:	08003a11 	.word	0x08003a11
 8003a68:	08003bbd 	.word	0x08003bbd
 8003a6c:	08003a11 	.word	0x08003a11
 8003a70:	08003ac1 	.word	0x08003ac1
 8003a74:	08003a11 	.word	0x08003a11
 8003a78:	08003a11 	.word	0x08003a11
 8003a7c:	08003b5d 	.word	0x08003b5d
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	1d1a      	adds	r2, r3, #4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	602a      	str	r2, [r5, #0]
 8003a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0a0      	b.n	8003bd6 <_printf_i+0x1ee>
 8003a94:	6820      	ldr	r0, [r4, #0]
 8003a96:	682b      	ldr	r3, [r5, #0]
 8003a98:	0607      	lsls	r7, r0, #24
 8003a9a:	f103 0104 	add.w	r1, r3, #4
 8003a9e:	6029      	str	r1, [r5, #0]
 8003aa0:	d501      	bpl.n	8003aa6 <_printf_i+0xbe>
 8003aa2:	681e      	ldr	r6, [r3, #0]
 8003aa4:	e003      	b.n	8003aae <_printf_i+0xc6>
 8003aa6:	0646      	lsls	r6, r0, #25
 8003aa8:	d5fb      	bpl.n	8003aa2 <_printf_i+0xba>
 8003aaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003aae:	2e00      	cmp	r6, #0
 8003ab0:	da03      	bge.n	8003aba <_printf_i+0xd2>
 8003ab2:	232d      	movs	r3, #45	; 0x2d
 8003ab4:	4276      	negs	r6, r6
 8003ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aba:	230a      	movs	r3, #10
 8003abc:	4859      	ldr	r0, [pc, #356]	; (8003c24 <_printf_i+0x23c>)
 8003abe:	e012      	b.n	8003ae6 <_printf_i+0xfe>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	6820      	ldr	r0, [r4, #0]
 8003ac4:	1d19      	adds	r1, r3, #4
 8003ac6:	6029      	str	r1, [r5, #0]
 8003ac8:	0605      	lsls	r5, r0, #24
 8003aca:	d501      	bpl.n	8003ad0 <_printf_i+0xe8>
 8003acc:	681e      	ldr	r6, [r3, #0]
 8003ace:	e002      	b.n	8003ad6 <_printf_i+0xee>
 8003ad0:	0641      	lsls	r1, r0, #25
 8003ad2:	d5fb      	bpl.n	8003acc <_printf_i+0xe4>
 8003ad4:	881e      	ldrh	r6, [r3, #0]
 8003ad6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ad8:	bf0c      	ite	eq
 8003ada:	2308      	moveq	r3, #8
 8003adc:	230a      	movne	r3, #10
 8003ade:	4851      	ldr	r0, [pc, #324]	; (8003c24 <_printf_i+0x23c>)
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ae6:	6865      	ldr	r5, [r4, #4]
 8003ae8:	2d00      	cmp	r5, #0
 8003aea:	bfa8      	it	ge
 8003aec:	6821      	ldrge	r1, [r4, #0]
 8003aee:	60a5      	str	r5, [r4, #8]
 8003af0:	bfa4      	itt	ge
 8003af2:	f021 0104 	bicge.w	r1, r1, #4
 8003af6:	6021      	strge	r1, [r4, #0]
 8003af8:	b90e      	cbnz	r6, 8003afe <_printf_i+0x116>
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	d04b      	beq.n	8003b96 <_printf_i+0x1ae>
 8003afe:	4615      	mov	r5, r2
 8003b00:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b04:	fb03 6711 	mls	r7, r3, r1, r6
 8003b08:	5dc7      	ldrb	r7, [r0, r7]
 8003b0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b0e:	4637      	mov	r7, r6
 8003b10:	42bb      	cmp	r3, r7
 8003b12:	460e      	mov	r6, r1
 8003b14:	d9f4      	bls.n	8003b00 <_printf_i+0x118>
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d10b      	bne.n	8003b32 <_printf_i+0x14a>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	07de      	lsls	r6, r3, #31
 8003b1e:	d508      	bpl.n	8003b32 <_printf_i+0x14a>
 8003b20:	6923      	ldr	r3, [r4, #16]
 8003b22:	6861      	ldr	r1, [r4, #4]
 8003b24:	4299      	cmp	r1, r3
 8003b26:	bfde      	ittt	le
 8003b28:	2330      	movle	r3, #48	; 0x30
 8003b2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b32:	1b52      	subs	r2, r2, r5
 8003b34:	6122      	str	r2, [r4, #16]
 8003b36:	464b      	mov	r3, r9
 8003b38:	4621      	mov	r1, r4
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	f8cd a000 	str.w	sl, [sp]
 8003b40:	aa03      	add	r2, sp, #12
 8003b42:	f7ff fedf 	bl	8003904 <_printf_common>
 8003b46:	3001      	adds	r0, #1
 8003b48:	d14a      	bne.n	8003be0 <_printf_i+0x1f8>
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	b004      	add	sp, #16
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	f043 0320 	orr.w	r3, r3, #32
 8003b5a:	6023      	str	r3, [r4, #0]
 8003b5c:	2778      	movs	r7, #120	; 0x78
 8003b5e:	4832      	ldr	r0, [pc, #200]	; (8003c28 <_printf_i+0x240>)
 8003b60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	6829      	ldr	r1, [r5, #0]
 8003b68:	061f      	lsls	r7, r3, #24
 8003b6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b6e:	d402      	bmi.n	8003b76 <_printf_i+0x18e>
 8003b70:	065f      	lsls	r7, r3, #25
 8003b72:	bf48      	it	mi
 8003b74:	b2b6      	uxthmi	r6, r6
 8003b76:	07df      	lsls	r7, r3, #31
 8003b78:	bf48      	it	mi
 8003b7a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b7e:	6029      	str	r1, [r5, #0]
 8003b80:	bf48      	it	mi
 8003b82:	6023      	strmi	r3, [r4, #0]
 8003b84:	b91e      	cbnz	r6, 8003b8e <_printf_i+0x1a6>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	f023 0320 	bic.w	r3, r3, #32
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	2310      	movs	r3, #16
 8003b90:	e7a6      	b.n	8003ae0 <_printf_i+0xf8>
 8003b92:	4824      	ldr	r0, [pc, #144]	; (8003c24 <_printf_i+0x23c>)
 8003b94:	e7e4      	b.n	8003b60 <_printf_i+0x178>
 8003b96:	4615      	mov	r5, r2
 8003b98:	e7bd      	b.n	8003b16 <_printf_i+0x12e>
 8003b9a:	682b      	ldr	r3, [r5, #0]
 8003b9c:	6826      	ldr	r6, [r4, #0]
 8003b9e:	1d18      	adds	r0, r3, #4
 8003ba0:	6961      	ldr	r1, [r4, #20]
 8003ba2:	6028      	str	r0, [r5, #0]
 8003ba4:	0635      	lsls	r5, r6, #24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	d501      	bpl.n	8003bae <_printf_i+0x1c6>
 8003baa:	6019      	str	r1, [r3, #0]
 8003bac:	e002      	b.n	8003bb4 <_printf_i+0x1cc>
 8003bae:	0670      	lsls	r0, r6, #25
 8003bb0:	d5fb      	bpl.n	8003baa <_printf_i+0x1c2>
 8003bb2:	8019      	strh	r1, [r3, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4615      	mov	r5, r2
 8003bb8:	6123      	str	r3, [r4, #16]
 8003bba:	e7bc      	b.n	8003b36 <_printf_i+0x14e>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	1d1a      	adds	r2, r3, #4
 8003bc2:	602a      	str	r2, [r5, #0]
 8003bc4:	681d      	ldr	r5, [r3, #0]
 8003bc6:	6862      	ldr	r2, [r4, #4]
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f000 f859 	bl	8003c80 <memchr>
 8003bce:	b108      	cbz	r0, 8003bd4 <_printf_i+0x1ec>
 8003bd0:	1b40      	subs	r0, r0, r5
 8003bd2:	6060      	str	r0, [r4, #4]
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	6123      	str	r3, [r4, #16]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bde:	e7aa      	b.n	8003b36 <_printf_i+0x14e>
 8003be0:	462a      	mov	r2, r5
 8003be2:	4649      	mov	r1, r9
 8003be4:	4640      	mov	r0, r8
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	47d0      	blx	sl
 8003bea:	3001      	adds	r0, #1
 8003bec:	d0ad      	beq.n	8003b4a <_printf_i+0x162>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	079b      	lsls	r3, r3, #30
 8003bf2:	d413      	bmi.n	8003c1c <_printf_i+0x234>
 8003bf4:	68e0      	ldr	r0, [r4, #12]
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	4298      	cmp	r0, r3
 8003bfa:	bfb8      	it	lt
 8003bfc:	4618      	movlt	r0, r3
 8003bfe:	e7a6      	b.n	8003b4e <_printf_i+0x166>
 8003c00:	2301      	movs	r3, #1
 8003c02:	4632      	mov	r2, r6
 8003c04:	4649      	mov	r1, r9
 8003c06:	4640      	mov	r0, r8
 8003c08:	47d0      	blx	sl
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d09d      	beq.n	8003b4a <_printf_i+0x162>
 8003c0e:	3501      	adds	r5, #1
 8003c10:	68e3      	ldr	r3, [r4, #12]
 8003c12:	9903      	ldr	r1, [sp, #12]
 8003c14:	1a5b      	subs	r3, r3, r1
 8003c16:	42ab      	cmp	r3, r5
 8003c18:	dcf2      	bgt.n	8003c00 <_printf_i+0x218>
 8003c1a:	e7eb      	b.n	8003bf4 <_printf_i+0x20c>
 8003c1c:	2500      	movs	r5, #0
 8003c1e:	f104 0619 	add.w	r6, r4, #25
 8003c22:	e7f5      	b.n	8003c10 <_printf_i+0x228>
 8003c24:	0800457d 	.word	0x0800457d
 8003c28:	0800458e 	.word	0x0800458e

08003c2c <memmove>:
 8003c2c:	4288      	cmp	r0, r1
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	eb01 0402 	add.w	r4, r1, r2
 8003c34:	d902      	bls.n	8003c3c <memmove+0x10>
 8003c36:	4284      	cmp	r4, r0
 8003c38:	4623      	mov	r3, r4
 8003c3a:	d807      	bhi.n	8003c4c <memmove+0x20>
 8003c3c:	1e43      	subs	r3, r0, #1
 8003c3e:	42a1      	cmp	r1, r4
 8003c40:	d008      	beq.n	8003c54 <memmove+0x28>
 8003c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c4a:	e7f8      	b.n	8003c3e <memmove+0x12>
 8003c4c:	4601      	mov	r1, r0
 8003c4e:	4402      	add	r2, r0
 8003c50:	428a      	cmp	r2, r1
 8003c52:	d100      	bne.n	8003c56 <memmove+0x2a>
 8003c54:	bd10      	pop	{r4, pc}
 8003c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c5e:	e7f7      	b.n	8003c50 <memmove+0x24>

08003c60 <_sbrk_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	2300      	movs	r3, #0
 8003c64:	4d05      	ldr	r5, [pc, #20]	; (8003c7c <_sbrk_r+0x1c>)
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	f7fc ff50 	bl	8000b10 <_sbrk>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_sbrk_r+0x1a>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_sbrk_r+0x1a>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	20000858 	.word	0x20000858

08003c80 <memchr>:
 8003c80:	4603      	mov	r3, r0
 8003c82:	b510      	push	{r4, lr}
 8003c84:	b2c9      	uxtb	r1, r1
 8003c86:	4402      	add	r2, r0
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	d101      	bne.n	8003c92 <memchr+0x12>
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e003      	b.n	8003c9a <memchr+0x1a>
 8003c92:	7804      	ldrb	r4, [r0, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	428c      	cmp	r4, r1
 8003c98:	d1f6      	bne.n	8003c88 <memchr+0x8>
 8003c9a:	bd10      	pop	{r4, pc}

08003c9c <memcpy>:
 8003c9c:	440a      	add	r2, r1
 8003c9e:	4291      	cmp	r1, r2
 8003ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ca4:	d100      	bne.n	8003ca8 <memcpy+0xc>
 8003ca6:	4770      	bx	lr
 8003ca8:	b510      	push	{r4, lr}
 8003caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cae:	4291      	cmp	r1, r2
 8003cb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cb4:	d1f9      	bne.n	8003caa <memcpy+0xe>
 8003cb6:	bd10      	pop	{r4, pc}

08003cb8 <_realloc_r>:
 8003cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cbc:	4680      	mov	r8, r0
 8003cbe:	4614      	mov	r4, r2
 8003cc0:	460e      	mov	r6, r1
 8003cc2:	b921      	cbnz	r1, 8003cce <_realloc_r+0x16>
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cca:	f7ff bc37 	b.w	800353c <_malloc_r>
 8003cce:	b92a      	cbnz	r2, 8003cdc <_realloc_r+0x24>
 8003cd0:	f7ff fbcc 	bl	800346c <_free_r>
 8003cd4:	4625      	mov	r5, r4
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cdc:	f000 f81b 	bl	8003d16 <_malloc_usable_size_r>
 8003ce0:	4284      	cmp	r4, r0
 8003ce2:	4607      	mov	r7, r0
 8003ce4:	d802      	bhi.n	8003cec <_realloc_r+0x34>
 8003ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003cea:	d812      	bhi.n	8003d12 <_realloc_r+0x5a>
 8003cec:	4621      	mov	r1, r4
 8003cee:	4640      	mov	r0, r8
 8003cf0:	f7ff fc24 	bl	800353c <_malloc_r>
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	d0ed      	beq.n	8003cd6 <_realloc_r+0x1e>
 8003cfa:	42bc      	cmp	r4, r7
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	4631      	mov	r1, r6
 8003d00:	bf28      	it	cs
 8003d02:	463a      	movcs	r2, r7
 8003d04:	f7ff ffca 	bl	8003c9c <memcpy>
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	f7ff fbae 	bl	800346c <_free_r>
 8003d10:	e7e1      	b.n	8003cd6 <_realloc_r+0x1e>
 8003d12:	4635      	mov	r5, r6
 8003d14:	e7df      	b.n	8003cd6 <_realloc_r+0x1e>

08003d16 <_malloc_usable_size_r>:
 8003d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d1a:	1f18      	subs	r0, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bfbc      	itt	lt
 8003d20:	580b      	ldrlt	r3, [r1, r0]
 8003d22:	18c0      	addlt	r0, r0, r3
 8003d24:	4770      	bx	lr
	...

08003d28 <_init>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	bf00      	nop
 8003d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2e:	bc08      	pop	{r3}
 8003d30:	469e      	mov	lr, r3
 8003d32:	4770      	bx	lr

08003d34 <_fini>:
 8003d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d36:	bf00      	nop
 8003d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3a:	bc08      	pop	{r3}
 8003d3c:	469e      	mov	lr, r3
 8003d3e:	4770      	bx	lr
