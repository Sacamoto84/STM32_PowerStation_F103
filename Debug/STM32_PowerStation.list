
STM32_PowerStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002df4  0800a2c0  0800a2c0  0001a2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0b4  0800d0b4  00020240  2**0
                  CONTENTS
  4 .ARM          00000000  0800d0b4  0800d0b4  00020240  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d0b4  0800d0b4  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d0b4  0800d0b4  0001d0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0bc  0800d0bc  0001d0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d0c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  20000240  0800d300  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  0800d300  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020269  2**0
                  CONTENTS, READONLY
 13 .debug_info   0009a8a5  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043fa  00000000  00000000  000bab51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  000bef50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000182d  00000000  00000000  000c03c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e2f2  00000000  00000000  000c1bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000223d4  00000000  00000000  000dfee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097ed2  00000000  00000000  001022bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006548  00000000  00000000  0019a190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00005fdc  00000000  00000000  001a06d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001a66b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000240 	.word	0x20000240
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a2a4 	.word	0x0800a2a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000244 	.word	0x20000244
 800014c:	0800a2a4 	.word	0x0800a2a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <MX_GPIO_Init+0xbc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a28      	ldr	r2, [pc, #160]	; (80011d8 <MX_GPIO_Init+0xbc>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <MX_GPIO_Init+0xbc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <MX_GPIO_Init+0xbc>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <MX_GPIO_Init+0xbc>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <MX_GPIO_Init+0xbc>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_GPIO_Init+0xbc>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <MX_GPIO_Init+0xbc>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_GPIO_Init+0xbc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2110      	movs	r1, #16
 800117c:	4817      	ldr	r0, [pc, #92]	; (80011dc <MX_GPIO_Init+0xc0>)
 800117e:	f003 f97e 	bl	800447e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001182:	2310      	movs	r3, #16
 8001184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2302      	movs	r3, #2
 8001190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_GPIO_Init+0xc0>)
 800119a:	f002 ffd5 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB15 */
  GPIO_InitStruct.Pin = DRDY_Pin|GPIO_PIN_15;
 800119e:	f248 0301 	movw	r3, #32769	; 0x8001
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4619      	mov	r1, r3
 80011b2:	480b      	ldr	r0, [pc, #44]	; (80011e0 <MX_GPIO_Init+0xc4>)
 80011b4:	f002 ffc8 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_GPIO_Init+0xc4>)
 80011cc:	f002 ffbc 	bl	8004148 <HAL_GPIO_Init>

}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010800 	.word	0x40010800
 80011e0:	40010c00 	.word	0x40010c00

080011e4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C2_Init+0x50>)
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <MX_I2C2_Init+0x54>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C2_Init+0x50>)
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_I2C2_Init+0x58>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C2_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_I2C2_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_I2C2_Init+0x50>)
 8001202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001206:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_I2C2_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_I2C2_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_I2C2_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_I2C2_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_I2C2_Init+0x50>)
 8001222:	f003 f945 	bl	80044b0 <HAL_I2C_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800122c:	f002 fb40 	bl	80038b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000025c 	.word	0x2000025c
 8001238:	40005800 	.word	0x40005800
 800123c:	00061a80 	.word	0x00061a80

08001240 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <HAL_I2C_MspInit+0x74>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d124      	bne.n	80012aa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_I2C_MspInit+0x78>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <HAL_I2C_MspInit+0x78>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_I2C_MspInit+0x78>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001278:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800127c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127e:	2312      	movs	r3, #18
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4619      	mov	r1, r3
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <HAL_I2C_MspInit+0x7c>)
 800128e:	f002 ff5b 	bl	8004148 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_I2C_MspInit+0x78>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_I2C_MspInit+0x78>)
 8001298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_I2C_MspInit+0x78>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40005800 	.word	0x40005800
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010c00 	.word	0x40010c00

080012c0 <_ZN7ADS124311sendCommandEh.isra.0>:
		XferByte(15);
		ADS124x_CS_1;

	}

	void sendCommand(uint8_t cmd)
 80012c0:	b570      	push	{r4, r5, r6, lr}
	{
		ADS124x_CS_0;
 80012c2:	2200      	movs	r2, #0
 80012c4:	2110      	movs	r1, #16
	void sendCommand(uint8_t cmd)
 80012c6:	4606      	mov	r6, r0
 80012c8:	b084      	sub	sp, #16
		ADS124x_CS_0;
 80012ca:	481f      	ldr	r0, [pc, #124]	; (8001348 <_ZN7ADS124311sendCommandEh.isra.0+0x88>)
 80012cc:	f003 f8d7 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80012d0:	2300      	movs	r3, #0
 80012d2:	491e      	ldr	r1, [pc, #120]	; (800134c <_ZN7ADS124311sendCommandEh.isra.0+0x8c>)
 80012d4:	4d1e      	ldr	r5, [pc, #120]	; (8001350 <_ZN7ADS124311sendCommandEh.isra.0+0x90>)
 80012d6:	604b      	str	r3, [r1, #4]
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <_ZN7ADS124311sendCommandEh.isra.0+0x94>)
 80012da:	682b      	ldr	r3, [r5, #0]
 80012dc:	4c1e      	ldr	r4, [pc, #120]	; (8001358 <_ZN7ADS124311sendCommandEh.isra.0+0x98>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9b      	lsrs	r3, r3, #18
 80012e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	3b10      	subs	r3, #16
 80012ec:	6023      	str	r3, [r4, #0]
 80012ee:	684a      	ldr	r2, [r1, #4]
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d8fc      	bhi.n	80012ee <_ZN7ADS124311sendCommandEh.isra.0+0x2e>
		XferByte(cmd);
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <_ZN7ADS124311sendCommandEh.isra.0+0x9c>)
 80012f6:	f88d 600e 	strb.w	r6, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80012fa:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d0fb      	beq.n	80012fa <_ZN7ADS124311sendCommandEh.isra.0+0x3a>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001302:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001306:	2301      	movs	r3, #1
 8001308:	f10d 020f 	add.w	r2, sp, #15
 800130c:	f10d 010e 	add.w	r1, sp, #14
 8001310:	4812      	ldr	r0, [pc, #72]	; (800135c <_ZN7ADS124311sendCommandEh.isra.0+0x9c>)
 8001312:	9600      	str	r6, [sp, #0]
 8001314:	f004 f9fc 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001318:	2300      	movs	r3, #0
 800131a:	490c      	ldr	r1, [pc, #48]	; (800134c <_ZN7ADS124311sendCommandEh.isra.0+0x8c>)
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <_ZN7ADS124311sendCommandEh.isra.0+0x94>)
 800131e:	604b      	str	r3, [r1, #4]
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9b      	lsrs	r3, r3, #18
 8001328:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	3b10      	subs	r3, #16
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	684a      	ldr	r2, [r1, #4]
 8001334:	4293      	cmp	r3, r2
 8001336:	d8fc      	bhi.n	8001332 <_ZN7ADS124311sendCommandEh.isra.0+0x72>
		ADS124x_CS_1;
 8001338:	2201      	movs	r2, #1
 800133a:	2110      	movs	r1, #16
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <_ZN7ADS124311sendCommandEh.isra.0+0x88>)
	}
 800133e:	b004      	add	sp, #16
 8001340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ADS124x_CS_1;
 8001344:	f003 b89b 	b.w	800447e <HAL_GPIO_WritePin>
 8001348:	40010800 	.word	0x40010800
 800134c:	e0001000 	.word	0xe0001000
 8001350:	2000005c 	.word	0x2000005c
 8001354:	431bde83 	.word	0x431bde83
 8001358:	20000990 	.word	0x20000990
 800135c:	200008a0 	.word	0x200008a0

08001360 <_ZN7ADS124315readAllRegisterEv>:
	void readAllRegister() {
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
		ADS124x_CS_0;
 8001362:	2200      	movs	r2, #0
 8001364:	2110      	movs	r1, #16
	void readAllRegister() {
 8001366:	4606      	mov	r6, r0
 8001368:	b085      	sub	sp, #20
		ADS124x_CS_0;
 800136a:	48cf      	ldr	r0, [pc, #828]	; (80016a8 <_ZN7ADS124315readAllRegisterEv+0x348>)
 800136c:	f003 f887 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001370:	2300      	movs	r3, #0
 8001372:	49ce      	ldr	r1, [pc, #824]	; (80016ac <_ZN7ADS124315readAllRegisterEv+0x34c>)
 8001374:	4fce      	ldr	r7, [pc, #824]	; (80016b0 <_ZN7ADS124315readAllRegisterEv+0x350>)
 8001376:	604b      	str	r3, [r1, #4]
 8001378:	4ace      	ldr	r2, [pc, #824]	; (80016b4 <_ZN7ADS124315readAllRegisterEv+0x354>)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4dce      	ldr	r5, [pc, #824]	; (80016b8 <_ZN7ADS124315readAllRegisterEv+0x358>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0c9b      	lsrs	r3, r3, #18
 8001384:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	3b10      	subs	r3, #16
 800138c:	602b      	str	r3, [r5, #0]
 800138e:	684a      	ldr	r2, [r1, #4]
 8001390:	4293      	cmp	r3, r2
 8001392:	d8fc      	bhi.n	800138e <_ZN7ADS124315readAllRegisterEv+0x2e>
		XferByte(0x10);
 8001394:	2310      	movs	r3, #16
 8001396:	4cc9      	ldr	r4, [pc, #804]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001398:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800139c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d0fb      	beq.n	800139c <_ZN7ADS124315readAllRegisterEv+0x3c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80013a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a8:	48c4      	ldr	r0, [pc, #784]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	f10d 020f 	add.w	r2, sp, #15
 80013b0:	2301      	movs	r3, #1
 80013b2:	f10d 010e 	add.w	r1, sp, #14
 80013b6:	f004 f9ab 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(15);
 80013ba:	230f      	movs	r3, #15
 80013bc:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80013c0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d0fb      	beq.n	80013c0 <_ZN7ADS124315readAllRegisterEv+0x60>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80013c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013cc:	48bb      	ldr	r0, [pc, #748]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	f10d 020f 	add.w	r2, sp, #15
 80013d4:	2301      	movs	r3, #1
 80013d6:	f10d 010e 	add.w	r1, sp, #14
 80013da:	f004 f999 	bl	8005710 <HAL_SPI_TransmitReceive>
		readSETUP(XferByte(0));
 80013de:	2300      	movs	r3, #0
 80013e0:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80013e4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d0fb      	beq.n	80013e4 <_ZN7ADS124315readAllRegisterEv+0x84>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80013ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f0:	48b2      	ldr	r0, [pc, #712]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	f10d 020f 	add.w	r2, sp, #15
 80013f8:	2301      	movs	r3, #1
 80013fa:	f10d 010e 	add.w	r1, sp, #14
 80013fe:	f004 f987 	bl	8005710 <HAL_SPI_TransmitReceive>


	void readSETUP(uint8_t p) {
		ADSregister.SETUP.PGA = p & 0x7;
		ADSregister.SETUP.BOCS = (p >> 3) & 0x1;
		ADSregister.SETUP.ID = p >> 4;
 8001402:	2300      	movs	r3, #0
 8001404:	f88d 300e 	strb.w	r3, [sp, #14]
		ADSregister.SETUP.PGA = p & 0x7;
 8001408:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800140c:	7033      	strb	r3, [r6, #0]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800140e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001412:	2b02      	cmp	r3, #2
 8001414:	d0fb      	beq.n	800140e <_ZN7ADS124315readAllRegisterEv+0xae>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	48a8      	ldr	r0, [pc, #672]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	f10d 020f 	add.w	r2, sp, #15
 8001422:	2301      	movs	r3, #1
 8001424:	f10d 010e 	add.w	r1, sp, #14
 8001428:	f004 f972 	bl	8005710 <HAL_SPI_TransmitReceive>
	}

	void readMUX(uint8_t p) {
		ADSregister.MUX.NSEL = p & 0x0F;
		ADSregister.MUX.PSEL = (uint8_t) ((p >> 4) & 0x0F);
 800142c:	2300      	movs	r3, #0
 800142e:	f88d 300e 	strb.w	r3, [sp, #14]
		ADSregister.MUX.NSEL = p & 0x0F;
 8001432:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001436:	7073      	strb	r3, [r6, #1]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001438:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800143c:	2b02      	cmp	r3, #2
 800143e:	d0fb      	beq.n	8001438 <_ZN7ADS124315readAllRegisterEv+0xd8>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001444:	489d      	ldr	r0, [pc, #628]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	f10d 020f 	add.w	r2, sp, #15
 800144c:	2301      	movs	r3, #1
 800144e:	f10d 010e 	add.w	r1, sp, #14
 8001452:	f004 f95d 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (value >> pos) & 1;
 8001456:	2300      	movs	r3, #0
 8001458:	f88d 300e 	strb.w	r3, [sp, #14]
	}

	void readACR(uint8_t p) {
		ADSregister.ACR.DR0 = read_bit(p, 0);
 800145c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001460:	70b3      	strb	r3, [r6, #2]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001462:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001466:	2b02      	cmp	r3, #2
 8001468:	d0fb      	beq.n	8001462 <_ZN7ADS124315readAllRegisterEv+0x102>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	4893      	ldr	r0, [pc, #588]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	f10d 020f 	add.w	r2, sp, #15
 8001476:	2301      	movs	r3, #1
 8001478:	f10d 010e 	add.w	r1, sp, #14
 800147c:	f004 f948 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001480:	2300      	movs	r3, #0
 8001482:	f88d 300e 	strb.w	r3, [sp, #14]
 8001486:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.ODAC = XferByte(0);
 800148a:	70f3      	strb	r3, [r6, #3]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800148c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001490:	2b02      	cmp	r3, #2
 8001492:	d0fb      	beq.n	800148c <_ZN7ADS124315readAllRegisterEv+0x12c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001498:	4888      	ldr	r0, [pc, #544]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	f10d 020f 	add.w	r2, sp, #15
 80014a0:	2301      	movs	r3, #1
 80014a2:	f10d 010e 	add.w	r1, sp, #14
 80014a6:	f004 f933 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f88d 300e 	strb.w	r3, [sp, #14]
 80014b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DIO = XferByte(0);
 80014b4:	7133      	strb	r3, [r6, #4]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80014b6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d0fb      	beq.n	80014b6 <_ZN7ADS124315readAllRegisterEv+0x156>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	487e      	ldr	r0, [pc, #504]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	f10d 020f 	add.w	r2, sp, #15
 80014ca:	2301      	movs	r3, #1
 80014cc:	f10d 010e 	add.w	r1, sp, #14
 80014d0:	f004 f91e 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f88d 300e 	strb.w	r3, [sp, #14]
 80014da:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DIR = XferByte(0);
 80014de:	7173      	strb	r3, [r6, #5]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80014e0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d0fb      	beq.n	80014e0 <_ZN7ADS124315readAllRegisterEv+0x180>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80014e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ec:	4873      	ldr	r0, [pc, #460]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	f10d 020f 	add.w	r2, sp, #15
 80014f4:	2301      	movs	r3, #1
 80014f6:	f10d 010e 	add.w	r1, sp, #14
 80014fa:	f004 f909 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80014fe:	2300      	movs	r3, #0
 8001500:	f88d 300e 	strb.w	r3, [sp, #14]
 8001504:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.IOCON = XferByte(0);
 8001508:	71b3      	strb	r3, [r6, #6]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800150a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800150e:	2b02      	cmp	r3, #2
 8001510:	d0fb      	beq.n	800150a <_ZN7ADS124315readAllRegisterEv+0x1aa>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	4869      	ldr	r0, [pc, #420]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f10d 020f 	add.w	r2, sp, #15
 800151e:	2301      	movs	r3, #1
 8001520:	f10d 010e 	add.w	r1, sp, #14
 8001524:	f004 f8f4 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001528:	2300      	movs	r3, #0
 800152a:	f88d 300e 	strb.w	r3, [sp, #14]
 800152e:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.OCR0 = XferByte(0);
 8001532:	71f3      	strb	r3, [r6, #7]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001534:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001538:	2b02      	cmp	r3, #2
 800153a:	d0fb      	beq.n	8001534 <_ZN7ADS124315readAllRegisterEv+0x1d4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001540:	485e      	ldr	r0, [pc, #376]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	f10d 020f 	add.w	r2, sp, #15
 8001548:	2301      	movs	r3, #1
 800154a:	f10d 010e 	add.w	r1, sp, #14
 800154e:	f004 f8df 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001552:	2300      	movs	r3, #0
 8001554:	f88d 300e 	strb.w	r3, [sp, #14]
 8001558:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.OCR1 = XferByte(0);
 800155c:	7233      	strb	r3, [r6, #8]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800155e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001562:	2b02      	cmp	r3, #2
 8001564:	d0fb      	beq.n	800155e <_ZN7ADS124315readAllRegisterEv+0x1fe>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	4854      	ldr	r0, [pc, #336]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	f10d 020f 	add.w	r2, sp, #15
 8001572:	2301      	movs	r3, #1
 8001574:	f10d 010e 	add.w	r1, sp, #14
 8001578:	f004 f8ca 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 800157c:	2300      	movs	r3, #0
 800157e:	f88d 300e 	strb.w	r3, [sp, #14]
 8001582:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.OCR2 = XferByte(0);
 8001586:	7273      	strb	r3, [r6, #9]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001588:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800158c:	2b02      	cmp	r3, #2
 800158e:	d0fb      	beq.n	8001588 <_ZN7ADS124315readAllRegisterEv+0x228>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001594:	4849      	ldr	r0, [pc, #292]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	f10d 020f 	add.w	r2, sp, #15
 800159c:	2301      	movs	r3, #1
 800159e:	f10d 010e 	add.w	r1, sp, #14
 80015a2:	f004 f8b5 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f88d 300e 	strb.w	r3, [sp, #14]
 80015ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.FSR0 = XferByte(0);
 80015b0:	72b3      	strb	r3, [r6, #10]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80015b2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d0fb      	beq.n	80015b2 <_ZN7ADS124315readAllRegisterEv+0x252>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	483f      	ldr	r0, [pc, #252]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	f10d 020f 	add.w	r2, sp, #15
 80015c6:	2301      	movs	r3, #1
 80015c8:	f10d 010e 	add.w	r1, sp, #14
 80015cc:	f004 f8a0 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f88d 300e 	strb.w	r3, [sp, #14]
 80015d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.FSR1 = XferByte(0);
 80015da:	72f3      	strb	r3, [r6, #11]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80015dc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d0fb      	beq.n	80015dc <_ZN7ADS124315readAllRegisterEv+0x27c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80015e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e8:	4834      	ldr	r0, [pc, #208]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	f10d 020f 	add.w	r2, sp, #15
 80015f0:	2301      	movs	r3, #1
 80015f2:	f10d 010e 	add.w	r1, sp, #14
 80015f6:	f004 f88b 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f88d 300e 	strb.w	r3, [sp, #14]
 8001600:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.FSR2 = XferByte(0);
 8001604:	7333      	strb	r3, [r6, #12]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001606:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800160a:	2b02      	cmp	r3, #2
 800160c:	d0fb      	beq.n	8001606 <_ZN7ADS124315readAllRegisterEv+0x2a6>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	482a      	ldr	r0, [pc, #168]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	f10d 020f 	add.w	r2, sp, #15
 800161a:	2301      	movs	r3, #1
 800161c:	f10d 010e 	add.w	r1, sp, #14
 8001620:	f004 f876 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001624:	2300      	movs	r3, #0
 8001626:	f88d 300e 	strb.w	r3, [sp, #14]
 800162a:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DOR2 = XferByte(0);
 800162e:	7373      	strb	r3, [r6, #13]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001630:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001634:	2b02      	cmp	r3, #2
 8001636:	d0fb      	beq.n	8001630 <_ZN7ADS124315readAllRegisterEv+0x2d0>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163c:	481f      	ldr	r0, [pc, #124]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	f10d 020f 	add.w	r2, sp, #15
 8001644:	2301      	movs	r3, #1
 8001646:	f10d 010e 	add.w	r1, sp, #14
 800164a:	f004 f861 	bl	8005710 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 800164e:	2300      	movs	r3, #0
 8001650:	f88d 300e 	strb.w	r3, [sp, #14]
 8001654:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DOR1 = XferByte(0);
 8001658:	73b3      	strb	r3, [r6, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800165a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800165e:	2b02      	cmp	r3, #2
 8001660:	d0fb      	beq.n	800165a <_ZN7ADS124315readAllRegisterEv+0x2fa>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	f10d 020f 	add.w	r2, sp, #15
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f10d 010e 	add.w	r1, sp, #14
 8001670:	2301      	movs	r3, #1
 8001672:	4812      	ldr	r0, [pc, #72]	; (80016bc <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001674:	f004 f84c 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001678:	2300      	movs	r3, #0
		return (unsigned char) rxData;
 800167a:	f89d 200f 	ldrb.w	r2, [sp, #15]
		delayMicroseconds(20);
 800167e:	490b      	ldr	r1, [pc, #44]	; (80016ac <_ZN7ADS124315readAllRegisterEv+0x34c>)
		ADSregister.DOR0 = XferByte(0);
 8001680:	73f2      	strb	r2, [r6, #15]
		delayMicroseconds(20);
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <_ZN7ADS124315readAllRegisterEv+0x354>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	3b10      	subs	r3, #16
 8001696:	602b      	str	r3, [r5, #0]
 8001698:	684a      	ldr	r2, [r1, #4]
 800169a:	4293      	cmp	r3, r2
 800169c:	d8fc      	bhi.n	8001698 <_ZN7ADS124315readAllRegisterEv+0x338>
		XferByte(15);
 800169e:	230f      	movs	r3, #15
 80016a0:	f88d 300e 	strb.w	r3, [sp, #14]
 80016a4:	e00c      	b.n	80016c0 <_ZN7ADS124315readAllRegisterEv+0x360>
 80016a6:	bf00      	nop
 80016a8:	40010800 	.word	0x40010800
 80016ac:	e0001000 	.word	0xe0001000
 80016b0:	2000005c 	.word	0x2000005c
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	20000990 	.word	0x20000990
 80016bc:	200008a0 	.word	0x200008a0
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80016c0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d0fb      	beq.n	80016c0 <_ZN7ADS124315readAllRegisterEv+0x360>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80016c8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80016cc:	f10d 020f 	add.w	r2, sp, #15
 80016d0:	f10d 010e 	add.w	r1, sp, #14
 80016d4:	2301      	movs	r3, #1
 80016d6:	9400      	str	r4, [sp, #0]
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <_ZN7ADS124315readAllRegisterEv+0x390>)
 80016da:	f004 f819 	bl	8005710 <HAL_SPI_TransmitReceive>
		ADS124x_CS_1;
 80016de:	2201      	movs	r2, #1
 80016e0:	2110      	movs	r1, #16
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <_ZN7ADS124315readAllRegisterEv+0x394>)
	}
 80016e4:	b005      	add	sp, #20
 80016e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		ADS124x_CS_1;
 80016ea:	f002 bec8 	b.w	800447e <HAL_GPIO_WritePin>
 80016ee:	bf00      	nop
 80016f0:	200008a0 	.word	0x200008a0
 80016f4:	40010800 	.word	0x40010800

080016f8 <_ZN5Power8screenUIEv>:
		else
			screenBattery();

	}

	void screenUI() {
 80016f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fc:	4604      	mov	r4, r0
 80016fe:	b09f      	sub	sp, #124	; 0x7c

		tft->Fill1(0);
 8001700:	2100      	movs	r1, #0
	void screenUI() {
 8001702:	9007      	str	r0, [sp, #28]

		adc.readAllRegister();
 8001704:	f104 0a1c 	add.w	sl, r4, #28
		tft->Fill1(0);
 8001708:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800170a:	f005 fbcb 	bl	8006ea4 <_ZN3TFT5Fill1Et>
		adc.readAllRegister();
 800170e:	4650      	mov	r0, sl
 8001710:	f7ff fe26 	bl	8001360 <_ZN7ADS124315readAllRegisterEv>
		if (adc.ADSregister.SETUP.PGA != PGA_1) {
 8001714:	7f25      	ldrb	r5, [r4, #28]
 8001716:	076b      	lsls	r3, r5, #29
 8001718:	f041 806c 	bne.w	80027f4 <_ZN5Power8screenUIEv+0x10fc>
 800171c:	ab0e      	add	r3, sp, #56	; 0x38
 800171e:	9308      	str	r3, [sp, #32]
 8001720:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8001a38 <_ZN5Power8screenUIEv+0x340>
 8001724:	ab0d      	add	r3, sp, #52	; 0x34
 8001726:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8001a3c <_ZN5Power8screenUIEv+0x344>
 800172a:	4cc5      	ldr	r4, [pc, #788]	; (8001a40 <_ZN5Power8screenUIEv+0x348>)
 800172c:	930a      	str	r3, [sp, #40]	; 0x28
		HAL_Delay(1);
 800172e:	2001      	movs	r0, #1
 8001730:	f002 fbd8 	bl	8003ee4 <HAL_Delay>
		ADS124x_CS_0;
 8001734:	2200      	movs	r2, #0
 8001736:	2110      	movs	r1, #16
 8001738:	48c2      	ldr	r0, [pc, #776]	; (8001a44 <_ZN5Power8screenUIEv+0x34c>)
 800173a:	f002 fea0 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 800173e:	2300      	movs	r3, #0
 8001740:	49c1      	ldr	r1, [pc, #772]	; (8001a48 <_ZN5Power8screenUIEv+0x350>)
 8001742:	4ac2      	ldr	r2, [pc, #776]	; (8001a4c <_ZN5Power8screenUIEv+0x354>)
 8001744:	604b      	str	r3, [r1, #4]
 8001746:	f8d9 3000 	ldr.w	r3, [r9]
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	0c9b      	lsrs	r3, r3, #18
 8001750:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001754:	009a      	lsls	r2, r3, #2
 8001756:	3a10      	subs	r2, #16
 8001758:	f8c8 2000 	str.w	r2, [r8]
 800175c:	684b      	ldr	r3, [r1, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d8fc      	bhi.n	800175c <_ZN5Power8screenUIEv+0x64>
		XferByte(cmd);
 8001762:	23fc      	movs	r3, #252	; 0xfc
 8001764:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001768:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800176c:	2b02      	cmp	r3, #2
 800176e:	d0fb      	beq.n	8001768 <_ZN5Power8screenUIEv+0x70>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001774:	9a08      	ldr	r2, [sp, #32]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	990a      	ldr	r1, [sp, #40]	; 0x28
 800177a:	2301      	movs	r3, #1
 800177c:	48b0      	ldr	r0, [pc, #704]	; (8001a40 <_ZN5Power8screenUIEv+0x348>)
 800177e:	f003 ffc7 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001782:	2300      	movs	r3, #0
 8001784:	4db0      	ldr	r5, [pc, #704]	; (8001a48 <_ZN5Power8screenUIEv+0x350>)
 8001786:	4ab1      	ldr	r2, [pc, #708]	; (8001a4c <_ZN5Power8screenUIEv+0x354>)
 8001788:	606b      	str	r3, [r5, #4]
 800178a:	f8d9 3000 	ldr.w	r3, [r9]
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001798:	009a      	lsls	r2, r3, #2
 800179a:	3a10      	subs	r2, #16
 800179c:	f8c8 2000 	str.w	r2, [r8]
 80017a0:	686b      	ldr	r3, [r5, #4]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d8fc      	bhi.n	80017a0 <_ZN5Power8screenUIEv+0xa8>
		ADS124x_CS_1;
 80017a6:	2201      	movs	r2, #1
 80017a8:	2110      	movs	r1, #16
 80017aa:	48a6      	ldr	r0, [pc, #664]	; (8001a44 <_ZN5Power8screenUIEv+0x34c>)
 80017ac:	f002 fe67 	bl	800447e <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 80017b0:	2320      	movs	r3, #32
 80017b2:	9a07      	ldr	r2, [sp, #28]
		ADS124x_CS_0;
 80017b4:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 80017b6:	7753      	strb	r3, [r2, #29]
		ADS124x_CS_0;
 80017b8:	48a2      	ldr	r0, [pc, #648]	; (8001a44 <_ZN5Power8screenUIEv+0x34c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	f002 fe5f 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80017c0:	2300      	movs	r3, #0
 80017c2:	606b      	str	r3, [r5, #4]
 80017c4:	4aa1      	ldr	r2, [pc, #644]	; (8001a4c <_ZN5Power8screenUIEv+0x354>)
 80017c6:	f8d9 3000 	ldr.w	r3, [r9]
 80017ca:	499f      	ldr	r1, [pc, #636]	; (8001a48 <_ZN5Power8screenUIEv+0x350>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	0c9b      	lsrs	r3, r3, #18
 80017d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017d6:	009a      	lsls	r2, r3, #2
 80017d8:	3a10      	subs	r2, #16
 80017da:	f8c8 2000 	str.w	r2, [r8]
 80017de:	684b      	ldr	r3, [r1, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d8fc      	bhi.n	80017de <_ZN5Power8screenUIEv+0xe6>
		XferByte(0x50 + r);
 80017e4:	2351      	movs	r3, #81	; 0x51
 80017e6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80017ea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d0fb      	beq.n	80017ea <_ZN5Power8screenUIEv+0xf2>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	9a08      	ldr	r2, [sp, #32]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017fc:	2301      	movs	r3, #1
 80017fe:	4890      	ldr	r0, [pc, #576]	; (8001a40 <_ZN5Power8screenUIEv+0x348>)
 8001800:	f003 ff86 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8001804:	2300      	movs	r3, #0
 8001806:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800180a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800180e:	2b02      	cmp	r3, #2
 8001810:	d0fb      	beq.n	800180a <_ZN5Power8screenUIEv+0x112>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	9a08      	ldr	r2, [sp, #32]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800181c:	2301      	movs	r3, #1
 800181e:	4888      	ldr	r0, [pc, #544]	; (8001a40 <_ZN5Power8screenUIEv+0x348>)
 8001820:	f003 ff76 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8001824:	2320      	movs	r3, #32
 8001826:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800182a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800182e:	2b02      	cmp	r3, #2
 8001830:	d0fb      	beq.n	800182a <_ZN5Power8screenUIEv+0x132>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	9a08      	ldr	r2, [sp, #32]
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800183c:	2301      	movs	r3, #1
 800183e:	4880      	ldr	r0, [pc, #512]	; (8001a40 <_ZN5Power8screenUIEv+0x348>)
 8001840:	f003 ff66 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001844:	2300      	movs	r3, #0
 8001846:	4d80      	ldr	r5, [pc, #512]	; (8001a48 <_ZN5Power8screenUIEv+0x350>)
 8001848:	4a80      	ldr	r2, [pc, #512]	; (8001a4c <_ZN5Power8screenUIEv+0x354>)
 800184a:	606b      	str	r3, [r5, #4]
 800184c:	f8d9 3000 	ldr.w	r3, [r9]
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	0c9b      	lsrs	r3, r3, #18
 8001856:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800185a:	009a      	lsls	r2, r3, #2
 800185c:	3a10      	subs	r2, #16
 800185e:	f8c8 2000 	str.w	r2, [r8]
 8001862:	686b      	ldr	r3, [r5, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	d8fc      	bhi.n	8001862 <_ZN5Power8screenUIEv+0x16a>
		ADS124x_CS_1;
 8001868:	2110      	movs	r1, #16
 800186a:	2201      	movs	r2, #1
 800186c:	4875      	ldr	r0, [pc, #468]	; (8001a44 <_ZN5Power8screenUIEv+0x34c>)
 800186e:	f002 fe06 	bl	800447e <HAL_GPIO_WritePin>
		HAL_Delay(41);
 8001872:	2029      	movs	r0, #41	; 0x29
 8001874:	f002 fb36 	bl	8003ee4 <HAL_Delay>
		readAllRegister();
 8001878:	4650      	mov	r0, sl
 800187a:	f7ff fd71 	bl	8001360 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 800187e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8001882:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
 8001886:	f89b 2029 	ldrb.w	r2, [fp, #41]	; 0x29
 800188a:	f89b 002b 	ldrb.w	r0, [fp, #43]	; 0x2b
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	}

//Чтение выходного напряжения 2-7
	void readOut(void) {
		uint32_t v = adc.readADC(2, 0);
		vOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.0 / 2.1269
 8001894:	4318      	orrs	r0, r3
 8001896:	f7ff f9fd 	bl	8000c94 <__aeabi_ui2f>
 800189a:	496d      	ldr	r1, [pc, #436]	; (8001a50 <_ZN5Power8screenUIEv+0x358>)
 800189c:	f7ff fa52 	bl	8000d44 <__aeabi_fmul>
 80018a0:	f7fe fdc2 	bl	8000428 <__aeabi_f2d>
				* 3.000 / 3.004 * 5.0 / 4.997;
 80018a4:	a360      	add	r3, pc, #384	; (adr r3, 8001a28 <_ZN5Power8screenUIEv+0x330>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fe15 	bl	80004d8 <__aeabi_dmul>
 80018ae:	f7ff f8eb 	bl	8000a88 <__aeabi_d2f>

		//vOut = map(vOut, 1.2532, 11.004 , 1.2530, 11.015);
		vOut -= (iOut) * 0.00008;
 80018b2:	f7fe fdb9 	bl	8000428 <__aeabi_f2d>
 80018b6:	4606      	mov	r6, r0
 80018b8:	f8db 0014 	ldr.w	r0, [fp, #20]
 80018bc:	460f      	mov	r7, r1
 80018be:	f7fe fdb3 	bl	8000428 <__aeabi_f2d>
 80018c2:	a35b      	add	r3, pc, #364	; (adr r3, 8001a30 <_ZN5Power8screenUIEv+0x338>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fe06 	bl	80004d8 <__aeabi_dmul>
 80018cc:	460b      	mov	r3, r1
 80018ce:	4602      	mov	r2, r0
 80018d0:	4639      	mov	r1, r7
 80018d2:	4630      	mov	r0, r6
 80018d4:	f7fe fc48 	bl	8000168 <__aeabi_dsub>
 80018d8:	f7ff f8d6 	bl	8000a88 <__aeabi_d2f>
 80018dc:	f8cb 0010 	str.w	r0, [fp, #16]
		HAL_Delay(1);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f002 faff 	bl	8003ee4 <HAL_Delay>
		ADS124x_CS_0;
 80018e6:	2200      	movs	r2, #0
 80018e8:	2110      	movs	r1, #16
 80018ea:	4856      	ldr	r0, [pc, #344]	; (8001a44 <_ZN5Power8screenUIEv+0x34c>)
 80018ec:	f002 fdc7 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80018f0:	2300      	movs	r3, #0
 80018f2:	606b      	str	r3, [r5, #4]
 80018f4:	4a55      	ldr	r2, [pc, #340]	; (8001a4c <_ZN5Power8screenUIEv+0x354>)
 80018f6:	f8d9 3000 	ldr.w	r3, [r9]
 80018fa:	4953      	ldr	r1, [pc, #332]	; (8001a48 <_ZN5Power8screenUIEv+0x350>)
 80018fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001900:	0c9b      	lsrs	r3, r3, #18
 8001902:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001906:	009a      	lsls	r2, r3, #2
 8001908:	3a10      	subs	r2, #16
 800190a:	f8c8 2000 	str.w	r2, [r8]
 800190e:	684b      	ldr	r3, [r1, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8fc      	bhi.n	800190e <_ZN5Power8screenUIEv+0x216>
		XferByte(cmd);
 8001914:	23fc      	movs	r3, #252	; 0xfc
 8001916:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800191a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800191e:	2b02      	cmp	r3, #2
 8001920:	d0fb      	beq.n	800191a <_ZN5Power8screenUIEv+0x222>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	9a08      	ldr	r2, [sp, #32]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800192c:	2301      	movs	r3, #1
 800192e:	4844      	ldr	r0, [pc, #272]	; (8001a40 <_ZN5Power8screenUIEv+0x348>)
 8001930:	f003 feee 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001934:	2300      	movs	r3, #0
 8001936:	4d44      	ldr	r5, [pc, #272]	; (8001a48 <_ZN5Power8screenUIEv+0x350>)
 8001938:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <_ZN5Power8screenUIEv+0x354>)
 800193a:	606b      	str	r3, [r5, #4]
 800193c:	f8d9 3000 	ldr.w	r3, [r9]
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	0c9b      	lsrs	r3, r3, #18
 8001946:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800194a:	009a      	lsls	r2, r3, #2
 800194c:	3a10      	subs	r2, #16
 800194e:	f8c8 2000 	str.w	r2, [r8]
 8001952:	686b      	ldr	r3, [r5, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8fc      	bhi.n	8001952 <_ZN5Power8screenUIEv+0x25a>
		ADS124x_CS_1;
 8001958:	2201      	movs	r2, #1
 800195a:	2110      	movs	r1, #16
 800195c:	4839      	ldr	r0, [pc, #228]	; (8001a44 <_ZN5Power8screenUIEv+0x34c>)
 800195e:	f002 fd8e 	bl	800447e <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8001962:	2376      	movs	r3, #118	; 0x76
 8001964:	9a07      	ldr	r2, [sp, #28]
		ADS124x_CS_0;
 8001966:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 8001968:	7753      	strb	r3, [r2, #29]
		ADS124x_CS_0;
 800196a:	4836      	ldr	r0, [pc, #216]	; (8001a44 <_ZN5Power8screenUIEv+0x34c>)
 800196c:	2200      	movs	r2, #0
 800196e:	f002 fd86 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001972:	2300      	movs	r3, #0
 8001974:	606b      	str	r3, [r5, #4]
 8001976:	4a35      	ldr	r2, [pc, #212]	; (8001a4c <_ZN5Power8screenUIEv+0x354>)
 8001978:	f8d9 3000 	ldr.w	r3, [r9]
 800197c:	4932      	ldr	r1, [pc, #200]	; (8001a48 <_ZN5Power8screenUIEv+0x350>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0c9b      	lsrs	r3, r3, #18
 8001984:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001988:	009a      	lsls	r2, r3, #2
 800198a:	3a10      	subs	r2, #16
 800198c:	f8c8 2000 	str.w	r2, [r8]
 8001990:	684b      	ldr	r3, [r1, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	d8fc      	bhi.n	8001990 <_ZN5Power8screenUIEv+0x298>
		XferByte(0x50 + r);
 8001996:	2351      	movs	r3, #81	; 0x51
 8001998:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800199c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d0fb      	beq.n	800199c <_ZN5Power8screenUIEv+0x2a4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80019a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a8:	9a08      	ldr	r2, [sp, #32]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80019ae:	2301      	movs	r3, #1
 80019b0:	4823      	ldr	r0, [pc, #140]	; (8001a40 <_ZN5Power8screenUIEv+0x348>)
 80019b2:	f003 fead 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(0);
 80019b6:	2300      	movs	r3, #0
 80019b8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80019bc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d0fb      	beq.n	80019bc <_ZN5Power8screenUIEv+0x2c4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80019c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c8:	9a08      	ldr	r2, [sp, #32]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80019ce:	2301      	movs	r3, #1
 80019d0:	481b      	ldr	r0, [pc, #108]	; (8001a40 <_ZN5Power8screenUIEv+0x348>)
 80019d2:	f003 fe9d 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(data);
 80019d6:	2376      	movs	r3, #118	; 0x76
 80019d8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80019dc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d0fb      	beq.n	80019dc <_ZN5Power8screenUIEv+0x2e4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80019e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e8:	9a08      	ldr	r2, [sp, #32]
 80019ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <_ZN5Power8screenUIEv+0x348>)
 80019f0:	2301      	movs	r3, #1
 80019f2:	f003 fe8d 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80019f6:	2300      	movs	r3, #0
 80019f8:	4913      	ldr	r1, [pc, #76]	; (8001a48 <_ZN5Power8screenUIEv+0x350>)
 80019fa:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <_ZN5Power8screenUIEv+0x354>)
 80019fc:	604b      	str	r3, [r1, #4]
 80019fe:	f8d9 3000 	ldr.w	r3, [r9]
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0c9b      	lsrs	r3, r3, #18
 8001a08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a0c:	009a      	lsls	r2, r3, #2
 8001a0e:	3a10      	subs	r2, #16
 8001a10:	f8c8 2000 	str.w	r2, [r8]
 8001a14:	684b      	ldr	r3, [r1, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d8fc      	bhi.n	8001a14 <_ZN5Power8screenUIEv+0x31c>
		ADS124x_CS_1;
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4809      	ldr	r0, [pc, #36]	; (8001a44 <_ZN5Power8screenUIEv+0x34c>)
 8001a20:	f002 fd2d 	bl	800447e <HAL_GPIO_WritePin>
 8001a24:	e016      	b.n	8001a54 <_ZN5Power8screenUIEv+0x35c>
 8001a26:	bf00      	nop
 8001a28:	881d1ca2 	.word	0x881d1ca2
 8001a2c:	40168d31 	.word	0x40168d31
 8001a30:	88e368f1 	.word	0x88e368f1
 8001a34:	3f14f8b5 	.word	0x3f14f8b5
 8001a38:	2000005c 	.word	0x2000005c
 8001a3c:	20000990 	.word	0x20000990
 8001a40:	200008a0 	.word	0x200008a0
 8001a44:	40010800 	.word	0x40010800
 8001a48:	e0001000 	.word	0xe0001000
 8001a4c:	431bde83 	.word	0x431bde83
 8001a50:	34200000 	.word	0x34200000
		HAL_Delay(41);
 8001a54:	2029      	movs	r0, #41	; 0x29
 8001a56:	f002 fa45 	bl	8003ee4 <HAL_Delay>
		readAllRegister();
 8001a5a:	4650      	mov	r0, sl
 8001a5c:	f7ff fc80 	bl	8001360 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8001a60:	9d07      	ldr	r5, [sp, #28]
		tft->Rectangle(0, 0, 127, 63, 1);
 8001a62:	2401      	movs	r4, #1
 8001a64:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8001a68:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8001a6c:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	}

//Чтение тока 7-6
	void readI(void) {
		uint32_t v = adc.readADC(7, 6);
		iOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 20000.0F;
 8001a76:	4318      	orrs	r0, r3
 8001a78:	f7ff f90c 	bl	8000c94 <__aeabi_ui2f>
 8001a7c:	49a7      	ldr	r1, [pc, #668]	; (8001d1c <_ZN5Power8screenUIEv+0x624>)
 8001a7e:	f7ff f961 	bl	8000d44 <__aeabi_fmul>

	}

	long map(float x, float in_min, float in_max, float out_min,
			float out_max) {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a82:	49a7      	ldr	r1, [pc, #668]	; (8001d20 <_ZN5Power8screenUIEv+0x628>)
 8001a84:	f7ff f854 	bl	8000b30 <__aeabi_fsub>
 8001a88:	49a6      	ldr	r1, [pc, #664]	; (8001d24 <_ZN5Power8screenUIEv+0x62c>)
 8001a8a:	f7ff f95b 	bl	8000d44 <__aeabi_fmul>
 8001a8e:	f7ff fb1f 	bl	80010d0 <__aeabi_f2iz>
		iOut = map(iOut, 3.5F, 996.0f, 0.0f, 996.00f); // - 3.5F;
 8001a92:	f7ff f903 	bl	8000c9c <__aeabi_i2f>
		tft->Rectangle(0, 0, 127, 63, 1);
 8001a96:	233f      	movs	r3, #63	; 0x3f
 8001a98:	2200      	movs	r2, #0
 8001a9a:	9300      	str	r3, [sp, #0]
		iOut = map(iOut, 3.5F, 996.0f, 0.0f, 996.00f); // - 3.5F;
 8001a9c:	6168      	str	r0, [r5, #20]
		tft->Rectangle(0, 0, 127, 63, 1);
 8001a9e:	9401      	str	r4, [sp, #4]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001aa4:	237f      	movs	r3, #127	; 0x7f
 8001aa6:	f005 fd0d 	bl	80074c4 <_ZN3TFT9RectangleEllttt>
		tft->LineHW(1, 47, 126, 1);
 8001aaa:	9400      	str	r4, [sp, #0]
 8001aac:	4621      	mov	r1, r4
 8001aae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001ab0:	237e      	movs	r3, #126	; 0x7e
 8001ab2:	222f      	movs	r2, #47	; 0x2f
 8001ab4:	f005 fc06 	bl	80072c4 <_ZN3TFT6LineHWElllt>

	TFT *_tft;
	GFXfont *gfxFont;

	void set_delta_x(int8_t x) {
		delta_x = x;
 8001ab8:	2202      	movs	r2, #2
 8001aba:	462c      	mov	r4, r5
		uint16_t bo = glyph->bitmapOffset;

		uint8_t w = glyph->width, h = glyph->height;
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;

		uint8_t xx, yy, bits = 0, bit = 0;
 8001abc:	2600      	movs	r6, #0
		gfxFont = (GFXfont*) f;
 8001abe:	489a      	ldr	r0, [pc, #616]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001ac0:	4b9a      	ldr	r3, [pc, #616]	; (8001d2c <_ZN5Power8screenUIEv+0x634>)
		delta_x = x;
 8001ac2:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
	}
	void SetBColor(u16 BColor) {
		uTFT.BColor = BColor;
	}
	void GotoXY(i16 x, i16 y) {
		uTFT.CurrentX = x;
 8001ac6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ac8:	4999      	ldr	r1, [pc, #612]	; (8001d30 <_ZN5Power8screenUIEv+0x638>)
		gfxFont = (GFXfont*) f;
 8001aca:	6043      	str	r3, [r0, #4]
		int16_t x = _tft->uTFT.CurrentX;
 8001acc:	6803      	ldr	r3, [r0, #0]
 8001ace:	6151      	str	r1, [r2, #20]
 8001ad0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001ad4:	f9b3 7016 	ldrsh.w	r7, [r3, #22]
		uint16_t color = _tft->uTFT.Color;
 8001ad8:	f8b3 8018 	ldrh.w	r8, [r3, #24]
				if (!(bit++ & 7)) {
					bits = bitmap[bo++];
				}
				if (bits & 0x80) {
					if (size == 1) {
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001adc:	4613      	mov	r3, r2
 8001ade:	3f12      	subs	r7, #18
		uint16_t bo = glyph->bitmapOffset;
 8001ae0:	f240 4599 	movw	r5, #1177	; 0x499
		uint8_t xx, yy, bits = 0, bit = 0;
 8001ae4:	4634      	mov	r4, r6
 8001ae6:	46c3      	mov	fp, r8
 8001ae8:	46b9      	mov	r9, r7
		int16_t x = _tft->uTFT.CurrentX;
 8001aea:	9203      	str	r2, [sp, #12]
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001aec:	3302      	adds	r3, #2
 8001aee:	3201      	adds	r2, #1
 8001af0:	9204      	str	r2, [sp, #16]
 8001af2:	9305      	str	r3, [sp, #20]
				if (!(bit++ & 7)) {
 8001af4:	f106 0801 	add.w	r8, r6, #1
 8001af8:	f016 0707 	ands.w	r7, r6, #7
 8001afc:	fa5f f888 	uxtb.w	r8, r8
 8001b00:	d103      	bne.n	8001b0a <_ZN5Power8screenUIEv+0x412>
					bits = bitmap[bo++];
 8001b02:	4b8c      	ldr	r3, [pc, #560]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001b04:	1c69      	adds	r1, r5, #1
 8001b06:	5d5c      	ldrb	r4, [r3, r5]
 8001b08:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001b0a:	0620      	lsls	r0, r4, #24
 8001b0c:	d506      	bpl.n	8001b1c <_ZN5Power8screenUIEv+0x424>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001b0e:	4886      	ldr	r0, [pc, #536]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001b10:	465b      	mov	r3, fp
 8001b12:	464a      	mov	r2, r9
 8001b14:	9904      	ldr	r1, [sp, #16]
 8001b16:	6800      	ldr	r0, [r0, #0]
 8001b18:	f005 f996 	bl	8006e48 <_ZN3TFT8SetPixelEllt>

						_tft->RectangleFilled(x + (xo16 + xx) * size,
								y + (yo16 + yy) * size, size, size, color);
					}
				}
				bits <<= 1;
 8001b1c:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001b1e:	f106 0a02 	add.w	sl, r6, #2
 8001b22:	f018 0f07 	tst.w	r8, #7
				bits <<= 1;
 8001b26:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001b28:	fa5f fa8a 	uxtb.w	sl, sl
 8001b2c:	d103      	bne.n	8001b36 <_ZN5Power8screenUIEv+0x43e>
					bits = bitmap[bo++];
 8001b2e:	4b81      	ldr	r3, [pc, #516]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001b30:	1c69      	adds	r1, r5, #1
 8001b32:	5d5c      	ldrb	r4, [r3, r5]
 8001b34:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001b36:	0621      	lsls	r1, r4, #24
 8001b38:	d506      	bpl.n	8001b48 <_ZN5Power8screenUIEv+0x450>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001b3a:	487b      	ldr	r0, [pc, #492]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001b3c:	465b      	mov	r3, fp
 8001b3e:	464a      	mov	r2, r9
 8001b40:	9905      	ldr	r1, [sp, #20]
 8001b42:	6800      	ldr	r0, [r0, #0]
 8001b44:	f005 f980 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001b48:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001b4a:	f106 0803 	add.w	r8, r6, #3
 8001b4e:	f01a 0f07 	tst.w	sl, #7
				bits <<= 1;
 8001b52:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001b54:	fa5f f888 	uxtb.w	r8, r8
 8001b58:	d103      	bne.n	8001b62 <_ZN5Power8screenUIEv+0x46a>
					bits = bitmap[bo++];
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001b5c:	1c69      	adds	r1, r5, #1
 8001b5e:	5d5c      	ldrb	r4, [r3, r5]
 8001b60:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001b62:	0622      	lsls	r2, r4, #24
 8001b64:	d507      	bpl.n	8001b76 <_ZN5Power8screenUIEv+0x47e>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001b66:	4970      	ldr	r1, [pc, #448]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001b68:	465b      	mov	r3, fp
 8001b6a:	6808      	ldr	r0, [r1, #0]
 8001b6c:	9903      	ldr	r1, [sp, #12]
 8001b6e:	464a      	mov	r2, r9
 8001b70:	3103      	adds	r1, #3
 8001b72:	f005 f969 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001b76:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001b78:	f106 0a04 	add.w	sl, r6, #4
 8001b7c:	f018 0f07 	tst.w	r8, #7
				bits <<= 1;
 8001b80:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001b82:	fa5f fa8a 	uxtb.w	sl, sl
 8001b86:	d103      	bne.n	8001b90 <_ZN5Power8screenUIEv+0x498>
					bits = bitmap[bo++];
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001b8a:	1c69      	adds	r1, r5, #1
 8001b8c:	5d5c      	ldrb	r4, [r3, r5]
 8001b8e:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001b90:	0623      	lsls	r3, r4, #24
 8001b92:	d507      	bpl.n	8001ba4 <_ZN5Power8screenUIEv+0x4ac>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001b94:	4964      	ldr	r1, [pc, #400]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001b96:	465b      	mov	r3, fp
 8001b98:	6808      	ldr	r0, [r1, #0]
 8001b9a:	9903      	ldr	r1, [sp, #12]
 8001b9c:	464a      	mov	r2, r9
 8001b9e:	3104      	adds	r1, #4
 8001ba0:	f005 f952 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001ba4:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001ba6:	f106 0805 	add.w	r8, r6, #5
 8001baa:	f01a 0f07 	tst.w	sl, #7
				bits <<= 1;
 8001bae:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001bb0:	fa5f f888 	uxtb.w	r8, r8
 8001bb4:	d103      	bne.n	8001bbe <_ZN5Power8screenUIEv+0x4c6>
					bits = bitmap[bo++];
 8001bb6:	4b5f      	ldr	r3, [pc, #380]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001bb8:	1c69      	adds	r1, r5, #1
 8001bba:	5d5c      	ldrb	r4, [r3, r5]
 8001bbc:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001bbe:	0620      	lsls	r0, r4, #24
 8001bc0:	d507      	bpl.n	8001bd2 <_ZN5Power8screenUIEv+0x4da>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001bc2:	4959      	ldr	r1, [pc, #356]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001bc4:	465b      	mov	r3, fp
 8001bc6:	6808      	ldr	r0, [r1, #0]
 8001bc8:	9903      	ldr	r1, [sp, #12]
 8001bca:	464a      	mov	r2, r9
 8001bcc:	3105      	adds	r1, #5
 8001bce:	f005 f93b 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001bd2:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001bd4:	f106 0a06 	add.w	sl, r6, #6
 8001bd8:	f018 0f07 	tst.w	r8, #7
				bits <<= 1;
 8001bdc:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001bde:	fa5f fa8a 	uxtb.w	sl, sl
 8001be2:	d103      	bne.n	8001bec <_ZN5Power8screenUIEv+0x4f4>
					bits = bitmap[bo++];
 8001be4:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001be6:	1c69      	adds	r1, r5, #1
 8001be8:	5d5c      	ldrb	r4, [r3, r5]
 8001bea:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001bec:	0621      	lsls	r1, r4, #24
 8001bee:	d507      	bpl.n	8001c00 <_ZN5Power8screenUIEv+0x508>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001bf0:	494d      	ldr	r1, [pc, #308]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001bf2:	465b      	mov	r3, fp
 8001bf4:	6808      	ldr	r0, [r1, #0]
 8001bf6:	9903      	ldr	r1, [sp, #12]
 8001bf8:	464a      	mov	r2, r9
 8001bfa:	3106      	adds	r1, #6
 8001bfc:	f005 f924 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001c00:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001c02:	f106 0807 	add.w	r8, r6, #7
 8001c06:	f01a 0f07 	tst.w	sl, #7
				bits <<= 1;
 8001c0a:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001c0c:	fa5f f888 	uxtb.w	r8, r8
 8001c10:	d103      	bne.n	8001c1a <_ZN5Power8screenUIEv+0x522>
					bits = bitmap[bo++];
 8001c12:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001c14:	1c69      	adds	r1, r5, #1
 8001c16:	5d5c      	ldrb	r4, [r3, r5]
 8001c18:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001c1a:	0622      	lsls	r2, r4, #24
 8001c1c:	d507      	bpl.n	8001c2e <_ZN5Power8screenUIEv+0x536>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001c1e:	4942      	ldr	r1, [pc, #264]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001c20:	465b      	mov	r3, fp
 8001c22:	6808      	ldr	r0, [r1, #0]
 8001c24:	9903      	ldr	r1, [sp, #12]
 8001c26:	464a      	mov	r2, r9
 8001c28:	3107      	adds	r1, #7
 8001c2a:	f005 f90d 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001c2e:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001c30:	f018 0f07 	tst.w	r8, #7
				bits <<= 1;
 8001c34:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001c36:	d103      	bne.n	8001c40 <_ZN5Power8screenUIEv+0x548>
					bits = bitmap[bo++];
 8001c38:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001c3a:	1c69      	adds	r1, r5, #1
 8001c3c:	5d5c      	ldrb	r4, [r3, r5]
 8001c3e:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001c40:	0623      	lsls	r3, r4, #24
 8001c42:	d507      	bpl.n	8001c54 <_ZN5Power8screenUIEv+0x55c>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001c44:	4938      	ldr	r1, [pc, #224]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001c46:	465b      	mov	r3, fp
 8001c48:	6808      	ldr	r0, [r1, #0]
 8001c4a:	9903      	ldr	r1, [sp, #12]
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	3108      	adds	r1, #8
 8001c50:	f005 f8fa 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001c54:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001c56:	f106 0a09 	add.w	sl, r6, #9
				bits <<= 1;
 8001c5a:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001c5c:	fa5f fa8a 	uxtb.w	sl, sl
 8001c60:	b91f      	cbnz	r7, 8001c6a <_ZN5Power8screenUIEv+0x572>
					bits = bitmap[bo++];
 8001c62:	4b34      	ldr	r3, [pc, #208]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001c64:	1c69      	adds	r1, r5, #1
 8001c66:	5d5c      	ldrb	r4, [r3, r5]
 8001c68:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001c6a:	0627      	lsls	r7, r4, #24
 8001c6c:	d507      	bpl.n	8001c7e <_ZN5Power8screenUIEv+0x586>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001c6e:	492e      	ldr	r1, [pc, #184]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001c70:	465b      	mov	r3, fp
 8001c72:	6808      	ldr	r0, [r1, #0]
 8001c74:	9903      	ldr	r1, [sp, #12]
 8001c76:	464a      	mov	r2, r9
 8001c78:	3109      	adds	r1, #9
 8001c7a:	f005 f8e5 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001c7e:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001c80:	f106 070a 	add.w	r7, r6, #10
 8001c84:	f01a 0f07 	tst.w	sl, #7
				bits <<= 1;
 8001c88:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001c8a:	b2ff      	uxtb	r7, r7
 8001c8c:	d103      	bne.n	8001c96 <_ZN5Power8screenUIEv+0x59e>
					bits = bitmap[bo++];
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001c90:	1c69      	adds	r1, r5, #1
 8001c92:	5d5c      	ldrb	r4, [r3, r5]
 8001c94:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001c96:	0620      	lsls	r0, r4, #24
 8001c98:	d507      	bpl.n	8001caa <_ZN5Power8screenUIEv+0x5b2>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001c9a:	4923      	ldr	r1, [pc, #140]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001c9c:	465b      	mov	r3, fp
 8001c9e:	6808      	ldr	r0, [r1, #0]
 8001ca0:	9903      	ldr	r1, [sp, #12]
 8001ca2:	464a      	mov	r2, r9
 8001ca4:	310a      	adds	r1, #10
 8001ca6:	f005 f8cf 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001caa:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001cac:	f106 0a0b 	add.w	sl, r6, #11
 8001cb0:	0779      	lsls	r1, r7, #29
				bits <<= 1;
 8001cb2:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001cb4:	fa5f fa8a 	uxtb.w	sl, sl
 8001cb8:	d103      	bne.n	8001cc2 <_ZN5Power8screenUIEv+0x5ca>
					bits = bitmap[bo++];
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001cbc:	1c69      	adds	r1, r5, #1
 8001cbe:	5d5c      	ldrb	r4, [r3, r5]
 8001cc0:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001cc2:	0622      	lsls	r2, r4, #24
 8001cc4:	d507      	bpl.n	8001cd6 <_ZN5Power8screenUIEv+0x5de>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001cc6:	4918      	ldr	r1, [pc, #96]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001cc8:	465b      	mov	r3, fp
 8001cca:	6808      	ldr	r0, [r1, #0]
 8001ccc:	9903      	ldr	r1, [sp, #12]
 8001cce:	464a      	mov	r2, r9
 8001cd0:	310b      	adds	r1, #11
 8001cd2:	f005 f8b9 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001cd6:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001cd8:	f106 070c 	add.w	r7, r6, #12
 8001cdc:	f01a 0f07 	tst.w	sl, #7
				bits <<= 1;
 8001ce0:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001ce2:	b2ff      	uxtb	r7, r7
 8001ce4:	d103      	bne.n	8001cee <_ZN5Power8screenUIEv+0x5f6>
					bits = bitmap[bo++];
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001ce8:	1c69      	adds	r1, r5, #1
 8001cea:	5d5c      	ldrb	r4, [r3, r5]
 8001cec:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001cee:	0623      	lsls	r3, r4, #24
 8001cf0:	d507      	bpl.n	8001d02 <_ZN5Power8screenUIEv+0x60a>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001cf2:	490d      	ldr	r1, [pc, #52]	; (8001d28 <_ZN5Power8screenUIEv+0x630>)
 8001cf4:	465b      	mov	r3, fp
 8001cf6:	6808      	ldr	r0, [r1, #0]
 8001cf8:	9903      	ldr	r1, [sp, #12]
 8001cfa:	464a      	mov	r2, r9
 8001cfc:	310c      	adds	r1, #12
 8001cfe:	f005 f8a3 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001d02:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001d04:	f106 0a0d 	add.w	sl, r6, #13
 8001d08:	0778      	lsls	r0, r7, #29
				bits <<= 1;
 8001d0a:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001d0c:	fa5f fa8a 	uxtb.w	sl, sl
 8001d10:	d113      	bne.n	8001d3a <_ZN5Power8screenUIEv+0x642>
					bits = bitmap[bo++];
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_ZN5Power8screenUIEv+0x63c>)
 8001d14:	1c69      	adds	r1, r5, #1
 8001d16:	5d5c      	ldrb	r4, [r3, r5]
 8001d18:	e00e      	b.n	8001d38 <_ZN5Power8screenUIEv+0x640>
 8001d1a:	bf00      	nop
 8001d1c:	3b435000 	.word	0x3b435000
 8001d20:	40600000 	.word	0x40600000
 8001d24:	3f80738e 	.word	0x3f80738e
 8001d28:	200007b4 	.word	0x200007b4
 8001d2c:	0800ace0 	.word	0x0800ace0
 8001d30:	0016006d 	.word	0x0016006d
 8001d34:	0800afe0 	.word	0x0800afe0
 8001d38:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001d3a:	0621      	lsls	r1, r4, #24
 8001d3c:	d507      	bpl.n	8001d4e <_ZN5Power8screenUIEv+0x656>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001d3e:	49a9      	ldr	r1, [pc, #676]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
 8001d40:	465b      	mov	r3, fp
 8001d42:	6808      	ldr	r0, [r1, #0]
 8001d44:	9903      	ldr	r1, [sp, #12]
 8001d46:	464a      	mov	r2, r9
 8001d48:	310d      	adds	r1, #13
 8001d4a:	f005 f87d 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8001d4e:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8001d50:	f01a 0f07 	tst.w	sl, #7
				bits <<= 1;
 8001d54:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8001d56:	d103      	bne.n	8001d60 <_ZN5Power8screenUIEv+0x668>
					bits = bitmap[bo++];
 8001d58:	4ba3      	ldr	r3, [pc, #652]	; (8001fe8 <_ZN5Power8screenUIEv+0x8f0>)
 8001d5a:	1c69      	adds	r1, r5, #1
 8001d5c:	5d5c      	ldrb	r4, [r3, r5]
 8001d5e:	b28d      	uxth	r5, r1
				if (bits & 0x80) {
 8001d60:	0627      	lsls	r7, r4, #24
 8001d62:	d507      	bpl.n	8001d74 <_ZN5Power8screenUIEv+0x67c>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001d64:	499f      	ldr	r1, [pc, #636]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
 8001d66:	465b      	mov	r3, fp
 8001d68:	6808      	ldr	r0, [r1, #0]
 8001d6a:	9903      	ldr	r1, [sp, #12]
 8001d6c:	464a      	mov	r2, r9
 8001d6e:	310e      	adds	r1, #14
 8001d70:	f005 f86a 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				if (!(bit++ & 7)) {
 8001d74:	360e      	adds	r6, #14
 8001d76:	b2f6      	uxtb	r6, r6
				bits <<= 1;
 8001d78:	0064      	lsls	r4, r4, #1
		for (yy = 0; yy < h; yy++) {
 8001d7a:	2efc      	cmp	r6, #252	; 0xfc
				bits <<= 1;
 8001d7c:	b2e4      	uxtb	r4, r4
		for (yy = 0; yy < h; yy++) {
 8001d7e:	f109 0901 	add.w	r9, r9, #1
 8001d82:	f47f aeb7 	bne.w	8001af4 <_ZN5Power8screenUIEv+0x3fc>
			}
		}

		//_tft->uTFT.CurrentX += glyph->width + delta_x;
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8001d86:	4997      	ldr	r1, [pc, #604]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
 8001d88:	9807      	ldr	r0, [sp, #28]
 8001d8a:	680a      	ldr	r2, [r1, #0]
 8001d8c:	f991 3049 	ldrsb.w	r3, [r1, #73]	; 0x49
 8001d90:	8a95      	ldrh	r5, [r2, #20]
 8001d92:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001d94:	4c95      	ldr	r4, [pc, #596]	; (8001fec <_ZN5Power8screenUIEv+0x8f4>)
 8001d96:	330f      	adds	r3, #15
		c -= gfxFont->first;
 8001d98:	6849      	ldr	r1, [r1, #4]
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8001d9a:	442b      	add	r3, r5
 8001d9c:	8293      	strh	r3, [r2, #20]
 8001d9e:	6144      	str	r4, [r0, #20]
		c -= gfxFont->first;
 8001da0:	890b      	ldrh	r3, [r1, #8]
  return target;
}

private:
	inline GFXglyph* pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
		return gfxFont->glyph + c;
 8001da2:	6848      	ldr	r0, [r1, #4]
		c -= gfxFont->first;
 8001da4:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
		return gfxFont->glyph + c;
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	}

	inline uint8_t* pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
		return gfxFont->bitmap;
 8001dae:	f8d1 a000 	ldr.w	sl, [r1]
		uint8_t w = glyph->width, h = glyph->height;
 8001db2:	4621      	mov	r1, r4
		uint16_t bo = glyph->bitmapOffset;
 8001db4:	f830 7033 	ldrh.w	r7, [r0, r3, lsl #3]
		return gfxFont->glyph + c;
 8001db8:	9409      	str	r4, [sp, #36]	; 0x24
		uint8_t w = glyph->width, h = glyph->height;
 8001dba:	78e3      	ldrb	r3, [r4, #3]
 8001dbc:	78a4      	ldrb	r4, [r4, #2]
		int16_t x = _tft->uTFT.CurrentX;
 8001dbe:	f9b2 5014 	ldrsh.w	r5, [r2, #20]
		uint8_t w = glyph->width, h = glyph->height;
 8001dc2:	9403      	str	r4, [sp, #12]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8001dc4:	f991 4005 	ldrsb.w	r4, [r1, #5]
		int16_t y = _tft->uTFT.CurrentY;
 8001dc8:	f9b2 0016 	ldrsh.w	r0, [r2, #22]
		uint16_t color = _tft->uTFT.Color;
 8001dcc:	f8b2 b018 	ldrh.w	fp, [r2, #24]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8001dd0:	f991 9006 	ldrsb.w	r9, [r1, #6]
		int16_t x = _tft->uTFT.CurrentX;
 8001dd4:	9504      	str	r5, [sp, #16]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8001dd6:	9406      	str	r4, [sp, #24]
		for (yy = 0; yy < h; yy++) {
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d037      	beq.n	8001e4c <_ZN5Power8screenUIEv+0x754>
		uint8_t xx, yy, bits = 0, bit = 0;
 8001ddc:	2500      	movs	r5, #0
 8001dde:	1c41      	adds	r1, r0, #1
 8001de0:	4449      	add	r1, r9
 8001de2:	462c      	mov	r4, r5
 8001de4:	4481      	add	r9, r0
 8001de6:	4610      	mov	r0, r2
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	18cb      	adds	r3, r1, r3
 8001dee:	9305      	str	r3, [sp, #20]
			for (xx = 0; xx < w; xx++) {
 8001df0:	9b03      	ldr	r3, [sp, #12]
 8001df2:	b313      	cbz	r3, 8001e3a <_ZN5Power8screenUIEv+0x742>
 8001df4:	eb03 0805 	add.w	r8, r3, r5
 8001df8:	9a04      	ldr	r2, [sp, #16]
 8001dfa:	9b06      	ldr	r3, [sp, #24]
 8001dfc:	fa5f f888 	uxtb.w	r8, r8
 8001e00:	189e      	adds	r6, r3, r2
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001e02:	46ac      	mov	ip, r5
				if (!(bit++ & 7)) {
 8001e04:	f01c 0f07 	tst.w	ip, #7
					bits = bitmap[bo++];
 8001e08:	bf08      	it	eq
 8001e0a:	f81a 4007 	ldrbeq.w	r4, [sl, r7]
 8001e0e:	f107 0301 	add.w	r3, r7, #1
				if (!(bit++ & 7)) {
 8001e12:	f105 0501 	add.w	r5, r5, #1
					bits = bitmap[bo++];
 8001e16:	bf08      	it	eq
 8001e18:	b29f      	uxtheq	r7, r3
				if (bits & 0x80) {
 8001e1a:	0622      	lsls	r2, r4, #24
				if (!(bit++ & 7)) {
 8001e1c:	b2ed      	uxtb	r5, r5
				if (bits & 0x80) {
 8001e1e:	d506      	bpl.n	8001e2e <_ZN5Power8screenUIEv+0x736>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001e20:	465b      	mov	r3, fp
 8001e22:	4631      	mov	r1, r6
 8001e24:	464a      	mov	r2, r9
 8001e26:	f005 f80f 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
 8001e2c:	6818      	ldr	r0, [r3, #0]
				bits <<= 1;
 8001e2e:	0064      	lsls	r4, r4, #1
			for (xx = 0; xx < w; xx++) {
 8001e30:	4545      	cmp	r5, r8
				bits <<= 1;
 8001e32:	b2e4      	uxtb	r4, r4
			for (xx = 0; xx < w; xx++) {
 8001e34:	f106 0601 	add.w	r6, r6, #1
 8001e38:	d1e3      	bne.n	8001e02 <_ZN5Power8screenUIEv+0x70a>
		for (yy = 0; yy < h; yy++) {
 8001e3a:	9b05      	ldr	r3, [sp, #20]
 8001e3c:	f109 0901 	add.w	r9, r9, #1
 8001e40:	454b      	cmp	r3, r9
 8001e42:	d1d5      	bne.n	8001df0 <_ZN5Power8screenUIEv+0x6f8>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8001e44:	4602      	mov	r2, r0
 8001e46:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8001e4a:	9304      	str	r3, [sp, #16]
 8001e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e4e:	4965      	ldr	r1, [pc, #404]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
 8001e50:	791b      	ldrb	r3, [r3, #4]
 8001e52:	f991 1049 	ldrsb.w	r1, [r1, #73]	; 0x49
		sprintf(str, "%6.3f", vOut);
 8001e56:	9c07      	ldr	r4, [sp, #28]
 8001e58:	440b      	add	r3, r1
 8001e5a:	9904      	ldr	r1, [sp, #16]
 8001e5c:	6920      	ldr	r0, [r4, #16]
 8001e5e:	440b      	add	r3, r1
 8001e60:	8293      	strh	r3, [r2, #20]
 8001e62:	f7fe fae1 	bl	8000428 <__aeabi_f2d>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	9808      	ldr	r0, [sp, #32]
 8001e6c:	4960      	ldr	r1, [pc, #384]	; (8001ff0 <_ZN5Power8screenUIEv+0x8f8>)
 8001e6e:	f006 f8cb 	bl	8008008 <siprintf>
 8001e72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e74:	4a5f      	ldr	r2, [pc, #380]	; (8001ff4 <_ZN5Power8screenUIEv+0x8fc>)
 8001e76:	615a      	str	r2, [r3, #20]
		while (*str) {
 8001e78:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d068      	beq.n	8001f52 <_ZN5Power8screenUIEv+0x85a>
		int16_t x = _tft->uTFT.CurrentX;
 8001e80:	9a08      	ldr	r2, [sp, #32]
 8001e82:	9209      	str	r2, [sp, #36]	; 0x24
 8001e84:	4a57      	ldr	r2, [pc, #348]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
 8001e86:	6810      	ldr	r0, [r2, #0]
 8001e88:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
 8001e8c:	9204      	str	r2, [sp, #16]
		c -= gfxFont->first;
 8001e8e:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
		int16_t y = _tft->uTFT.CurrentY;
 8001e90:	f9b0 1016 	ldrsh.w	r1, [r0, #22]
		c -= gfxFont->first;
 8001e94:	6854      	ldr	r4, [r2, #4]
		uint16_t color = _tft->uTFT.Color;
 8001e96:	f8b0 b018 	ldrh.w	fp, [r0, #24]
		c -= gfxFont->first;
 8001e9a:	8922      	ldrh	r2, [r4, #8]
		return gfxFont->glyph + c;
 8001e9c:	6865      	ldr	r5, [r4, #4]
		c -= gfxFont->first;
 8001e9e:	1a9b      	subs	r3, r3, r2
		return gfxFont->glyph + c;
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
		return gfxFont->bitmap;
 8001ea6:	f8d4 a000 	ldr.w	sl, [r4]
		uint8_t w = glyph->width, h = glyph->height;
 8001eaa:	789c      	ldrb	r4, [r3, #2]
		uint16_t bo = glyph->bitmapOffset;
 8001eac:	f835 7032 	ldrh.w	r7, [r5, r2, lsl #3]
		uint8_t w = glyph->width, h = glyph->height;
 8001eb0:	9403      	str	r4, [sp, #12]
 8001eb2:	78da      	ldrb	r2, [r3, #3]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8001eb4:	f993 4005 	ldrsb.w	r4, [r3, #5]
 8001eb8:	f993 9006 	ldrsb.w	r9, [r3, #6]
		return gfxFont->glyph + c;
 8001ebc:	930b      	str	r3, [sp, #44]	; 0x2c
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8001ebe:	9406      	str	r4, [sp, #24]
		for (yy = 0; yy < h; yy++) {
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d035      	beq.n	8001f30 <_ZN5Power8screenUIEv+0x838>
		uint8_t xx, yy, bits = 0, bit = 0;
 8001ec4:	2500      	movs	r5, #0
 8001ec6:	3a01      	subs	r2, #1
 8001ec8:	1c4c      	adds	r4, r1, #1
 8001eca:	444c      	add	r4, r9
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	18a3      	adds	r3, r4, r2
 8001ed0:	462c      	mov	r4, r5
 8001ed2:	4489      	add	r9, r1
 8001ed4:	9305      	str	r3, [sp, #20]
			for (xx = 0; xx < w; xx++) {
 8001ed6:	9b03      	ldr	r3, [sp, #12]
 8001ed8:	b313      	cbz	r3, 8001f20 <_ZN5Power8screenUIEv+0x828>
 8001eda:	eb03 0805 	add.w	r8, r3, r5
 8001ede:	9a06      	ldr	r2, [sp, #24]
 8001ee0:	9b04      	ldr	r3, [sp, #16]
 8001ee2:	fa5f f888 	uxtb.w	r8, r8
 8001ee6:	189e      	adds	r6, r3, r2
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001ee8:	46ac      	mov	ip, r5
				if (!(bit++ & 7)) {
 8001eea:	f01c 0f07 	tst.w	ip, #7
					bits = bitmap[bo++];
 8001eee:	bf08      	it	eq
 8001ef0:	f81a 4007 	ldrbeq.w	r4, [sl, r7]
 8001ef4:	f107 0301 	add.w	r3, r7, #1
				if (!(bit++ & 7)) {
 8001ef8:	f105 0501 	add.w	r5, r5, #1
					bits = bitmap[bo++];
 8001efc:	bf08      	it	eq
 8001efe:	b29f      	uxtheq	r7, r3
				if (bits & 0x80) {
 8001f00:	0623      	lsls	r3, r4, #24
				if (!(bit++ & 7)) {
 8001f02:	b2ed      	uxtb	r5, r5
				if (bits & 0x80) {
 8001f04:	d506      	bpl.n	8001f14 <_ZN5Power8screenUIEv+0x81c>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001f06:	465b      	mov	r3, fp
 8001f08:	4631      	mov	r1, r6
 8001f0a:	464a      	mov	r2, r9
 8001f0c:	f004 ff9c 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8001f10:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
 8001f12:	6818      	ldr	r0, [r3, #0]
				bits <<= 1;
 8001f14:	0064      	lsls	r4, r4, #1
			for (xx = 0; xx < w; xx++) {
 8001f16:	4545      	cmp	r5, r8
				bits <<= 1;
 8001f18:	b2e4      	uxtb	r4, r4
			for (xx = 0; xx < w; xx++) {
 8001f1a:	f106 0601 	add.w	r6, r6, #1
 8001f1e:	d1e3      	bne.n	8001ee8 <_ZN5Power8screenUIEv+0x7f0>
		for (yy = 0; yy < h; yy++) {
 8001f20:	9b05      	ldr	r3, [sp, #20]
 8001f22:	f109 0901 	add.w	r9, r9, #1
 8001f26:	454b      	cmp	r3, r9
 8001f28:	d1d5      	bne.n	8001ed6 <_ZN5Power8screenUIEv+0x7de>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8001f2a:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f32:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
 8001f34:	791b      	ldrb	r3, [r3, #4]
 8001f36:	f992 2049 	ldrsb.w	r2, [r2, #73]	; 0x49
 8001f3a:	4413      	add	r3, r2
 8001f3c:	9a04      	ldr	r2, [sp, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	b21b      	sxth	r3, r3
		while (*str) {
 8001f42:	9a09      	ldr	r2, [sp, #36]	; 0x24
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8001f44:	8283      	strh	r3, [r0, #20]
 8001f46:	9304      	str	r3, [sp, #16]
		while (*str) {
 8001f48:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d19d      	bne.n	8001e8e <_ZN5Power8screenUIEv+0x796>
		sprintf(str, "%6.3f", iOut / 1000.0F);
 8001f52:	9c07      	ldr	r4, [sp, #28]
 8001f54:	4928      	ldr	r1, [pc, #160]	; (8001ff8 <_ZN5Power8screenUIEv+0x900>)
 8001f56:	6960      	ldr	r0, [r4, #20]
 8001f58:	f7fe fef4 	bl	8000d44 <__aeabi_fmul>
 8001f5c:	f7fe fa64 	bl	8000428 <__aeabi_f2d>
 8001f60:	460b      	mov	r3, r1
 8001f62:	4602      	mov	r2, r0
 8001f64:	4922      	ldr	r1, [pc, #136]	; (8001ff0 <_ZN5Power8screenUIEv+0x8f8>)
 8001f66:	9808      	ldr	r0, [sp, #32]
 8001f68:	f006 f84e 	bl	8008008 <siprintf>
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <_ZN5Power8screenUIEv+0x904>)
		tft->GotoXY(12, 44);
 8001f6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001f70:	6143      	str	r3, [r0, #20]
 8001f72:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d079      	beq.n	800206e <_ZN5Power8screenUIEv+0x976>
		int16_t x = _tft->uTFT.CurrentX;
 8001f7a:	9a08      	ldr	r2, [sp, #32]
 8001f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8001f7e:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
 8001f80:	6810      	ldr	r0, [r2, #0]
 8001f82:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
 8001f86:	9204      	str	r2, [sp, #16]
		c -= gfxFont->first;
 8001f88:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <_ZN5Power8screenUIEv+0x8ec>)
		int16_t y = _tft->uTFT.CurrentY;
 8001f8a:	f9b0 1016 	ldrsh.w	r1, [r0, #22]
		c -= gfxFont->first;
 8001f8e:	6854      	ldr	r4, [r2, #4]
		uint16_t color = _tft->uTFT.Color;
 8001f90:	f8b0 b018 	ldrh.w	fp, [r0, #24]
		c -= gfxFont->first;
 8001f94:	8922      	ldrh	r2, [r4, #8]
		return gfxFont->glyph + c;
 8001f96:	6865      	ldr	r5, [r4, #4]
		c -= gfxFont->first;
 8001f98:	1a9b      	subs	r3, r3, r2
		return gfxFont->glyph + c;
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
		return gfxFont->bitmap;
 8001fa0:	f8d4 a000 	ldr.w	sl, [r4]
		uint8_t w = glyph->width, h = glyph->height;
 8001fa4:	789c      	ldrb	r4, [r3, #2]
		uint16_t bo = glyph->bitmapOffset;
 8001fa6:	f835 7032 	ldrh.w	r7, [r5, r2, lsl #3]
		uint8_t w = glyph->width, h = glyph->height;
 8001faa:	9403      	str	r4, [sp, #12]
 8001fac:	78da      	ldrb	r2, [r3, #3]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8001fae:	f993 4005 	ldrsb.w	r4, [r3, #5]
 8001fb2:	f993 9006 	ldrsb.w	r9, [r3, #6]
		return gfxFont->glyph + c;
 8001fb6:	930b      	str	r3, [sp, #44]	; 0x2c
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8001fb8:	9406      	str	r4, [sp, #24]
		for (yy = 0; yy < h; yy++) {
 8001fba:	2a00      	cmp	r2, #0
 8001fbc:	d044      	beq.n	8002048 <_ZN5Power8screenUIEv+0x950>
		uint8_t xx, yy, bits = 0, bit = 0;
 8001fbe:	2500      	movs	r5, #0
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	1c4c      	adds	r4, r1, #1
 8001fc4:	444c      	add	r4, r9
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	18a3      	adds	r3, r4, r2
 8001fca:	462c      	mov	r4, r5
 8001fcc:	4489      	add	r9, r1
 8001fce:	9305      	str	r3, [sp, #20]
			for (xx = 0; xx < w; xx++) {
 8001fd0:	9b03      	ldr	r3, [sp, #12]
 8001fd2:	b38b      	cbz	r3, 8002038 <_ZN5Power8screenUIEv+0x940>
 8001fd4:	eb03 0805 	add.w	r8, r3, r5
 8001fd8:	9a04      	ldr	r2, [sp, #16]
 8001fda:	9b06      	ldr	r3, [sp, #24]
 8001fdc:	fa5f f888 	uxtb.w	r8, r8
 8001fe0:	189e      	adds	r6, r3, r2
 8001fe2:	e00d      	b.n	8002000 <_ZN5Power8screenUIEv+0x908>
 8001fe4:	200007b4 	.word	0x200007b4
 8001fe8:	0800afe0 	.word	0x0800afe0
 8001fec:	002c006d 	.word	0x002c006d
 8001ff0:	0800a2c0 	.word	0x0800a2c0
 8001ff4:	0016000c 	.word	0x0016000c
 8001ff8:	3a83126f 	.word	0x3a83126f
 8001ffc:	002c000c 	.word	0x002c000c
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8002000:	46ac      	mov	ip, r5
				if (!(bit++ & 7)) {
 8002002:	f01c 0f07 	tst.w	ip, #7
					bits = bitmap[bo++];
 8002006:	bf08      	it	eq
 8002008:	f81a 4007 	ldrbeq.w	r4, [sl, r7]
 800200c:	f107 0301 	add.w	r3, r7, #1
				if (!(bit++ & 7)) {
 8002010:	f105 0501 	add.w	r5, r5, #1
					bits = bitmap[bo++];
 8002014:	bf08      	it	eq
 8002016:	b29f      	uxtheq	r7, r3
				if (bits & 0x80) {
 8002018:	0621      	lsls	r1, r4, #24
				if (!(bit++ & 7)) {
 800201a:	b2ed      	uxtb	r5, r5
				if (bits & 0x80) {
 800201c:	d506      	bpl.n	800202c <_ZN5Power8screenUIEv+0x934>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 800201e:	465b      	mov	r3, fp
 8002020:	4631      	mov	r1, r6
 8002022:	464a      	mov	r2, r9
 8002024:	f004 ff10 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8002028:	4bad      	ldr	r3, [pc, #692]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 800202a:	6818      	ldr	r0, [r3, #0]
				bits <<= 1;
 800202c:	0064      	lsls	r4, r4, #1
			for (xx = 0; xx < w; xx++) {
 800202e:	45a8      	cmp	r8, r5
				bits <<= 1;
 8002030:	b2e4      	uxtb	r4, r4
			for (xx = 0; xx < w; xx++) {
 8002032:	f106 0601 	add.w	r6, r6, #1
 8002036:	d1e3      	bne.n	8002000 <_ZN5Power8screenUIEv+0x908>
		for (yy = 0; yy < h; yy++) {
 8002038:	9b05      	ldr	r3, [sp, #20]
 800203a:	f109 0901 	add.w	r9, r9, #1
 800203e:	454b      	cmp	r3, r9
 8002040:	d1c6      	bne.n	8001fd0 <_ZN5Power8screenUIEv+0x8d8>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8002042:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8002046:	9304      	str	r3, [sp, #16]
 8002048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800204a:	4aa5      	ldr	r2, [pc, #660]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 800204c:	791b      	ldrb	r3, [r3, #4]
 800204e:	f992 2049 	ldrsb.w	r2, [r2, #73]	; 0x49
 8002052:	4413      	add	r3, r2
 8002054:	9a04      	ldr	r2, [sp, #16]
 8002056:	4413      	add	r3, r2
 8002058:	b21b      	sxth	r3, r3
		while (*str) {
 800205a:	9a09      	ldr	r2, [sp, #36]	; 0x24
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 800205c:	8283      	strh	r3, [r0, #20]
 800205e:	9304      	str	r3, [sp, #16]
		while (*str) {
 8002060:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002064:	9209      	str	r2, [sp, #36]	; 0x24
 8002066:	2b00      	cmp	r3, #0
 8002068:	d18e      	bne.n	8001f88 <_ZN5Power8screenUIEv+0x890>
		tft->LineV(63, 48, 63, 1);
 800206a:	9b07      	ldr	r3, [sp, #28]
 800206c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800206e:	233f      	movs	r3, #63	; 0x3f
 8002070:	2201      	movs	r2, #1
 8002072:	4619      	mov	r1, r3
 8002074:	9200      	str	r2, [sp, #0]
 8002076:	2230      	movs	r2, #48	; 0x30
 8002078:	f004 ff38 	bl	8006eec <_ZN3TFT5LineVElllt>
		gfxFont = (GFXfont*) f;
 800207c:	4998      	ldr	r1, [pc, #608]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 800207e:	4b99      	ldr	r3, [pc, #612]	; (80022e4 <_ZN5Power8screenUIEv+0xbec>)
		uint8_t xx, yy, bits = 0, bit = 0;
 8002080:	2500      	movs	r5, #0
		gfxFont = (GFXfont*) f;
 8002082:	604b      	str	r3, [r1, #4]
		delta_x = x;
 8002084:	23fd      	movs	r3, #253	; 0xfd
 8002086:	f881 3049 	strb.w	r3, [r1, #73]	; 0x49
 800208a:	9b07      	ldr	r3, [sp, #28]
 800208c:	4a96      	ldr	r2, [pc, #600]	; (80022e8 <_ZN5Power8screenUIEv+0xbf0>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		uint16_t bo = glyph->bitmapOffset;
 8002090:	f240 169d 	movw	r6, #413	; 0x19d
 8002094:	615a      	str	r2, [r3, #20]
		int16_t x = _tft->uTFT.CurrentX;
 8002096:	680b      	ldr	r3, [r1, #0]
		uint8_t xx, yy, bits = 0, bit = 0;
 8002098:	462c      	mov	r4, r5
		int16_t x = _tft->uTFT.CurrentX;
 800209a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800209e:	f9b3 7016 	ldrsh.w	r7, [r3, #22]
		uint16_t color = _tft->uTFT.Color;
 80020a2:	f8b3 a018 	ldrh.w	sl, [r3, #24]
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80020a6:	4613      	mov	r3, r2
 80020a8:	46d1      	mov	r9, sl
		int16_t x = _tft->uTFT.CurrentX;
 80020aa:	9203      	str	r2, [sp, #12]
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80020ac:	3302      	adds	r3, #2
 80020ae:	3201      	adds	r2, #1
					bits = bitmap[bo++];
 80020b0:	f8df b238 	ldr.w	fp, [pc, #568]	; 80022ec <_ZN5Power8screenUIEv+0xbf4>
 80020b4:	3f09      	subs	r7, #9
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80020b6:	9204      	str	r2, [sp, #16]
 80020b8:	9305      	str	r3, [sp, #20]
				if (!(bit++ & 7)) {
 80020ba:	f105 0a01 	add.w	sl, r5, #1
 80020be:	076b      	lsls	r3, r5, #29
 80020c0:	fa5f fa8a 	uxtb.w	sl, sl
 80020c4:	d103      	bne.n	80020ce <_ZN5Power8screenUIEv+0x9d6>
					bits = bitmap[bo++];
 80020c6:	1c71      	adds	r1, r6, #1
 80020c8:	f81b 4006 	ldrb.w	r4, [fp, r6]
 80020cc:	b28e      	uxth	r6, r1
				if (bits & 0x80) {
 80020ce:	0620      	lsls	r0, r4, #24
 80020d0:	d506      	bpl.n	80020e0 <_ZN5Power8screenUIEv+0x9e8>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80020d2:	4883      	ldr	r0, [pc, #524]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 80020d4:	464b      	mov	r3, r9
 80020d6:	463a      	mov	r2, r7
 80020d8:	9904      	ldr	r1, [sp, #16]
 80020da:	6800      	ldr	r0, [r0, #0]
 80020dc:	f004 feb4 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 80020e0:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 80020e2:	f105 0802 	add.w	r8, r5, #2
 80020e6:	f01a 0f07 	tst.w	sl, #7
				bits <<= 1;
 80020ea:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 80020ec:	fa5f f888 	uxtb.w	r8, r8
 80020f0:	d103      	bne.n	80020fa <_ZN5Power8screenUIEv+0xa02>
					bits = bitmap[bo++];
 80020f2:	1c71      	adds	r1, r6, #1
 80020f4:	f81b 4006 	ldrb.w	r4, [fp, r6]
 80020f8:	b28e      	uxth	r6, r1
				if (bits & 0x80) {
 80020fa:	0621      	lsls	r1, r4, #24
 80020fc:	d506      	bpl.n	800210c <_ZN5Power8screenUIEv+0xa14>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80020fe:	4878      	ldr	r0, [pc, #480]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 8002100:	464b      	mov	r3, r9
 8002102:	463a      	mov	r2, r7
 8002104:	9905      	ldr	r1, [sp, #20]
 8002106:	6800      	ldr	r0, [r0, #0]
 8002108:	f004 fe9e 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 800210c:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 800210e:	f105 0a03 	add.w	sl, r5, #3
 8002112:	f018 0f07 	tst.w	r8, #7
				bits <<= 1;
 8002116:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8002118:	fa5f fa8a 	uxtb.w	sl, sl
 800211c:	d103      	bne.n	8002126 <_ZN5Power8screenUIEv+0xa2e>
					bits = bitmap[bo++];
 800211e:	1c71      	adds	r1, r6, #1
 8002120:	f81b 4006 	ldrb.w	r4, [fp, r6]
 8002124:	b28e      	uxth	r6, r1
				if (bits & 0x80) {
 8002126:	0622      	lsls	r2, r4, #24
 8002128:	d507      	bpl.n	800213a <_ZN5Power8screenUIEv+0xa42>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 800212a:	496d      	ldr	r1, [pc, #436]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 800212c:	464b      	mov	r3, r9
 800212e:	6808      	ldr	r0, [r1, #0]
 8002130:	9903      	ldr	r1, [sp, #12]
 8002132:	463a      	mov	r2, r7
 8002134:	3103      	adds	r1, #3
 8002136:	f004 fe87 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 800213a:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 800213c:	f105 0804 	add.w	r8, r5, #4
 8002140:	f01a 0f07 	tst.w	sl, #7
				bits <<= 1;
 8002144:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8002146:	fa5f f888 	uxtb.w	r8, r8
 800214a:	d103      	bne.n	8002154 <_ZN5Power8screenUIEv+0xa5c>
					bits = bitmap[bo++];
 800214c:	1c71      	adds	r1, r6, #1
 800214e:	f81b 4006 	ldrb.w	r4, [fp, r6]
 8002152:	b28e      	uxth	r6, r1
				if (bits & 0x80) {
 8002154:	0623      	lsls	r3, r4, #24
 8002156:	d507      	bpl.n	8002168 <_ZN5Power8screenUIEv+0xa70>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8002158:	4961      	ldr	r1, [pc, #388]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 800215a:	464b      	mov	r3, r9
 800215c:	6808      	ldr	r0, [r1, #0]
 800215e:	9903      	ldr	r1, [sp, #12]
 8002160:	463a      	mov	r2, r7
 8002162:	3104      	adds	r1, #4
 8002164:	f004 fe70 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8002168:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 800216a:	f105 0a05 	add.w	sl, r5, #5
 800216e:	f018 0f07 	tst.w	r8, #7
				bits <<= 1;
 8002172:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 8002174:	fa5f fa8a 	uxtb.w	sl, sl
 8002178:	d103      	bne.n	8002182 <_ZN5Power8screenUIEv+0xa8a>
					bits = bitmap[bo++];
 800217a:	1c71      	adds	r1, r6, #1
 800217c:	f81b 4006 	ldrb.w	r4, [fp, r6]
 8002180:	b28e      	uxth	r6, r1
				if (bits & 0x80) {
 8002182:	0620      	lsls	r0, r4, #24
 8002184:	d507      	bpl.n	8002196 <_ZN5Power8screenUIEv+0xa9e>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8002186:	4956      	ldr	r1, [pc, #344]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 8002188:	464b      	mov	r3, r9
 800218a:	6808      	ldr	r0, [r1, #0]
 800218c:	9903      	ldr	r1, [sp, #12]
 800218e:	463a      	mov	r2, r7
 8002190:	3105      	adds	r1, #5
 8002192:	f004 fe59 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 8002196:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 8002198:	f105 0806 	add.w	r8, r5, #6
 800219c:	f01a 0f07 	tst.w	sl, #7
				bits <<= 1;
 80021a0:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 80021a2:	fa5f f888 	uxtb.w	r8, r8
 80021a6:	d103      	bne.n	80021b0 <_ZN5Power8screenUIEv+0xab8>
					bits = bitmap[bo++];
 80021a8:	1c71      	adds	r1, r6, #1
 80021aa:	f81b 4006 	ldrb.w	r4, [fp, r6]
 80021ae:	b28e      	uxth	r6, r1
				if (bits & 0x80) {
 80021b0:	0621      	lsls	r1, r4, #24
 80021b2:	d507      	bpl.n	80021c4 <_ZN5Power8screenUIEv+0xacc>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80021b4:	494a      	ldr	r1, [pc, #296]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 80021b6:	464b      	mov	r3, r9
 80021b8:	6808      	ldr	r0, [r1, #0]
 80021ba:	9903      	ldr	r1, [sp, #12]
 80021bc:	463a      	mov	r2, r7
 80021be:	3106      	adds	r1, #6
 80021c0:	f004 fe42 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 80021c4:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 80021c6:	f105 0a07 	add.w	sl, r5, #7
 80021ca:	f018 0f07 	tst.w	r8, #7
				bits <<= 1;
 80021ce:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 80021d0:	fa5f fa8a 	uxtb.w	sl, sl
 80021d4:	d103      	bne.n	80021de <_ZN5Power8screenUIEv+0xae6>
					bits = bitmap[bo++];
 80021d6:	1c71      	adds	r1, r6, #1
 80021d8:	f81b 4006 	ldrb.w	r4, [fp, r6]
 80021dc:	b28e      	uxth	r6, r1
				if (bits & 0x80) {
 80021de:	0622      	lsls	r2, r4, #24
 80021e0:	d507      	bpl.n	80021f2 <_ZN5Power8screenUIEv+0xafa>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80021e2:	493f      	ldr	r1, [pc, #252]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 80021e4:	464b      	mov	r3, r9
 80021e6:	6808      	ldr	r0, [r1, #0]
 80021e8:	9903      	ldr	r1, [sp, #12]
 80021ea:	463a      	mov	r2, r7
 80021ec:	3107      	adds	r1, #7
 80021ee:	f004 fe2b 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				bits <<= 1;
 80021f2:	0064      	lsls	r4, r4, #1
				if (!(bit++ & 7)) {
 80021f4:	f01a 0f07 	tst.w	sl, #7
				bits <<= 1;
 80021f8:	b2e4      	uxtb	r4, r4
				if (!(bit++ & 7)) {
 80021fa:	d103      	bne.n	8002204 <_ZN5Power8screenUIEv+0xb0c>
					bits = bitmap[bo++];
 80021fc:	1c71      	adds	r1, r6, #1
 80021fe:	f81b 4006 	ldrb.w	r4, [fp, r6]
 8002202:	b28e      	uxth	r6, r1
				if (bits & 0x80) {
 8002204:	0622      	lsls	r2, r4, #24
 8002206:	d507      	bpl.n	8002218 <_ZN5Power8screenUIEv+0xb20>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8002208:	4935      	ldr	r1, [pc, #212]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 800220a:	464b      	mov	r3, r9
 800220c:	6808      	ldr	r0, [r1, #0]
 800220e:	9903      	ldr	r1, [sp, #12]
 8002210:	463a      	mov	r2, r7
 8002212:	3108      	adds	r1, #8
 8002214:	f004 fe18 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
				if (!(bit++ & 7)) {
 8002218:	3508      	adds	r5, #8
 800221a:	b2ed      	uxtb	r5, r5
				bits <<= 1;
 800221c:	0064      	lsls	r4, r4, #1
		for (yy = 0; yy < h; yy++) {
 800221e:	2d50      	cmp	r5, #80	; 0x50
				bits <<= 1;
 8002220:	b2e4      	uxtb	r4, r4
		for (yy = 0; yy < h; yy++) {
 8002222:	f107 0701 	add.w	r7, r7, #1
 8002226:	f47f af48 	bne.w	80020ba <_ZN5Power8screenUIEv+0x9c2>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 800222a:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 800222c:	9907      	ldr	r1, [sp, #28]
 800222e:	6810      	ldr	r0, [r2, #0]
 8002230:	f992 3049 	ldrsb.w	r3, [r2, #73]	; 0x49
 8002234:	8a85      	ldrh	r5, [r0, #20]
 8002236:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8002238:	4c2d      	ldr	r4, [pc, #180]	; (80022f0 <_ZN5Power8screenUIEv+0xbf8>)
 800223a:	330b      	adds	r3, #11
		c -= gfxFont->first;
 800223c:	6852      	ldr	r2, [r2, #4]
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 800223e:	442b      	add	r3, r5
 8002240:	8283      	strh	r3, [r0, #20]
 8002242:	614c      	str	r4, [r1, #20]
		c -= gfxFont->first;
 8002244:	8913      	ldrh	r3, [r2, #8]
		return gfxFont->glyph + c;
 8002246:	6851      	ldr	r1, [r2, #4]
		c -= gfxFont->first;
 8002248:	f1c3 0352 	rsb	r3, r3, #82	; 0x52
		return gfxFont->glyph + c;
 800224c:	b2db      	uxtb	r3, r3
 800224e:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
		return gfxFont->bitmap;
 8002252:	f8d2 a000 	ldr.w	sl, [r2]
		uint8_t w = glyph->width, h = glyph->height;
 8002256:	4622      	mov	r2, r4
		uint16_t bo = glyph->bitmapOffset;
 8002258:	f831 7033 	ldrh.w	r7, [r1, r3, lsl #3]
		return gfxFont->glyph + c;
 800225c:	9409      	str	r4, [sp, #36]	; 0x24
		uint8_t w = glyph->width, h = glyph->height;
 800225e:	78e3      	ldrb	r3, [r4, #3]
 8002260:	78a4      	ldrb	r4, [r4, #2]
		int16_t x = _tft->uTFT.CurrentX;
 8002262:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
		uint8_t w = glyph->width, h = glyph->height;
 8002266:	9403      	str	r4, [sp, #12]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8002268:	f992 4005 	ldrsb.w	r4, [r2, #5]
		int16_t y = _tft->uTFT.CurrentY;
 800226c:	f9b0 1016 	ldrsh.w	r1, [r0, #22]
		uint16_t color = _tft->uTFT.Color;
 8002270:	f8b0 b018 	ldrh.w	fp, [r0, #24]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8002274:	f992 9006 	ldrsb.w	r9, [r2, #6]
		int16_t x = _tft->uTFT.CurrentX;
 8002278:	9504      	str	r5, [sp, #16]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 800227a:	9406      	str	r4, [sp, #24]
		for (yy = 0; yy < h; yy++) {
 800227c:	2b00      	cmp	r3, #0
 800227e:	d041      	beq.n	8002304 <_ZN5Power8screenUIEv+0xc0c>
		uint8_t xx, yy, bits = 0, bit = 0;
 8002280:	2500      	movs	r5, #0
 8002282:	462c      	mov	r4, r5
 8002284:	3b01      	subs	r3, #1
 8002286:	1c4a      	adds	r2, r1, #1
 8002288:	444a      	add	r2, r9
 800228a:	b2db      	uxtb	r3, r3
 800228c:	18d3      	adds	r3, r2, r3
 800228e:	4489      	add	r9, r1
 8002290:	9305      	str	r3, [sp, #20]
			for (xx = 0; xx < w; xx++) {
 8002292:	9b03      	ldr	r3, [sp, #12]
 8002294:	b373      	cbz	r3, 80022f4 <_ZN5Power8screenUIEv+0xbfc>
 8002296:	eb05 0803 	add.w	r8, r5, r3
 800229a:	9a04      	ldr	r2, [sp, #16]
 800229c:	9b06      	ldr	r3, [sp, #24]
 800229e:	fa5f f888 	uxtb.w	r8, r8
 80022a2:	189e      	adds	r6, r3, r2
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80022a4:	46ac      	mov	ip, r5
				if (!(bit++ & 7)) {
 80022a6:	f01c 0f07 	tst.w	ip, #7
					bits = bitmap[bo++];
 80022aa:	bf08      	it	eq
 80022ac:	f81a 4007 	ldrbeq.w	r4, [sl, r7]
 80022b0:	f107 0301 	add.w	r3, r7, #1
				if (!(bit++ & 7)) {
 80022b4:	f105 0501 	add.w	r5, r5, #1
					bits = bitmap[bo++];
 80022b8:	bf08      	it	eq
 80022ba:	b29f      	uxtheq	r7, r3
				if (bits & 0x80) {
 80022bc:	0623      	lsls	r3, r4, #24
				if (!(bit++ & 7)) {
 80022be:	b2ed      	uxtb	r5, r5
				if (bits & 0x80) {
 80022c0:	d506      	bpl.n	80022d0 <_ZN5Power8screenUIEv+0xbd8>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80022c2:	465b      	mov	r3, fp
 80022c4:	4631      	mov	r1, r6
 80022c6:	464a      	mov	r2, r9
 80022c8:	f004 fdbe 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <_ZN5Power8screenUIEv+0xbe8>)
 80022ce:	6818      	ldr	r0, [r3, #0]
				bits <<= 1;
 80022d0:	0064      	lsls	r4, r4, #1
			for (xx = 0; xx < w; xx++) {
 80022d2:	4545      	cmp	r5, r8
				bits <<= 1;
 80022d4:	b2e4      	uxtb	r4, r4
			for (xx = 0; xx < w; xx++) {
 80022d6:	f106 0601 	add.w	r6, r6, #1
 80022da:	d1e3      	bne.n	80022a4 <_ZN5Power8screenUIEv+0xbac>
 80022dc:	e00a      	b.n	80022f4 <_ZN5Power8screenUIEv+0xbfc>
 80022de:	bf00      	nop
 80022e0:	200007b4 	.word	0x200007b4
 80022e4:	0800a310 	.word	0x0800a310
 80022e8:	003c0002 	.word	0x003c0002
 80022ec:	0800a628 	.word	0x0800a628
 80022f0:	003c0040 	.word	0x003c0040
		for (yy = 0; yy < h; yy++) {
 80022f4:	9b05      	ldr	r3, [sp, #20]
 80022f6:	f109 0901 	add.w	r9, r9, #1
 80022fa:	454b      	cmp	r3, r9
 80022fc:	d1c9      	bne.n	8002292 <_ZN5Power8screenUIEv+0xb9a>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 80022fe:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8002302:	9304      	str	r3, [sp, #16]
		delta_x = x;
 8002304:	22fe      	movs	r2, #254	; 0xfe
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8002306:	4dab      	ldr	r5, [pc, #684]	; (80025b4 <_ZN5Power8screenUIEv+0xebc>)
 8002308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800230a:	f995 4049 	ldrsb.w	r4, [r5, #73]	; 0x49
 800230e:	791b      	ldrb	r3, [r3, #4]
		gfxFont = (GFXfont*) f;
 8002310:	49a9      	ldr	r1, [pc, #676]	; (80025b8 <_ZN5Power8screenUIEv+0xec0>)
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8002312:	4423      	add	r3, r4
 8002314:	9c04      	ldr	r4, [sp, #16]
		gfxFont = (GFXfont*) f;
 8002316:	6069      	str	r1, [r5, #4]
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8002318:	4423      	add	r3, r4
		float power = vOut * iOut / 1000.0F;
 800231a:	9c07      	ldr	r4, [sp, #28]
 800231c:	8283      	strh	r3, [r0, #20]
		delta_x = x;
 800231e:	f885 2049 	strb.w	r2, [r5, #73]	; 0x49
 8002322:	6961      	ldr	r1, [r4, #20]
 8002324:	6920      	ldr	r0, [r4, #16]
 8002326:	f7fe fd0d 	bl	8000d44 <__aeabi_fmul>
 800232a:	49a4      	ldr	r1, [pc, #656]	; (80025bc <_ZN5Power8screenUIEv+0xec4>)
 800232c:	f7fe fd0a 	bl	8000d44 <__aeabi_fmul>
		dc1 = modff(power, &cc1);
 8002330:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002332:	f005 f901 	bl	8007538 <modff>
 8002336:	4603      	mov	r3, r0
 8002338:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (cc1 < 100) {
 800233a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800233c:	4ca0      	ldr	r4, [pc, #640]	; (80025c0 <_ZN5Power8screenUIEv+0xec8>)
 800233e:	4628      	mov	r0, r5
 8002340:	6154      	str	r4, [r2, #20]
 8002342:	49a0      	ldr	r1, [pc, #640]	; (80025c4 <_ZN5Power8screenUIEv+0xecc>)
		dc1 = modff(power, &cc1);
 8002344:	461c      	mov	r4, r3
		if (cc1 < 100) {
 8002346:	f7fe fe9b 	bl	8001080 <__aeabi_fcmplt>
 800234a:	2800      	cmp	r0, #0
 800234c:	f000 8229 	beq.w	80027a2 <_ZN5Power8screenUIEv+0x10aa>
			if (cc1 < 10.0F) {
 8002350:	4628      	mov	r0, r5
 8002352:	499d      	ldr	r1, [pc, #628]	; (80025c8 <_ZN5Power8screenUIEv+0xed0>)
 8002354:	f7fe fe94 	bl	8001080 <__aeabi_fcmplt>
 8002358:	2800      	cmp	r0, #0
 800235a:	f040 8149 	bne.w	80025f0 <_ZN5Power8screenUIEv+0xef8>
				sprintf(str, "%d .%03d", (int) cc1, (int) (dc1 * 1000));
 800235e:	499b      	ldr	r1, [pc, #620]	; (80025cc <_ZN5Power8screenUIEv+0xed4>)
 8002360:	4620      	mov	r0, r4
 8002362:	f7fe fcef 	bl	8000d44 <__aeabi_fmul>
 8002366:	f7fe feb3 	bl	80010d0 <__aeabi_f2iz>
 800236a:	4604      	mov	r4, r0
 800236c:	4628      	mov	r0, r5
 800236e:	f7fe feaf 	bl	80010d0 <__aeabi_f2iz>
 8002372:	4623      	mov	r3, r4
 8002374:	4602      	mov	r2, r0
 8002376:	4996      	ldr	r1, [pc, #600]	; (80025d0 <_ZN5Power8screenUIEv+0xed8>)
 8002378:	9808      	ldr	r0, [sp, #32]
 800237a:	f005 fe45 	bl	8008008 <siprintf>
 800237e:	9b07      	ldr	r3, [sp, #28]
 8002380:	4a94      	ldr	r2, [pc, #592]	; (80025d4 <_ZN5Power8screenUIEv+0xedc>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	615a      	str	r2, [r3, #20]
		while (*str) {
 8002386:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800238a:	2a00      	cmp	r2, #0
 800238c:	d068      	beq.n	8002460 <_ZN5Power8screenUIEv+0xd68>
		int16_t x = _tft->uTFT.CurrentX;
 800238e:	9b08      	ldr	r3, [sp, #32]
 8002390:	9309      	str	r3, [sp, #36]	; 0x24
 8002392:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <_ZN5Power8screenUIEv+0xebc>)
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 800239a:	9304      	str	r3, [sp, #16]
		c -= gfxFont->first;
 800239c:	4b85      	ldr	r3, [pc, #532]	; (80025b4 <_ZN5Power8screenUIEv+0xebc>)
		int16_t y = _tft->uTFT.CurrentY;
 800239e:	f9b0 9016 	ldrsh.w	r9, [r0, #22]
		c -= gfxFont->first;
 80023a2:	6859      	ldr	r1, [r3, #4]
		uint16_t color = _tft->uTFT.Color;
 80023a4:	f8b0 b018 	ldrh.w	fp, [r0, #24]
		c -= gfxFont->first;
 80023a8:	890c      	ldrh	r4, [r1, #8]
 80023aa:	1b12      	subs	r2, r2, r4
		return gfxFont->glyph + c;
 80023ac:	b2d2      	uxtb	r2, r2
		return gfxFont->bitmap;
 80023ae:	e9d1 a400 	ldrd	sl, r4, [r1]
		return gfxFont->glyph + c;
 80023b2:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
		uint8_t w = glyph->width, h = glyph->height;
 80023b6:	7899      	ldrb	r1, [r3, #2]
		uint16_t bo = glyph->bitmapOffset;
 80023b8:	f834 7032 	ldrh.w	r7, [r4, r2, lsl #3]
		uint8_t w = glyph->width, h = glyph->height;
 80023bc:	9103      	str	r1, [sp, #12]
 80023be:	78da      	ldrb	r2, [r3, #3]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 80023c0:	f993 1005 	ldrsb.w	r1, [r3, #5]
 80023c4:	f993 4006 	ldrsb.w	r4, [r3, #6]
		return gfxFont->glyph + c;
 80023c8:	930b      	str	r3, [sp, #44]	; 0x2c
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 80023ca:	9106      	str	r1, [sp, #24]
		for (yy = 0; yy < h; yy++) {
 80023cc:	2a00      	cmp	r2, #0
 80023ce:	d036      	beq.n	800243e <_ZN5Power8screenUIEv+0xd46>
		uint8_t xx, yy, bits = 0, bit = 0;
 80023d0:	2500      	movs	r5, #0
 80023d2:	f109 0101 	add.w	r1, r9, #1
 80023d6:	4421      	add	r1, r4
 80023d8:	44a1      	add	r9, r4
 80023da:	462c      	mov	r4, r5
 80023dc:	3a01      	subs	r2, #1
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	188b      	adds	r3, r1, r2
 80023e2:	9305      	str	r3, [sp, #20]
			for (xx = 0; xx < w; xx++) {
 80023e4:	9b03      	ldr	r3, [sp, #12]
 80023e6:	b313      	cbz	r3, 800242e <_ZN5Power8screenUIEv+0xd36>
 80023e8:	eb05 0803 	add.w	r8, r5, r3
 80023ec:	9a06      	ldr	r2, [sp, #24]
 80023ee:	9b04      	ldr	r3, [sp, #16]
 80023f0:	fa5f f888 	uxtb.w	r8, r8
 80023f4:	189e      	adds	r6, r3, r2
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80023f6:	46ac      	mov	ip, r5
				if (!(bit++ & 7)) {
 80023f8:	f01c 0f07 	tst.w	ip, #7
					bits = bitmap[bo++];
 80023fc:	bf08      	it	eq
 80023fe:	f81a 4007 	ldrbeq.w	r4, [sl, r7]
 8002402:	f107 0301 	add.w	r3, r7, #1
				if (!(bit++ & 7)) {
 8002406:	f105 0501 	add.w	r5, r5, #1
					bits = bitmap[bo++];
 800240a:	bf08      	it	eq
 800240c:	b29f      	uxtheq	r7, r3
				if (bits & 0x80) {
 800240e:	0621      	lsls	r1, r4, #24
				if (!(bit++ & 7)) {
 8002410:	b2ed      	uxtb	r5, r5
				if (bits & 0x80) {
 8002412:	d506      	bpl.n	8002422 <_ZN5Power8screenUIEv+0xd2a>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8002414:	465b      	mov	r3, fp
 8002416:	4631      	mov	r1, r6
 8002418:	464a      	mov	r2, r9
 800241a:	f004 fd15 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <_ZN5Power8screenUIEv+0xebc>)
 8002420:	6818      	ldr	r0, [r3, #0]
				bits <<= 1;
 8002422:	0064      	lsls	r4, r4, #1
			for (xx = 0; xx < w; xx++) {
 8002424:	4545      	cmp	r5, r8
				bits <<= 1;
 8002426:	b2e4      	uxtb	r4, r4
			for (xx = 0; xx < w; xx++) {
 8002428:	f106 0601 	add.w	r6, r6, #1
 800242c:	d1e3      	bne.n	80023f6 <_ZN5Power8screenUIEv+0xcfe>
		for (yy = 0; yy < h; yy++) {
 800242e:	9b05      	ldr	r3, [sp, #20]
 8002430:	f109 0901 	add.w	r9, r9, #1
 8002434:	4599      	cmp	r9, r3
 8002436:	d1d5      	bne.n	80023e4 <_ZN5Power8screenUIEv+0xcec>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8002438:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 800243c:	9304      	str	r3, [sp, #16]
 800243e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002440:	4a5c      	ldr	r2, [pc, #368]	; (80025b4 <_ZN5Power8screenUIEv+0xebc>)
 8002442:	791b      	ldrb	r3, [r3, #4]
 8002444:	f992 2049 	ldrsb.w	r2, [r2, #73]	; 0x49
 8002448:	4413      	add	r3, r2
 800244a:	9a04      	ldr	r2, [sp, #16]
 800244c:	4413      	add	r3, r2
 800244e:	b21b      	sxth	r3, r3
 8002450:	8283      	strh	r3, [r0, #20]
 8002452:	9304      	str	r3, [sp, #16]
		while (*str) {
 8002454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002456:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800245a:	9309      	str	r3, [sp, #36]	; 0x24
 800245c:	2a00      	cmp	r2, #0
 800245e:	d19d      	bne.n	800239c <_ZN5Power8screenUIEv+0xca4>
		float R = vOut / (iOut / 1000.0F);
 8002460:	9c07      	ldr	r4, [sp, #28]
 8002462:	495d      	ldr	r1, [pc, #372]	; (80025d8 <_ZN5Power8screenUIEv+0xee0>)
 8002464:	6920      	ldr	r0, [r4, #16]
 8002466:	f7fe fc6d 	bl	8000d44 <__aeabi_fmul>
 800246a:	6961      	ldr	r1, [r4, #20]
 800246c:	f7fe fd1e 	bl	8000eac <__aeabi_fdiv>
		if (R < 20000) {
 8002470:	495a      	ldr	r1, [pc, #360]	; (80025dc <_ZN5Power8screenUIEv+0xee4>)
		float R = vOut / (iOut / 1000.0F);
 8002472:	4604      	mov	r4, r0
		if (R < 20000) {
 8002474:	f7fe fe04 	bl	8001080 <__aeabi_fcmplt>
 8002478:	2800      	cmp	r0, #0
 800247a:	f000 80ca 	beq.w	8002612 <_ZN5Power8screenUIEv+0xf1a>
			dc1 = modff(R, &cc1);
 800247e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002480:	4620      	mov	r0, r4
 8002482:	f005 f859 	bl	8007538 <modff>
			if (R > 10000.0f){
 8002486:	4620      	mov	r0, r4
 8002488:	4955      	ldr	r1, [pc, #340]	; (80025e0 <_ZN5Power8screenUIEv+0xee8>)
 800248a:	f7fe fe17 	bl	80010bc <__aeabi_fcmpgt>
 800248e:	9b07      	ldr	r3, [sp, #28]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	2800      	cmp	r0, #0
 8002494:	f000 829d 	beq.w	80029d2 <_ZN5Power8screenUIEv+0x12da>
 8002498:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <_ZN5Power8screenUIEv+0xeec>)
			sprintf(str, "%.0f", R);
 800249a:	4620      	mov	r0, r4
 800249c:	615a      	str	r2, [r3, #20]
 800249e:	f7fd ffc3 	bl	8000428 <__aeabi_f2d>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	9808      	ldr	r0, [sp, #32]
 80024a8:	494f      	ldr	r1, [pc, #316]	; (80025e8 <_ZN5Power8screenUIEv+0xef0>)
 80024aa:	f005 fdad 	bl	8008008 <siprintf>
 80024ae:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d069      	beq.n	800258a <_ZN5Power8screenUIEv+0xe92>
		int16_t x = _tft->uTFT.CurrentX;
 80024b6:	4a3f      	ldr	r2, [pc, #252]	; (80025b4 <_ZN5Power8screenUIEv+0xebc>)
 80024b8:	6810      	ldr	r0, [r2, #0]
 80024ba:	9a08      	ldr	r2, [sp, #32]
 80024bc:	9209      	str	r2, [sp, #36]	; 0x24
 80024be:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
 80024c2:	9204      	str	r2, [sp, #16]
		c -= gfxFont->first;
 80024c4:	4a3b      	ldr	r2, [pc, #236]	; (80025b4 <_ZN5Power8screenUIEv+0xebc>)
		int16_t y = _tft->uTFT.CurrentY;
 80024c6:	f9b0 9016 	ldrsh.w	r9, [r0, #22]
		c -= gfxFont->first;
 80024ca:	6851      	ldr	r1, [r2, #4]
		uint16_t color = _tft->uTFT.Color;
 80024cc:	f8b0 b018 	ldrh.w	fp, [r0, #24]
		c -= gfxFont->first;
 80024d0:	890a      	ldrh	r2, [r1, #8]
		return gfxFont->glyph + c;
 80024d2:	684c      	ldr	r4, [r1, #4]
		c -= gfxFont->first;
 80024d4:	1a9b      	subs	r3, r3, r2
		return gfxFont->glyph + c;
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
		return gfxFont->bitmap;
 80024dc:	f8d1 a000 	ldr.w	sl, [r1]
		uint8_t w = glyph->width, h = glyph->height;
 80024e0:	7899      	ldrb	r1, [r3, #2]
		uint16_t bo = glyph->bitmapOffset;
 80024e2:	f834 7032 	ldrh.w	r7, [r4, r2, lsl #3]
		uint8_t w = glyph->width, h = glyph->height;
 80024e6:	9103      	str	r1, [sp, #12]
 80024e8:	78da      	ldrb	r2, [r3, #3]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 80024ea:	f993 1005 	ldrsb.w	r1, [r3, #5]
 80024ee:	f993 4006 	ldrsb.w	r4, [r3, #6]
		return gfxFont->glyph + c;
 80024f2:	930a      	str	r3, [sp, #40]	; 0x28
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 80024f4:	9106      	str	r1, [sp, #24]
		for (yy = 0; yy < h; yy++) {
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	d036      	beq.n	8002568 <_ZN5Power8screenUIEv+0xe70>
		uint8_t xx, yy, bits = 0, bit = 0;
 80024fa:	2500      	movs	r5, #0
 80024fc:	f109 0101 	add.w	r1, r9, #1
 8002500:	4421      	add	r1, r4
 8002502:	44a1      	add	r9, r4
 8002504:	462c      	mov	r4, r5
 8002506:	3a01      	subs	r2, #1
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	188b      	adds	r3, r1, r2
 800250c:	9305      	str	r3, [sp, #20]
			for (xx = 0; xx < w; xx++) {
 800250e:	9b03      	ldr	r3, [sp, #12]
 8002510:	b313      	cbz	r3, 8002558 <_ZN5Power8screenUIEv+0xe60>
 8002512:	eb05 0803 	add.w	r8, r5, r3
 8002516:	9a06      	ldr	r2, [sp, #24]
 8002518:	9b04      	ldr	r3, [sp, #16]
 800251a:	fa5f f888 	uxtb.w	r8, r8
 800251e:	189e      	adds	r6, r3, r2
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8002520:	46ac      	mov	ip, r5
				if (!(bit++ & 7)) {
 8002522:	f01c 0f07 	tst.w	ip, #7
					bits = bitmap[bo++];
 8002526:	bf08      	it	eq
 8002528:	f81a 4007 	ldrbeq.w	r4, [sl, r7]
 800252c:	f107 0301 	add.w	r3, r7, #1
				if (!(bit++ & 7)) {
 8002530:	f105 0501 	add.w	r5, r5, #1
					bits = bitmap[bo++];
 8002534:	bf08      	it	eq
 8002536:	b29f      	uxtheq	r7, r3
				if (bits & 0x80) {
 8002538:	0622      	lsls	r2, r4, #24
				if (!(bit++ & 7)) {
 800253a:	b2ed      	uxtb	r5, r5
				if (bits & 0x80) {
 800253c:	d506      	bpl.n	800254c <_ZN5Power8screenUIEv+0xe54>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 800253e:	465b      	mov	r3, fp
 8002540:	4631      	mov	r1, r6
 8002542:	464a      	mov	r2, r9
 8002544:	f004 fc80 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <_ZN5Power8screenUIEv+0xebc>)
 800254a:	6818      	ldr	r0, [r3, #0]
				bits <<= 1;
 800254c:	0064      	lsls	r4, r4, #1
			for (xx = 0; xx < w; xx++) {
 800254e:	4545      	cmp	r5, r8
				bits <<= 1;
 8002550:	b2e4      	uxtb	r4, r4
			for (xx = 0; xx < w; xx++) {
 8002552:	f106 0601 	add.w	r6, r6, #1
 8002556:	d1e3      	bne.n	8002520 <_ZN5Power8screenUIEv+0xe28>
		for (yy = 0; yy < h; yy++) {
 8002558:	9b05      	ldr	r3, [sp, #20]
 800255a:	f109 0901 	add.w	r9, r9, #1
 800255e:	4599      	cmp	r9, r3
 8002560:	d1d5      	bne.n	800250e <_ZN5Power8screenUIEv+0xe16>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8002562:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8002566:	9304      	str	r3, [sp, #16]
 8002568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <_ZN5Power8screenUIEv+0xebc>)
 800256c:	791b      	ldrb	r3, [r3, #4]
 800256e:	f992 2049 	ldrsb.w	r2, [r2, #73]	; 0x49
 8002572:	4413      	add	r3, r2
 8002574:	9a04      	ldr	r2, [sp, #16]
 8002576:	4413      	add	r3, r2
 8002578:	b21b      	sxth	r3, r3
		while (*str) {
 800257a:	9a09      	ldr	r2, [sp, #36]	; 0x24
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 800257c:	8283      	strh	r3, [r0, #20]
 800257e:	9304      	str	r3, [sp, #16]
		while (*str) {
 8002580:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002584:	9209      	str	r2, [sp, #36]	; 0x24
 8002586:	2b00      	cmp	r3, #0
 8002588:	d19c      	bne.n	80024c4 <_ZN5Power8screenUIEv+0xdcc>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 800258a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258e:	4817      	ldr	r0, [pc, #92]	; (80025ec <_ZN5Power8screenUIEv+0xef4>)
 8002590:	f001 ff5e 	bl	8004450 <HAL_GPIO_ReadPin>
 8002594:	2801      	cmp	r0, #1
 8002596:	f000 80bd 	beq.w	8002714 <_ZN5Power8screenUIEv+0x101c>
			tft->GotoXY(2, 4);
 800259a:	9b07      	ldr	r3, [sp, #28]
 800259c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
			break;
		}
	}

	void Update(void) {
		switch (LCD->LCD_Driver) {
 80025a0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80025a4:	7a1b      	ldrb	r3, [r3, #8]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	f000 821f 	beq.w	80029ea <_ZN5Power8screenUIEv+0x12f2>
	}
 80025ac:	b01f      	add	sp, #124	; 0x7c
 80025ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025b2:	bf00      	nop
 80025b4:	200007b4 	.word	0x200007b4
 80025b8:	0800a320 	.word	0x0800a320
 80025bc:	3a83126f 	.word	0x3a83126f
 80025c0:	003c0015 	.word	0x003c0015
 80025c4:	42c80000 	.word	0x42c80000
 80025c8:	41200000 	.word	0x41200000
 80025cc:	447a0000 	.word	0x447a0000
 80025d0:	0800a2c8 	.word	0x0800a2c8
 80025d4:	003c000d 	.word	0x003c000d
 80025d8:	4479ffff 	.word	0x4479ffff
 80025dc:	469c4000 	.word	0x469c4000
 80025e0:	461c4000 	.word	0x461c4000
 80025e4:	003c0050 	.word	0x003c0050
 80025e8:	0800a2e0 	.word	0x0800a2e0
 80025ec:	40010c00 	.word	0x40010c00
				sprintf(str, "%d .%03d", (int) cc1, (int) (dc1 * 1000));
 80025f0:	4974      	ldr	r1, [pc, #464]	; (80027c4 <_ZN5Power8screenUIEv+0x10cc>)
 80025f2:	4620      	mov	r0, r4
 80025f4:	f7fe fba6 	bl	8000d44 <__aeabi_fmul>
 80025f8:	f7fe fd6a 	bl	80010d0 <__aeabi_f2iz>
 80025fc:	4604      	mov	r4, r0
 80025fe:	4628      	mov	r0, r5
 8002600:	f7fe fd66 	bl	80010d0 <__aeabi_f2iz>
 8002604:	4623      	mov	r3, r4
 8002606:	4602      	mov	r2, r0
 8002608:	496f      	ldr	r1, [pc, #444]	; (80027c8 <_ZN5Power8screenUIEv+0x10d0>)
 800260a:	9808      	ldr	r0, [sp, #32]
 800260c:	f005 fcfc 	bl	8008008 <siprintf>
 8002610:	e6b9      	b.n	8002386 <_ZN5Power8screenUIEv+0xc8e>
		delta_x = x;
 8002612:	23fe      	movs	r3, #254	; 0xfe
		gfxFont = (GFXfont*) f;
 8002614:	496d      	ldr	r1, [pc, #436]	; (80027cc <_ZN5Power8screenUIEv+0x10d4>)
 8002616:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <_ZN5Power8screenUIEv+0x10d8>)
		delta_x = x;
 8002618:	f881 3049 	strb.w	r3, [r1, #73]	; 0x49
		gfxFont = (GFXfont*) f;
 800261c:	604a      	str	r2, [r1, #4]
 800261e:	9b07      	ldr	r3, [sp, #28]
			sprintf(str, "INF");
 8002620:	4a6c      	ldr	r2, [pc, #432]	; (80027d4 <_ZN5Power8screenUIEv+0x10dc>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	920e      	str	r2, [sp, #56]	; 0x38
 8002626:	4a6c      	ldr	r2, [pc, #432]	; (80027d8 <_ZN5Power8screenUIEv+0x10e0>)
 8002628:	615a      	str	r2, [r3, #20]
		while (*str) {
 800262a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0ab      	beq.n	800258a <_ZN5Power8screenUIEv+0xe92>
		int16_t x = _tft->uTFT.CurrentX;
 8002632:	9a08      	ldr	r2, [sp, #32]
 8002634:	6808      	ldr	r0, [r1, #0]
 8002636:	9209      	str	r2, [sp, #36]	; 0x24
 8002638:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
 800263c:	9204      	str	r2, [sp, #16]
		c -= gfxFont->first;
 800263e:	4a63      	ldr	r2, [pc, #396]	; (80027cc <_ZN5Power8screenUIEv+0x10d4>)
		int16_t y = _tft->uTFT.CurrentY;
 8002640:	f9b0 9016 	ldrsh.w	r9, [r0, #22]
		c -= gfxFont->first;
 8002644:	6851      	ldr	r1, [r2, #4]
		uint16_t color = _tft->uTFT.Color;
 8002646:	f8b0 b018 	ldrh.w	fp, [r0, #24]
		c -= gfxFont->first;
 800264a:	890a      	ldrh	r2, [r1, #8]
		return gfxFont->glyph + c;
 800264c:	684c      	ldr	r4, [r1, #4]
		c -= gfxFont->first;
 800264e:	1a9b      	subs	r3, r3, r2
		return gfxFont->glyph + c;
 8002650:	b2da      	uxtb	r2, r3
 8002652:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
		return gfxFont->bitmap;
 8002656:	f8d1 a000 	ldr.w	sl, [r1]
		uint8_t w = glyph->width, h = glyph->height;
 800265a:	7899      	ldrb	r1, [r3, #2]
		uint16_t bo = glyph->bitmapOffset;
 800265c:	f834 7032 	ldrh.w	r7, [r4, r2, lsl #3]
		uint8_t w = glyph->width, h = glyph->height;
 8002660:	9103      	str	r1, [sp, #12]
 8002662:	78da      	ldrb	r2, [r3, #3]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8002664:	f993 1005 	ldrsb.w	r1, [r3, #5]
 8002668:	f993 4006 	ldrsb.w	r4, [r3, #6]
		return gfxFont->glyph + c;
 800266c:	930a      	str	r3, [sp, #40]	; 0x28
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 800266e:	9106      	str	r1, [sp, #24]
		for (yy = 0; yy < h; yy++) {
 8002670:	2a00      	cmp	r2, #0
 8002672:	d036      	beq.n	80026e2 <_ZN5Power8screenUIEv+0xfea>
		uint8_t xx, yy, bits = 0, bit = 0;
 8002674:	2500      	movs	r5, #0
 8002676:	f109 0101 	add.w	r1, r9, #1
 800267a:	4421      	add	r1, r4
 800267c:	44a1      	add	r9, r4
 800267e:	462c      	mov	r4, r5
 8002680:	3a01      	subs	r2, #1
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	188b      	adds	r3, r1, r2
 8002686:	9305      	str	r3, [sp, #20]
			for (xx = 0; xx < w; xx++) {
 8002688:	9b03      	ldr	r3, [sp, #12]
 800268a:	b313      	cbz	r3, 80026d2 <_ZN5Power8screenUIEv+0xfda>
 800268c:	eb05 0803 	add.w	r8, r5, r3
 8002690:	9a06      	ldr	r2, [sp, #24]
 8002692:	9b04      	ldr	r3, [sp, #16]
 8002694:	fa5f f888 	uxtb.w	r8, r8
 8002698:	189e      	adds	r6, r3, r2
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 800269a:	46ac      	mov	ip, r5
				if (!(bit++ & 7)) {
 800269c:	f01c 0f07 	tst.w	ip, #7
					bits = bitmap[bo++];
 80026a0:	bf08      	it	eq
 80026a2:	f81a 4007 	ldrbeq.w	r4, [sl, r7]
 80026a6:	f107 0301 	add.w	r3, r7, #1
				if (!(bit++ & 7)) {
 80026aa:	f105 0501 	add.w	r5, r5, #1
					bits = bitmap[bo++];
 80026ae:	bf08      	it	eq
 80026b0:	b29f      	uxtheq	r7, r3
				if (bits & 0x80) {
 80026b2:	0623      	lsls	r3, r4, #24
				if (!(bit++ & 7)) {
 80026b4:	b2ed      	uxtb	r5, r5
				if (bits & 0x80) {
 80026b6:	d506      	bpl.n	80026c6 <_ZN5Power8screenUIEv+0xfce>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 80026b8:	465b      	mov	r3, fp
 80026ba:	4631      	mov	r1, r6
 80026bc:	464a      	mov	r2, r9
 80026be:	f004 fbc3 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 80026c2:	4b42      	ldr	r3, [pc, #264]	; (80027cc <_ZN5Power8screenUIEv+0x10d4>)
 80026c4:	6818      	ldr	r0, [r3, #0]
				bits <<= 1;
 80026c6:	0064      	lsls	r4, r4, #1
			for (xx = 0; xx < w; xx++) {
 80026c8:	4545      	cmp	r5, r8
				bits <<= 1;
 80026ca:	b2e4      	uxtb	r4, r4
			for (xx = 0; xx < w; xx++) {
 80026cc:	f106 0601 	add.w	r6, r6, #1
 80026d0:	d1e3      	bne.n	800269a <_ZN5Power8screenUIEv+0xfa2>
		for (yy = 0; yy < h; yy++) {
 80026d2:	9b05      	ldr	r3, [sp, #20]
 80026d4:	f109 0901 	add.w	r9, r9, #1
 80026d8:	4599      	cmp	r9, r3
 80026da:	d1d5      	bne.n	8002688 <_ZN5Power8screenUIEv+0xf90>
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 80026dc:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 80026e0:	9304      	str	r3, [sp, #16]
 80026e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026e4:	4a39      	ldr	r2, [pc, #228]	; (80027cc <_ZN5Power8screenUIEv+0x10d4>)
 80026e6:	791b      	ldrb	r3, [r3, #4]
 80026e8:	f992 2049 	ldrsb.w	r2, [r2, #73]	; 0x49
 80026ec:	4413      	add	r3, r2
 80026ee:	9a04      	ldr	r2, [sp, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	b21b      	sxth	r3, r3
		while (*str) {
 80026f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 80026f6:	8283      	strh	r3, [r0, #20]
 80026f8:	9304      	str	r3, [sp, #16]
		while (*str) {
 80026fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80026fe:	9209      	str	r2, [sp, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d19c      	bne.n	800263e <_ZN5Power8screenUIEv+0xf46>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8002704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002708:	4834      	ldr	r0, [pc, #208]	; (80027dc <_ZN5Power8screenUIEv+0x10e4>)
 800270a:	f001 fea1 	bl	8004450 <HAL_GPIO_ReadPin>
 800270e:	2801      	cmp	r0, #1
 8002710:	f47f af43 	bne.w	800259a <_ZN5Power8screenUIEv+0xea2>
 8002714:	9c07      	ldr	r4, [sp, #28]
 8002716:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <_ZN5Power8screenUIEv+0x10e8>)
 8002718:	6b23      	ldr	r3, [r4, #48]	; 0x30
			sprintf(str, "CV", iOut);
 800271a:	6960      	ldr	r0, [r4, #20]
 800271c:	615a      	str	r2, [r3, #20]
 800271e:	f7fd fe83 	bl	8000428 <__aeabi_f2d>
 8002722:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4650      	mov	r0, sl
 800272c:	492d      	ldr	r1, [pc, #180]	; (80027e4 <_ZN5Power8screenUIEv+0x10ec>)
 800272e:	f005 fc6b 	bl	8008008 <siprintf>
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
static inline char FontClassicPuts(TFT * tft, char* str, FontDef_t* Font, uint8_t NoBack) {
	while (*str) {
 8002732:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
			FontClassicPuts(tft, str, &Font_11x18, 0);
 8002736:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 800273a:	f1b9 0f00 	cmp.w	r9, #0
 800273e:	f43f af2f 	beq.w	80025a0 <_ZN5Power8screenUIEv+0xea8>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002742:	4e29      	ldr	r6, [pc, #164]	; (80027e8 <_ZN5Power8screenUIEv+0x10f0>)
 8002744:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 8002748:	7832      	ldrb	r2, [r6, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 800274a:	7874      	ldrb	r4, [r6, #1]
 800274c:	2c00      	cmp	r4, #0
 800274e:	f000 815a 	beq.w	8002a06 <_ZN5Power8screenUIEv+0x130e>
 8002752:	2500      	movs	r5, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002754:	f1a9 0820 	sub.w	r8, r9, #32
 8002758:	fb08 5004 	mla	r0, r8, r4, r5
 800275c:	6871      	ldr	r1, [r6, #4]
 800275e:	f831 7010 	ldrh.w	r7, [r1, r0, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8002762:	2a00      	cmp	r2, #0
 8002764:	f000 814f 	beq.w	8002a06 <_ZN5Power8screenUIEv+0x130e>
 8002768:	2400      	movs	r4, #0
 800276a:	e00c      	b.n	8002786 <_ZN5Power8screenUIEv+0x108e>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800276c:	4658      	mov	r0, fp
 800276e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002772:	442a      	add	r2, r5
 8002774:	f004 fb68 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8002778:	7832      	ldrb	r2, [r6, #0]
 800277a:	3401      	adds	r4, #1
 800277c:	4294      	cmp	r4, r2
 800277e:	f080 813b 	bcs.w	80029f8 <_ZN5Power8screenUIEv+0x1300>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002782:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
			if ((b << j) & 0x8000) {
 8002786:	fa07 f204 	lsl.w	r2, r7, r4
 800278a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800278e:	eb03 0104 	add.w	r1, r3, r4
 8002792:	f9bb 2016 	ldrsh.w	r2, [fp, #22]
			if ((b << j) & 0x8000) {
 8002796:	d1e9      	bne.n	800276c <_ZN5Power8screenUIEv+0x1074>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002798:	1919      	adds	r1, r3, r4
 800279a:	4658      	mov	r0, fp
 800279c:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 80027a0:	e7e7      	b.n	8002772 <_ZN5Power8screenUIEv+0x107a>
			sprintf(str, "%d .%01d", (int) cc1, (int) (dc1 * 10));
 80027a2:	4912      	ldr	r1, [pc, #72]	; (80027ec <_ZN5Power8screenUIEv+0x10f4>)
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7fe facd 	bl	8000d44 <__aeabi_fmul>
 80027aa:	f7fe fc91 	bl	80010d0 <__aeabi_f2iz>
 80027ae:	4604      	mov	r4, r0
 80027b0:	4628      	mov	r0, r5
 80027b2:	f7fe fc8d 	bl	80010d0 <__aeabi_f2iz>
 80027b6:	4623      	mov	r3, r4
 80027b8:	4602      	mov	r2, r0
 80027ba:	490d      	ldr	r1, [pc, #52]	; (80027f0 <_ZN5Power8screenUIEv+0x10f8>)
 80027bc:	9808      	ldr	r0, [sp, #32]
 80027be:	f005 fc23 	bl	8008008 <siprintf>
 80027c2:	e5e0      	b.n	8002386 <_ZN5Power8screenUIEv+0xc8e>
 80027c4:	447a0000 	.word	0x447a0000
 80027c8:	0800a2c8 	.word	0x0800a2c8
 80027cc:	200007b4 	.word	0x200007b4
 80027d0:	0800a310 	.word	0x0800a310
 80027d4:	00464e49 	.word	0x00464e49
 80027d8:	003c0062 	.word	0x003c0062
 80027dc:	40010c00 	.word	0x40010c00
 80027e0:	00040002 	.word	0x00040002
 80027e4:	0800a2f0 	.word	0x0800a2f0
 80027e8:	20000068 	.word	0x20000068
 80027ec:	41200000 	.word	0x41200000
 80027f0:	0800a2d4 	.word	0x0800a2d4
		ADSregister.SETUP.PGA = pga;
 80027f4:	9b07      	ldr	r3, [sp, #28]
 80027f6:	f36f 0502 	bfc	r5, #0, #3
 80027fa:	771d      	strb	r5, [r3, #28]
		ADS124x_CS_0;
 80027fc:	2200      	movs	r2, #0
 80027fe:	2110      	movs	r1, #16
 8002800:	4889      	ldr	r0, [pc, #548]	; (8002a28 <_ZN5Power8screenUIEv+0x1330>)
 8002802:	f001 fe3c 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002806:	2300      	movs	r3, #0
 8002808:	4988      	ldr	r1, [pc, #544]	; (8002a2c <_ZN5Power8screenUIEv+0x1334>)
 800280a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8002a30 <_ZN5Power8screenUIEv+0x1338>
 800280e:	604b      	str	r3, [r1, #4]
 8002810:	f8d9 3000 	ldr.w	r3, [r9]
 8002814:	4a87      	ldr	r2, [pc, #540]	; (8002a34 <_ZN5Power8screenUIEv+0x133c>)
 8002816:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8002a38 <_ZN5Power8screenUIEv+0x1340>
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0c9b      	lsrs	r3, r3, #18
 8002820:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	3b10      	subs	r3, #16
	    uint8_t p = (ADSregister.SETUP.ID << 4) | (ADSregister.SETUP.BOCS << 3) |  ADSregister.SETUP.PGA;
 8002828:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
		delayMicroseconds(20);
 800282c:	f8c8 3000 	str.w	r3, [r8]
 8002830:	684a      	ldr	r2, [r1, #4]
 8002832:	4293      	cmp	r3, r2
 8002834:	d8fc      	bhi.n	8002830 <_ZN5Power8screenUIEv+0x1138>
		XferByte(0x50 + r);
 8002836:	2350      	movs	r3, #80	; 0x50
 8002838:	4c80      	ldr	r4, [pc, #512]	; (8002a3c <_ZN5Power8screenUIEv+0x1344>)
 800283a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800283e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002842:	2b02      	cmp	r3, #2
 8002844:	d0fb      	beq.n	800283e <_ZN5Power8screenUIEv+0x1146>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	ab0d      	add	r3, sp, #52	; 0x34
 800284e:	4619      	mov	r1, r3
 8002850:	aa0e      	add	r2, sp, #56	; 0x38
 8002852:	930a      	str	r3, [sp, #40]	; 0x28
 8002854:	4879      	ldr	r0, [pc, #484]	; (8002a3c <_ZN5Power8screenUIEv+0x1344>)
 8002856:	2301      	movs	r3, #1
 8002858:	9208      	str	r2, [sp, #32]
 800285a:	f002 ff59 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(0);
 800285e:	2300      	movs	r3, #0
 8002860:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002864:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002868:	2b02      	cmp	r3, #2
 800286a:	d0fb      	beq.n	8002864 <_ZN5Power8screenUIEv+0x116c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800286c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002870:	9a08      	ldr	r2, [sp, #32]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002876:	2301      	movs	r3, #1
 8002878:	4870      	ldr	r0, [pc, #448]	; (8002a3c <_ZN5Power8screenUIEv+0x1344>)
 800287a:	f002 ff49 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(data);
 800287e:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002882:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002886:	2b02      	cmp	r3, #2
 8002888:	d0fb      	beq.n	8002882 <_ZN5Power8screenUIEv+0x118a>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800288a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288e:	9a08      	ldr	r2, [sp, #32]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002894:	2301      	movs	r3, #1
 8002896:	4869      	ldr	r0, [pc, #420]	; (8002a3c <_ZN5Power8screenUIEv+0x1344>)
 8002898:	f002 ff3a 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800289c:	2300      	movs	r3, #0
 800289e:	4d63      	ldr	r5, [pc, #396]	; (8002a2c <_ZN5Power8screenUIEv+0x1334>)
 80028a0:	4a64      	ldr	r2, [pc, #400]	; (8002a34 <_ZN5Power8screenUIEv+0x133c>)
 80028a2:	606b      	str	r3, [r5, #4]
 80028a4:	f8d9 3000 	ldr.w	r3, [r9]
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	0c9b      	lsrs	r3, r3, #18
 80028ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	3b10      	subs	r3, #16
 80028b6:	f8c8 3000 	str.w	r3, [r8]
 80028ba:	686a      	ldr	r2, [r5, #4]
 80028bc:	4293      	cmp	r3, r2
 80028be:	d8fc      	bhi.n	80028ba <_ZN5Power8screenUIEv+0x11c2>
		ADS124x_CS_1;
 80028c0:	2201      	movs	r2, #1
 80028c2:	2110      	movs	r1, #16
 80028c4:	4858      	ldr	r0, [pc, #352]	; (8002a28 <_ZN5Power8screenUIEv+0x1330>)
 80028c6:	f001 fdda 	bl	800447e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80028ca:	2001      	movs	r0, #1
 80028cc:	f001 fb0a 	bl	8003ee4 <HAL_Delay>
		ADS124x_CS_0;
 80028d0:	2200      	movs	r2, #0
 80028d2:	2110      	movs	r1, #16
 80028d4:	4854      	ldr	r0, [pc, #336]	; (8002a28 <_ZN5Power8screenUIEv+0x1330>)
 80028d6:	f001 fdd2 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80028da:	2300      	movs	r3, #0
 80028dc:	606b      	str	r3, [r5, #4]
 80028de:	f8d9 3000 	ldr.w	r3, [r9]
 80028e2:	4a54      	ldr	r2, [pc, #336]	; (8002a34 <_ZN5Power8screenUIEv+0x133c>)
 80028e4:	4951      	ldr	r1, [pc, #324]	; (8002a2c <_ZN5Power8screenUIEv+0x1334>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0c9b      	lsrs	r3, r3, #18
 80028ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	3b10      	subs	r3, #16
 80028f4:	f8c8 3000 	str.w	r3, [r8]
 80028f8:	684a      	ldr	r2, [r1, #4]
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d8fc      	bhi.n	80028f8 <_ZN5Power8screenUIEv+0x1200>
		XferByte(cmd);
 80028fe:	23f0      	movs	r3, #240	; 0xf0
 8002900:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002904:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002908:	2b02      	cmp	r3, #2
 800290a:	d0fb      	beq.n	8002904 <_ZN5Power8screenUIEv+0x120c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800290c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002910:	9a08      	ldr	r2, [sp, #32]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002916:	2301      	movs	r3, #1
 8002918:	4848      	ldr	r0, [pc, #288]	; (8002a3c <_ZN5Power8screenUIEv+0x1344>)
 800291a:	f002 fef9 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800291e:	2300      	movs	r3, #0
 8002920:	4d42      	ldr	r5, [pc, #264]	; (8002a2c <_ZN5Power8screenUIEv+0x1334>)
 8002922:	4a44      	ldr	r2, [pc, #272]	; (8002a34 <_ZN5Power8screenUIEv+0x133c>)
 8002924:	606b      	str	r3, [r5, #4]
 8002926:	f8d9 3000 	ldr.w	r3, [r9]
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0c9b      	lsrs	r3, r3, #18
 8002930:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	3b10      	subs	r3, #16
 8002938:	f8c8 3000 	str.w	r3, [r8]
 800293c:	686a      	ldr	r2, [r5, #4]
 800293e:	4293      	cmp	r3, r2
 8002940:	d8fc      	bhi.n	800293c <_ZN5Power8screenUIEv+0x1244>
		ADS124x_CS_1;
 8002942:	2201      	movs	r2, #1
 8002944:	2110      	movs	r1, #16
 8002946:	4838      	ldr	r0, [pc, #224]	; (8002a28 <_ZN5Power8screenUIEv+0x1330>)
 8002948:	f001 fd99 	bl	800447e <HAL_GPIO_WritePin>
		ADS124x_CS_0;
 800294c:	2200      	movs	r2, #0
 800294e:	2110      	movs	r1, #16
 8002950:	4835      	ldr	r0, [pc, #212]	; (8002a28 <_ZN5Power8screenUIEv+0x1330>)
 8002952:	f001 fd94 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002956:	2300      	movs	r3, #0
 8002958:	606b      	str	r3, [r5, #4]
 800295a:	f8d9 3000 	ldr.w	r3, [r9]
 800295e:	4a35      	ldr	r2, [pc, #212]	; (8002a34 <_ZN5Power8screenUIEv+0x133c>)
 8002960:	4932      	ldr	r1, [pc, #200]	; (8002a2c <_ZN5Power8screenUIEv+0x1334>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9b      	lsrs	r3, r3, #18
 8002968:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	3b10      	subs	r3, #16
 8002970:	f8c8 3000 	str.w	r3, [r8]
 8002974:	684a      	ldr	r2, [r1, #4]
 8002976:	4293      	cmp	r3, r2
 8002978:	d8fc      	bhi.n	8002974 <_ZN5Power8screenUIEv+0x127c>
		XferByte(cmd);
 800297a:	23fc      	movs	r3, #252	; 0xfc
 800297c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002980:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002984:	2b02      	cmp	r3, #2
 8002986:	d0fb      	beq.n	8002980 <_ZN5Power8screenUIEv+0x1288>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298c:	9a08      	ldr	r2, [sp, #32]
 800298e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	482a      	ldr	r0, [pc, #168]	; (8002a3c <_ZN5Power8screenUIEv+0x1344>)
 8002994:	2301      	movs	r3, #1
 8002996:	f002 febb 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800299a:	2300      	movs	r3, #0
 800299c:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <_ZN5Power8screenUIEv+0x1334>)
 800299e:	4925      	ldr	r1, [pc, #148]	; (8002a34 <_ZN5Power8screenUIEv+0x133c>)
 80029a0:	6053      	str	r3, [r2, #4]
 80029a2:	f8d9 3000 	ldr.w	r3, [r9]
 80029a6:	fba1 1303 	umull	r1, r3, r1, r3
 80029aa:	0c9b      	lsrs	r3, r3, #18
 80029ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	3b10      	subs	r3, #16
 80029b4:	f8c8 3000 	str.w	r3, [r8]
 80029b8:	6851      	ldr	r1, [r2, #4]
 80029ba:	428b      	cmp	r3, r1
 80029bc:	d8fc      	bhi.n	80029b8 <_ZN5Power8screenUIEv+0x12c0>
		ADS124x_CS_1;
 80029be:	2201      	movs	r2, #1
 80029c0:	2110      	movs	r1, #16
 80029c2:	4819      	ldr	r0, [pc, #100]	; (8002a28 <_ZN5Power8screenUIEv+0x1330>)
 80029c4:	f001 fd5b 	bl	800447e <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80029c8:	2064      	movs	r0, #100	; 0x64
 80029ca:	f001 fa8b 	bl	8003ee4 <HAL_Delay>
 80029ce:	f7fe beae 	b.w	800172e <_ZN5Power8screenUIEv+0x36>
 80029d2:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <_ZN5Power8screenUIEv+0x1348>)
							sprintf(str, "%.1f", R);
 80029d4:	4620      	mov	r0, r4
 80029d6:	615a      	str	r2, [r3, #20]
 80029d8:	f7fd fd26 	bl	8000428 <__aeabi_f2d>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	9808      	ldr	r0, [sp, #32]
 80029e2:	4918      	ldr	r1, [pc, #96]	; (8002a44 <_ZN5Power8screenUIEv+0x134c>)
 80029e4:	f005 fb10 	bl	8008008 <siprintf>
 80029e8:	e561      	b.n	80024ae <_ZN5Power8screenUIEv+0xdb6>

#if defined(TFT_DRIVER_SSD1306)
		case SSD1306:
			SSD1306_UpdateScreen();
 80029ea:	f10b 0004 	add.w	r0, fp, #4
 80029ee:	f004 fa07 	bl	8006e00 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
	}
 80029f2:	b01f      	add	sp, #124	; 0x7c
 80029f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < Font->FontHeight; i++) {
 80029f8:	7874      	ldrb	r4, [r6, #1]
 80029fa:	3501      	adds	r5, #1
 80029fc:	42ac      	cmp	r4, r5
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80029fe:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8002a02:	f63f aea9 	bhi.w	8002758 <_ZN5Power8screenUIEv+0x1060>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002a06:	4413      	add	r3, r2
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	f8ab 3014 	strh.w	r3, [fp, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8002a10:	f89a 1000 	ldrb.w	r1, [sl]
 8002a14:	4549      	cmp	r1, r9
 8002a16:	f47f adc0 	bne.w	800259a <_ZN5Power8screenUIEv+0xea2>
	while (*str) {
 8002a1a:	f81a 9f01 	ldrb.w	r9, [sl, #1]!
 8002a1e:	f1b9 0f00 	cmp.w	r9, #0
 8002a22:	f47f ae93 	bne.w	800274c <_ZN5Power8screenUIEv+0x1054>
 8002a26:	e5b8      	b.n	800259a <_ZN5Power8screenUIEv+0xea2>
 8002a28:	40010800 	.word	0x40010800
 8002a2c:	e0001000 	.word	0xe0001000
 8002a30:	2000005c 	.word	0x2000005c
 8002a34:	431bde83 	.word	0x431bde83
 8002a38:	20000990 	.word	0x20000990
 8002a3c:	200008a0 	.word	0x200008a0
 8002a40:	003c004e 	.word	0x003c004e
 8002a44:	0800a2e8 	.word	0x0800a2e8

08002a48 <TIM1_UP_IRQHandler>:
Power power;
classLog Log;


extern "C" void TIM1_UP_IRQHandler(void)
{
 8002a48:	b508      	push	{r3, lr}
		key.tick();
 8002a4a:	480d      	ldr	r0, [pc, #52]	; (8002a80 <TIM1_UP_IRQHandler+0x38>)
 8002a4c:	f003 ff4e 	bl	80068ec <_ZN7GButton4tickEv>
		if (key.isPress()) {
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <TIM1_UP_IRQHandler+0x38>)
 8002a52:	f003 fead 	bl	80067b0 <_ZN7GButton7isPressEv>
 8002a56:	b130      	cbz	r0, 8002a66 <TIM1_UP_IRQHandler+0x1e>
			if (screen == UI)
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <TIM1_UP_IRQHandler+0x3c>)
 8002a5a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002a5e:	b93a      	cbnz	r2, 8002a70 <TIM1_UP_IRQHandler+0x28>
				screen = BATTERY;
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	power.tickKey();


  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a66:	4808      	ldr	r0, [pc, #32]	; (8002a88 <TIM1_UP_IRQHandler+0x40>)
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002a68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 8002a6c:	f003 b948 	b.w	8005d00 <HAL_TIM_IRQHandler>
				screen = UI;
 8002a70:	2200      	movs	r2, #0
 8002a72:	4805      	ldr	r0, [pc, #20]	; (8002a88 <TIM1_UP_IRQHandler+0x40>)
 8002a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8002a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 8002a7c:	f003 b940 	b.w	8005d00 <HAL_TIM_IRQHandler>
 8002a80:	20000800 	.word	0x20000800
 8002a84:	20000840 	.word	0x20000840
 8002a88:	200008fc 	.word	0x200008fc
 8002a8c:	00000000 	.word	0x00000000

08002a90 <_Z4loopv>:





void loop() {
 8002a90:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002a94:	4cb4      	ldr	r4, [pc, #720]	; (8002d68 <_Z4loopv+0x2d8>)
 8002a96:	4fb5      	ldr	r7, [pc, #724]	; (8002d6c <_Z4loopv+0x2dc>)
 8002a98:	b097      	sub	sp, #92	; 0x5c
		if (screen == UI)
 8002a9a:	4bb5      	ldr	r3, [pc, #724]	; (8002d70 <_Z4loopv+0x2e0>)
 8002a9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aa0:	b93b      	cbnz	r3, 8002ab2 <_Z4loopv+0x22>
			screenUI();
 8002aa2:	48b3      	ldr	r0, [pc, #716]	; (8002d70 <_Z4loopv+0x2e0>)
 8002aa4:	f7fe fe28 	bl	80016f8 <_ZN5Power8screenUIEv>
		if (screen == UI)
 8002aa8:	4bb1      	ldr	r3, [pc, #708]	; (8002d70 <_Z4loopv+0x2e0>)
 8002aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f7      	beq.n	8002aa2 <_Z4loopv+0x12>
		adc.readAllRegister();
 8002ab2:	48b0      	ldr	r0, [pc, #704]	; (8002d74 <_Z4loopv+0x2e4>)
 8002ab4:	f7fe fc54 	bl	8001360 <_ZN7ADS124315readAllRegisterEv>
		if (adc.ADSregister.SETUP.PGA != PGA_1) {
 8002ab8:	4bad      	ldr	r3, [pc, #692]	; (8002d70 <_Z4loopv+0x2e0>)
 8002aba:	7f1d      	ldrb	r5, [r3, #28]
 8002abc:	076a      	lsls	r2, r5, #29
 8002abe:	f040 84b5 	bne.w	800342c <_Z4loopv+0x99c>
		HAL_Delay(1);
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f001 fa0e 	bl	8003ee4 <HAL_Delay>
		ADS124x_CS_0;
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2110      	movs	r1, #16
 8002acc:	48aa      	ldr	r0, [pc, #680]	; (8002d78 <_Z4loopv+0x2e8>)
 8002ace:	f001 fcd6 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	49a9      	ldr	r1, [pc, #676]	; (8002d7c <_Z4loopv+0x2ec>)
 8002ad6:	4aaa      	ldr	r2, [pc, #680]	; (8002d80 <_Z4loopv+0x2f0>)
 8002ad8:	604b      	str	r3, [r1, #4]
 8002ada:	4baa      	ldr	r3, [pc, #680]	; (8002d84 <_Z4loopv+0x2f4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0c9b      	lsrs	r3, r3, #18
 8002ae4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ae8:	009a      	lsls	r2, r3, #2
 8002aea:	4ba7      	ldr	r3, [pc, #668]	; (8002d88 <_Z4loopv+0x2f8>)
 8002aec:	3a10      	subs	r2, #16
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	684b      	ldr	r3, [r1, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d8fc      	bhi.n	8002af0 <_Z4loopv+0x60>
		XferByte(cmd);
 8002af6:	23fc      	movs	r3, #252	; 0xfc
 8002af8:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002afc:	4ba3      	ldr	r3, [pc, #652]	; (8002d8c <_Z4loopv+0x2fc>)
 8002afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d0fa      	beq.n	8002afc <_Z4loopv+0x6c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0a:	aa06      	add	r2, sp, #24
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	489f      	ldr	r0, [pc, #636]	; (8002d8c <_Z4loopv+0x2fc>)
 8002b10:	2301      	movs	r3, #1
 8002b12:	f10d 0117 	add.w	r1, sp, #23
 8002b16:	f002 fdfb 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	4d97      	ldr	r5, [pc, #604]	; (8002d7c <_Z4loopv+0x2ec>)
 8002b1e:	4a98      	ldr	r2, [pc, #608]	; (8002d80 <_Z4loopv+0x2f0>)
 8002b20:	606b      	str	r3, [r5, #4]
 8002b22:	4b98      	ldr	r3, [pc, #608]	; (8002d84 <_Z4loopv+0x2f4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0c9b      	lsrs	r3, r3, #18
 8002b2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b30:	009a      	lsls	r2, r3, #2
 8002b32:	4b95      	ldr	r3, [pc, #596]	; (8002d88 <_Z4loopv+0x2f8>)
 8002b34:	3a10      	subs	r2, #16
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	686b      	ldr	r3, [r5, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d8fc      	bhi.n	8002b38 <_Z4loopv+0xa8>
		ADS124x_CS_1;
 8002b3e:	2201      	movs	r2, #1
 8002b40:	2110      	movs	r1, #16
 8002b42:	488d      	ldr	r0, [pc, #564]	; (8002d78 <_Z4loopv+0x2e8>)
 8002b44:	f001 fc9b 	bl	800447e <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8002b48:	2356      	movs	r3, #86	; 0x56
 8002b4a:	4a89      	ldr	r2, [pc, #548]	; (8002d70 <_Z4loopv+0x2e0>)
		ADS124x_CS_0;
 8002b4c:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 8002b4e:	7753      	strb	r3, [r2, #29]
		ADS124x_CS_0;
 8002b50:	4889      	ldr	r0, [pc, #548]	; (8002d78 <_Z4loopv+0x2e8>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	f001 fc93 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	606b      	str	r3, [r5, #4]
 8002b5c:	4b89      	ldr	r3, [pc, #548]	; (8002d84 <_Z4loopv+0x2f4>)
 8002b5e:	4a88      	ldr	r2, [pc, #544]	; (8002d80 <_Z4loopv+0x2f0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4986      	ldr	r1, [pc, #536]	; (8002d7c <_Z4loopv+0x2ec>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	0c9b      	lsrs	r3, r3, #18
 8002b6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b6e:	009a      	lsls	r2, r3, #2
 8002b70:	4b85      	ldr	r3, [pc, #532]	; (8002d88 <_Z4loopv+0x2f8>)
 8002b72:	3a10      	subs	r2, #16
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	684b      	ldr	r3, [r1, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d8fc      	bhi.n	8002b76 <_Z4loopv+0xe6>
		XferByte(0x50 + r);
 8002b7c:	2351      	movs	r3, #81	; 0x51
 8002b7e:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002b82:	4b82      	ldr	r3, [pc, #520]	; (8002d8c <_Z4loopv+0x2fc>)
 8002b84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d0fa      	beq.n	8002b82 <_Z4loopv+0xf2>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b90:	487e      	ldr	r0, [pc, #504]	; (8002d8c <_Z4loopv+0x2fc>)
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	aa06      	add	r2, sp, #24
 8002b96:	2301      	movs	r3, #1
 8002b98:	f10d 0117 	add.w	r1, sp, #23
 8002b9c:	f002 fdb8 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002ba6:	4b79      	ldr	r3, [pc, #484]	; (8002d8c <_Z4loopv+0x2fc>)
 8002ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d0fa      	beq.n	8002ba6 <_Z4loopv+0x116>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb4:	4875      	ldr	r0, [pc, #468]	; (8002d8c <_Z4loopv+0x2fc>)
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	aa06      	add	r2, sp, #24
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f10d 0117 	add.w	r1, sp, #23
 8002bc0:	f002 fda6 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8002bc4:	2356      	movs	r3, #86	; 0x56
 8002bc6:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002bca:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <_Z4loopv+0x2fc>)
 8002bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d0fa      	beq.n	8002bca <_Z4loopv+0x13a>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd8:	aa06      	add	r2, sp, #24
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	486b      	ldr	r0, [pc, #428]	; (8002d8c <_Z4loopv+0x2fc>)
 8002bde:	2301      	movs	r3, #1
 8002be0:	f10d 0117 	add.w	r1, sp, #23
 8002be4:	f002 fd94 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002be8:	2300      	movs	r3, #0
 8002bea:	4d64      	ldr	r5, [pc, #400]	; (8002d7c <_Z4loopv+0x2ec>)
 8002bec:	4a64      	ldr	r2, [pc, #400]	; (8002d80 <_Z4loopv+0x2f0>)
 8002bee:	606b      	str	r3, [r5, #4]
 8002bf0:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <_Z4loopv+0x2f4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	0c9b      	lsrs	r3, r3, #18
 8002bfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bfe:	009a      	lsls	r2, r3, #2
 8002c00:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <_Z4loopv+0x2f8>)
 8002c02:	3a10      	subs	r2, #16
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	686b      	ldr	r3, [r5, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8fc      	bhi.n	8002c06 <_Z4loopv+0x176>
		ADS124x_CS_1;
 8002c0c:	2110      	movs	r1, #16
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4859      	ldr	r0, [pc, #356]	; (8002d78 <_Z4loopv+0x2e8>)
 8002c12:	f001 fc34 	bl	800447e <HAL_GPIO_WritePin>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8002c16:	4e56      	ldr	r6, [pc, #344]	; (8002d70 <_Z4loopv+0x2e0>)
		HAL_Delay(41);
 8002c18:	2029      	movs	r0, #41	; 0x29
 8002c1a:	f001 f963 	bl	8003ee4 <HAL_Delay>
		readAllRegister();
 8002c1e:	4855      	ldr	r0, [pc, #340]	; (8002d74 <_Z4loopv+0x2e4>)
 8002c20:	f7fe fb9e 	bl	8001360 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8002c24:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
 8002c28:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
 8002c2c:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		b1 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 4.120 / 2.0202
 8002c36:	4318      	orrs	r0, r3
 8002c38:	f7fe f82c 	bl	8000c94 <__aeabi_ui2f>
 8002c3c:	4954      	ldr	r1, [pc, #336]	; (8002d90 <_Z4loopv+0x300>)
 8002c3e:	f7fe f881 	bl	8000d44 <__aeabi_fmul>
 8002c42:	f7fd fbf1 	bl	8000428 <__aeabi_f2d>
				* 4.119 / 4.2;
 8002c46:	a346      	add	r3, pc, #280	; (adr r3, 8002d60 <_Z4loopv+0x2d0>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fc44 	bl	80004d8 <__aeabi_dmul>
 8002c50:	f7fd ff1a 	bl	8000a88 <__aeabi_d2f>
 8002c54:	6030      	str	r0, [r6, #0]
		HAL_Delay(1);
 8002c56:	2001      	movs	r0, #1
 8002c58:	f001 f944 	bl	8003ee4 <HAL_Delay>
		ADS124x_CS_0;
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2110      	movs	r1, #16
 8002c60:	4845      	ldr	r0, [pc, #276]	; (8002d78 <_Z4loopv+0x2e8>)
 8002c62:	f001 fc0c 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002c66:	2300      	movs	r3, #0
 8002c68:	606b      	str	r3, [r5, #4]
 8002c6a:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <_Z4loopv+0x2f4>)
 8002c6c:	4a44      	ldr	r2, [pc, #272]	; (8002d80 <_Z4loopv+0x2f0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4942      	ldr	r1, [pc, #264]	; (8002d7c <_Z4loopv+0x2ec>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0c9b      	lsrs	r3, r3, #18
 8002c78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c7c:	009a      	lsls	r2, r3, #2
 8002c7e:	4b42      	ldr	r3, [pc, #264]	; (8002d88 <_Z4loopv+0x2f8>)
 8002c80:	3a10      	subs	r2, #16
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	684b      	ldr	r3, [r1, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d8fc      	bhi.n	8002c84 <_Z4loopv+0x1f4>
		XferByte(cmd);
 8002c8a:	23fc      	movs	r3, #252	; 0xfc
 8002c8c:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002c90:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <_Z4loopv+0x2fc>)
 8002c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d0fa      	beq.n	8002c90 <_Z4loopv+0x200>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c9e:	aa06      	add	r2, sp, #24
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	483a      	ldr	r0, [pc, #232]	; (8002d8c <_Z4loopv+0x2fc>)
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f10d 0117 	add.w	r1, sp, #23
 8002caa:	f002 fd31 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	4d32      	ldr	r5, [pc, #200]	; (8002d7c <_Z4loopv+0x2ec>)
 8002cb2:	4a33      	ldr	r2, [pc, #204]	; (8002d80 <_Z4loopv+0x2f0>)
 8002cb4:	606b      	str	r3, [r5, #4]
 8002cb6:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <_Z4loopv+0x2f4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0c9b      	lsrs	r3, r3, #18
 8002cc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002cc4:	009a      	lsls	r2, r3, #2
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <_Z4loopv+0x2f8>)
 8002cc8:	3a10      	subs	r2, #16
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	686b      	ldr	r3, [r5, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d8fc      	bhi.n	8002ccc <_Z4loopv+0x23c>
		ADS124x_CS_1;
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2110      	movs	r1, #16
 8002cd6:	4828      	ldr	r0, [pc, #160]	; (8002d78 <_Z4loopv+0x2e8>)
 8002cd8:	f001 fbd1 	bl	800447e <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8002cdc:	2346      	movs	r3, #70	; 0x46
 8002cde:	4a24      	ldr	r2, [pc, #144]	; (8002d70 <_Z4loopv+0x2e0>)
		ADS124x_CS_0;
 8002ce0:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 8002ce2:	7753      	strb	r3, [r2, #29]
		ADS124x_CS_0;
 8002ce4:	4824      	ldr	r0, [pc, #144]	; (8002d78 <_Z4loopv+0x2e8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f001 fbc9 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002cec:	2300      	movs	r3, #0
 8002cee:	606b      	str	r3, [r5, #4]
 8002cf0:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <_Z4loopv+0x2f4>)
 8002cf2:	4a23      	ldr	r2, [pc, #140]	; (8002d80 <_Z4loopv+0x2f0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4921      	ldr	r1, [pc, #132]	; (8002d7c <_Z4loopv+0x2ec>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	0c9b      	lsrs	r3, r3, #18
 8002cfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d02:	009a      	lsls	r2, r3, #2
 8002d04:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <_Z4loopv+0x2f8>)
 8002d06:	3a10      	subs	r2, #16
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	684b      	ldr	r3, [r1, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d8fc      	bhi.n	8002d0a <_Z4loopv+0x27a>
		XferByte(0x50 + r);
 8002d10:	2351      	movs	r3, #81	; 0x51
 8002d12:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <_Z4loopv+0x2fc>)
 8002d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d0fa      	beq.n	8002d16 <_Z4loopv+0x286>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d24:	4819      	ldr	r0, [pc, #100]	; (8002d8c <_Z4loopv+0x2fc>)
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	aa06      	add	r2, sp, #24
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f10d 0117 	add.w	r1, sp, #23
 8002d30:	f002 fcee 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8002d34:	2300      	movs	r3, #0
 8002d36:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <_Z4loopv+0x2fc>)
 8002d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d0fa      	beq.n	8002d3a <_Z4loopv+0x2aa>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d48:	4810      	ldr	r0, [pc, #64]	; (8002d8c <_Z4loopv+0x2fc>)
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	aa06      	add	r2, sp, #24
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f10d 0117 	add.w	r1, sp, #23
 8002d54:	f002 fcdc 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8002d58:	2346      	movs	r3, #70	; 0x46
 8002d5a:	f88d 3017 	strb.w	r3, [sp, #23]
 8002d5e:	e019      	b.n	8002d94 <_Z4loopv+0x304>
 8002d60:	131ec926 	.word	0x131ec926
 8002d64:	40000025 	.word	0x40000025
 8002d68:	20000068 	.word	0x20000068
 8002d6c:	20000070 	.word	0x20000070
 8002d70:	20000840 	.word	0x20000840
 8002d74:	2000085c 	.word	0x2000085c
 8002d78:	40010800 	.word	0x40010800
 8002d7c:	e0001000 	.word	0xe0001000
 8002d80:	431bde83 	.word	0x431bde83
 8002d84:	2000005c 	.word	0x2000005c
 8002d88:	20000990 	.word	0x20000990
 8002d8c:	200008a0 	.word	0x200008a0
 8002d90:	34200000 	.word	0x34200000
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002d94:	4bb2      	ldr	r3, [pc, #712]	; (8003060 <_Z4loopv+0x5d0>)
 8002d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d0fa      	beq.n	8002d94 <_Z4loopv+0x304>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da2:	aa06      	add	r2, sp, #24
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	48ae      	ldr	r0, [pc, #696]	; (8003060 <_Z4loopv+0x5d0>)
 8002da8:	2301      	movs	r3, #1
 8002daa:	f10d 0117 	add.w	r1, sp, #23
 8002dae:	f002 fcaf 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002db2:	2300      	movs	r3, #0
 8002db4:	4dab      	ldr	r5, [pc, #684]	; (8003064 <_Z4loopv+0x5d4>)
 8002db6:	4aac      	ldr	r2, [pc, #688]	; (8003068 <_Z4loopv+0x5d8>)
 8002db8:	606b      	str	r3, [r5, #4]
 8002dba:	4bac      	ldr	r3, [pc, #688]	; (800306c <_Z4loopv+0x5dc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0c9b      	lsrs	r3, r3, #18
 8002dc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002dc8:	009a      	lsls	r2, r3, #2
 8002dca:	4ba9      	ldr	r3, [pc, #676]	; (8003070 <_Z4loopv+0x5e0>)
 8002dcc:	3a10      	subs	r2, #16
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	686b      	ldr	r3, [r5, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d8fc      	bhi.n	8002dd0 <_Z4loopv+0x340>
		ADS124x_CS_1;
 8002dd6:	2110      	movs	r1, #16
 8002dd8:	2201      	movs	r2, #1
 8002dda:	48a6      	ldr	r0, [pc, #664]	; (8003074 <_Z4loopv+0x5e4>)
 8002ddc:	f001 fb4f 	bl	800447e <HAL_GPIO_WritePin>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8002de0:	4ea5      	ldr	r6, [pc, #660]	; (8003078 <_Z4loopv+0x5e8>)
		HAL_Delay(41);
 8002de2:	2029      	movs	r0, #41	; 0x29
 8002de4:	f001 f87e 	bl	8003ee4 <HAL_Delay>
		readAllRegister();
 8002de8:	48a4      	ldr	r0, [pc, #656]	; (800307c <_Z4loopv+0x5ec>)
 8002dea:	f7fe fab9 	bl	8001360 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8002dee:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
 8002df2:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
 8002df6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		v8 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 8.197 / 2.1743
 8002e00:	4318      	orrs	r0, r3
 8002e02:	f7fd ff47 	bl	8000c94 <__aeabi_ui2f>
 8002e06:	499e      	ldr	r1, [pc, #632]	; (8003080 <_Z4loopv+0x5f0>)
 8002e08:	f7fd ff9c 	bl	8000d44 <__aeabi_fmul>
 8002e0c:	f7fd fb0c 	bl	8000428 <__aeabi_f2d>
				* 8.197 / 8.196 * 8.192 / 8.191 * 8.090/8.092;
 8002e10:	a38f      	add	r3, pc, #572	; (adr r3, 8003050 <_Z4loopv+0x5c0>)
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f7fd fb5f 	bl	80004d8 <__aeabi_dmul>
 8002e1a:	f7fd fe35 	bl	8000a88 <__aeabi_d2f>
		b2 = v8 - b1;
 8002e1e:	6831      	ldr	r1, [r6, #0]
		v8 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 8.197 / 2.1743
 8002e20:	61b0      	str	r0, [r6, #24]
		b2 = v8 - b1;
 8002e22:	f7fd fe85 	bl	8000b30 <__aeabi_fsub>
 8002e26:	6070      	str	r0, [r6, #4]
		HAL_Delay(1);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f001 f85b 	bl	8003ee4 <HAL_Delay>
		ADS124x_CS_0;
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2110      	movs	r1, #16
 8002e32:	4890      	ldr	r0, [pc, #576]	; (8003074 <_Z4loopv+0x5e4>)
 8002e34:	f001 fb23 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	606b      	str	r3, [r5, #4]
 8002e3c:	4b8b      	ldr	r3, [pc, #556]	; (800306c <_Z4loopv+0x5dc>)
 8002e3e:	4a8a      	ldr	r2, [pc, #552]	; (8003068 <_Z4loopv+0x5d8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4988      	ldr	r1, [pc, #544]	; (8003064 <_Z4loopv+0x5d4>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	0c9b      	lsrs	r3, r3, #18
 8002e4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e4e:	009a      	lsls	r2, r3, #2
 8002e50:	4b87      	ldr	r3, [pc, #540]	; (8003070 <_Z4loopv+0x5e0>)
 8002e52:	3a10      	subs	r2, #16
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	684b      	ldr	r3, [r1, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8fc      	bhi.n	8002e56 <_Z4loopv+0x3c6>
		XferByte(cmd);
 8002e5c:	23fc      	movs	r3, #252	; 0xfc
 8002e5e:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002e62:	4b7f      	ldr	r3, [pc, #508]	; (8003060 <_Z4loopv+0x5d0>)
 8002e64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d0fa      	beq.n	8002e62 <_Z4loopv+0x3d2>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e70:	aa06      	add	r2, sp, #24
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	487a      	ldr	r0, [pc, #488]	; (8003060 <_Z4loopv+0x5d0>)
 8002e76:	2301      	movs	r3, #1
 8002e78:	f10d 0117 	add.w	r1, sp, #23
 8002e7c:	f002 fc48 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002e80:	2300      	movs	r3, #0
 8002e82:	4d78      	ldr	r5, [pc, #480]	; (8003064 <_Z4loopv+0x5d4>)
 8002e84:	4a78      	ldr	r2, [pc, #480]	; (8003068 <_Z4loopv+0x5d8>)
 8002e86:	606b      	str	r3, [r5, #4]
 8002e88:	4b78      	ldr	r3, [pc, #480]	; (800306c <_Z4loopv+0x5dc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	0c9b      	lsrs	r3, r3, #18
 8002e92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e96:	009a      	lsls	r2, r3, #2
 8002e98:	4b75      	ldr	r3, [pc, #468]	; (8003070 <_Z4loopv+0x5e0>)
 8002e9a:	3a10      	subs	r2, #16
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	686b      	ldr	r3, [r5, #4]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d8fc      	bhi.n	8002e9e <_Z4loopv+0x40e>
		ADS124x_CS_1;
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	2110      	movs	r1, #16
 8002ea8:	4872      	ldr	r0, [pc, #456]	; (8003074 <_Z4loopv+0x5e4>)
 8002eaa:	f001 fae8 	bl	800447e <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8002eae:	2316      	movs	r3, #22
 8002eb0:	4a71      	ldr	r2, [pc, #452]	; (8003078 <_Z4loopv+0x5e8>)
		ADS124x_CS_0;
 8002eb2:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 8002eb4:	7753      	strb	r3, [r2, #29]
		ADS124x_CS_0;
 8002eb6:	486f      	ldr	r0, [pc, #444]	; (8003074 <_Z4loopv+0x5e4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f001 fae0 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	606b      	str	r3, [r5, #4]
 8002ec2:	4b6a      	ldr	r3, [pc, #424]	; (800306c <_Z4loopv+0x5dc>)
 8002ec4:	4a68      	ldr	r2, [pc, #416]	; (8003068 <_Z4loopv+0x5d8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4966      	ldr	r1, [pc, #408]	; (8003064 <_Z4loopv+0x5d4>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0c9b      	lsrs	r3, r3, #18
 8002ed0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ed4:	009a      	lsls	r2, r3, #2
 8002ed6:	4b66      	ldr	r3, [pc, #408]	; (8003070 <_Z4loopv+0x5e0>)
 8002ed8:	3a10      	subs	r2, #16
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	684b      	ldr	r3, [r1, #4]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d8fc      	bhi.n	8002edc <_Z4loopv+0x44c>
		XferByte(0x50 + r);
 8002ee2:	2351      	movs	r3, #81	; 0x51
 8002ee4:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002ee8:	4b5d      	ldr	r3, [pc, #372]	; (8003060 <_Z4loopv+0x5d0>)
 8002eea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d0fa      	beq.n	8002ee8 <_Z4loopv+0x458>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef6:	485a      	ldr	r0, [pc, #360]	; (8003060 <_Z4loopv+0x5d0>)
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	aa06      	add	r2, sp, #24
 8002efc:	2301      	movs	r3, #1
 8002efe:	f10d 0117 	add.w	r1, sp, #23
 8002f02:	f002 fc05 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8002f06:	2300      	movs	r3, #0
 8002f08:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002f0c:	4b54      	ldr	r3, [pc, #336]	; (8003060 <_Z4loopv+0x5d0>)
 8002f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d0fa      	beq.n	8002f0c <_Z4loopv+0x47c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f1a:	4851      	ldr	r0, [pc, #324]	; (8003060 <_Z4loopv+0x5d0>)
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	aa06      	add	r2, sp, #24
 8002f20:	2301      	movs	r3, #1
 8002f22:	f10d 0117 	add.w	r1, sp, #23
 8002f26:	f002 fbf3 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8002f2a:	2316      	movs	r3, #22
 8002f2c:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <_Z4loopv+0x5d0>)
 8002f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d0fa      	beq.n	8002f30 <_Z4loopv+0x4a0>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3e:	aa06      	add	r2, sp, #24
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	f10d 0117 	add.w	r1, sp, #23
 8002f46:	2301      	movs	r3, #1
 8002f48:	4845      	ldr	r0, [pc, #276]	; (8003060 <_Z4loopv+0x5d0>)
 8002f4a:	f002 fbe1 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	4944      	ldr	r1, [pc, #272]	; (8003064 <_Z4loopv+0x5d4>)
 8002f52:	4a45      	ldr	r2, [pc, #276]	; (8003068 <_Z4loopv+0x5d8>)
 8002f54:	604b      	str	r3, [r1, #4]
 8002f56:	4b45      	ldr	r3, [pc, #276]	; (800306c <_Z4loopv+0x5dc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0c9b      	lsrs	r3, r3, #18
 8002f60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f64:	009a      	lsls	r2, r3, #2
 8002f66:	4b42      	ldr	r3, [pc, #264]	; (8003070 <_Z4loopv+0x5e0>)
 8002f68:	3a10      	subs	r2, #16
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	684b      	ldr	r3, [r1, #4]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d8fc      	bhi.n	8002f6c <_Z4loopv+0x4dc>
		ADS124x_CS_1;
 8002f72:	2110      	movs	r1, #16
 8002f74:	2201      	movs	r2, #1
 8002f76:	483f      	ldr	r0, [pc, #252]	; (8003074 <_Z4loopv+0x5e4>)
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8002f78:	4d3f      	ldr	r5, [pc, #252]	; (8003078 <_Z4loopv+0x5e8>)
		ADS124x_CS_1;
 8002f7a:	f001 fa80 	bl	800447e <HAL_GPIO_WritePin>
		HAL_Delay(41);
 8002f7e:	2029      	movs	r0, #41	; 0x29
 8002f80:	f000 ffb0 	bl	8003ee4 <HAL_Delay>
		readAllRegister();
 8002f84:	483d      	ldr	r0, [pc, #244]	; (800307c <_Z4loopv+0x5ec>)
 8002f86:	f7fe f9eb 	bl	8001360 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8002f8a:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8002f8e:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002f92:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		v12 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.292 / 2.1478 * 12.143/12.146 *12.150/12.147;
 8002f9c:	4318      	orrs	r0, r3
 8002f9e:	f7fd fe79 	bl	8000c94 <__aeabi_ui2f>
 8002fa2:	4937      	ldr	r1, [pc, #220]	; (8003080 <_Z4loopv+0x5f0>)
 8002fa4:	f7fd fece 	bl	8000d44 <__aeabi_fmul>
 8002fa8:	f7fd fa3e 	bl	8000428 <__aeabi_f2d>
 8002fac:	a32a      	add	r3, pc, #168	; (adr r3, 8003058 <_Z4loopv+0x5c8>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd fa91 	bl	80004d8 <__aeabi_dmul>
 8002fb6:	f7fd fd67 	bl	8000a88 <__aeabi_d2f>
		b3 = v12 - v8;
 8002fba:	69a9      	ldr	r1, [r5, #24]
		v12 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.292 / 2.1478 * 12.143/12.146 *12.150/12.147;
 8002fbc:	60e8      	str	r0, [r5, #12]
		b3 = v12 - v8;
 8002fbe:	f7fd fdb7 	bl	8000b30 <__aeabi_fsub>
		tft->Fill1(0);
 8002fc2:	2100      	movs	r1, #0
		b3 = v12 - v8;
 8002fc4:	60a8      	str	r0, [r5, #8]
		tft->Fill1(0);
 8002fc6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002fc8:	f003 ff6c 	bl	8006ea4 <_ZN3TFT5Fill1Et>
 8002fcc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002fce:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <_Z4loopv+0x5f4>)
		sprintf(str, "%2.3f", v12);
 8002fd0:	68e8      	ldr	r0, [r5, #12]
 8002fd2:	615a      	str	r2, [r3, #20]
 8002fd4:	f7fd fa28 	bl	8000428 <__aeabi_f2d>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	a806      	add	r0, sp, #24
 8002fde:	492a      	ldr	r1, [pc, #168]	; (8003088 <_Z4loopv+0x5f8>)
 8002fe0:	f005 f812 	bl	8008008 <siprintf>
 8002fe4:	f89d a018 	ldrb.w	sl, [sp, #24]
		FontClassicPuts(tft, str, &Font_11x18, 0);
 8002fe8:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8002fec:	f1ba 0f00 	cmp.w	sl, #0
 8002ff0:	d067      	beq.n	80030c2 <_Z4loopv+0x632>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002ff2:	ab06      	add	r3, sp, #24
 8002ff4:	f9bb c014 	ldrsh.w	ip, [fp, #20]
 8002ff8:	7821      	ldrb	r1, [r4, #0]
 8002ffa:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 8002ffc:	7863      	ldrb	r3, [r4, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d04a      	beq.n	8003098 <_Z4loopv+0x608>
 8003002:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003004:	f1aa 0920 	sub.w	r9, sl, #32
 8003008:	fb09 6303 	mla	r3, r9, r3, r6
 800300c:	6862      	ldr	r2, [r4, #4]
 800300e:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8003012:	2900      	cmp	r1, #0
 8003014:	d040      	beq.n	8003098 <_Z4loopv+0x608>
 8003016:	2500      	movs	r5, #0
 8003018:	e00b      	b.n	8003032 <_Z4loopv+0x5a2>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800301a:	4658      	mov	r0, fp
 800301c:	f8bb 3018 	ldrh.w	r3, [fp, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8003020:	4432      	add	r2, r6
 8003022:	f003 ff11 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8003026:	7821      	ldrb	r1, [r4, #0]
 8003028:	3501      	adds	r5, #1
 800302a:	428d      	cmp	r5, r1
 800302c:	d22e      	bcs.n	800308c <_Z4loopv+0x5fc>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800302e:	f9bb c014 	ldrsh.w	ip, [fp, #20]
			if ((b << j) & 0x8000) {
 8003032:	fa08 f305 	lsl.w	r3, r8, r5
 8003036:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8003038:	f9bb 2016 	ldrsh.w	r2, [fp, #22]
 800303c:	eb0c 0105 	add.w	r1, ip, r5
			if ((b << j) & 0x8000) {
 8003040:	d4eb      	bmi.n	800301a <_Z4loopv+0x58a>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8003042:	4658      	mov	r0, fp
 8003044:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 8003048:	eb0c 0105 	add.w	r1, ip, r5
 800304c:	e7e8      	b.n	8003020 <_Z4loopv+0x590>
 800304e:	bf00      	nop
 8003050:	da69752a 	.word	0xda69752a
 8003054:	400e28d4 	.word	0x400e28d4
 8003058:	268959f2 	.word	0x268959f2
 800305c:	4016e46b 	.word	0x4016e46b
 8003060:	200008a0 	.word	0x200008a0
 8003064:	e0001000 	.word	0xe0001000
 8003068:	431bde83 	.word	0x431bde83
 800306c:	2000005c 	.word	0x2000005c
 8003070:	20000990 	.word	0x20000990
 8003074:	40010800 	.word	0x40010800
 8003078:	20000840 	.word	0x20000840
 800307c:	2000085c 	.word	0x2000085c
 8003080:	34200000 	.word	0x34200000
 8003084:	00020040 	.word	0x00020040
 8003088:	0800a2f4 	.word	0x0800a2f4
	for (i = 0; i < Font->FontHeight; i++) {
 800308c:	7863      	ldrb	r3, [r4, #1]
 800308e:	3601      	adds	r6, #1
 8003090:	429e      	cmp	r6, r3
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8003092:	f9bb c014 	ldrsh.w	ip, [fp, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8003096:	d3b7      	bcc.n	8003008 <_Z4loopv+0x578>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8003098:	448c      	add	ip, r1
 800309a:	f10c 3cff 	add.w	ip, ip, #4294967295
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 800309e:	9b03      	ldr	r3, [sp, #12]
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80030a0:	fa0f fc8c 	sxth.w	ip, ip
 80030a4:	f8ab c014 	strh.w	ip, [fp, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	4553      	cmp	r3, sl
 80030ac:	d106      	bne.n	80030bc <_Z4loopv+0x62c>
	while (*str) {
 80030ae:	9b03      	ldr	r3, [sp, #12]
 80030b0:	f813 af01 	ldrb.w	sl, [r3, #1]!
 80030b4:	9303      	str	r3, [sp, #12]
 80030b6:	f1ba 0f00 	cmp.w	sl, #0
 80030ba:	d19f      	bne.n	8002ffc <_Z4loopv+0x56c>
		tft->GotoXY(x, 2);
 80030bc:	4ba0      	ldr	r3, [pc, #640]	; (8003340 <_Z4loopv+0x8b0>)
 80030be:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 80030c2:	f04f 1302 	mov.w	r3, #131074	; 0x20002
		sprintf(str, "%.4f", b3);
 80030c6:	4d9e      	ldr	r5, [pc, #632]	; (8003340 <_Z4loopv+0x8b0>)
 80030c8:	f8cb 3014 	str.w	r3, [fp, #20]
 80030cc:	68a8      	ldr	r0, [r5, #8]
 80030ce:	f7fd f9ab 	bl	8000428 <__aeabi_f2d>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	a806      	add	r0, sp, #24
 80030d8:	499a      	ldr	r1, [pc, #616]	; (8003344 <_Z4loopv+0x8b4>)
 80030da:	f004 ff95 	bl	8008008 <siprintf>
 80030de:	f89d a018 	ldrb.w	sl, [sp, #24]
		FontClassicPuts(tft, str, &Font_11x18, 0);
 80030e2:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 80030e6:	f1ba 0f00 	cmp.w	sl, #0
 80030ea:	d04c      	beq.n	8003186 <_Z4loopv+0x6f6>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80030ec:	ab06      	add	r3, sp, #24
 80030ee:	f9bb c014 	ldrsh.w	ip, [fp, #20]
 80030f2:	7821      	ldrb	r1, [r4, #0]
 80030f4:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 80030f6:	7863      	ldrb	r3, [r4, #1]
 80030f8:	b383      	cbz	r3, 800315c <_Z4loopv+0x6cc>
 80030fa:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80030fc:	f1aa 0920 	sub.w	r9, sl, #32
 8003100:	fb09 6303 	mla	r3, r9, r3, r6
 8003104:	6862      	ldr	r2, [r4, #4]
 8003106:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 800310a:	b339      	cbz	r1, 800315c <_Z4loopv+0x6cc>
 800310c:	2500      	movs	r5, #0
 800310e:	e00b      	b.n	8003128 <_Z4loopv+0x698>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8003110:	4658      	mov	r0, fp
 8003112:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8003116:	4432      	add	r2, r6
 8003118:	f003 fe96 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 800311c:	7821      	ldrb	r1, [r4, #0]
 800311e:	3501      	adds	r5, #1
 8003120:	42a9      	cmp	r1, r5
 8003122:	d915      	bls.n	8003150 <_Z4loopv+0x6c0>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8003124:	f9bb c014 	ldrsh.w	ip, [fp, #20]
			if ((b << j) & 0x8000) {
 8003128:	fa08 f305 	lsl.w	r3, r8, r5
 800312c:	0418      	lsls	r0, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800312e:	f9bb 2016 	ldrsh.w	r2, [fp, #22]
 8003132:	eb0c 0105 	add.w	r1, ip, r5
			if ((b << j) & 0x8000) {
 8003136:	d4eb      	bmi.n	8003110 <_Z4loopv+0x680>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8003138:	eb0c 0105 	add.w	r1, ip, r5
 800313c:	4658      	mov	r0, fp
 800313e:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 8003142:	4432      	add	r2, r6
 8003144:	f003 fe80 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8003148:	7821      	ldrb	r1, [r4, #0]
 800314a:	3501      	adds	r5, #1
 800314c:	428d      	cmp	r5, r1
 800314e:	d3e9      	bcc.n	8003124 <_Z4loopv+0x694>
	for (i = 0; i < Font->FontHeight; i++) {
 8003150:	7863      	ldrb	r3, [r4, #1]
 8003152:	3601      	adds	r6, #1
 8003154:	429e      	cmp	r6, r3
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8003156:	f9bb c014 	ldrsh.w	ip, [fp, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 800315a:	d3d1      	bcc.n	8003100 <_Z4loopv+0x670>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800315c:	448c      	add	ip, r1
 800315e:	f10c 3cff 	add.w	ip, ip, #4294967295
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8003162:	9b03      	ldr	r3, [sp, #12]
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8003164:	fa0f fc8c 	sxth.w	ip, ip
 8003168:	f8ab c014 	strh.w	ip, [fp, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	4553      	cmp	r3, sl
 8003170:	d106      	bne.n	8003180 <_Z4loopv+0x6f0>
	while (*str) {
 8003172:	9b03      	ldr	r3, [sp, #12]
 8003174:	f813 af01 	ldrb.w	sl, [r3, #1]!
 8003178:	9303      	str	r3, [sp, #12]
 800317a:	f1ba 0f00 	cmp.w	sl, #0
 800317e:	d1ba      	bne.n	80030f6 <_Z4loopv+0x666>
		tft->GotoXY(x, 23);
 8003180:	4b6f      	ldr	r3, [pc, #444]	; (8003340 <_Z4loopv+0x8b0>)
 8003182:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8003186:	4b70      	ldr	r3, [pc, #448]	; (8003348 <_Z4loopv+0x8b8>)
		sprintf(str, "%.4f", b2);
 8003188:	4d6d      	ldr	r5, [pc, #436]	; (8003340 <_Z4loopv+0x8b0>)
 800318a:	f8cb 3014 	str.w	r3, [fp, #20]
 800318e:	6868      	ldr	r0, [r5, #4]
 8003190:	f7fd f94a 	bl	8000428 <__aeabi_f2d>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	a806      	add	r0, sp, #24
 800319a:	496a      	ldr	r1, [pc, #424]	; (8003344 <_Z4loopv+0x8b4>)
 800319c:	f004 ff34 	bl	8008008 <siprintf>
 80031a0:	f89d a018 	ldrb.w	sl, [sp, #24]
		FontClassicPuts(tft, str, &Font_11x18, 0);
 80031a4:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 80031a8:	f1ba 0f00 	cmp.w	sl, #0
 80031ac:	d046      	beq.n	800323c <_Z4loopv+0x7ac>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80031ae:	ab06      	add	r3, sp, #24
 80031b0:	f9bb c014 	ldrsh.w	ip, [fp, #20]
 80031b4:	7821      	ldrb	r1, [r4, #0]
 80031b6:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 80031b8:	7863      	ldrb	r3, [r4, #1]
 80031ba:	b353      	cbz	r3, 8003212 <_Z4loopv+0x782>
 80031bc:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80031be:	f1aa 0920 	sub.w	r9, sl, #32
 80031c2:	fb09 6303 	mla	r3, r9, r3, r6
 80031c6:	6862      	ldr	r2, [r4, #4]
 80031c8:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80031cc:	b309      	cbz	r1, 8003212 <_Z4loopv+0x782>
 80031ce:	2500      	movs	r5, #0
 80031d0:	e00b      	b.n	80031ea <_Z4loopv+0x75a>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80031d2:	4658      	mov	r0, fp
 80031d4:	f8bb 3018 	ldrh.w	r3, [fp, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80031d8:	4432      	add	r2, r6
 80031da:	f003 fe35 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 80031de:	7821      	ldrb	r1, [r4, #0]
 80031e0:	3501      	adds	r5, #1
 80031e2:	428d      	cmp	r5, r1
 80031e4:	d20f      	bcs.n	8003206 <_Z4loopv+0x776>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80031e6:	f9bb c014 	ldrsh.w	ip, [fp, #20]
			if ((b << j) & 0x8000) {
 80031ea:	fa08 f305 	lsl.w	r3, r8, r5
 80031ee:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80031f0:	f9bb 2016 	ldrsh.w	r2, [fp, #22]
 80031f4:	eb0c 0105 	add.w	r1, ip, r5
			if ((b << j) & 0x8000) {
 80031f8:	d4eb      	bmi.n	80031d2 <_Z4loopv+0x742>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80031fa:	4658      	mov	r0, fp
 80031fc:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 8003200:	eb0c 0105 	add.w	r1, ip, r5
 8003204:	e7e8      	b.n	80031d8 <_Z4loopv+0x748>
	for (i = 0; i < Font->FontHeight; i++) {
 8003206:	7863      	ldrb	r3, [r4, #1]
 8003208:	3601      	adds	r6, #1
 800320a:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800320c:	f9bb c014 	ldrsh.w	ip, [fp, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8003210:	d8d7      	bhi.n	80031c2 <_Z4loopv+0x732>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8003212:	448c      	add	ip, r1
 8003214:	f10c 3cff 	add.w	ip, ip, #4294967295
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8003218:	9b03      	ldr	r3, [sp, #12]
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800321a:	fa0f fc8c 	sxth.w	ip, ip
 800321e:	f8ab c014 	strh.w	ip, [fp, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	4553      	cmp	r3, sl
 8003226:	d106      	bne.n	8003236 <_Z4loopv+0x7a6>
	while (*str) {
 8003228:	9b03      	ldr	r3, [sp, #12]
 800322a:	f813 af01 	ldrb.w	sl, [r3, #1]!
 800322e:	9303      	str	r3, [sp, #12]
 8003230:	f1ba 0f00 	cmp.w	sl, #0
 8003234:	d1c0      	bne.n	80031b8 <_Z4loopv+0x728>
		tft->GotoXY(x, 45);
 8003236:	4b42      	ldr	r3, [pc, #264]	; (8003340 <_Z4loopv+0x8b0>)
 8003238:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 800323c:	4b43      	ldr	r3, [pc, #268]	; (800334c <_Z4loopv+0x8bc>)
		sprintf(str, "%.4f", b1);
 800323e:	4d40      	ldr	r5, [pc, #256]	; (8003340 <_Z4loopv+0x8b0>)
 8003240:	f8cb 3014 	str.w	r3, [fp, #20]
 8003244:	6828      	ldr	r0, [r5, #0]
 8003246:	f7fd f8ef 	bl	8000428 <__aeabi_f2d>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	a806      	add	r0, sp, #24
 8003250:	493c      	ldr	r1, [pc, #240]	; (8003344 <_Z4loopv+0x8b4>)
 8003252:	f004 fed9 	bl	8008008 <siprintf>
 8003256:	f89d a018 	ldrb.w	sl, [sp, #24]
		FontClassicPuts(tft, str, &Font_11x18, 0);
 800325a:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 800325e:	f1ba 0f00 	cmp.w	sl, #0
 8003262:	d046      	beq.n	80032f2 <_Z4loopv+0x862>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8003264:	ab06      	add	r3, sp, #24
 8003266:	f9bb c014 	ldrsh.w	ip, [fp, #20]
 800326a:	7821      	ldrb	r1, [r4, #0]
 800326c:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 800326e:	7863      	ldrb	r3, [r4, #1]
 8003270:	b353      	cbz	r3, 80032c8 <_Z4loopv+0x838>
 8003272:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003274:	f1aa 0920 	sub.w	r9, sl, #32
 8003278:	fb09 6303 	mla	r3, r9, r3, r6
 800327c:	6862      	ldr	r2, [r4, #4]
 800327e:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8003282:	b309      	cbz	r1, 80032c8 <_Z4loopv+0x838>
 8003284:	2500      	movs	r5, #0
 8003286:	e00b      	b.n	80032a0 <_Z4loopv+0x810>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8003288:	4658      	mov	r0, fp
 800328a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 800328e:	4432      	add	r2, r6
 8003290:	f003 fdda 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8003294:	7821      	ldrb	r1, [r4, #0]
 8003296:	3501      	adds	r5, #1
 8003298:	428d      	cmp	r5, r1
 800329a:	d20f      	bcs.n	80032bc <_Z4loopv+0x82c>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800329c:	f9bb c014 	ldrsh.w	ip, [fp, #20]
			if ((b << j) & 0x8000) {
 80032a0:	fa08 f305 	lsl.w	r3, r8, r5
 80032a4:	0418      	lsls	r0, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80032a6:	f9bb 2016 	ldrsh.w	r2, [fp, #22]
 80032aa:	eb0c 0105 	add.w	r1, ip, r5
			if ((b << j) & 0x8000) {
 80032ae:	d4eb      	bmi.n	8003288 <_Z4loopv+0x7f8>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80032b0:	4658      	mov	r0, fp
 80032b2:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 80032b6:	eb0c 0105 	add.w	r1, ip, r5
 80032ba:	e7e8      	b.n	800328e <_Z4loopv+0x7fe>
	for (i = 0; i < Font->FontHeight; i++) {
 80032bc:	7863      	ldrb	r3, [r4, #1]
 80032be:	3601      	adds	r6, #1
 80032c0:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80032c2:	f9bb c014 	ldrsh.w	ip, [fp, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 80032c6:	d8d7      	bhi.n	8003278 <_Z4loopv+0x7e8>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80032c8:	448c      	add	ip, r1
 80032ca:	f10c 3cff 	add.w	ip, ip, #4294967295
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 80032ce:	9b03      	ldr	r3, [sp, #12]
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80032d0:	fa0f fc8c 	sxth.w	ip, ip
 80032d4:	f8ab c014 	strh.w	ip, [fp, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	4553      	cmp	r3, sl
 80032dc:	d106      	bne.n	80032ec <_Z4loopv+0x85c>
	while (*str) {
 80032de:	9b03      	ldr	r3, [sp, #12]
 80032e0:	f813 af01 	ldrb.w	sl, [r3, #1]!
 80032e4:	9303      	str	r3, [sp, #12]
 80032e6:	f1ba 0f00 	cmp.w	sl, #0
 80032ea:	d1c0      	bne.n	800326e <_Z4loopv+0x7de>
		tft->GotoXY(65, 53);
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <_Z4loopv+0x8b0>)
 80032ee:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 80032f2:	4b17      	ldr	r3, [pc, #92]	; (8003350 <_Z4loopv+0x8c0>)
		sprintf(str, "v8  %.4f", v8);
 80032f4:	4d12      	ldr	r5, [pc, #72]	; (8003340 <_Z4loopv+0x8b0>)
 80032f6:	f8cb 3014 	str.w	r3, [fp, #20]
 80032fa:	69a8      	ldr	r0, [r5, #24]
 80032fc:	f7fd f894 	bl	8000428 <__aeabi_f2d>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	a806      	add	r0, sp, #24
 8003306:	4913      	ldr	r1, [pc, #76]	; (8003354 <_Z4loopv+0x8c4>)
 8003308:	f004 fe7e 	bl	8008008 <siprintf>
 800330c:	f89d a018 	ldrb.w	sl, [sp, #24]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 8003310:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8003314:	f1ba 0f00 	cmp.w	sl, #0
 8003318:	d059      	beq.n	80033ce <_Z4loopv+0x93e>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800331a:	ab06      	add	r3, sp, #24
 800331c:	f9bb c014 	ldrsh.w	ip, [fp, #20]
 8003320:	7839      	ldrb	r1, [r7, #0]
 8003322:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 8003324:	787b      	ldrb	r3, [r7, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d03c      	beq.n	80033a4 <_Z4loopv+0x914>
 800332a:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800332c:	f1aa 0920 	sub.w	r9, sl, #32
 8003330:	fb09 6303 	mla	r3, r9, r3, r6
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 800333a:	b399      	cbz	r1, 80033a4 <_Z4loopv+0x914>
 800333c:	2500      	movs	r5, #0
 800333e:	e017      	b.n	8003370 <_Z4loopv+0x8e0>
 8003340:	20000840 	.word	0x20000840
 8003344:	0800a300 	.word	0x0800a300
 8003348:	00170002 	.word	0x00170002
 800334c:	002d0002 	.word	0x002d0002
 8003350:	00350041 	.word	0x00350041
 8003354:	0800a2fc 	.word	0x0800a2fc
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8003358:	4658      	mov	r0, fp
 800335a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800335e:	4432      	add	r2, r6
 8003360:	f003 fd72 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8003364:	7839      	ldrb	r1, [r7, #0]
 8003366:	3501      	adds	r5, #1
 8003368:	42a9      	cmp	r1, r5
 800336a:	d915      	bls.n	8003398 <_Z4loopv+0x908>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800336c:	f9bb c014 	ldrsh.w	ip, [fp, #20]
			if ((b << j) & 0x8000) {
 8003370:	fa08 f305 	lsl.w	r3, r8, r5
 8003374:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8003376:	f9bb 2016 	ldrsh.w	r2, [fp, #22]
 800337a:	eb0c 0105 	add.w	r1, ip, r5
			if ((b << j) & 0x8000) {
 800337e:	d4eb      	bmi.n	8003358 <_Z4loopv+0x8c8>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8003380:	eb0c 0105 	add.w	r1, ip, r5
 8003384:	4658      	mov	r0, fp
 8003386:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 800338a:	4432      	add	r2, r6
 800338c:	f003 fd5c 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8003390:	7839      	ldrb	r1, [r7, #0]
 8003392:	3501      	adds	r5, #1
 8003394:	428d      	cmp	r5, r1
 8003396:	d3e9      	bcc.n	800336c <_Z4loopv+0x8dc>
	for (i = 0; i < Font->FontHeight; i++) {
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	3601      	adds	r6, #1
 800339c:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800339e:	f9bb c014 	ldrsh.w	ip, [fp, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 80033a2:	d8c5      	bhi.n	8003330 <_Z4loopv+0x8a0>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80033a4:	448c      	add	ip, r1
 80033a6:	f10c 3cff 	add.w	ip, ip, #4294967295
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 80033aa:	9b03      	ldr	r3, [sp, #12]
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80033ac:	fa0f fc8c 	sxth.w	ip, ip
 80033b0:	f8ab c014 	strh.w	ip, [fp, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	4553      	cmp	r3, sl
 80033b8:	d106      	bne.n	80033c8 <_Z4loopv+0x938>
	while (*str) {
 80033ba:	9b03      	ldr	r3, [sp, #12]
 80033bc:	f813 af01 	ldrb.w	sl, [r3, #1]!
 80033c0:	9303      	str	r3, [sp, #12]
 80033c2:	f1ba 0f00 	cmp.w	sl, #0
 80033c6:	d1ad      	bne.n	8003324 <_Z4loopv+0x894>
		tft->Rectangle(0, 0, 127, 63, 1);
 80033c8:	4b90      	ldr	r3, [pc, #576]	; (800360c <_Z4loopv+0xb7c>)
 80033ca:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 80033ce:	2501      	movs	r5, #1
 80033d0:	263f      	movs	r6, #63	; 0x3f
 80033d2:	2200      	movs	r2, #0
 80033d4:	4658      	mov	r0, fp
 80033d6:	4611      	mov	r1, r2
 80033d8:	237f      	movs	r3, #127	; 0x7f
 80033da:	e9cd 6500 	strd	r6, r5, [sp]
 80033de:	f004 f871 	bl	80074c4 <_ZN3TFT9RectangleEllttt>
		tft->LineV(63, 1, 63, 1);
 80033e2:	488a      	ldr	r0, [pc, #552]	; (800360c <_Z4loopv+0xb7c>)
 80033e4:	9500      	str	r5, [sp, #0]
 80033e6:	4680      	mov	r8, r0
 80033e8:	4633      	mov	r3, r6
 80033ea:	462a      	mov	r2, r5
 80033ec:	4631      	mov	r1, r6
 80033ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80033f0:	f003 fd7c 	bl	8006eec <_ZN3TFT5LineVElllt>
		tft->LineHW(1, 20, 63, 1);
 80033f4:	9500      	str	r5, [sp, #0]
 80033f6:	4633      	mov	r3, r6
 80033f8:	2214      	movs	r2, #20
 80033fa:	4629      	mov	r1, r5
 80033fc:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 8003400:	f003 ff60 	bl	80072c4 <_ZN3TFT6LineHWElllt>
        tft->LineHW(1, 42, 63, 1);
 8003404:	9500      	str	r5, [sp, #0]
 8003406:	4633      	mov	r3, r6
 8003408:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 800340c:	4629      	mov	r1, r5
 800340e:	222a      	movs	r2, #42	; 0x2a
 8003410:	f003 ff58 	bl	80072c4 <_ZN3TFT6LineHWElllt>
		tft->driver.Update();
 8003414:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
		switch (LCD->LCD_Driver) {
 8003418:	6843      	ldr	r3, [r0, #4]
 800341a:	7a1b      	ldrb	r3, [r3, #8]
 800341c:	2b03      	cmp	r3, #3
 800341e:	f47f ab3c 	bne.w	8002a9a <_Z4loopv+0xa>
			SSD1306_UpdateScreen();
 8003422:	3004      	adds	r0, #4
 8003424:	f003 fcec 	bl	8006e00 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
	}
 8003428:	f7ff bb37 	b.w	8002a9a <_Z4loopv+0xa>
		ADSregister.SETUP.PGA = pga;
 800342c:	f36f 0502 	bfc	r5, #0, #3
 8003430:	771d      	strb	r5, [r3, #28]
		ADS124x_CS_0;
 8003432:	2200      	movs	r2, #0
 8003434:	2110      	movs	r1, #16
 8003436:	4876      	ldr	r0, [pc, #472]	; (8003610 <_Z4loopv+0xb80>)
 8003438:	f001 f821 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 800343c:	2300      	movs	r3, #0
 800343e:	4975      	ldr	r1, [pc, #468]	; (8003614 <_Z4loopv+0xb84>)
 8003440:	4a75      	ldr	r2, [pc, #468]	; (8003618 <_Z4loopv+0xb88>)
 8003442:	604b      	str	r3, [r1, #4]
 8003444:	4b75      	ldr	r3, [pc, #468]	; (800361c <_Z4loopv+0xb8c>)
	    uint8_t p = (ADSregister.SETUP.ID << 4) | (ADSregister.SETUP.BOCS << 3) |  ADSregister.SETUP.PGA;
 8003446:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
		delayMicroseconds(20);
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	0c9b      	lsrs	r3, r3, #18
 8003452:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003456:	4a72      	ldr	r2, [pc, #456]	; (8003620 <_Z4loopv+0xb90>)
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	3b10      	subs	r3, #16
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	684a      	ldr	r2, [r1, #4]
 8003460:	4293      	cmp	r3, r2
 8003462:	d8fc      	bhi.n	800345e <_Z4loopv+0x9ce>
		XferByte(0x50 + r);
 8003464:	2350      	movs	r3, #80	; 0x50
 8003466:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800346a:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <_Z4loopv+0xb94>)
 800346c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003470:	2b02      	cmp	r3, #2
 8003472:	d0fa      	beq.n	800346a <_Z4loopv+0x9da>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8003474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003478:	486a      	ldr	r0, [pc, #424]	; (8003624 <_Z4loopv+0xb94>)
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	aa06      	add	r2, sp, #24
 800347e:	2301      	movs	r3, #1
 8003480:	f10d 0117 	add.w	r1, sp, #23
 8003484:	f002 f944 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8003488:	2300      	movs	r3, #0
 800348a:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800348e:	4b65      	ldr	r3, [pc, #404]	; (8003624 <_Z4loopv+0xb94>)
 8003490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003494:	2b02      	cmp	r3, #2
 8003496:	d0fa      	beq.n	800348e <_Z4loopv+0x9fe>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8003498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800349c:	4861      	ldr	r0, [pc, #388]	; (8003624 <_Z4loopv+0xb94>)
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	aa06      	add	r2, sp, #24
 80034a2:	2301      	movs	r3, #1
 80034a4:	f10d 0117 	add.w	r1, sp, #23
 80034a8:	f002 f932 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(data);
 80034ac:	f88d 5017 	strb.w	r5, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80034b0:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <_Z4loopv+0xb94>)
 80034b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d0fa      	beq.n	80034b0 <_Z4loopv+0xa20>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80034ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034be:	aa06      	add	r2, sp, #24
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	4858      	ldr	r0, [pc, #352]	; (8003624 <_Z4loopv+0xb94>)
 80034c4:	2301      	movs	r3, #1
 80034c6:	f10d 0117 	add.w	r1, sp, #23
 80034ca:	f002 f921 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80034ce:	2300      	movs	r3, #0
 80034d0:	4d50      	ldr	r5, [pc, #320]	; (8003614 <_Z4loopv+0xb84>)
 80034d2:	4a51      	ldr	r2, [pc, #324]	; (8003618 <_Z4loopv+0xb88>)
 80034d4:	606b      	str	r3, [r5, #4]
 80034d6:	4b51      	ldr	r3, [pc, #324]	; (800361c <_Z4loopv+0xb8c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0c9b      	lsrs	r3, r3, #18
 80034e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034e4:	4a4e      	ldr	r2, [pc, #312]	; (8003620 <_Z4loopv+0xb90>)
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	3b10      	subs	r3, #16
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	686a      	ldr	r2, [r5, #4]
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d8fc      	bhi.n	80034ec <_Z4loopv+0xa5c>
		ADS124x_CS_1;
 80034f2:	2201      	movs	r2, #1
 80034f4:	2110      	movs	r1, #16
 80034f6:	4846      	ldr	r0, [pc, #280]	; (8003610 <_Z4loopv+0xb80>)
 80034f8:	f000 ffc1 	bl	800447e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80034fc:	2001      	movs	r0, #1
 80034fe:	f000 fcf1 	bl	8003ee4 <HAL_Delay>
		ADS124x_CS_0;
 8003502:	2200      	movs	r2, #0
 8003504:	2110      	movs	r1, #16
 8003506:	4842      	ldr	r0, [pc, #264]	; (8003610 <_Z4loopv+0xb80>)
 8003508:	f000 ffb9 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 800350c:	2300      	movs	r3, #0
 800350e:	606b      	str	r3, [r5, #4]
 8003510:	4b42      	ldr	r3, [pc, #264]	; (800361c <_Z4loopv+0xb8c>)
 8003512:	4a41      	ldr	r2, [pc, #260]	; (8003618 <_Z4loopv+0xb88>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	493f      	ldr	r1, [pc, #252]	; (8003614 <_Z4loopv+0xb84>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	0c9b      	lsrs	r3, r3, #18
 800351e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003522:	4a3f      	ldr	r2, [pc, #252]	; (8003620 <_Z4loopv+0xb90>)
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	3b10      	subs	r3, #16
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	684a      	ldr	r2, [r1, #4]
 800352c:	4293      	cmp	r3, r2
 800352e:	d8fc      	bhi.n	800352a <_Z4loopv+0xa9a>
		XferByte(cmd);
 8003530:	23f0      	movs	r3, #240	; 0xf0
 8003532:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8003536:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <_Z4loopv+0xb94>)
 8003538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800353c:	2b02      	cmp	r3, #2
 800353e:	d0fa      	beq.n	8003536 <_Z4loopv+0xaa6>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8003540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003544:	aa06      	add	r2, sp, #24
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	4836      	ldr	r0, [pc, #216]	; (8003624 <_Z4loopv+0xb94>)
 800354a:	2301      	movs	r3, #1
 800354c:	f10d 0117 	add.w	r1, sp, #23
 8003550:	f002 f8de 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8003554:	2300      	movs	r3, #0
 8003556:	4d2f      	ldr	r5, [pc, #188]	; (8003614 <_Z4loopv+0xb84>)
 8003558:	4a2f      	ldr	r2, [pc, #188]	; (8003618 <_Z4loopv+0xb88>)
 800355a:	606b      	str	r3, [r5, #4]
 800355c:	4b2f      	ldr	r3, [pc, #188]	; (800361c <_Z4loopv+0xb8c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	0c9b      	lsrs	r3, r3, #18
 8003566:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800356a:	4a2d      	ldr	r2, [pc, #180]	; (8003620 <_Z4loopv+0xb90>)
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	3b10      	subs	r3, #16
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	686a      	ldr	r2, [r5, #4]
 8003574:	4293      	cmp	r3, r2
 8003576:	d8fc      	bhi.n	8003572 <_Z4loopv+0xae2>
		ADS124x_CS_1;
 8003578:	2201      	movs	r2, #1
 800357a:	2110      	movs	r1, #16
 800357c:	4824      	ldr	r0, [pc, #144]	; (8003610 <_Z4loopv+0xb80>)
 800357e:	f000 ff7e 	bl	800447e <HAL_GPIO_WritePin>
		ADS124x_CS_0;
 8003582:	2200      	movs	r2, #0
 8003584:	2110      	movs	r1, #16
 8003586:	4822      	ldr	r0, [pc, #136]	; (8003610 <_Z4loopv+0xb80>)
 8003588:	f000 ff79 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 800358c:	2300      	movs	r3, #0
 800358e:	606b      	str	r3, [r5, #4]
 8003590:	4b22      	ldr	r3, [pc, #136]	; (800361c <_Z4loopv+0xb8c>)
 8003592:	4a21      	ldr	r2, [pc, #132]	; (8003618 <_Z4loopv+0xb88>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	491f      	ldr	r1, [pc, #124]	; (8003614 <_Z4loopv+0xb84>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	0c9b      	lsrs	r3, r3, #18
 800359e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035a2:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <_Z4loopv+0xb90>)
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	3b10      	subs	r3, #16
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	684a      	ldr	r2, [r1, #4]
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d8fc      	bhi.n	80035aa <_Z4loopv+0xb1a>
		XferByte(cmd);
 80035b0:	23fc      	movs	r3, #252	; 0xfc
 80035b2:	f88d 3017 	strb.w	r3, [sp, #23]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <_Z4loopv+0xb94>)
 80035b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d0fa      	beq.n	80035b6 <_Z4loopv+0xb26>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80035c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035c4:	aa06      	add	r2, sp, #24
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	f10d 0117 	add.w	r1, sp, #23
 80035cc:	2301      	movs	r3, #1
 80035ce:	4815      	ldr	r0, [pc, #84]	; (8003624 <_Z4loopv+0xb94>)
 80035d0:	f002 f89e 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80035d4:	2300      	movs	r3, #0
 80035d6:	490f      	ldr	r1, [pc, #60]	; (8003614 <_Z4loopv+0xb84>)
 80035d8:	4a0f      	ldr	r2, [pc, #60]	; (8003618 <_Z4loopv+0xb88>)
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <_Z4loopv+0xb8c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	0c9b      	lsrs	r3, r3, #18
 80035e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035ea:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <_Z4loopv+0xb90>)
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	3b10      	subs	r3, #16
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	684a      	ldr	r2, [r1, #4]
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d8fc      	bhi.n	80035f2 <_Z4loopv+0xb62>
		ADS124x_CS_1;
 80035f8:	2201      	movs	r2, #1
 80035fa:	2110      	movs	r1, #16
 80035fc:	4804      	ldr	r0, [pc, #16]	; (8003610 <_Z4loopv+0xb80>)
 80035fe:	f000 ff3e 	bl	800447e <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8003602:	2064      	movs	r0, #100	; 0x64
 8003604:	f000 fc6e 	bl	8003ee4 <HAL_Delay>
 8003608:	f7ff ba5b 	b.w	8002ac2 <_Z4loopv+0x32>
 800360c:	20000840 	.word	0x20000840
 8003610:	40010800 	.word	0x40010800
 8003614:	e0001000 	.word	0xe0001000
 8003618:	431bde83 	.word	0x431bde83
 800361c:	2000005c 	.word	0x2000005c
 8003620:	20000990 	.word	0x20000990
 8003624:	200008a0 	.word	0x200008a0

08003628 <setup>:
extern "C" void setup() {
 8003628:	b500      	push	{lr}
	HAL_Delay(100);
 800362a:	2064      	movs	r0, #100	; 0x64
extern "C" void setup() {
 800362c:	b085      	sub	sp, #20
	HAL_Delay(100);
 800362e:	f000 fc59 	bl	8003ee4 <HAL_Delay>
	DWT_Init();
 8003632:	f003 f9f3 	bl	8006a1c <_Z8DWT_Initv>
		LCD = _LCD;
 8003636:	4b4f      	ldr	r3, [pc, #316]	; (8003774 <setup+0x14c>)
 8003638:	4c4f      	ldr	r4, [pc, #316]	; (8003778 <setup+0x150>)
		switch (LCD->LCD_Driver) {
 800363a:	7a1a      	ldrb	r2, [r3, #8]
		LCD = _LCD;
 800363c:	e9c4 3300 	strd	r3, r3, [r4]
		switch (LCD->LCD_Driver) {
 8003640:	2a03      	cmp	r2, #3
 8003642:	f000 808e 	beq.w	8003762 <setup+0x13a>
	tft.Fill1(0);
 8003646:	2100      	movs	r1, #0
 8003648:	484b      	ldr	r0, [pc, #300]	; (8003778 <setup+0x150>)
 800364a:	f003 fc2b 	bl	8006ea4 <_ZN3TFT5Fill1Et>
		switch (LCD->LCD_Driver) {
 800364e:	6863      	ldr	r3, [r4, #4]
 8003650:	7a1b      	ldrb	r3, [r3, #8]
 8003652:	2b03      	cmp	r3, #3
 8003654:	f000 8089 	beq.w	800376a <setup+0x142>
		uTFT.Color = Color;
 8003658:	2301      	movs	r3, #1
#define COLOR_RESET   "\33[0m"

class classLog {
public:

	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 800365a:	4848      	ldr	r0, [pc, #288]	; (800377c <setup+0x154>)
 800365c:	4d48      	ldr	r5, [pc, #288]	; (8003780 <setup+0x158>)

	UART_HandleTypeDef *huart;

	void w(char const *const format) {colorStringln(11, format);}
	void e(char const *const format) {colorStringln(9, format);}
	void i(char const *const format) {colorStringln(45, format);}
 800365e:	212d      	movs	r1, #45	; 0x2d
 8003660:	4a48      	ldr	r2, [pc, #288]	; (8003784 <setup+0x15c>)
 8003662:	61a3      	str	r3, [r4, #24]
	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8003664:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
	void i(char const *const format) {colorStringln(45, format);}
 8003668:	f003 f9e8 	bl	8006a3c <_ZN8classLog13colorStringlnEiPKc>
		_tft = tft;
 800366c:	4b46      	ldr	r3, [pc, #280]	; (8003788 <setup+0x160>)
	power.tft = &tft;
 800366e:	4a47      	ldr	r2, [pc, #284]	; (800378c <setup+0x164>)
	power.adc.sendCommand(RESET);
 8003670:	20fe      	movs	r0, #254	; 0xfe
 8003672:	601c      	str	r4, [r3, #0]
	power.tft = &tft;
 8003674:	6314      	str	r4, [r2, #48]	; 0x30
	power.adc.sendCommand(RESET);
 8003676:	f7fd fe23 	bl	80012c0 <_ZN7ADS124311sendCommandEh.isra.0>
	power.adc.sendCommand(STOPC);
 800367a:	200f      	movs	r0, #15
 800367c:	f7fd fe20 	bl	80012c0 <_ZN7ADS124311sendCommandEh.isra.0>
	power.adc.sendCommand(SELFCAL);
 8003680:	20f0      	movs	r0, #240	; 0xf0
 8003682:	f7fd fe1d 	bl	80012c0 <_ZN7ADS124311sendCommandEh.isra.0>
	power.adc.sendCommand(DSYNC);
 8003686:	20fc      	movs	r0, #252	; 0xfc
 8003688:	f7fd fe1a 	bl	80012c0 <_ZN7ADS124311sendCommandEh.isra.0>
	HAL_Delay(100);
 800368c:	2064      	movs	r0, #100	; 0x64
 800368e:	f000 fc29 	bl	8003ee4 <HAL_Delay>
		ADS124x_CS_0;
 8003692:	2200      	movs	r2, #0
 8003694:	2110      	movs	r1, #16
 8003696:	483e      	ldr	r0, [pc, #248]	; (8003790 <setup+0x168>)
 8003698:	f000 fef1 	bl	800447e <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 800369c:	2300      	movs	r3, #0
 800369e:	493d      	ldr	r1, [pc, #244]	; (8003794 <setup+0x16c>)
 80036a0:	4e3d      	ldr	r6, [pc, #244]	; (8003798 <setup+0x170>)
 80036a2:	604b      	str	r3, [r1, #4]
 80036a4:	4a3d      	ldr	r2, [pc, #244]	; (800379c <setup+0x174>)
 80036a6:	6833      	ldr	r3, [r6, #0]
 80036a8:	4d3d      	ldr	r5, [pc, #244]	; (80037a0 <setup+0x178>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	0c9b      	lsrs	r3, r3, #18
 80036b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	3b10      	subs	r3, #16
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	684a      	ldr	r2, [r1, #4]
 80036bc:	4293      	cmp	r3, r2
 80036be:	d8fc      	bhi.n	80036ba <setup+0x92>
		XferByte(0x50 + r);
 80036c0:	2352      	movs	r3, #82	; 0x52
 80036c2:	4c38      	ldr	r4, [pc, #224]	; (80037a4 <setup+0x17c>)
 80036c4:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80036c8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d0fb      	beq.n	80036c8 <setup+0xa0>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80036d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036d4:	4833      	ldr	r0, [pc, #204]	; (80037a4 <setup+0x17c>)
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	f10d 020f 	add.w	r2, sp, #15
 80036dc:	2301      	movs	r3, #1
 80036de:	f10d 010e 	add.w	r1, sp, #14
 80036e2:	f002 f815 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(0);
 80036e6:	2300      	movs	r3, #0
 80036e8:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80036ec:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d0fb      	beq.n	80036ec <setup+0xc4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80036f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f8:	482a      	ldr	r0, [pc, #168]	; (80037a4 <setup+0x17c>)
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	f10d 020f 	add.w	r2, sp, #15
 8003700:	2301      	movs	r3, #1
 8003702:	f10d 010e 	add.w	r1, sp, #14
 8003706:	f002 f803 	bl	8005710 <HAL_SPI_TransmitReceive>
		XferByte(data);
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8003710:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003714:	2b02      	cmp	r3, #2
 8003716:	d0fb      	beq.n	8003710 <setup+0xe8>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8003718:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800371c:	2301      	movs	r3, #1
 800371e:	f10d 020f 	add.w	r2, sp, #15
 8003722:	f10d 010e 	add.w	r1, sp, #14
 8003726:	481f      	ldr	r0, [pc, #124]	; (80037a4 <setup+0x17c>)
 8003728:	9400      	str	r4, [sp, #0]
 800372a:	f001 fff1 	bl	8005710 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800372e:	2300      	movs	r3, #0
 8003730:	4918      	ldr	r1, [pc, #96]	; (8003794 <setup+0x16c>)
 8003732:	4a1a      	ldr	r2, [pc, #104]	; (800379c <setup+0x174>)
 8003734:	604b      	str	r3, [r1, #4]
 8003736:	6833      	ldr	r3, [r6, #0]
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	0c9b      	lsrs	r3, r3, #18
 800373e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3b10      	subs	r3, #16
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	684a      	ldr	r2, [r1, #4]
 800374a:	4293      	cmp	r3, r2
 800374c:	d8fc      	bhi.n	8003748 <setup+0x120>
		ADS124x_CS_1;
 800374e:	2201      	movs	r2, #1
 8003750:	2110      	movs	r1, #16
 8003752:	480f      	ldr	r0, [pc, #60]	; (8003790 <setup+0x168>)
 8003754:	f000 fe93 	bl	800447e <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8003758:	4813      	ldr	r0, [pc, #76]	; (80037a8 <setup+0x180>)
 800375a:	f002 fa7f 	bl	8005c5c <HAL_TIM_Base_Start_IT>
	loop();
 800375e:	f7ff f997 	bl	8002a90 <_Z4loopv>
			SSD1306_Init();
 8003762:	1d20      	adds	r0, r4, #4
 8003764:	f003 f99a 	bl	8006a9c <_ZN10TFT_Driver12SSD1306_InitEv>
			break;
 8003768:	e76d      	b.n	8003646 <setup+0x1e>
			SSD1306_UpdateScreen();
 800376a:	4810      	ldr	r0, [pc, #64]	; (80037ac <setup+0x184>)
 800376c:	f003 fb48 	bl	8006e00 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
			break;
 8003770:	e772      	b.n	8003658 <setup+0x30>
 8003772:	bf00      	nop
 8003774:	20000000 	.word	0x20000000
 8003778:	20000878 	.word	0x20000878
 800377c:	200006b0 	.word	0x200006b0
 8003780:	20000944 	.word	0x20000944
 8003784:	0800a308 	.word	0x0800a308
 8003788:	200007b4 	.word	0x200007b4
 800378c:	20000840 	.word	0x20000840
 8003790:	40010800 	.word	0x40010800
 8003794:	e0001000 	.word	0xe0001000
 8003798:	2000005c 	.word	0x2000005c
 800379c:	431bde83 	.word	0x431bde83
 80037a0:	20000990 	.word	0x20000990
 80037a4:	200008a0 	.word	0x200008a0
 80037a8:	200008fc 	.word	0x200008fc
 80037ac:	2000087c 	.word	0x2000087c

080037b0 <_GLOBAL__sub_I_key>:
//		tft.driver.Update();


	}

}
 80037b0:	b570      	push	{r4, r5, r6, lr}
GButton key(KEY_GPIO_Port, GPIO_PIN_6);
 80037b2:	2400      	movs	r4, #0
 80037b4:	4e0e      	ldr	r6, [pc, #56]	; (80037f0 <_GLOBAL__sub_I_key+0x40>)
 80037b6:	b082      	sub	sp, #8
class GFXFONT {
 80037b8:	4d0e      	ldr	r5, [pc, #56]	; (80037f4 <_GLOBAL__sub_I_key+0x44>)
 80037ba:	4631      	mov	r1, r6
 80037bc:	4623      	mov	r3, r4
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	9400      	str	r4, [sp, #0]
 80037c2:	480d      	ldr	r0, [pc, #52]	; (80037f8 <_GLOBAL__sub_I_key+0x48>)
 80037c4:	f002 ffd0 	bl	8006768 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>
GButton keyC(GPIOB, GPIO_PIN_15);
 80037c8:	4623      	mov	r3, r4
 80037ca:	4631      	mov	r1, r6
 80037cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037d0:	9400      	str	r4, [sp, #0]
 80037d2:	480a      	ldr	r0, [pc, #40]	; (80037fc <_GLOBAL__sub_I_key+0x4c>)
 80037d4:	f002 ffc8 	bl	8006768 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>
 80037d8:	223d      	movs	r2, #61	; 0x3d
 80037da:	4621      	mov	r1, r4
 80037dc:	f105 000c 	add.w	r0, r5, #12
 80037e0:	60ac      	str	r4, [r5, #8]
 80037e2:	f004 fc74 	bl	80080ce <memset>
 80037e6:	f885 4049 	strb.w	r4, [r5, #73]	; 0x49
 80037ea:	b002      	add	sp, #8
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
 80037ee:	bf00      	nop
 80037f0:	40010c00 	.word	0x40010c00
 80037f4:	200007b4 	.word	0x200007b4
 80037f8:	20000800 	.word	0x20000800
 80037fc:	20000820 	.word	0x20000820

08003800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003804:	f000 fb0c 	bl	8003e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003808:	f000 f80d 	bl	8003826 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800380c:	f7fd fc86 	bl	800111c <MX_GPIO_Init>
  MX_I2C2_Init();
 8003810:	f7fd fce8 	bl	80011e4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8003814:	f000 f852 	bl	80038bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003818:	f000 fa66 	bl	8003ce8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800381c:	f000 f9ee 	bl	8003bfc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8003820:	f7ff ff02 	bl	8003628 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003824:	e7fe      	b.n	8003824 <main+0x24>

08003826 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b090      	sub	sp, #64	; 0x40
 800382a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800382c:	f107 0318 	add.w	r3, r7, #24
 8003830:	2228      	movs	r2, #40	; 0x28
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f004 fc4a 	bl	80080ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800383a:	1d3b      	adds	r3, r7, #4
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003848:	2301      	movs	r3, #1
 800384a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800384c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003850:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003852:	2300      	movs	r3, #0
 8003854:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003856:	2301      	movs	r3, #1
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800385a:	2302      	movs	r3, #2
 800385c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800385e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003864:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003868:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800386a:	f107 0318 	add.w	r3, r7, #24
 800386e:	4618      	mov	r0, r3
 8003870:	f001 faba 	bl	8004de8 <HAL_RCC_OscConfig>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800387a:	f000 f819 	bl	80038b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800387e:	230f      	movs	r3, #15
 8003880:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003882:	2302      	movs	r3, #2
 8003884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800388a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800388e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	2102      	movs	r1, #2
 8003898:	4618      	mov	r0, r3
 800389a:	f001 fd27 	bl	80052ec <HAL_RCC_ClockConfig>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80038a4:	f000 f804 	bl	80038b0 <Error_Handler>
  }
}
 80038a8:	bf00      	nop
 80038aa:	3740      	adds	r7, #64	; 0x40
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038b4:	b672      	cpsid	i
}
 80038b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <Error_Handler+0x8>
	...

080038bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80038c0:	4b17      	ldr	r3, [pc, #92]	; (8003920 <MX_SPI1_Init+0x64>)
 80038c2:	4a18      	ldr	r2, [pc, #96]	; (8003924 <MX_SPI1_Init+0x68>)
 80038c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <MX_SPI1_Init+0x64>)
 80038c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038ce:	4b14      	ldr	r3, [pc, #80]	; (8003920 <MX_SPI1_Init+0x64>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <MX_SPI1_Init+0x64>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <MX_SPI1_Init+0x64>)
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <MX_SPI1_Init+0x64>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <MX_SPI1_Init+0x64>)
 80038e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80038ee:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <MX_SPI1_Init+0x64>)
 80038f0:	2220      	movs	r2, #32
 80038f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <MX_SPI1_Init+0x64>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <MX_SPI1_Init+0x64>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003900:	4b07      	ldr	r3, [pc, #28]	; (8003920 <MX_SPI1_Init+0x64>)
 8003902:	2200      	movs	r2, #0
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <MX_SPI1_Init+0x64>)
 8003908:	220a      	movs	r2, #10
 800390a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800390c:	4804      	ldr	r0, [pc, #16]	; (8003920 <MX_SPI1_Init+0x64>)
 800390e:	f001 fe7b 	bl	8005608 <HAL_SPI_Init>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003918:	f7ff ffca 	bl	80038b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800391c:	bf00      	nop
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200008a0 	.word	0x200008a0
 8003924:	40013000 	.word	0x40013000

08003928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0310 	add.w	r3, r7, #16
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <HAL_SPI_MspInit+0x88>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d12f      	bne.n	80039a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003948:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <HAL_SPI_MspInit+0x8c>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <HAL_SPI_MspInit+0x8c>)
 800394e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003952:	6193      	str	r3, [r2, #24]
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_SPI_MspInit+0x8c>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <HAL_SPI_MspInit+0x8c>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <HAL_SPI_MspInit+0x8c>)
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	6193      	str	r3, [r2, #24]
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_SPI_MspInit+0x8c>)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003978:	23a0      	movs	r3, #160	; 0xa0
 800397a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003984:	f107 0310 	add.w	r3, r7, #16
 8003988:	4619      	mov	r1, r3
 800398a:	480b      	ldr	r0, [pc, #44]	; (80039b8 <HAL_SPI_MspInit+0x90>)
 800398c:	f000 fbdc 	bl	8004148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003990:	2340      	movs	r3, #64	; 0x40
 8003992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399c:	f107 0310 	add.w	r3, r7, #16
 80039a0:	4619      	mov	r1, r3
 80039a2:	4805      	ldr	r0, [pc, #20]	; (80039b8 <HAL_SPI_MspInit+0x90>)
 80039a4:	f000 fbd0 	bl	8004148 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039a8:	bf00      	nop
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40013000 	.word	0x40013000
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40010800 	.word	0x40010800

080039bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <HAL_MspInit+0x5c>)
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <HAL_MspInit+0x5c>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6193      	str	r3, [r2, #24]
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_MspInit+0x5c>)
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <HAL_MspInit+0x5c>)
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <HAL_MspInit+0x5c>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	61d3      	str	r3, [r2, #28]
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <HAL_MspInit+0x5c>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_MspInit+0x60>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <HAL_MspInit+0x60>)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40010000 	.word	0x40010000

08003a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a24:	e7fe      	b.n	8003a24 <NMI_Handler+0x4>

08003a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a2a:	e7fe      	b.n	8003a2a <HardFault_Handler+0x4>

08003a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a30:	e7fe      	b.n	8003a30 <MemManage_Handler+0x4>

08003a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a36:	e7fe      	b.n	8003a36 <BusFault_Handler+0x4>

08003a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a3c:	e7fe      	b.n	8003a3c <UsageFault_Handler+0x4>

08003a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a56:	b480      	push	{r7}
 8003a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a66:	f000 fa21 	bl	8003eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  return 1;
 8003a72:	2301      	movs	r3, #1
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <_kill>:

int _kill(int pid, int sig)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a86:	f004 fb75 	bl	8008174 <__errno>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2216      	movs	r2, #22
 8003a8e:	601a      	str	r2, [r3, #0]
  return -1;
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <_exit>:

void _exit (int status)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ffe7 	bl	8003a7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003aae:	e7fe      	b.n	8003aae <_exit+0x12>

08003ab0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e00a      	b.n	8003ad8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ac2:	f3af 8000 	nop.w
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	60ba      	str	r2, [r7, #8]
 8003ace:	b2ca      	uxtb	r2, r1
 8003ad0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	dbf0      	blt.n	8003ac2 <_read+0x12>
  }

  return len;
 8003ae0:	687b      	ldr	r3, [r7, #4]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e009      	b.n	8003b10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	60ba      	str	r2, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	dbf1      	blt.n	8003afc <_write+0x12>
  }
  return len;
 8003b18:	687b      	ldr	r3, [r7, #4]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <_close>:

int _close(int file)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b48:	605a      	str	r2, [r3, #4]
  return 0;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <_isatty>:

int _isatty(int file)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b5e:	2301      	movs	r3, #1
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr

08003b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
	...

08003b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <_sbrk+0x5c>)
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <_sbrk+0x60>)
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <_sbrk+0x64>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <_sbrk+0x64>)
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <_sbrk+0x68>)
 8003ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <_sbrk+0x64>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d207      	bcs.n	8003bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bb4:	f004 fade 	bl	8008174 <__errno>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	220c      	movs	r2, #12
 8003bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc2:	e009      	b.n	8003bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <_sbrk+0x64>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <_sbrk+0x64>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <_sbrk+0x64>)
 8003bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20005000 	.word	0x20005000
 8003be4:	00000400 	.word	0x00000400
 8003be8:	200008f8 	.word	0x200008f8
 8003bec:	20000ae8 	.word	0x20000ae8

08003bf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c02:	f107 0308 	add.w	r3, r7, #8
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c10:	463b      	mov	r3, r7
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <MX_TIM1_Init+0x98>)
 8003c1a:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <MX_TIM1_Init+0x9c>)
 8003c1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <MX_TIM1_Init+0x98>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <MX_TIM1_Init+0x98>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003c2a:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <MX_TIM1_Init+0x98>)
 8003c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <MX_TIM1_Init+0x98>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c38:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <MX_TIM1_Init+0x98>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <MX_TIM1_Init+0x98>)
 8003c40:	2280      	movs	r2, #128	; 0x80
 8003c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c44:	4813      	ldr	r0, [pc, #76]	; (8003c94 <MX_TIM1_Init+0x98>)
 8003c46:	f001 ffb9 	bl	8005bbc <HAL_TIM_Base_Init>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003c50:	f7ff fe2e 	bl	80038b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c5a:	f107 0308 	add.w	r3, r7, #8
 8003c5e:	4619      	mov	r1, r3
 8003c60:	480c      	ldr	r0, [pc, #48]	; (8003c94 <MX_TIM1_Init+0x98>)
 8003c62:	f002 f955 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003c6c:	f7ff fe20 	bl	80038b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003c70:	2310      	movs	r3, #16
 8003c72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c78:	463b      	mov	r3, r7
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4805      	ldr	r0, [pc, #20]	; (8003c94 <MX_TIM1_Init+0x98>)
 8003c7e:	f002 fb33 	bl	80062e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003c88:	f7ff fe12 	bl	80038b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003c8c:	bf00      	nop
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	200008fc 	.word	0x200008fc
 8003c98:	40012c00 	.word	0x40012c00

08003c9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <HAL_TIM_Base_MspInit+0x44>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d113      	bne.n	8003cd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_TIM_Base_MspInit+0x48>)
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ce4 <HAL_TIM_Base_MspInit+0x48>)
 8003cb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cb8:	6193      	str	r3, [r2, #24]
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <HAL_TIM_Base_MspInit+0x48>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2100      	movs	r1, #0
 8003cca:	2019      	movs	r0, #25
 8003ccc:	f000 fa05 	bl	80040da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003cd0:	2019      	movs	r0, #25
 8003cd2:	f000 fa1e 	bl	8004112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40021000 	.word	0x40021000

08003ce8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <MX_USART1_UART_Init+0x48>)
 8003cee:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <MX_USART1_UART_Init+0x4c>)
 8003cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <MX_USART1_UART_Init+0x48>)
 8003cf4:	4a10      	ldr	r2, [pc, #64]	; (8003d38 <MX_USART1_UART_Init+0x50>)
 8003cf6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <MX_USART1_UART_Init+0x48>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <MX_USART1_UART_Init+0x48>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <MX_USART1_UART_Init+0x48>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <MX_USART1_UART_Init+0x48>)
 8003d0c:	220c      	movs	r2, #12
 8003d0e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d10:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <MX_USART1_UART_Init+0x48>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <MX_USART1_UART_Init+0x48>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d1c:	4804      	ldr	r0, [pc, #16]	; (8003d30 <MX_USART1_UART_Init+0x48>)
 8003d1e:	f002 fb53 	bl	80063c8 <HAL_UART_Init>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8003d28:	f7ff fdc2 	bl	80038b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000944 	.word	0x20000944
 8003d34:	40013800 	.word	0x40013800
 8003d38:	001e8480 	.word	0x001e8480

08003d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 0310 	add.w	r3, r7, #16
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1c      	ldr	r2, [pc, #112]	; (8003dc8 <HAL_UART_MspInit+0x8c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d131      	bne.n	8003dc0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_UART_MspInit+0x90>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4a1a      	ldr	r2, [pc, #104]	; (8003dcc <HAL_UART_MspInit+0x90>)
 8003d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d66:	6193      	str	r3, [r2, #24]
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_UART_MspInit+0x90>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d74:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <HAL_UART_MspInit+0x90>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <HAL_UART_MspInit+0x90>)
 8003d7a:	f043 0304 	orr.w	r3, r3, #4
 8003d7e:	6193      	str	r3, [r2, #24]
 8003d80:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <HAL_UART_MspInit+0x90>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d92:	2302      	movs	r3, #2
 8003d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d96:	2303      	movs	r3, #3
 8003d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9a:	f107 0310 	add.w	r3, r7, #16
 8003d9e:	4619      	mov	r1, r3
 8003da0:	480b      	ldr	r0, [pc, #44]	; (8003dd0 <HAL_UART_MspInit+0x94>)
 8003da2:	f000 f9d1 	bl	8004148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	4619      	mov	r1, r3
 8003dba:	4805      	ldr	r0, [pc, #20]	; (8003dd0 <HAL_UART_MspInit+0x94>)
 8003dbc:	f000 f9c4 	bl	8004148 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40013800 	.word	0x40013800
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40010800 	.word	0x40010800

08003dd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003dd4:	f7ff ff0c 	bl	8003bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dd8:	480b      	ldr	r0, [pc, #44]	; (8003e08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003dda:	490c      	ldr	r1, [pc, #48]	; (8003e0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003ddc:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003de0:	e002      	b.n	8003de8 <LoopCopyDataInit>

08003de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003de6:	3304      	adds	r3, #4

08003de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dec:	d3f9      	bcc.n	8003de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003df0:	4c09      	ldr	r4, [pc, #36]	; (8003e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003df4:	e001      	b.n	8003dfa <LoopFillZerobss>

08003df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003df8:	3204      	adds	r2, #4

08003dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dfc:	d3fb      	bcc.n	8003df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dfe:	f004 f9bf 	bl	8008180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e02:	f7ff fcfd 	bl	8003800 <main>
  bx lr
 8003e06:	4770      	bx	lr
  ldr r0, =_sdata
 8003e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e0c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8003e10:	0800d0c0 	.word	0x0800d0c0
  ldr r2, =_sbss
 8003e14:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003e18:	20000ae4 	.word	0x20000ae4

08003e1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e1c:	e7fe      	b.n	8003e1c <ADC1_2_IRQHandler>
	...

08003e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <HAL_Init+0x28>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a07      	ldr	r2, [pc, #28]	; (8003e48 <HAL_Init+0x28>)
 8003e2a:	f043 0310 	orr.w	r3, r3, #16
 8003e2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e30:	2003      	movs	r0, #3
 8003e32:	f000 f947 	bl	80040c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e36:	200f      	movs	r0, #15
 8003e38:	f000 f808 	bl	8003e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e3c:	f7ff fdbe 	bl	80039bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40022000 	.word	0x40022000

08003e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e54:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <HAL_InitTick+0x54>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_InitTick+0x58>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f95f 	bl	800412e <HAL_SYSTICK_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00e      	b.n	8003e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b0f      	cmp	r3, #15
 8003e7e:	d80a      	bhi.n	8003e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e80:	2200      	movs	r2, #0
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	f000 f927 	bl	80040da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e8c:	4a06      	ldr	r2, [pc, #24]	; (8003ea8 <HAL_InitTick+0x5c>)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	2000005c 	.word	0x2000005c
 8003ea4:	20000064 	.word	0x20000064
 8003ea8:	20000060 	.word	0x20000060

08003eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_IncTick+0x1c>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_IncTick+0x20>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4413      	add	r3, r2
 8003ebc:	4a03      	ldr	r2, [pc, #12]	; (8003ecc <HAL_IncTick+0x20>)
 8003ebe:	6013      	str	r3, [r2, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	20000064 	.word	0x20000064
 8003ecc:	2000098c 	.word	0x2000098c

08003ed0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ed4:	4b02      	ldr	r3, [pc, #8]	; (8003ee0 <HAL_GetTick+0x10>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	2000098c 	.word	0x2000098c

08003ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003eec:	f7ff fff0 	bl	8003ed0 <HAL_GetTick>
 8003ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d005      	beq.n	8003f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003efe:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <HAL_Delay+0x44>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f0a:	bf00      	nop
 8003f0c:	f7ff ffe0 	bl	8003ed0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d8f7      	bhi.n	8003f0c <HAL_Delay+0x28>
  {
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000064 	.word	0x20000064

08003f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <__NVIC_SetPriorityGrouping+0x44>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f5e:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <__NVIC_SetPriorityGrouping+0x44>)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	60d3      	str	r3, [r2, #12]
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <__NVIC_GetPriorityGrouping+0x18>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	f003 0307 	and.w	r3, r3, #7
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	db0b      	blt.n	8003fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	f003 021f 	and.w	r2, r3, #31
 8003fa8:	4906      	ldr	r1, [pc, #24]	; (8003fc4 <__NVIC_EnableIRQ+0x34>)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	e000e100 	.word	0xe000e100

08003fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	6039      	str	r1, [r7, #0]
 8003fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	db0a      	blt.n	8003ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	490c      	ldr	r1, [pc, #48]	; (8004014 <__NVIC_SetPriority+0x4c>)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	440b      	add	r3, r1
 8003fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ff0:	e00a      	b.n	8004008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4908      	ldr	r1, [pc, #32]	; (8004018 <__NVIC_SetPriority+0x50>)
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	3b04      	subs	r3, #4
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	440b      	add	r3, r1
 8004006:	761a      	strb	r2, [r3, #24]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	e000e100 	.word	0xe000e100
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800401c:	b480      	push	{r7}
 800401e:	b089      	sub	sp, #36	; 0x24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f1c3 0307 	rsb	r3, r3, #7
 8004036:	2b04      	cmp	r3, #4
 8004038:	bf28      	it	cs
 800403a:	2304      	movcs	r3, #4
 800403c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3304      	adds	r3, #4
 8004042:	2b06      	cmp	r3, #6
 8004044:	d902      	bls.n	800404c <NVIC_EncodePriority+0x30>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3b03      	subs	r3, #3
 800404a:	e000      	b.n	800404e <NVIC_EncodePriority+0x32>
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	401a      	ands	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004064:	f04f 31ff 	mov.w	r1, #4294967295
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	43d9      	mvns	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	4313      	orrs	r3, r2
         );
}
 8004076:	4618      	mov	r0, r3
 8004078:	3724      	adds	r7, #36	; 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3b01      	subs	r3, #1
 800408c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004090:	d301      	bcc.n	8004096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004092:	2301      	movs	r3, #1
 8004094:	e00f      	b.n	80040b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <SysTick_Config+0x40>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800409e:	210f      	movs	r1, #15
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295
 80040a4:	f7ff ff90 	bl	8003fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <SysTick_Config+0x40>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <SysTick_Config+0x40>)
 80040b0:	2207      	movs	r2, #7
 80040b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	e000e010 	.word	0xe000e010

080040c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ff2d 	bl	8003f2c <__NVIC_SetPriorityGrouping>
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	4603      	mov	r3, r0
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040ec:	f7ff ff42 	bl	8003f74 <__NVIC_GetPriorityGrouping>
 80040f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f7ff ff90 	bl	800401c <NVIC_EncodePriority>
 80040fc:	4602      	mov	r2, r0
 80040fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ff5f 	bl	8003fc8 <__NVIC_SetPriority>
}
 800410a:	bf00      	nop
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	4603      	mov	r3, r0
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800411c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff35 	bl	8003f90 <__NVIC_EnableIRQ>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ffa2 	bl	8004080 <SysTick_Config>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004148:	b480      	push	{r7}
 800414a:	b08b      	sub	sp, #44	; 0x2c
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004152:	2300      	movs	r3, #0
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004156:	2300      	movs	r3, #0
 8004158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800415a:	e169      	b.n	8004430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800415c:	2201      	movs	r2, #1
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	429a      	cmp	r2, r3
 8004176:	f040 8158 	bne.w	800442a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4a9a      	ldr	r2, [pc, #616]	; (80043e8 <HAL_GPIO_Init+0x2a0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d05e      	beq.n	8004242 <HAL_GPIO_Init+0xfa>
 8004184:	4a98      	ldr	r2, [pc, #608]	; (80043e8 <HAL_GPIO_Init+0x2a0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d875      	bhi.n	8004276 <HAL_GPIO_Init+0x12e>
 800418a:	4a98      	ldr	r2, [pc, #608]	; (80043ec <HAL_GPIO_Init+0x2a4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d058      	beq.n	8004242 <HAL_GPIO_Init+0xfa>
 8004190:	4a96      	ldr	r2, [pc, #600]	; (80043ec <HAL_GPIO_Init+0x2a4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d86f      	bhi.n	8004276 <HAL_GPIO_Init+0x12e>
 8004196:	4a96      	ldr	r2, [pc, #600]	; (80043f0 <HAL_GPIO_Init+0x2a8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d052      	beq.n	8004242 <HAL_GPIO_Init+0xfa>
 800419c:	4a94      	ldr	r2, [pc, #592]	; (80043f0 <HAL_GPIO_Init+0x2a8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d869      	bhi.n	8004276 <HAL_GPIO_Init+0x12e>
 80041a2:	4a94      	ldr	r2, [pc, #592]	; (80043f4 <HAL_GPIO_Init+0x2ac>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d04c      	beq.n	8004242 <HAL_GPIO_Init+0xfa>
 80041a8:	4a92      	ldr	r2, [pc, #584]	; (80043f4 <HAL_GPIO_Init+0x2ac>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d863      	bhi.n	8004276 <HAL_GPIO_Init+0x12e>
 80041ae:	4a92      	ldr	r2, [pc, #584]	; (80043f8 <HAL_GPIO_Init+0x2b0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d046      	beq.n	8004242 <HAL_GPIO_Init+0xfa>
 80041b4:	4a90      	ldr	r2, [pc, #576]	; (80043f8 <HAL_GPIO_Init+0x2b0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d85d      	bhi.n	8004276 <HAL_GPIO_Init+0x12e>
 80041ba:	2b12      	cmp	r3, #18
 80041bc:	d82a      	bhi.n	8004214 <HAL_GPIO_Init+0xcc>
 80041be:	2b12      	cmp	r3, #18
 80041c0:	d859      	bhi.n	8004276 <HAL_GPIO_Init+0x12e>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <HAL_GPIO_Init+0x80>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	08004243 	.word	0x08004243
 80041cc:	0800421d 	.word	0x0800421d
 80041d0:	0800422f 	.word	0x0800422f
 80041d4:	08004271 	.word	0x08004271
 80041d8:	08004277 	.word	0x08004277
 80041dc:	08004277 	.word	0x08004277
 80041e0:	08004277 	.word	0x08004277
 80041e4:	08004277 	.word	0x08004277
 80041e8:	08004277 	.word	0x08004277
 80041ec:	08004277 	.word	0x08004277
 80041f0:	08004277 	.word	0x08004277
 80041f4:	08004277 	.word	0x08004277
 80041f8:	08004277 	.word	0x08004277
 80041fc:	08004277 	.word	0x08004277
 8004200:	08004277 	.word	0x08004277
 8004204:	08004277 	.word	0x08004277
 8004208:	08004277 	.word	0x08004277
 800420c:	08004225 	.word	0x08004225
 8004210:	08004239 	.word	0x08004239
 8004214:	4a79      	ldr	r2, [pc, #484]	; (80043fc <HAL_GPIO_Init+0x2b4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d013      	beq.n	8004242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800421a:	e02c      	b.n	8004276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	623b      	str	r3, [r7, #32]
          break;
 8004222:	e029      	b.n	8004278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	3304      	adds	r3, #4
 800422a:	623b      	str	r3, [r7, #32]
          break;
 800422c:	e024      	b.n	8004278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	3308      	adds	r3, #8
 8004234:	623b      	str	r3, [r7, #32]
          break;
 8004236:	e01f      	b.n	8004278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	330c      	adds	r3, #12
 800423e:	623b      	str	r3, [r7, #32]
          break;
 8004240:	e01a      	b.n	8004278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800424a:	2304      	movs	r3, #4
 800424c:	623b      	str	r3, [r7, #32]
          break;
 800424e:	e013      	b.n	8004278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d105      	bne.n	8004264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004258:	2308      	movs	r3, #8
 800425a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	611a      	str	r2, [r3, #16]
          break;
 8004262:	e009      	b.n	8004278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004264:	2308      	movs	r3, #8
 8004266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	615a      	str	r2, [r3, #20]
          break;
 800426e:	e003      	b.n	8004278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004270:	2300      	movs	r3, #0
 8004272:	623b      	str	r3, [r7, #32]
          break;
 8004274:	e000      	b.n	8004278 <HAL_GPIO_Init+0x130>
          break;
 8004276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2bff      	cmp	r3, #255	; 0xff
 800427c:	d801      	bhi.n	8004282 <HAL_GPIO_Init+0x13a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	e001      	b.n	8004286 <HAL_GPIO_Init+0x13e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2bff      	cmp	r3, #255	; 0xff
 800428c:	d802      	bhi.n	8004294 <HAL_GPIO_Init+0x14c>
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	e002      	b.n	800429a <HAL_GPIO_Init+0x152>
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	3b08      	subs	r3, #8
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	210f      	movs	r1, #15
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	401a      	ands	r2, r3
 80042ac:	6a39      	ldr	r1, [r7, #32]
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80b1 	beq.w	800442a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042c8:	4b4d      	ldr	r3, [pc, #308]	; (8004400 <HAL_GPIO_Init+0x2b8>)
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	4a4c      	ldr	r2, [pc, #304]	; (8004400 <HAL_GPIO_Init+0x2b8>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6193      	str	r3, [r2, #24]
 80042d4:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <HAL_GPIO_Init+0x2b8>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042e0:	4a48      	ldr	r2, [pc, #288]	; (8004404 <HAL_GPIO_Init+0x2bc>)
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	089b      	lsrs	r3, r3, #2
 80042e6:	3302      	adds	r3, #2
 80042e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	220f      	movs	r2, #15
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4013      	ands	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a40      	ldr	r2, [pc, #256]	; (8004408 <HAL_GPIO_Init+0x2c0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <HAL_GPIO_Init+0x1ec>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3f      	ldr	r2, [pc, #252]	; (800440c <HAL_GPIO_Init+0x2c4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00d      	beq.n	8004330 <HAL_GPIO_Init+0x1e8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3e      	ldr	r2, [pc, #248]	; (8004410 <HAL_GPIO_Init+0x2c8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <HAL_GPIO_Init+0x1e4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3d      	ldr	r2, [pc, #244]	; (8004414 <HAL_GPIO_Init+0x2cc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d101      	bne.n	8004328 <HAL_GPIO_Init+0x1e0>
 8004324:	2303      	movs	r3, #3
 8004326:	e006      	b.n	8004336 <HAL_GPIO_Init+0x1ee>
 8004328:	2304      	movs	r3, #4
 800432a:	e004      	b.n	8004336 <HAL_GPIO_Init+0x1ee>
 800432c:	2302      	movs	r3, #2
 800432e:	e002      	b.n	8004336 <HAL_GPIO_Init+0x1ee>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <HAL_GPIO_Init+0x1ee>
 8004334:	2300      	movs	r3, #0
 8004336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004338:	f002 0203 	and.w	r2, r2, #3
 800433c:	0092      	lsls	r2, r2, #2
 800433e:	4093      	lsls	r3, r2
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004346:	492f      	ldr	r1, [pc, #188]	; (8004404 <HAL_GPIO_Init+0x2bc>)
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	3302      	adds	r3, #2
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d006      	beq.n	800436e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004360:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	492c      	ldr	r1, [pc, #176]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	608b      	str	r3, [r1, #8]
 800436c:	e006      	b.n	800437c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800436e:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	43db      	mvns	r3, r3
 8004376:	4928      	ldr	r1, [pc, #160]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 8004378:	4013      	ands	r3, r2
 800437a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d006      	beq.n	8004396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	4922      	ldr	r1, [pc, #136]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	60cb      	str	r3, [r1, #12]
 8004394:	e006      	b.n	80043a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	43db      	mvns	r3, r3
 800439e:	491e      	ldr	r1, [pc, #120]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	4918      	ldr	r1, [pc, #96]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	604b      	str	r3, [r1, #4]
 80043bc:	e006      	b.n	80043cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043be:	4b16      	ldr	r3, [pc, #88]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	4914      	ldr	r1, [pc, #80]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d021      	beq.n	800441c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	490e      	ldr	r1, [pc, #56]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]
 80043e4:	e021      	b.n	800442a <HAL_GPIO_Init+0x2e2>
 80043e6:	bf00      	nop
 80043e8:	10320000 	.word	0x10320000
 80043ec:	10310000 	.word	0x10310000
 80043f0:	10220000 	.word	0x10220000
 80043f4:	10210000 	.word	0x10210000
 80043f8:	10120000 	.word	0x10120000
 80043fc:	10110000 	.word	0x10110000
 8004400:	40021000 	.word	0x40021000
 8004404:	40010000 	.word	0x40010000
 8004408:	40010800 	.word	0x40010800
 800440c:	40010c00 	.word	0x40010c00
 8004410:	40011000 	.word	0x40011000
 8004414:	40011400 	.word	0x40011400
 8004418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_GPIO_Init+0x304>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	43db      	mvns	r3, r3
 8004424:	4909      	ldr	r1, [pc, #36]	; (800444c <HAL_GPIO_Init+0x304>)
 8004426:	4013      	ands	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	3301      	adds	r3, #1
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	fa22 f303 	lsr.w	r3, r2, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	f47f ae8e 	bne.w	800415c <HAL_GPIO_Init+0x14>
  }
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	372c      	adds	r7, #44	; 0x2c
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	40010400 	.word	0x40010400

08004450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	887b      	ldrh	r3, [r7, #2]
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
 800446c:	e001      	b.n	8004472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	807b      	strh	r3, [r7, #2]
 800448a:	4613      	mov	r3, r2
 800448c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800448e:	787b      	ldrb	r3, [r7, #1]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004494:	887a      	ldrh	r2, [r7, #2]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800449a:	e003      	b.n	80044a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800449c:	887b      	ldrh	r3, [r7, #2]
 800449e:	041a      	lsls	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	611a      	str	r2, [r3, #16]
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
	...

080044b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e12b      	b.n	800471a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc feb2 	bl	8001240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2224      	movs	r2, #36	; 0x24
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004502:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004512:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004514:	f001 f832 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 8004518:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4a81      	ldr	r2, [pc, #516]	; (8004724 <HAL_I2C_Init+0x274>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d807      	bhi.n	8004534 <HAL_I2C_Init+0x84>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4a80      	ldr	r2, [pc, #512]	; (8004728 <HAL_I2C_Init+0x278>)
 8004528:	4293      	cmp	r3, r2
 800452a:	bf94      	ite	ls
 800452c:	2301      	movls	r3, #1
 800452e:	2300      	movhi	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	e006      	b.n	8004542 <HAL_I2C_Init+0x92>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a7d      	ldr	r2, [pc, #500]	; (800472c <HAL_I2C_Init+0x27c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	bf94      	ite	ls
 800453c:	2301      	movls	r3, #1
 800453e:	2300      	movhi	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e0e7      	b.n	800471a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a78      	ldr	r2, [pc, #480]	; (8004730 <HAL_I2C_Init+0x280>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0c9b      	lsrs	r3, r3, #18
 8004554:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4a6a      	ldr	r2, [pc, #424]	; (8004724 <HAL_I2C_Init+0x274>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d802      	bhi.n	8004584 <HAL_I2C_Init+0xd4>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3301      	adds	r3, #1
 8004582:	e009      	b.n	8004598 <HAL_I2C_Init+0xe8>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	4a69      	ldr	r2, [pc, #420]	; (8004734 <HAL_I2C_Init+0x284>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	099b      	lsrs	r3, r3, #6
 8004596:	3301      	adds	r3, #1
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	430b      	orrs	r3, r1
 800459e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	495c      	ldr	r1, [pc, #368]	; (8004724 <HAL_I2C_Init+0x274>)
 80045b4:	428b      	cmp	r3, r1
 80045b6:	d819      	bhi.n	80045ec <HAL_I2C_Init+0x13c>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1e59      	subs	r1, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80045c6:	1c59      	adds	r1, r3, #1
 80045c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045cc:	400b      	ands	r3, r1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_I2C_Init+0x138>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1e59      	subs	r1, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e0:	3301      	adds	r3, #1
 80045e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e6:	e051      	b.n	800468c <HAL_I2C_Init+0x1dc>
 80045e8:	2304      	movs	r3, #4
 80045ea:	e04f      	b.n	800468c <HAL_I2C_Init+0x1dc>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d111      	bne.n	8004618 <HAL_I2C_Init+0x168>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1e58      	subs	r0, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	440b      	add	r3, r1
 8004602:	fbb0 f3f3 	udiv	r3, r0, r3
 8004606:	3301      	adds	r3, #1
 8004608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	e012      	b.n	800463e <HAL_I2C_Init+0x18e>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1e58      	subs	r0, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	0099      	lsls	r1, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	fbb0 f3f3 	udiv	r3, r0, r3
 800462e:	3301      	adds	r3, #1
 8004630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_I2C_Init+0x196>
 8004642:	2301      	movs	r3, #1
 8004644:	e022      	b.n	800468c <HAL_I2C_Init+0x1dc>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10e      	bne.n	800466c <HAL_I2C_Init+0x1bc>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1e58      	subs	r0, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	440b      	add	r3, r1
 800465c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004660:	3301      	adds	r3, #1
 8004662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466a:	e00f      	b.n	800468c <HAL_I2C_Init+0x1dc>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1e58      	subs	r0, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	0099      	lsls	r1, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004682:	3301      	adds	r3, #1
 8004684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	6809      	ldr	r1, [r1, #0]
 8004690:	4313      	orrs	r3, r2
 8004692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6911      	ldr	r1, [r2, #16]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68d2      	ldr	r2, [r2, #12]
 80046c6:	4311      	orrs	r1, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	000186a0 	.word	0x000186a0
 8004728:	001e847f 	.word	0x001e847f
 800472c:	003d08ff 	.word	0x003d08ff
 8004730:	431bde83 	.word	0x431bde83
 8004734:	10624dd3 	.word	0x10624dd3

08004738 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	461a      	mov	r2, r3
 8004744:	460b      	mov	r3, r1
 8004746:	817b      	strh	r3, [r7, #10]
 8004748:	4613      	mov	r3, r2
 800474a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800474c:	f7ff fbc0 	bl	8003ed0 <HAL_GetTick>
 8004750:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b20      	cmp	r3, #32
 800475c:	f040 80e0 	bne.w	8004920 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2319      	movs	r3, #25
 8004766:	2201      	movs	r2, #1
 8004768:	4970      	ldr	r1, [pc, #448]	; (800492c <HAL_I2C_Master_Transmit+0x1f4>)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f964 	bl	8004a38 <I2C_WaitOnFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004776:	2302      	movs	r3, #2
 8004778:	e0d3      	b.n	8004922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_I2C_Master_Transmit+0x50>
 8004784:	2302      	movs	r3, #2
 8004786:	e0cc      	b.n	8004922 <HAL_I2C_Master_Transmit+0x1ea>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b01      	cmp	r3, #1
 800479c:	d007      	beq.n	80047ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2221      	movs	r2, #33	; 0x21
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2210      	movs	r2, #16
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	893a      	ldrh	r2, [r7, #8]
 80047de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a50      	ldr	r2, [pc, #320]	; (8004930 <HAL_I2C_Master_Transmit+0x1f8>)
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047f0:	8979      	ldrh	r1, [r7, #10]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6a3a      	ldr	r2, [r7, #32]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f89c 	bl	8004934 <I2C_MasterRequestWrite>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e08d      	b.n	8004922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800481c:	e066      	b.n	80048ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	6a39      	ldr	r1, [r7, #32]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fa22 	bl	8004c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b04      	cmp	r3, #4
 8004834:	d107      	bne.n	8004846 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e06b      	b.n	8004922 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	781a      	ldrb	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d11b      	bne.n	80048c0 <HAL_I2C_Master_Transmit+0x188>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	d017      	beq.n	80048c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	781a      	ldrb	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	6a39      	ldr	r1, [r7, #32]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fa19 	bl	8004cfc <I2C_WaitOnBTFFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d107      	bne.n	80048e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e01a      	b.n	8004922 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d194      	bne.n	800481e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e000      	b.n	8004922 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	00100002 	.word	0x00100002
 8004930:	ffff0000 	.word	0xffff0000

08004934 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	460b      	mov	r3, r1
 8004942:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d006      	beq.n	800495e <I2C_MasterRequestWrite+0x2a>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d003      	beq.n	800495e <I2C_MasterRequestWrite+0x2a>
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800495c:	d108      	bne.n	8004970 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	e00b      	b.n	8004988 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	2b12      	cmp	r3, #18
 8004976:	d107      	bne.n	8004988 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004986:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f84f 	bl	8004a38 <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ae:	d103      	bne.n	80049b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e035      	b.n	8004a28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049c4:	d108      	bne.n	80049d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049c6:	897b      	ldrh	r3, [r7, #10]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049d4:	611a      	str	r2, [r3, #16]
 80049d6:	e01b      	b.n	8004a10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049d8:	897b      	ldrh	r3, [r7, #10]
 80049da:	11db      	asrs	r3, r3, #7
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f003 0306 	and.w	r3, r3, #6
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f063 030f 	orn	r3, r3, #15
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	490e      	ldr	r1, [pc, #56]	; (8004a30 <I2C_MasterRequestWrite+0xfc>)
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f898 	bl	8004b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e010      	b.n	8004a28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a06:	897b      	ldrh	r3, [r7, #10]
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	4907      	ldr	r1, [pc, #28]	; (8004a34 <I2C_MasterRequestWrite+0x100>)
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f888 	bl	8004b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	00010008 	.word	0x00010008
 8004a34:	00010002 	.word	0x00010002

08004a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a48:	e048      	b.n	8004adc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d044      	beq.n	8004adc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a52:	f7ff fa3d 	bl	8003ed0 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d302      	bcc.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d139      	bne.n	8004adc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d10d      	bne.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	e00c      	b.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	43da      	mvns	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d116      	bne.n	8004adc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f043 0220 	orr.w	r2, r3, #32
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e023      	b.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10d      	bne.n	8004b02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	43da      	mvns	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	e00c      	b.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d093      	beq.n	8004a4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b3a:	e071      	b.n	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4a:	d123      	bne.n	8004b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f043 0204 	orr.w	r2, r3, #4
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e067      	b.n	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d041      	beq.n	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9c:	f7ff f998 	bl	8003ed0 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d302      	bcc.n	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d136      	bne.n	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10c      	bne.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e00b      	b.n	8004bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	43da      	mvns	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e021      	b.n	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	0c1b      	lsrs	r3, r3, #16
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d10c      	bne.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	43da      	mvns	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf14      	ite	ne
 8004c3c:	2301      	movne	r3, #1
 8004c3e:	2300      	moveq	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	e00b      	b.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bf14      	ite	ne
 8004c56:	2301      	movne	r3, #1
 8004c58:	2300      	moveq	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f47f af6d 	bne.w	8004b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c78:	e034      	b.n	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f886 	bl	8004d8c <I2C_IsAcknowledgeFailed>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e034      	b.n	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d028      	beq.n	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7ff f91d 	bl	8003ed0 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11d      	bne.n	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b80      	cmp	r3, #128	; 0x80
 8004cb4:	d016      	beq.n	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e007      	b.n	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cee:	2b80      	cmp	r3, #128	; 0x80
 8004cf0:	d1c3      	bne.n	8004c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d08:	e034      	b.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f83e 	bl	8004d8c <I2C_IsAcknowledgeFailed>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e034      	b.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d028      	beq.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d22:	f7ff f8d5 	bl	8003ed0 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11d      	bne.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d016      	beq.n	8004d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e007      	b.n	8004d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d1c3      	bne.n	8004d0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da2:	d11b      	bne.n	8004ddc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f043 0204 	orr.w	r2, r3, #4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr

08004de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e272      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8087 	beq.w	8004f16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e08:	4b92      	ldr	r3, [pc, #584]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d00c      	beq.n	8004e2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e14:	4b8f      	ldr	r3, [pc, #572]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d112      	bne.n	8004e46 <HAL_RCC_OscConfig+0x5e>
 8004e20:	4b8c      	ldr	r3, [pc, #560]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d10b      	bne.n	8004e46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2e:	4b89      	ldr	r3, [pc, #548]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d06c      	beq.n	8004f14 <HAL_RCC_OscConfig+0x12c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d168      	bne.n	8004f14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e24c      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCC_OscConfig+0x76>
 8004e50:	4b80      	ldr	r3, [pc, #512]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a7f      	ldr	r2, [pc, #508]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	e02e      	b.n	8004ebc <HAL_RCC_OscConfig+0xd4>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x98>
 8004e66:	4b7b      	ldr	r3, [pc, #492]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a7a      	ldr	r2, [pc, #488]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4b78      	ldr	r3, [pc, #480]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a77      	ldr	r2, [pc, #476]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e01d      	b.n	8004ebc <HAL_RCC_OscConfig+0xd4>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0xbc>
 8004e8a:	4b72      	ldr	r3, [pc, #456]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a71      	ldr	r2, [pc, #452]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	4b6f      	ldr	r3, [pc, #444]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6e      	ldr	r2, [pc, #440]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e00b      	b.n	8004ebc <HAL_RCC_OscConfig+0xd4>
 8004ea4:	4b6b      	ldr	r3, [pc, #428]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a6a      	ldr	r2, [pc, #424]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b68      	ldr	r3, [pc, #416]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a67      	ldr	r2, [pc, #412]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d013      	beq.n	8004eec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7ff f804 	bl	8003ed0 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7ff f800 	bl	8003ed0 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e200      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ede:	4b5d      	ldr	r3, [pc, #372]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0xe4>
 8004eea:	e014      	b.n	8004f16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fe fff0 	bl	8003ed0 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef4:	f7fe ffec 	bl	8003ed0 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	; 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e1ec      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f06:	4b53      	ldr	r3, [pc, #332]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x10c>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d063      	beq.n	8004fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f22:	4b4c      	ldr	r3, [pc, #304]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f2e:	4b49      	ldr	r3, [pc, #292]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d11c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x18c>
 8004f3a:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d116      	bne.n	8004f74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	4b43      	ldr	r3, [pc, #268]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_RCC_OscConfig+0x176>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e1c0      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5e:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4939      	ldr	r1, [pc, #228]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f72:	e03a      	b.n	8004fea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <HAL_RCC_OscConfig+0x270>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f82:	f7fe ffa5 	bl	8003ed0 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f8a:	f7fe ffa1 	bl	8003ed0 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e1a1      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9c:	4b2d      	ldr	r3, [pc, #180]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4927      	ldr	r1, [pc, #156]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]
 8004fbc:	e015      	b.n	8004fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fbe:	4b26      	ldr	r3, [pc, #152]	; (8005058 <HAL_RCC_OscConfig+0x270>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fe ff84 	bl	8003ed0 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fcc:	f7fe ff80 	bl	8003ed0 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e180      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fde:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d03a      	beq.n	800506c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d019      	beq.n	8005032 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ffe:	4b17      	ldr	r3, [pc, #92]	; (800505c <HAL_RCC_OscConfig+0x274>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005004:	f7fe ff64 	bl	8003ed0 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500c:	f7fe ff60 	bl	8003ed0 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e160      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800502a:	2001      	movs	r0, #1
 800502c:	f000 face 	bl	80055cc <RCC_Delay>
 8005030:	e01c      	b.n	800506c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_RCC_OscConfig+0x274>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005038:	f7fe ff4a 	bl	8003ed0 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503e:	e00f      	b.n	8005060 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005040:	f7fe ff46 	bl	8003ed0 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d908      	bls.n	8005060 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e146      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
 8005052:	bf00      	nop
 8005054:	40021000 	.word	0x40021000
 8005058:	42420000 	.word	0x42420000
 800505c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	4b92      	ldr	r3, [pc, #584]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e9      	bne.n	8005040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80a6 	beq.w	80051c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507a:	2300      	movs	r3, #0
 800507c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507e:	4b8b      	ldr	r3, [pc, #556]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10d      	bne.n	80050a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	4b88      	ldr	r3, [pc, #544]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4a87      	ldr	r2, [pc, #540]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005094:	61d3      	str	r3, [r2, #28]
 8005096:	4b85      	ldr	r3, [pc, #532]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a6:	4b82      	ldr	r3, [pc, #520]	; (80052b0 <HAL_RCC_OscConfig+0x4c8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d118      	bne.n	80050e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b2:	4b7f      	ldr	r3, [pc, #508]	; (80052b0 <HAL_RCC_OscConfig+0x4c8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7e      	ldr	r2, [pc, #504]	; (80052b0 <HAL_RCC_OscConfig+0x4c8>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050be:	f7fe ff07 	bl	8003ed0 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c6:	f7fe ff03 	bl	8003ed0 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b64      	cmp	r3, #100	; 0x64
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e103      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d8:	4b75      	ldr	r3, [pc, #468]	; (80052b0 <HAL_RCC_OscConfig+0x4c8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d106      	bne.n	80050fa <HAL_RCC_OscConfig+0x312>
 80050ec:	4b6f      	ldr	r3, [pc, #444]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	4a6e      	ldr	r2, [pc, #440]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6213      	str	r3, [r2, #32]
 80050f8:	e02d      	b.n	8005156 <HAL_RCC_OscConfig+0x36e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x334>
 8005102:	4b6a      	ldr	r3, [pc, #424]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	4a69      	ldr	r2, [pc, #420]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	6213      	str	r3, [r2, #32]
 800510e:	4b67      	ldr	r3, [pc, #412]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	4a66      	ldr	r2, [pc, #408]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	6213      	str	r3, [r2, #32]
 800511a:	e01c      	b.n	8005156 <HAL_RCC_OscConfig+0x36e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2b05      	cmp	r3, #5
 8005122:	d10c      	bne.n	800513e <HAL_RCC_OscConfig+0x356>
 8005124:	4b61      	ldr	r3, [pc, #388]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	4a60      	ldr	r2, [pc, #384]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	6213      	str	r3, [r2, #32]
 8005130:	4b5e      	ldr	r3, [pc, #376]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	4a5d      	ldr	r2, [pc, #372]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6213      	str	r3, [r2, #32]
 800513c:	e00b      	b.n	8005156 <HAL_RCC_OscConfig+0x36e>
 800513e:	4b5b      	ldr	r3, [pc, #364]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	4a5a      	ldr	r2, [pc, #360]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	6213      	str	r3, [r2, #32]
 800514a:	4b58      	ldr	r3, [pc, #352]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	4a57      	ldr	r2, [pc, #348]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d015      	beq.n	800518a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515e:	f7fe feb7 	bl	8003ed0 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fe feb3 	bl	8003ed0 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e0b1      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517c:	4b4b      	ldr	r3, [pc, #300]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0ee      	beq.n	8005166 <HAL_RCC_OscConfig+0x37e>
 8005188:	e014      	b.n	80051b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518a:	f7fe fea1 	bl	8003ed0 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005190:	e00a      	b.n	80051a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005192:	f7fe fe9d 	bl	8003ed0 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e09b      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a8:	4b40      	ldr	r3, [pc, #256]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ee      	bne.n	8005192 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d105      	bne.n	80051c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ba:	4b3c      	ldr	r3, [pc, #240]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	4a3b      	ldr	r2, [pc, #236]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 80051c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8087 	beq.w	80052de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 030c 	and.w	r3, r3, #12
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d061      	beq.n	80052a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d146      	bne.n	8005272 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e4:	4b33      	ldr	r3, [pc, #204]	; (80052b4 <HAL_RCC_OscConfig+0x4cc>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fe fe71 	bl	8003ed0 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fe fe6d 	bl	8003ed0 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e06d      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005204:	4b29      	ldr	r3, [pc, #164]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005218:	d108      	bne.n	800522c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800521a:	4b24      	ldr	r3, [pc, #144]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	4921      	ldr	r1, [pc, #132]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800522c:	4b1f      	ldr	r3, [pc, #124]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a19      	ldr	r1, [r3, #32]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	430b      	orrs	r3, r1
 800523e:	491b      	ldr	r1, [pc, #108]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005244:	4b1b      	ldr	r3, [pc, #108]	; (80052b4 <HAL_RCC_OscConfig+0x4cc>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7fe fe41 	bl	8003ed0 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005252:	f7fe fe3d 	bl	8003ed0 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e03d      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005264:	4b11      	ldr	r3, [pc, #68]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x46a>
 8005270:	e035      	b.n	80052de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <HAL_RCC_OscConfig+0x4cc>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7fe fe2a 	bl	8003ed0 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fe fe26 	bl	8003ed0 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e026      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_RCC_OscConfig+0x4c4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x498>
 800529e:	e01e      	b.n	80052de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e019      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
 80052ac:	40021000 	.word	0x40021000
 80052b0:	40007000 	.word	0x40007000
 80052b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCC_OscConfig+0x500>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d106      	bne.n	80052da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d001      	beq.n	80052de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40021000 	.word	0x40021000

080052ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0d0      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005300:	4b6a      	ldr	r3, [pc, #424]	; (80054ac <HAL_RCC_ClockConfig+0x1c0>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d910      	bls.n	8005330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800530e:	4b67      	ldr	r3, [pc, #412]	; (80054ac <HAL_RCC_ClockConfig+0x1c0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f023 0207 	bic.w	r2, r3, #7
 8005316:	4965      	ldr	r1, [pc, #404]	; (80054ac <HAL_RCC_ClockConfig+0x1c0>)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	4313      	orrs	r3, r2
 800531c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800531e:	4b63      	ldr	r3, [pc, #396]	; (80054ac <HAL_RCC_ClockConfig+0x1c0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d001      	beq.n	8005330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0b8      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d020      	beq.n	800537e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005348:	4b59      	ldr	r3, [pc, #356]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a58      	ldr	r2, [pc, #352]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 800534e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005360:	4b53      	ldr	r3, [pc, #332]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a52      	ldr	r2, [pc, #328]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005366:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800536a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800536c:	4b50      	ldr	r3, [pc, #320]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	494d      	ldr	r1, [pc, #308]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	4313      	orrs	r3, r2
 800537c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d040      	beq.n	800540c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005392:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d115      	bne.n	80053ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e07f      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d107      	bne.n	80053ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053aa:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e073      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ba:	4b3d      	ldr	r3, [pc, #244]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e06b      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ca:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f023 0203 	bic.w	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4936      	ldr	r1, [pc, #216]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053dc:	f7fe fd78 	bl	8003ed0 <HAL_GetTick>
 80053e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e4:	f7fe fd74 	bl	8003ed0 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e053      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f003 020c 	and.w	r2, r3, #12
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	429a      	cmp	r2, r3
 800540a:	d1eb      	bne.n	80053e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800540c:	4b27      	ldr	r3, [pc, #156]	; (80054ac <HAL_RCC_ClockConfig+0x1c0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d210      	bcs.n	800543c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541a:	4b24      	ldr	r3, [pc, #144]	; (80054ac <HAL_RCC_ClockConfig+0x1c0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 0207 	bic.w	r2, r3, #7
 8005422:	4922      	ldr	r1, [pc, #136]	; (80054ac <HAL_RCC_ClockConfig+0x1c0>)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	4313      	orrs	r3, r2
 8005428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542a:	4b20      	ldr	r3, [pc, #128]	; (80054ac <HAL_RCC_ClockConfig+0x1c0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d001      	beq.n	800543c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e032      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	4916      	ldr	r1, [pc, #88]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005456:	4313      	orrs	r3, r2
 8005458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	490e      	ldr	r1, [pc, #56]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005476:	4313      	orrs	r3, r2
 8005478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800547a:	f000 f821 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 800547e:	4602      	mov	r2, r0
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	490a      	ldr	r1, [pc, #40]	; (80054b4 <HAL_RCC_ClockConfig+0x1c8>)
 800548c:	5ccb      	ldrb	r3, [r1, r3]
 800548e:	fa22 f303 	lsr.w	r3, r2, r3
 8005492:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <HAL_RCC_ClockConfig+0x1cc>)
 8005494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005496:	4b09      	ldr	r3, [pc, #36]	; (80054bc <HAL_RCC_ClockConfig+0x1d0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fcd6 	bl	8003e4c <HAL_InitTick>

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40022000 	.word	0x40022000
 80054b0:	40021000 	.word	0x40021000
 80054b4:	0800b838 	.word	0x0800b838
 80054b8:	2000005c 	.word	0x2000005c
 80054bc:	20000060 	.word	0x20000060

080054c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	2300      	movs	r3, #0
 80054d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054da:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <HAL_RCC_GetSysClockFreq+0x94>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d002      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0x30>
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d003      	beq.n	80054f6 <HAL_RCC_GetSysClockFreq+0x36>
 80054ee:	e027      	b.n	8005540 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <HAL_RCC_GetSysClockFreq+0x98>)
 80054f2:	613b      	str	r3, [r7, #16]
      break;
 80054f4:	e027      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	0c9b      	lsrs	r3, r3, #18
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	4a17      	ldr	r2, [pc, #92]	; (800555c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005500:	5cd3      	ldrb	r3, [r2, r3]
 8005502:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d010      	beq.n	8005530 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800550e:	4b11      	ldr	r3, [pc, #68]	; (8005554 <HAL_RCC_GetSysClockFreq+0x94>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	0c5b      	lsrs	r3, r3, #17
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	4a11      	ldr	r2, [pc, #68]	; (8005560 <HAL_RCC_GetSysClockFreq+0xa0>)
 800551a:	5cd3      	ldrb	r3, [r2, r3]
 800551c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a0d      	ldr	r2, [pc, #52]	; (8005558 <HAL_RCC_GetSysClockFreq+0x98>)
 8005522:	fb03 f202 	mul.w	r2, r3, r2
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	fbb2 f3f3 	udiv	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e004      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a0c      	ldr	r2, [pc, #48]	; (8005564 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005534:	fb02 f303 	mul.w	r3, r2, r3
 8005538:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	613b      	str	r3, [r7, #16]
      break;
 800553e:	e002      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_RCC_GetSysClockFreq+0x98>)
 8005542:	613b      	str	r3, [r7, #16]
      break;
 8005544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005546:	693b      	ldr	r3, [r7, #16]
}
 8005548:	4618      	mov	r0, r3
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40021000 	.word	0x40021000
 8005558:	007a1200 	.word	0x007a1200
 800555c:	0800b850 	.word	0x0800b850
 8005560:	0800b860 	.word	0x0800b860
 8005564:	003d0900 	.word	0x003d0900

08005568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800556c:	4b02      	ldr	r3, [pc, #8]	; (8005578 <HAL_RCC_GetHCLKFreq+0x10>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	4618      	mov	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr
 8005578:	2000005c 	.word	0x2000005c

0800557c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005580:	f7ff fff2 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 8005584:	4602      	mov	r2, r0
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	4903      	ldr	r1, [pc, #12]	; (80055a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005592:	5ccb      	ldrb	r3, [r1, r3]
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005598:	4618      	mov	r0, r3
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40021000 	.word	0x40021000
 80055a0:	0800b848 	.word	0x0800b848

080055a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055a8:	f7ff ffde 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 80055ac:	4602      	mov	r2, r0
 80055ae:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	0adb      	lsrs	r3, r3, #11
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	4903      	ldr	r1, [pc, #12]	; (80055c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ba:	5ccb      	ldrb	r3, [r1, r3]
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	0800b848 	.word	0x0800b848

080055cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <RCC_Delay+0x34>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <RCC_Delay+0x38>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	0a5b      	lsrs	r3, r3, #9
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
 80055e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055e8:	bf00      	nop
  }
  while (Delay --);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1e5a      	subs	r2, r3, #1
 80055ee:	60fa      	str	r2, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f9      	bne.n	80055e8 <RCC_Delay+0x1c>
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr
 8005600:	2000005c 	.word	0x2000005c
 8005604:	10624dd3 	.word	0x10624dd3

08005608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e076      	b.n	8005708 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d108      	bne.n	8005634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800562a:	d009      	beq.n	8005640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
 8005632:	e005      	b.n	8005640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fe f964 	bl	8003928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005676:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c4:	ea42 0103 	orr.w	r1, r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	0c1a      	lsrs	r2, r3, #16
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f002 0204 	and.w	r2, r2, #4
 80056e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69da      	ldr	r2, [r3, #28]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08c      	sub	sp, #48	; 0x30
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800571e:	2301      	movs	r3, #1
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x26>
 8005732:	2302      	movs	r3, #2
 8005734:	e198      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x358>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800573e:	f7fe fbc7 	bl	8003ed0 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005754:	887b      	ldrh	r3, [r7, #2]
 8005756:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005758:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800575c:	2b01      	cmp	r3, #1
 800575e:	d00f      	beq.n	8005780 <HAL_SPI_TransmitReceive+0x70>
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005766:	d107      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <HAL_SPI_TransmitReceive+0x68>
 8005770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005774:	2b04      	cmp	r3, #4
 8005776:	d003      	beq.n	8005780 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005778:	2302      	movs	r3, #2
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800577e:	e16d      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x82>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x82>
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005798:	e160      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d003      	beq.n	80057ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2205      	movs	r2, #5
 80057aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	887a      	ldrh	r2, [r7, #2]
 80057be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	887a      	ldrh	r2, [r7, #2]
 80057c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	887a      	ldrh	r2, [r7, #2]
 80057d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	887a      	ldrh	r2, [r7, #2]
 80057d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d007      	beq.n	8005802 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005800:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800580a:	d17c      	bne.n	8005906 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_SPI_TransmitReceive+0x10a>
 8005814:	8b7b      	ldrh	r3, [r7, #26]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d16a      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	881a      	ldrh	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	1c9a      	adds	r2, r3, #2
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800583e:	e057      	b.n	80058f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b02      	cmp	r3, #2
 800584c:	d11b      	bne.n	8005886 <HAL_SPI_TransmitReceive+0x176>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d016      	beq.n	8005886 <HAL_SPI_TransmitReceive+0x176>
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	2b01      	cmp	r3, #1
 800585c:	d113      	bne.n	8005886 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	881a      	ldrh	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	1c9a      	adds	r2, r3, #2
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d119      	bne.n	80058c8 <HAL_SPI_TransmitReceive+0x1b8>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d014      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	b292      	uxth	r2, r2
 80058aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	1c9a      	adds	r2, r3, #2
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058c4:	2301      	movs	r3, #1
 80058c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058c8:	f7fe fb02 	bl	8003ed0 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d80b      	bhi.n	80058f0 <HAL_SPI_TransmitReceive+0x1e0>
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d007      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80058ee:	e0b5      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1a2      	bne.n	8005840 <HAL_SPI_TransmitReceive+0x130>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d19d      	bne.n	8005840 <HAL_SPI_TransmitReceive+0x130>
 8005904:	e080      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_SPI_TransmitReceive+0x204>
 800590e:	8b7b      	ldrh	r3, [r7, #26]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d16f      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	7812      	ldrb	r2, [r2, #0]
 8005920:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800593a:	e05b      	b.n	80059f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b02      	cmp	r3, #2
 8005948:	d11c      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x274>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d017      	beq.n	8005984 <HAL_SPI_TransmitReceive+0x274>
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d114      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b01      	cmp	r3, #1
 8005990:	d119      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x2b6>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d014      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059c2:	2301      	movs	r3, #1
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059c6:	f7fe fa83 	bl	8003ed0 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d803      	bhi.n	80059de <HAL_SPI_TransmitReceive+0x2ce>
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d102      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x2d4>
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d107      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80059f2:	e033      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d19e      	bne.n	800593c <HAL_SPI_TransmitReceive+0x22c>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d199      	bne.n	800593c <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f8b7 	bl	8005b80 <SPI_EndRxTxTransaction>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2220      	movs	r2, #32
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a24:	e01a      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a52:	e003      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3730      	adds	r7, #48	; 0x30
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a80:	f7fe fa26 	bl	8003ed0 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a90:	f7fe fa1e 	bl	8003ed0 <HAL_GetTick>
 8005a94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a96:	4b39      	ldr	r3, [pc, #228]	; (8005b7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	015b      	lsls	r3, r3, #5
 8005a9c:	0d1b      	lsrs	r3, r3, #20
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aa6:	e054      	b.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d050      	beq.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ab0:	f7fe fa0e 	bl	8003ed0 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d902      	bls.n	8005ac6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d13d      	bne.n	8005b42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ad4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ade:	d111      	bne.n	8005b04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae8:	d004      	beq.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af2:	d107      	bne.n	8005b04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0c:	d10f      	bne.n	8005b2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e017      	b.n	8005b72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	bf0c      	ite	eq
 8005b62:	2301      	moveq	r3, #1
 8005b64:	2300      	movne	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d19b      	bne.n	8005aa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	2000005c 	.word	0x2000005c

08005b80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2200      	movs	r2, #0
 8005b94:	2180      	movs	r1, #128	; 0x80
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff ff6a 	bl	8005a70 <SPI_WaitFlagStateUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba6:	f043 0220 	orr.w	r2, r3, #32
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e000      	b.n	8005bb4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e041      	b.n	8005c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fe f85a 	bl	8003c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f000 fa7c 	bl	80060f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d001      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e03a      	b.n	8005cea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <HAL_TIM_Base_Start_IT+0x98>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00e      	beq.n	8005cb4 <HAL_TIM_Base_Start_IT+0x58>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9e:	d009      	beq.n	8005cb4 <HAL_TIM_Base_Start_IT+0x58>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <HAL_TIM_Base_Start_IT+0x58>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a13      	ldr	r2, [pc, #76]	; (8005cfc <HAL_TIM_Base_Start_IT+0xa0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d111      	bne.n	8005cd8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b06      	cmp	r3, #6
 8005cc4:	d010      	beq.n	8005ce8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0201 	orr.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd6:	e007      	b.n	8005ce8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	40012c00 	.word	0x40012c00
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800

08005d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d122      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d11b      	bne.n	8005d5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0202 	mvn.w	r2, #2
 8005d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f9bd 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005d48:	e005      	b.n	8005d56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f9b0 	bl	80060b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f9bf 	bl	80060d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d122      	bne.n	8005db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d11b      	bne.n	8005db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0204 	mvn.w	r2, #4
 8005d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2202      	movs	r2, #2
 8005d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f993 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005d9c:	e005      	b.n	8005daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f986 	bl	80060b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f995 	bl	80060d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d122      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d11b      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0208 	mvn.w	r2, #8
 8005dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f969 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005df0:	e005      	b.n	8005dfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f95c 	bl	80060b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f96b 	bl	80060d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0310 	and.w	r3, r3, #16
 8005e0e:	2b10      	cmp	r3, #16
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0210 	mvn.w	r2, #16
 8005e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f93f 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f932 	bl	80060b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f941 	bl	80060d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d10e      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d107      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0201 	mvn.w	r2, #1
 8005e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f90d 	bl	800609e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8e:	2b80      	cmp	r3, #128	; 0x80
 8005e90:	d10e      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9c:	2b80      	cmp	r3, #128	; 0x80
 8005e9e:	d107      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fa83 	bl	80063b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d10e      	bne.n	8005edc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d107      	bne.n	8005edc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f905 	bl	80060e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	d10e      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d107      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0220 	mvn.w	r2, #32
 8005f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa4e 	bl	80063a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIM_ConfigClockSource+0x1c>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e0b4      	b.n	8006096 <HAL_TIM_ConfigClockSource+0x186>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f64:	d03e      	beq.n	8005fe4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6a:	f200 8087 	bhi.w	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f72:	f000 8086 	beq.w	8006082 <HAL_TIM_ConfigClockSource+0x172>
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7a:	d87f      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b70      	cmp	r3, #112	; 0x70
 8005f7e:	d01a      	beq.n	8005fb6 <HAL_TIM_ConfigClockSource+0xa6>
 8005f80:	2b70      	cmp	r3, #112	; 0x70
 8005f82:	d87b      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b60      	cmp	r3, #96	; 0x60
 8005f86:	d050      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x11a>
 8005f88:	2b60      	cmp	r3, #96	; 0x60
 8005f8a:	d877      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b50      	cmp	r3, #80	; 0x50
 8005f8e:	d03c      	beq.n	800600a <HAL_TIM_ConfigClockSource+0xfa>
 8005f90:	2b50      	cmp	r3, #80	; 0x50
 8005f92:	d873      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d058      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x13a>
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d86f      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b30      	cmp	r3, #48	; 0x30
 8005f9e:	d064      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa0:	2b30      	cmp	r3, #48	; 0x30
 8005fa2:	d86b      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d060      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d867      	bhi.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d05c      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fb0:	2b10      	cmp	r3, #16
 8005fb2:	d05a      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x15a>
 8005fb4:	e062      	b.n	800607c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc6:	f000 f970 	bl	80062aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	609a      	str	r2, [r3, #8]
      break;
 8005fe2:	e04f      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ff4:	f000 f959 	bl	80062aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006006:	609a      	str	r2, [r3, #8]
      break;
 8006008:	e03c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	461a      	mov	r2, r3
 8006018:	f000 f8d0 	bl	80061bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2150      	movs	r1, #80	; 0x50
 8006022:	4618      	mov	r0, r3
 8006024:	f000 f927 	bl	8006276 <TIM_ITRx_SetConfig>
      break;
 8006028:	e02c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006036:	461a      	mov	r2, r3
 8006038:	f000 f8ee 	bl	8006218 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2160      	movs	r1, #96	; 0x60
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f917 	bl	8006276 <TIM_ITRx_SetConfig>
      break;
 8006048:	e01c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006056:	461a      	mov	r2, r3
 8006058:	f000 f8b0 	bl	80061bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2140      	movs	r1, #64	; 0x40
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f907 	bl	8006276 <TIM_ITRx_SetConfig>
      break;
 8006068:	e00c      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f000 f8fe 	bl	8006276 <TIM_ITRx_SetConfig>
      break;
 800607a:	e003      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
      break;
 8006080:	e000      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr

080060e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr

080060f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a29      	ldr	r2, [pc, #164]	; (80061b0 <TIM_Base_SetConfig+0xb8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00b      	beq.n	8006128 <TIM_Base_SetConfig+0x30>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006116:	d007      	beq.n	8006128 <TIM_Base_SetConfig+0x30>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a26      	ldr	r2, [pc, #152]	; (80061b4 <TIM_Base_SetConfig+0xbc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_Base_SetConfig+0x30>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a25      	ldr	r2, [pc, #148]	; (80061b8 <TIM_Base_SetConfig+0xc0>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d108      	bne.n	800613a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <TIM_Base_SetConfig+0xb8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00b      	beq.n	800615a <TIM_Base_SetConfig+0x62>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d007      	beq.n	800615a <TIM_Base_SetConfig+0x62>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a19      	ldr	r2, [pc, #100]	; (80061b4 <TIM_Base_SetConfig+0xbc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <TIM_Base_SetConfig+0x62>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a18      	ldr	r2, [pc, #96]	; (80061b8 <TIM_Base_SetConfig+0xc0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d108      	bne.n	800616c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a07      	ldr	r2, [pc, #28]	; (80061b0 <TIM_Base_SetConfig+0xb8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d103      	bne.n	80061a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	615a      	str	r2, [r3, #20]
}
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40000400 	.word	0x40000400
 80061b8:	40000800 	.word	0x40000800

080061bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f023 0201 	bic.w	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f023 030a 	bic.w	r3, r3, #10
 80061f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f023 0210 	bic.w	r2, r3, #16
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	031b      	lsls	r3, r3, #12
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006254:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	621a      	str	r2, [r3, #32]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr

08006276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006276:	b480      	push	{r7}
 8006278:	b085      	sub	sp, #20
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	f043 0307 	orr.w	r3, r3, #7
 8006298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	609a      	str	r2, [r3, #8]
}
 80062a0:	bf00      	nop
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b087      	sub	sp, #28
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	021a      	lsls	r2, r3, #8
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	609a      	str	r2, [r3, #8]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bc80      	pop	{r7}
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e046      	b.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a16      	ldr	r2, [pc, #88]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634c:	d009      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a12      	ldr	r2, [pc, #72]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a10      	ldr	r2, [pc, #64]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d10c      	bne.n	800637c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	4313      	orrs	r3, r2
 8006372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr
 8006398:	40012c00 	.word	0x40012c00
 800639c:	40000400 	.word	0x40000400
 80063a0:	40000800 	.word	0x40000800

080063a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr

080063b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr

080063c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e042      	b.n	8006460 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fd fca4 	bl	8003d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2224      	movs	r2, #36	; 0x24
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800640a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f91d 	bl	800664c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691a      	ldr	r2, [r3, #16]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08a      	sub	sp, #40	; 0x28
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	4613      	mov	r3, r2
 8006476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b20      	cmp	r3, #32
 8006486:	d16d      	bne.n	8006564 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_UART_Transmit+0x2c>
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e066      	b.n	8006566 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2221      	movs	r2, #33	; 0x21
 80064a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064a6:	f7fd fd13 	bl	8003ed0 <HAL_GetTick>
 80064aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	88fa      	ldrh	r2, [r7, #6]
 80064b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c0:	d108      	bne.n	80064d4 <HAL_UART_Transmit+0x6c>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	61bb      	str	r3, [r7, #24]
 80064d2:	e003      	b.n	80064dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064dc:	e02a      	b.n	8006534 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2200      	movs	r2, #0
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 f840 	bl	800656e <UART_WaitOnFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e036      	b.n	8006566 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800650c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	3302      	adds	r3, #2
 8006512:	61bb      	str	r3, [r7, #24]
 8006514:	e007      	b.n	8006526 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	781a      	ldrb	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	3301      	adds	r3, #1
 8006524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1cf      	bne.n	80064de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2200      	movs	r2, #0
 8006546:	2140      	movs	r1, #64	; 0x40
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 f810 	bl	800656e <UART_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e006      	b.n	8006566 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	e000      	b.n	8006566 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006564:	2302      	movs	r3, #2
  }
}
 8006566:	4618      	mov	r0, r3
 8006568:	3720      	adds	r7, #32
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b090      	sub	sp, #64	; 0x40
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	603b      	str	r3, [r7, #0]
 800657a:	4613      	mov	r3, r2
 800657c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657e:	e050      	b.n	8006622 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d04c      	beq.n	8006622 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <UART_WaitOnFlagUntilTimeout+0x30>
 800658e:	f7fd fc9f 	bl	8003ed0 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800659a:	429a      	cmp	r2, r3
 800659c:	d241      	bcs.n	8006622 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065be:	637a      	str	r2, [r7, #52]	; 0x34
 80065c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e5      	bne.n	800659e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3314      	adds	r3, #20
 80065d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	613b      	str	r3, [r7, #16]
   return(result);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f023 0301 	bic.w	r3, r3, #1
 80065e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3314      	adds	r3, #20
 80065f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f2:	623a      	str	r2, [r7, #32]
 80065f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	69f9      	ldr	r1, [r7, #28]
 80065f8:	6a3a      	ldr	r2, [r7, #32]
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e5      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e00f      	b.n	8006642 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4013      	ands	r3, r2
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	429a      	cmp	r2, r3
 8006630:	bf0c      	ite	eq
 8006632:	2301      	moveq	r3, #1
 8006634:	2300      	movne	r3, #0
 8006636:	b2db      	uxtb	r3, r3
 8006638:	461a      	mov	r2, r3
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	429a      	cmp	r2, r3
 800663e:	d09f      	beq.n	8006580 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3740      	adds	r7, #64	; 0x40
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006686:	f023 030c 	bic.w	r3, r3, #12
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	430b      	orrs	r3, r1
 8006692:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a2c      	ldr	r2, [pc, #176]	; (8006760 <UART_SetConfig+0x114>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d103      	bne.n	80066bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80066b4:	f7fe ff76 	bl	80055a4 <HAL_RCC_GetPCLK2Freq>
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	e002      	b.n	80066c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80066bc:	f7fe ff5e 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 80066c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009a      	lsls	r2, r3, #2
 80066cc:	441a      	add	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	4a22      	ldr	r2, [pc, #136]	; (8006764 <UART_SetConfig+0x118>)
 80066da:	fba2 2303 	umull	r2, r3, r2, r3
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	0119      	lsls	r1, r3, #4
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009a      	lsls	r2, r3, #2
 80066ec:	441a      	add	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80066f8:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <UART_SetConfig+0x118>)
 80066fa:	fba3 0302 	umull	r0, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	2064      	movs	r0, #100	; 0x64
 8006702:	fb00 f303 	mul.w	r3, r0, r3
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	3332      	adds	r3, #50	; 0x32
 800670c:	4a15      	ldr	r2, [pc, #84]	; (8006764 <UART_SetConfig+0x118>)
 800670e:	fba2 2303 	umull	r2, r3, r2, r3
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006718:	4419      	add	r1, r3
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009a      	lsls	r2, r3, #2
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006730:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <UART_SetConfig+0x118>)
 8006732:	fba3 0302 	umull	r0, r3, r3, r2
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	2064      	movs	r0, #100	; 0x64
 800673a:	fb00 f303 	mul.w	r3, r0, r3
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	3332      	adds	r3, #50	; 0x32
 8006744:	4a07      	ldr	r2, [pc, #28]	; (8006764 <UART_SetConfig+0x118>)
 8006746:	fba2 2303 	umull	r2, r3, r2, r3
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	440a      	add	r2, r1
 8006756:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40013800 	.word	0x40013800
 8006764:	51eb851f 	.word	0x51eb851f

08006768 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>:
//value++;                                            // увеличивать/уменьшать переменную value с шагом и интервалом
//Serial.println(value);                              // для примера выведем в порт
//}

// ==================== CONSTRUCTOR ====================
GButton::GButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool type, bool dir) {
 8006768:	b410      	push	{r4}
 800676a:	2400      	movs	r4, #0
 800676c:	f89d c004 	ldrb.w	ip, [sp, #4]

	flags.GPIOx = GPIOx;
 8006770:	f8c0 1002 	str.w	r1, [r0, #2]
	flags.GPIO_Pin = GPIO_Pin;

	setType(type);
	flags.mode = false;
	flags.tickMode = false;
	flags.inv_state = dir;
 8006774:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006778:	7841      	ldrb	r1, [r0, #1]
 800677a:	ea4c 03c3 	orr.w	r3, ip, r3, lsl #3
 800677e:	f003 031e 	and.w	r3, r3, #30
 8006782:	f021 011e 	bic.w	r1, r1, #30
 8006786:	430b      	orrs	r3, r1
	flags.GPIO_Pin = GPIO_Pin;
 8006788:	80c2      	strh	r2, [r0, #6]
	flags.inv_state = dir;
 800678a:	7043      	strb	r3, [r0, #1]
GButton::GButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool type, bool dir) {
 800678c:	4a06      	ldr	r2, [pc, #24]	; (80067a8 <_ZN7GButtonC1EP12GPIO_TypeDeftbb+0x40>)
 800678e:	4b07      	ldr	r3, [pc, #28]	; (80067ac <_ZN7GButtonC1EP12GPIO_TypeDeftbb+0x44>)
 8006790:	7204      	strb	r4, [r0, #8]
 8006792:	8244      	strh	r4, [r0, #18]
 8006794:	7504      	strb	r4, [r0, #20]
 8006796:	6184      	str	r4, [r0, #24]
 8006798:	8384      	strh	r4, [r0, #28]
 800679a:	f8c0 200a 	str.w	r2, [r0, #10]
}
 800679e:	bc10      	pop	{r4}
GButton::GButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool type, bool dir) {
 80067a0:	f8c0 300e 	str.w	r3, [r0, #14]
}
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	01f4000a 	.word	0x01f4000a
 80067ac:	019001f4 	.word	0x019001f4

080067b0 <_ZN7GButton7isPressEv>:
void GButton::setTickMode(bool tickMode) {
	flags.tickMode = tickMode;
}

// ==================== IS ====================
bool GButton::isPress() {
 80067b0:	b538      	push	{r3, r4, r5, lr}
	if (flags.tickMode)
 80067b2:	7843      	ldrb	r3, [r0, #1]
bool GButton::isPress() {
 80067b4:	4604      	mov	r4, r0
	if (flags.tickMode)
 80067b6:	06d8      	lsls	r0, r3, #27
 80067b8:	d408      	bmi.n	80067cc <_ZN7GButton7isPressEv+0x1c>
		GButton::tick();
	if (flags.isPress_f) {
 80067ba:	7823      	ldrb	r3, [r4, #0]
 80067bc:	069a      	lsls	r2, r3, #26
 80067be:	f3c3 1040 	ubfx	r0, r3, #5, #1
 80067c2:	d502      	bpl.n	80067ca <_ZN7GButton7isPressEv+0x1a>
		flags.isPress_f = false;
 80067c4:	f36f 1345 	bfc	r3, #5, #1
 80067c8:	7023      	strb	r3, [r4, #0]
		return true;
	} else
		return false;
}
 80067ca:	bd38      	pop	{r3, r4, r5, pc}

void GButton::tick() {
	// читаем пин
	//if (!flags.mode && !flags.noPin) btn_state = !_buttonRead() ^ (flags.inv_state ^ flags.type);

	if (!flags.mode)	// && !flags.noPin)
 80067cc:	0759      	lsls	r1, r3, #29
 80067ce:	d531      	bpl.n	8006834 <_ZN7GButton7isPressEv+0x84>

	uint32_t thisMls = uwTick;
	//uint32_t thisMls = millis();

	// нажатие
	if (btn_state && !btn_flag) {
 80067d0:	7f21      	ldrb	r1, [r4, #28]
	uint32_t thisMls = uwTick;
 80067d2:	4a45      	ldr	r2, [pc, #276]	; (80068e8 <_ZN7GButton7isPressEv+0x138>)
 80067d4:	6815      	ldr	r5, [r2, #0]
	if (btn_state && !btn_flag) {
 80067d6:	b9d1      	cbnz	r1, 800680e <_ZN7GButton7isPressEv+0x5e>
				flags.isPress_f = true;
				flags.oneClick_f = true;
			}
		}
	} else {
		flags.btn_deb = false;
 80067d8:	7822      	ldrb	r2, [r4, #0]
 80067da:	f361 0200 	bfi	r2, r1, #0, #1
 80067de:	7022      	strb	r2, [r4, #0]
	}

	// отпускание
	if (!btn_state && btn_flag) {
 80067e0:	7f62      	ldrb	r2, [r4, #29]
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	d138      	bne.n	8006858 <_ZN7GButton7isPressEv+0xa8>
			if (thisMls - btn_timer >= _debounce) {
 80067e6:	69a2      	ldr	r2, [r4, #24]
 80067e8:	1aaa      	subs	r2, r5, r2
		flags.oneClick_f = false;
		btn_timer = thisMls;
	}

	// обработка накликивания
	if ((thisMls - btn_timer >= _click_timeout) && (btn_counter != 0)
 80067ea:	89e0      	ldrh	r0, [r4, #14]
 80067ec:	4290      	cmp	r0, r2
 80067ee:	d803      	bhi.n	80067f8 <_ZN7GButton7isPressEv+0x48>
 80067f0:	7ca2      	ldrb	r2, [r4, #18]
 80067f2:	b10a      	cbz	r2, 80067f8 <_ZN7GButton7isPressEv+0x48>
			&& !btn_state) {    //И здесь еще добавлен !btn_state
 80067f4:	2900      	cmp	r1, #0
 80067f6:	d070      	beq.n	80068da <_ZN7GButton7isPressEv+0x12a>
		btn_counter = 0;
		flags.counter_flag = true;
	}

	// сброс накликивания						//Добавлено
	if (flags.counter_reset) {
 80067f8:	0659      	lsls	r1, r3, #25
 80067fa:	d5de      	bpl.n	80067ba <_ZN7GButton7isPressEv+0xa>
		last_counter = 0;
 80067fc:	2200      	movs	r2, #0
		flags.counter_flag = false;
 80067fe:	8823      	ldrh	r3, [r4, #0]
		last_counter = 0;
 8006800:	74e2      	strb	r2, [r4, #19]
		flags.counter_flag = false;
 8006802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006806:	f023 0304 	bic.w	r3, r3, #4
 800680a:	8023      	strh	r3, [r4, #0]
 800680c:	e7d5      	b.n	80067ba <_ZN7GButton7isPressEv+0xa>
	if (btn_state && !btn_flag) {
 800680e:	7f62      	ldrb	r2, [r4, #29]
 8006810:	2a00      	cmp	r2, #0
 8006812:	d144      	bne.n	800689e <_ZN7GButton7isPressEv+0xee>
		if (!flags.btn_deb) {
 8006814:	7820      	ldrb	r0, [r4, #0]
 8006816:	f010 0201 	ands.w	r2, r0, #1
 800681a:	d059      	beq.n	80068d0 <_ZN7GButton7isPressEv+0x120>
			if (thisMls - btn_timer >= _debounce) {
 800681c:	69a2      	ldr	r2, [r4, #24]
 800681e:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 8006822:	1aaa      	subs	r2, r5, r2
 8006824:	4562      	cmp	r2, ip
 8006826:	d3e0      	bcc.n	80067ea <_ZN7GButton7isPressEv+0x3a>
				flags.isPress_f = true;
 8006828:	f060 005f 	orn	r0, r0, #95	; 0x5f
 800682c:	7020      	strb	r0, [r4, #0]
				btn_flag = true;
 800682e:	2001      	movs	r0, #1
 8006830:	7760      	strb	r0, [r4, #29]
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8006832:	e03a      	b.n	80068aa <_ZN7GButton7isPressEv+0xfa>
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8006834:	88e1      	ldrh	r1, [r4, #6]
 8006836:	f8d4 0002 	ldr.w	r0, [r4, #2]
 800683a:	f7fd fe09 	bl	8004450 <HAL_GPIO_ReadPin>
				^ (flags.inv_state ^ flags.type);
 800683e:	7863      	ldrb	r3, [r4, #1]
 8006840:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8006844:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8006848:	4051      	eors	r1, r2
 800684a:	2800      	cmp	r0, #0
 800684c:	bf08      	it	eq
 800684e:	f081 0101 	eoreq.w	r1, r1, #1
 8006852:	b2c9      	uxtb	r1, r1
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8006854:	7721      	strb	r1, [r4, #28]
 8006856:	e7bc      	b.n	80067d2 <_ZN7GButton7isPressEv+0x22>
		if (!flags.hold_flag)
 8006858:	7822      	ldrb	r2, [r4, #0]
		btn_flag = false;
 800685a:	7761      	strb	r1, [r4, #29]
		if (!flags.hold_flag)
 800685c:	0792      	lsls	r2, r2, #30
 800685e:	d402      	bmi.n	8006866 <_ZN7GButton7isPressEv+0xb6>
			btn_counter++;
 8006860:	7ca2      	ldrb	r2, [r4, #18]
 8006862:	3201      	adds	r2, #1
 8006864:	74a2      	strb	r2, [r4, #18]
		flags.hold_flag = false;
 8006866:	7820      	ldrb	r0, [r4, #0]
		btn_timer = thisMls;
 8006868:	61a5      	str	r5, [r4, #24]
		flags.hold_flag = false;
 800686a:	f020 0012 	bic.w	r0, r0, #18
 800686e:	f040 0010 	orr.w	r0, r0, #16
		if (flags.step_flag) {
 8006872:	4602      	mov	r2, r0
		flags.hold_flag = false;
 8006874:	7020      	strb	r0, [r4, #0]
		if (flags.step_flag) {
 8006876:	0650      	lsls	r0, r2, #25
 8006878:	d505      	bpl.n	8006886 <_ZN7GButton7isPressEv+0xd6>
			btn_counter = 0;
 800687a:	2000      	movs	r0, #0
			flags.step_flag = false;
 800687c:	f360 1286 	bfi	r2, r0, #6, #1
 8006880:	7022      	strb	r2, [r4, #0]
			btn_counter = 0;
 8006882:	8260      	strh	r0, [r4, #18]
			flags.step_flag = false;
 8006884:	b2d2      	uxtb	r2, r2
		if (flags.oneClick_f) {
 8006886:	09d2      	lsrs	r2, r2, #7
 8006888:	d0af      	beq.n	80067ea <_ZN7GButton7isPressEv+0x3a>
			flags.oneClick_f = false;
 800688a:	8823      	ldrh	r3, [r4, #0]
 800688c:	2200      	movs	r2, #0
 800688e:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8006892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006896:	8023      	strh	r3, [r4, #0]
 8006898:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800689c:	e7a5      	b.n	80067ea <_ZN7GButton7isPressEv+0x3a>
		flags.btn_deb = false;
 800689e:	7822      	ldrb	r2, [r4, #0]
 80068a0:	f36f 0200 	bfc	r2, #0, #1
 80068a4:	7022      	strb	r2, [r4, #0]
			if (thisMls - btn_timer >= _debounce) {
 80068a6:	69a2      	ldr	r2, [r4, #24]
 80068a8:	1aaa      	subs	r2, r5, r2
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 80068aa:	89a0      	ldrh	r0, [r4, #12]
 80068ac:	4290      	cmp	r0, r2
 80068ae:	d89c      	bhi.n	80067ea <_ZN7GButton7isPressEv+0x3a>
			&& !flags.hold_flag) {
 80068b0:	7820      	ldrb	r0, [r4, #0]
 80068b2:	f010 0f02 	tst.w	r0, #2
 80068b6:	f3c0 0c40 	ubfx	ip, r0, #1, #1
 80068ba:	d196      	bne.n	80067ea <_ZN7GButton7isPressEv+0x3a>
		flags.hold_flag = true;
 80068bc:	f000 0035 	and.w	r0, r0, #53	; 0x35
 80068c0:	f040 004a 	orr.w	r0, r0, #74	; 0x4a
 80068c4:	7020      	strb	r0, [r4, #0]
		last_hold_counter = btn_counter;
 80068c6:	7ca0      	ldrb	r0, [r4, #18]
 80068c8:	4662      	mov	r2, ip
		btn_timer = thisMls;
 80068ca:	61a5      	str	r5, [r4, #24]
		last_hold_counter = btn_counter;
 80068cc:	7520      	strb	r0, [r4, #20]
		btn_timer = thisMls;
 80068ce:	e78c      	b.n	80067ea <_ZN7GButton7isPressEv+0x3a>
			flags.btn_deb = true;
 80068d0:	f040 0001 	orr.w	r0, r0, #1
			btn_timer = thisMls;
 80068d4:	61a5      	str	r5, [r4, #24]
			flags.btn_deb = true;
 80068d6:	7020      	strb	r0, [r4, #0]
			btn_timer = thisMls;
 80068d8:	e787      	b.n	80067ea <_ZN7GButton7isPressEv+0x3a>
		flags.counter_flag = true;
 80068da:	7820      	ldrb	r0, [r4, #0]
		last_counter = btn_counter;
 80068dc:	74e2      	strb	r2, [r4, #19]
		flags.counter_flag = true;
 80068de:	f040 0204 	orr.w	r2, r0, #4
		btn_counter = 0;
 80068e2:	74a1      	strb	r1, [r4, #18]
		flags.counter_flag = true;
 80068e4:	7022      	strb	r2, [r4, #0]
 80068e6:	e787      	b.n	80067f8 <_ZN7GButton7isPressEv+0x48>
 80068e8:	2000098c 	.word	0x2000098c

080068ec <_ZN7GButton4tickEv>:
	if (!flags.mode)	// && !flags.noPin)
 80068ec:	f890 c001 	ldrb.w	ip, [r0, #1]
void GButton::tick() {
 80068f0:	b510      	push	{r4, lr}
	if (!flags.mode)	// && !flags.noPin)
 80068f2:	f01c 0f04 	tst.w	ip, #4
void GButton::tick() {
 80068f6:	4604      	mov	r4, r0
	if (!flags.mode)	// && !flags.noPin)
 80068f8:	d06f      	beq.n	80069da <_ZN7GButton4tickEv+0xee>
	if (btn_state && !btn_flag) {
 80068fa:	7f02      	ldrb	r2, [r0, #28]
	uint32_t thisMls = uwTick;
 80068fc:	4b46      	ldr	r3, [pc, #280]	; (8006a18 <_ZN7GButton4tickEv+0x12c>)
 80068fe:	6818      	ldr	r0, [r3, #0]
	if (btn_state && !btn_flag) {
 8006900:	b1da      	cbz	r2, 800693a <_ZN7GButton4tickEv+0x4e>
 8006902:	7f63      	ldrb	r3, [r4, #29]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d058      	beq.n	80069ba <_ZN7GButton4tickEv+0xce>
		flags.btn_deb = false;
 8006908:	7823      	ldrb	r3, [r4, #0]
 800690a:	f36f 0300 	bfc	r3, #0, #1
 800690e:	7023      	strb	r3, [r4, #0]
			if (thisMls - btn_timer >= _debounce) {
 8006910:	69a3      	ldr	r3, [r4, #24]
 8006912:	1ac3      	subs	r3, r0, r3
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8006914:	89a1      	ldrh	r1, [r4, #12]
 8006916:	4299      	cmp	r1, r3
 8006918:	d817      	bhi.n	800694a <_ZN7GButton4tickEv+0x5e>
			&& !flags.hold_flag) {
 800691a:	7821      	ldrb	r1, [r4, #0]
 800691c:	f011 0f02 	tst.w	r1, #2
 8006920:	f3c1 0e40 	ubfx	lr, r1, #1, #1
 8006924:	d111      	bne.n	800694a <_ZN7GButton4tickEv+0x5e>
		flags.hold_flag = true;
 8006926:	f001 0135 	and.w	r1, r1, #53	; 0x35
 800692a:	f041 014a 	orr.w	r1, r1, #74	; 0x4a
 800692e:	7021      	strb	r1, [r4, #0]
		last_hold_counter = btn_counter;
 8006930:	7ca1      	ldrb	r1, [r4, #18]
 8006932:	4673      	mov	r3, lr
		btn_timer = thisMls;
 8006934:	61a0      	str	r0, [r4, #24]
		last_hold_counter = btn_counter;
 8006936:	7521      	strb	r1, [r4, #20]
		btn_timer = thisMls;
 8006938:	e007      	b.n	800694a <_ZN7GButton4tickEv+0x5e>
		flags.btn_deb = false;
 800693a:	7823      	ldrb	r3, [r4, #0]
 800693c:	f362 0300 	bfi	r3, r2, #0, #1
 8006940:	7023      	strb	r3, [r4, #0]
	if (!btn_state && btn_flag) {
 8006942:	7f63      	ldrb	r3, [r4, #29]
 8006944:	b9a3      	cbnz	r3, 8006970 <_ZN7GButton4tickEv+0x84>
			if (thisMls - btn_timer >= _debounce) {
 8006946:	69a3      	ldr	r3, [r4, #24]
 8006948:	1ac3      	subs	r3, r0, r3
	if ((thisMls - btn_timer >= _click_timeout) && (btn_counter != 0)
 800694a:	89e1      	ldrh	r1, [r4, #14]
 800694c:	4299      	cmp	r1, r3
 800694e:	d803      	bhi.n	8006958 <_ZN7GButton4tickEv+0x6c>
 8006950:	7ca3      	ldrb	r3, [r4, #18]
 8006952:	b10b      	cbz	r3, 8006958 <_ZN7GButton4tickEv+0x6c>
			&& !btn_state) {    //И здесь еще добавлен !btn_state
 8006954:	2a00      	cmp	r2, #0
 8006956:	d058      	beq.n	8006a0a <_ZN7GButton4tickEv+0x11e>
	if (flags.counter_reset) {
 8006958:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800695c:	d007      	beq.n	800696e <_ZN7GButton4tickEv+0x82>
		last_counter = 0;
 800695e:	2200      	movs	r2, #0
		flags.counter_flag = false;
 8006960:	8823      	ldrh	r3, [r4, #0]
		last_counter = 0;
 8006962:	74e2      	strb	r2, [r4, #19]
		flags.counter_flag = false;
 8006964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006968:	f023 0304 	bic.w	r3, r3, #4
 800696c:	8023      	strh	r3, [r4, #0]
		flags.counter_reset = false;
	}
}
 800696e:	bd10      	pop	{r4, pc}
		if (!flags.hold_flag)
 8006970:	7823      	ldrb	r3, [r4, #0]
		btn_flag = false;
 8006972:	7762      	strb	r2, [r4, #29]
		if (!flags.hold_flag)
 8006974:	079b      	lsls	r3, r3, #30
 8006976:	d402      	bmi.n	800697e <_ZN7GButton4tickEv+0x92>
			btn_counter++;
 8006978:	7ca3      	ldrb	r3, [r4, #18]
 800697a:	3301      	adds	r3, #1
 800697c:	74a3      	strb	r3, [r4, #18]
		flags.hold_flag = false;
 800697e:	7821      	ldrb	r1, [r4, #0]
		btn_timer = thisMls;
 8006980:	61a0      	str	r0, [r4, #24]
		flags.hold_flag = false;
 8006982:	f021 0112 	bic.w	r1, r1, #18
 8006986:	f041 0110 	orr.w	r1, r1, #16
		if (flags.step_flag) {
 800698a:	460b      	mov	r3, r1
		flags.hold_flag = false;
 800698c:	7021      	strb	r1, [r4, #0]
		if (flags.step_flag) {
 800698e:	0659      	lsls	r1, r3, #25
 8006990:	d505      	bpl.n	800699e <_ZN7GButton4tickEv+0xb2>
			btn_counter = 0;
 8006992:	2100      	movs	r1, #0
			flags.step_flag = false;
 8006994:	f361 1386 	bfi	r3, r1, #6, #1
 8006998:	7023      	strb	r3, [r4, #0]
			btn_counter = 0;
 800699a:	8261      	strh	r1, [r4, #18]
			flags.step_flag = false;
 800699c:	b2db      	uxtb	r3, r3
		if (flags.oneClick_f) {
 800699e:	09db      	lsrs	r3, r3, #7
 80069a0:	d0d3      	beq.n	800694a <_ZN7GButton4tickEv+0x5e>
			flags.oneClick_f = false;
 80069a2:	f8b4 c000 	ldrh.w	ip, [r4]
 80069a6:	2300      	movs	r3, #0
 80069a8:	f42c 7cc0 	bic.w	ip, ip, #384	; 0x180
 80069ac:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 80069b0:	f8a4 c000 	strh.w	ip, [r4]
 80069b4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80069b8:	e7c7      	b.n	800694a <_ZN7GButton4tickEv+0x5e>
		if (!flags.btn_deb) {
 80069ba:	7821      	ldrb	r1, [r4, #0]
 80069bc:	f011 0301 	ands.w	r3, r1, #1
 80069c0:	d01e      	beq.n	8006a00 <_ZN7GButton4tickEv+0x114>
			if (thisMls - btn_timer >= _debounce) {
 80069c2:	69a3      	ldr	r3, [r4, #24]
 80069c4:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
 80069c8:	1ac3      	subs	r3, r0, r3
 80069ca:	4573      	cmp	r3, lr
 80069cc:	d3bd      	bcc.n	800694a <_ZN7GButton4tickEv+0x5e>
				flags.isPress_f = true;
 80069ce:	f061 015f 	orn	r1, r1, #95	; 0x5f
 80069d2:	7021      	strb	r1, [r4, #0]
				btn_flag = true;
 80069d4:	2101      	movs	r1, #1
 80069d6:	7761      	strb	r1, [r4, #29]
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 80069d8:	e79c      	b.n	8006914 <_ZN7GButton4tickEv+0x28>
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 80069da:	88c1      	ldrh	r1, [r0, #6]
 80069dc:	f8d0 0002 	ldr.w	r0, [r0, #2]
 80069e0:	f7fd fd36 	bl	8004450 <HAL_GPIO_ReadPin>
				^ (flags.inv_state ^ flags.type);
 80069e4:	f894 c001 	ldrb.w	ip, [r4, #1]
 80069e8:	f3cc 0240 	ubfx	r2, ip, #1, #1
 80069ec:	f3cc 03c0 	ubfx	r3, ip, #3, #1
 80069f0:	405a      	eors	r2, r3
 80069f2:	2800      	cmp	r0, #0
 80069f4:	bf08      	it	eq
 80069f6:	f082 0201 	eoreq.w	r2, r2, #1
 80069fa:	b2d2      	uxtb	r2, r2
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 80069fc:	7722      	strb	r2, [r4, #28]
 80069fe:	e77d      	b.n	80068fc <_ZN7GButton4tickEv+0x10>
			flags.btn_deb = true;
 8006a00:	f041 0101 	orr.w	r1, r1, #1
			btn_timer = thisMls;
 8006a04:	61a0      	str	r0, [r4, #24]
			flags.btn_deb = true;
 8006a06:	7021      	strb	r1, [r4, #0]
			btn_timer = thisMls;
 8006a08:	e79f      	b.n	800694a <_ZN7GButton4tickEv+0x5e>
		flags.counter_flag = true;
 8006a0a:	7821      	ldrb	r1, [r4, #0]
		last_counter = btn_counter;
 8006a0c:	74e3      	strb	r3, [r4, #19]
		flags.counter_flag = true;
 8006a0e:	f041 0304 	orr.w	r3, r1, #4
		btn_counter = 0;
 8006a12:	74a2      	strb	r2, [r4, #18]
		flags.counter_flag = true;
 8006a14:	7023      	strb	r3, [r4, #0]
 8006a16:	e79f      	b.n	8006958 <_ZN7GButton4tickEv+0x6c>
 8006a18:	2000098c 	.word	0x2000098c

08006a1c <_Z8DWT_Initv>:

uint32_t us_count_tic;

void DWT_Init(void)
{
    SCB_DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8006a1c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8006a20:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;     // запускаем счётчик
 8006a24:	4a04      	ldr	r2, [pc, #16]	; (8006a38 <_Z8DWT_Initv+0x1c>)
    SCB_DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8006a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a2a:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;     // запускаем счётчик
 8006a2e:	6813      	ldr	r3, [r2, #0]
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	6013      	str	r3, [r2, #0]
}
 8006a36:	4770      	bx	lr
 8006a38:	e0001000 	.word	0xe0001000

08006a3c <_ZN8classLog13colorStringlnEiPKc>:
	print(s);
	print(format);
	print("\33[0m");
}
void classLog::colorStringln(int c, char const *const format)
{
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	b530      	push	{r4, r5, lr}
 8006a40:	b085      	sub	sp, #20
 8006a42:	4604      	mov	r4, r0
 8006a44:	4615      	mov	r5, r2
	sprintf(s, "\33[38;05;%dm",color);
 8006a46:	4913      	ldr	r1, [pc, #76]	; (8006a94 <_ZN8classLog13colorStringlnEiPKc+0x58>)
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4668      	mov	r0, sp
 8006a4c:	f001 fadc 	bl	8008008 <siprintf>
			HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8006a50:	4668      	mov	r0, sp
 8006a52:	f7f9 fb7d 	bl	8000150 <strlen>
 8006a56:	4669      	mov	r1, sp
 8006a58:	b282      	uxth	r2, r0
 8006a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a5e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8006a62:	f7ff fd01 	bl	8006468 <HAL_UART_Transmit>
 8006a66:	4628      	mov	r0, r5
 8006a68:	f7f9 fb72 	bl	8000150 <strlen>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	4629      	mov	r1, r5
 8006a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a74:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8006a78:	b292      	uxth	r2, r2
 8006a7a:	f7ff fcf5 	bl	8006468 <HAL_UART_Transmit>
 8006a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a82:	2205      	movs	r2, #5
 8006a84:	4904      	ldr	r1, [pc, #16]	; (8006a98 <_ZN8classLog13colorStringlnEiPKc+0x5c>)
 8006a86:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
	color(c);
	print(format);
	print("\33[0m\n");
}
 8006a8a:	b005      	add	sp, #20
 8006a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a90:	f7ff bcea 	b.w	8006468 <HAL_UART_Transmit>
 8006a94:	0800b864 	.word	0x0800b864
 8006a98:	0800b870 	.word	0x0800b870

08006a9c <_ZN10TFT_Driver12SSD1306_InitEv>:
	}

}

//Инициализация первого экрана
void TFT_Driver::SSD1306_Init(void) {
 8006a9c:	b570      	push	{r4, r5, r6, lr}
	if (LCD->hi2c)  //I2C
 8006a9e:	6801      	ldr	r1, [r0, #0]
void TFT_Driver::SSD1306_Init(void) {
 8006aa0:	4604      	mov	r4, r0
	if (LCD->hi2c)  //I2C
 8006aa2:	6908      	ldr	r0, [r1, #16]
void TFT_Driver::SSD1306_Init(void) {
 8006aa4:	b084      	sub	sp, #16
	if (LCD->hi2c)  //I2C
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	f000 819e 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006aac:	f44f 462e 	mov.w	r6, #44544	; 0xae00
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006ab0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 8006ab4:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006ab8:	2302      	movs	r3, #2
 8006aba:	7d09      	ldrb	r1, [r1, #20]
 8006abc:	aa03      	add	r2, sp, #12
 8006abe:	9500      	str	r5, [sp, #0]
 8006ac0:	f7fd fe3a 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	6918      	ldr	r0, [r3, #16]
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f000 818d 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ad2:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006ad6:	7d19      	ldrb	r1, [r3, #20]
 8006ad8:	aa03      	add	r2, sp, #12
 8006ada:	2302      	movs	r3, #2
 8006adc:	9500      	str	r5, [sp, #0]
 8006ade:	f7fd fe2b 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006ae2:	6821      	ldr	r1, [r4, #0]
 8006ae4:	6908      	ldr	r0, [r1, #16]
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f000 817e 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006aec:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8006af0:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006af4:	2302      	movs	r3, #2
 8006af6:	7d09      	ldrb	r1, [r1, #20]
 8006af8:	aa03      	add	r2, sp, #12
 8006afa:	9500      	str	r5, [sp, #0]
 8006afc:	f7fd fe1c 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	6918      	ldr	r0, [r3, #16]
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f000 816f 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006b0a:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 8006b0e:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006b12:	7d19      	ldrb	r1, [r3, #20]
 8006b14:	aa03      	add	r2, sp, #12
 8006b16:	2302      	movs	r3, #2
 8006b18:	9500      	str	r5, [sp, #0]
 8006b1a:	f7fd fe0d 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	6918      	ldr	r0, [r3, #16]
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f000 8160 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006b28:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8006b2c:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006b30:	7d19      	ldrb	r1, [r3, #20]
 8006b32:	aa03      	add	r2, sp, #12
 8006b34:	2302      	movs	r3, #2
 8006b36:	9500      	str	r5, [sp, #0]
 8006b38:	f7fd fdfe 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	6918      	ldr	r0, [r3, #16]
 8006b40:	2800      	cmp	r0, #0
 8006b42:	f000 8151 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006b4c:	7d19      	ldrb	r1, [r3, #20]
 8006b4e:	aa03      	add	r2, sp, #12
 8006b50:	2302      	movs	r3, #2
 8006b52:	9500      	str	r5, [sp, #0]
 8006b54:	f7fd fdf0 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	6918      	ldr	r0, [r3, #16]
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	f000 8143 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006b62:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006b66:	7d19      	ldrb	r1, [r3, #20]
 8006b68:	aa03      	add	r2, sp, #12
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	9500      	str	r5, [sp, #0]
 8006b6e:	f7fd fde3 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	6918      	ldr	r0, [r3, #16]
 8006b76:	2800      	cmp	r0, #0
 8006b78:	f000 8136 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006b7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b80:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006b84:	7d19      	ldrb	r1, [r3, #20]
 8006b86:	aa03      	add	r2, sp, #12
 8006b88:	2302      	movs	r3, #2
 8006b8a:	9500      	str	r5, [sp, #0]
 8006b8c:	f7fd fdd4 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	6918      	ldr	r0, [r3, #16]
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f000 8127 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006b9a:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8006b9e:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006ba2:	7d19      	ldrb	r1, [r3, #20]
 8006ba4:	aa03      	add	r2, sp, #12
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	9500      	str	r5, [sp, #0]
 8006baa:	f7fd fdc5 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006bae:	6821      	ldr	r1, [r4, #0]
 8006bb0:	6908      	ldr	r0, [r1, #16]
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f000 8118 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006bb8:	f44f 467f 	mov.w	r6, #65280	; 0xff00
 8006bbc:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	7d09      	ldrb	r1, [r1, #20]
 8006bc4:	aa03      	add	r2, sp, #12
 8006bc6:	9500      	str	r5, [sp, #0]
 8006bc8:	f7fd fdb6 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	6918      	ldr	r0, [r3, #16]
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	f000 8109 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006bd6:	f44f 4221 	mov.w	r2, #41216	; 0xa100
 8006bda:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006bde:	7d19      	ldrb	r1, [r3, #20]
 8006be0:	aa03      	add	r2, sp, #12
 8006be2:	2302      	movs	r3, #2
 8006be4:	9500      	str	r5, [sp, #0]
 8006be6:	f7fd fda7 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	6918      	ldr	r0, [r3, #16]
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f000 80fa 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006bf4:	f44f 4226 	mov.w	r2, #42496	; 0xa600
 8006bf8:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006bfc:	7d19      	ldrb	r1, [r3, #20]
 8006bfe:	aa03      	add	r2, sp, #12
 8006c00:	2302      	movs	r3, #2
 8006c02:	9500      	str	r5, [sp, #0]
 8006c04:	f7fd fd98 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	6918      	ldr	r0, [r3, #16]
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	f000 80eb 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006c12:	f44f 4228 	mov.w	r2, #43008	; 0xa800
 8006c16:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006c1a:	7d19      	ldrb	r1, [r3, #20]
 8006c1c:	aa03      	add	r2, sp, #12
 8006c1e:	2302      	movs	r3, #2
 8006c20:	9500      	str	r5, [sp, #0]
 8006c22:	f7fd fd89 	bl	8004738 <HAL_I2C_Master_Transmit>
	SSD1306_WRITECOMMAND(0xFF);
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)

	if (LCD->TFT_HEIGHT == 64)
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
	if (LCD->hi2c)  //I2C
 8006c2a:	6918      	ldr	r0, [r3, #16]
	if (LCD->TFT_HEIGHT == 64)
 8006c2c:	2a40      	cmp	r2, #64	; 0x40
 8006c2e:	f000 80dd 	beq.w	8006dec <_ZN10TFT_Driver12SSD1306_InitEv+0x350>
	if (LCD->hi2c)  //I2C
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f000 80d8 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006c38:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8006c3c:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006c40:	7d19      	ldrb	r1, [r3, #20]
 8006c42:	aa03      	add	r2, sp, #12
 8006c44:	2302      	movs	r3, #2
 8006c46:	9500      	str	r5, [sp, #0]
 8006c48:	f7fd fd76 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006c4c:	6821      	ldr	r1, [r4, #0]
 8006c4e:	6908      	ldr	r0, [r1, #16]
 8006c50:	2800      	cmp	r0, #0
 8006c52:	f000 80c9 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006c56:	f44f 4624 	mov.w	r6, #41984	; 0xa400
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006c5a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 8006c5e:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006c62:	2302      	movs	r3, #2
 8006c64:	7d09      	ldrb	r1, [r1, #20]
 8006c66:	aa03      	add	r2, sp, #12
 8006c68:	9500      	str	r5, [sp, #0]
 8006c6a:	f7fd fd65 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	6918      	ldr	r0, [r3, #16]
 8006c72:	2800      	cmp	r0, #0
 8006c74:	f000 80b8 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006c78:	f44f 4253 	mov.w	r2, #54016	; 0xd300
 8006c7c:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006c80:	7d19      	ldrb	r1, [r3, #20]
 8006c82:	aa03      	add	r2, sp, #12
 8006c84:	2302      	movs	r3, #2
 8006c86:	9500      	str	r5, [sp, #0]
 8006c88:	f7fd fd56 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	6918      	ldr	r0, [r3, #16]
 8006c90:	2800      	cmp	r0, #0
 8006c92:	f000 80a9 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006c9c:	7d19      	ldrb	r1, [r3, #20]
 8006c9e:	aa03      	add	r2, sp, #12
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	9500      	str	r5, [sp, #0]
 8006ca4:	f7fd fd48 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	6918      	ldr	r0, [r3, #16]
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f000 809b 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006cb2:	f44f 4255 	mov.w	r2, #54528	; 0xd500
 8006cb6:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006cba:	7d19      	ldrb	r1, [r3, #20]
 8006cbc:	aa03      	add	r2, sp, #12
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	9500      	str	r5, [sp, #0]
 8006cc2:	f7fd fd39 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	6918      	ldr	r0, [r3, #16]
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f000 808c 	beq.w	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006cd0:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8006cd4:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006cd8:	7d19      	ldrb	r1, [r3, #20]
 8006cda:	aa03      	add	r2, sp, #12
 8006cdc:	2302      	movs	r3, #2
 8006cde:	9500      	str	r5, [sp, #0]
 8006ce0:	f7fd fd2a 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	6918      	ldr	r0, [r3, #16]
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d07d      	beq.n	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006cec:	f44f 4259 	mov.w	r2, #55552	; 0xd900
 8006cf0:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006cf4:	7d19      	ldrb	r1, [r3, #20]
 8006cf6:	aa03      	add	r2, sp, #12
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	9500      	str	r5, [sp, #0]
 8006cfc:	f7fd fd1c 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	6918      	ldr	r0, [r3, #16]
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d06f      	beq.n	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006d08:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8006d0c:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006d10:	7d19      	ldrb	r1, [r3, #20]
 8006d12:	aa03      	add	r2, sp, #12
 8006d14:	2302      	movs	r3, #2
 8006d16:	9500      	str	r5, [sp, #0]
 8006d18:	f7fd fd0e 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	6918      	ldr	r0, [r3, #16]
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d061      	beq.n	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006d24:	f44f 425a 	mov.w	r2, #55808	; 0xda00
 8006d28:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006d2c:	7d19      	ldrb	r1, [r3, #20]
 8006d2e:	aa03      	add	r2, sp, #12
 8006d30:	2302      	movs	r3, #2
 8006d32:	9500      	str	r5, [sp, #0]
 8006d34:	f7fd fd00 	bl	8004738 <HAL_I2C_Master_Transmit>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
	SSD1306_WRITECOMMAND(0x22); //

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
	if (LCD->TFT_HEIGHT == 64)
 8006d38:	6821      	ldr	r1, [r4, #0]
 8006d3a:	684b      	ldr	r3, [r1, #4]
	if (LCD->hi2c)  //I2C
 8006d3c:	6908      	ldr	r0, [r1, #16]
	if (LCD->TFT_HEIGHT == 64)
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d059      	beq.n	8006df6 <_ZN10TFT_Driver12SSD1306_InitEv+0x35a>
	if (LCD->hi2c)  //I2C
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d050      	beq.n	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006d46:	f44f 7600 	mov.w	r6, #512	; 0x200
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006d4a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 8006d4e:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006d52:	7d09      	ldrb	r1, [r1, #20]
 8006d54:	2302      	movs	r3, #2
 8006d56:	aa03      	add	r2, sp, #12
 8006d58:	9500      	str	r5, [sp, #0]
 8006d5a:	f7fd fced 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006d5e:	6821      	ldr	r1, [r4, #0]
 8006d60:	6908      	ldr	r0, [r1, #16]
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d040      	beq.n	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006d66:	f44f 465b 	mov.w	r6, #56064	; 0xdb00
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006d6a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 8006d6e:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006d72:	2302      	movs	r3, #2
 8006d74:	7d09      	ldrb	r1, [r1, #20]
 8006d76:	aa03      	add	r2, sp, #12
 8006d78:	9500      	str	r5, [sp, #0]
 8006d7a:	f7fd fcdd 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	6918      	ldr	r0, [r3, #16]
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d030      	beq.n	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d8a:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006d8e:	7d19      	ldrb	r1, [r3, #20]
 8006d90:	aa03      	add	r2, sp, #12
 8006d92:	2302      	movs	r3, #2
 8006d94:	9500      	str	r5, [sp, #0]
 8006d96:	f7fd fccf 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	6918      	ldr	r0, [r3, #16]
 8006d9e:	b318      	cbz	r0, 8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006da0:	f44f 420d 	mov.w	r2, #36096	; 0x8d00
 8006da4:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006da8:	7d19      	ldrb	r1, [r3, #20]
 8006daa:	aa03      	add	r2, sp, #12
 8006dac:	2302      	movs	r3, #2
 8006dae:	9500      	str	r5, [sp, #0]
 8006db0:	f7fd fcc2 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	6918      	ldr	r0, [r3, #16]
 8006db8:	b1b0      	cbz	r0, 8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006dba:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006dbe:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006dc2:	7d19      	ldrb	r1, [r3, #20]
 8006dc4:	aa03      	add	r2, sp, #12
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	9500      	str	r5, [sp, #0]
 8006dca:	f7fd fcb5 	bl	8004738 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006dce:	6821      	ldr	r1, [r4, #0]
 8006dd0:	6908      	ldr	r0, [r1, #16]
 8006dd2:	b148      	cbz	r0, 8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006dd4:	f44f 442f 	mov.w	r4, #44800	; 0xaf00
 8006dd8:	f8ad 400c 	strh.w	r4, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006ddc:	7d09      	ldrb	r1, [r1, #20]
 8006dde:	2302      	movs	r3, #2
 8006de0:	aa03      	add	r2, sp, #12
 8006de2:	9500      	str	r5, [sp, #0]
 8006de4:	f7fd fca8 	bl	8004738 <HAL_I2C_Master_Transmit>
		CS_1;
    #endif
	/* Set default values */
	//uTFT.CurrentX = 0;
	//uTFT.CurrentY = 0;
}
 8006de8:	b004      	add	sp, #16
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
	if (LCD->hi2c)  //I2C
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d0fb      	beq.n	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006df0:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8006df4:	e722      	b.n	8006c3c <_ZN10TFT_Driver12SSD1306_InitEv+0x1a0>
	if (LCD->hi2c)  //I2C
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d0f6      	beq.n	8006de8 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006dfa:	f44f 5690 	mov.w	r6, #4608	; 0x1200
 8006dfe:	e7a6      	b.n	8006d4e <_ZN10TFT_Driver12SSD1306_InitEv+0x2b2>

08006e00 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>:

//490uS-72MHz
void TFT_Driver::SSD1306_UpdateScreen(void) {
	uint8_t *p;

	if (LCD->hi2c)  //I2C
 8006e00:	6803      	ldr	r3, [r0, #0]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	b902      	cbnz	r2, 8006e08 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x8>
 8006e06:	4770      	bx	lr
		//HAL_Delay(10);
#endif

		p = &LCD->buffer8[0];
		p--;
		*p = 0x40;
 8006e08:	2140      	movs	r1, #64	; 0x40
void TFT_Driver::SSD1306_UpdateScreen(void) {
 8006e0a:	b510      	push	{r4, lr}

		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8006e0c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		p = &LCD->buffer8[0];
 8006e10:	69da      	ldr	r2, [r3, #28]
void TFT_Driver::SSD1306_UpdateScreen(void) {
 8006e12:	b082      	sub	sp, #8
		*p = 0x40;
 8006e14:	f802 1c01 	strb.w	r1, [r2, #-1]
		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8006e18:	6800      	ldr	r0, [r0, #0]
 8006e1a:	3a01      	subs	r2, #1
				(LCD->TFT_HEIGHT * LCD->TFT_WIDTH) / 8 + 1, 1000);
 8006e1c:	e9d0 1300 	ldrd	r1, r3, [r0]
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bfb8      	it	lt
 8006e28:	3307      	addlt	r3, #7
 8006e2a:	10db      	asrs	r3, r3, #3
		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	7d01      	ldrb	r1, [r0, #20]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	6900      	ldr	r0, [r0, #16]
 8006e34:	9400      	str	r4, [sp, #0]
 8006e36:	f7fd fc7f 	bl	8004738 <HAL_I2C_Master_Transmit>
 8006e3a:	4b02      	ldr	r3, [pc, #8]	; (8006e44 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x44>)
 8006e3c:	7018      	strb	r0, [r3, #0]

#endif

	}

}
 8006e3e:	b002      	add	sp, #8
 8006e40:	bd10      	pop	{r4, pc}
 8006e42:	bf00      	nop
 8006e44:	20000994 	.word	0x20000994

08006e48 <_ZN3TFT8SetPixelEllt>:
#include "TFT_config.h"

#include <math.h>
#include <stdio.h>

void TFT::SetPixel(int32_t x, int32_t y, uint16_t color) {
 8006e48:	b410      	push	{r4}

	if ((x < 0) || (y < 0) || (x >= LCD->TFT_WIDTH) || (y >= LCD->TFT_HEIGHT))
 8006e4a:	ea51 0402 	orrs.w	r4, r1, r2
 8006e4e:	d40c      	bmi.n	8006e6a <_ZN3TFT8SetPixelEllt+0x22>
 8006e50:	6800      	ldr	r0, [r0, #0]
 8006e52:	6804      	ldr	r4, [r0, #0]
 8006e54:	428c      	cmp	r4, r1
 8006e56:	dd08      	ble.n	8006e6a <_ZN3TFT8SetPixelEllt+0x22>
 8006e58:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8006e5c:	4594      	cmp	ip, r2
 8006e5e:	dd04      	ble.n	8006e6a <_ZN3TFT8SetPixelEllt+0x22>
		return;

#if defined(TFT_USE_1BIT)
#if !defined (TFT_USE_ONLY_ONE_BIT_COLOR)
  if (LCD->Bit == 1)
 8006e60:	f890 c009 	ldrb.w	ip, [r0, #9]
 8006e64:	f1bc 0f01 	cmp.w	ip, #1
 8006e68:	d001      	beq.n	8006e6e <_ZN3TFT8SetPixelEllt+0x26>
		LCD->buffer16[x + y * LCD->TFT_WIDTH] = color;
		return;
	}
#endif

}
 8006e6a:	bc10      	pop	{r4}
 8006e6c:	4770      	bx	lr
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] |= 1 << (y % 8);
 8006e6e:	69c0      	ldr	r0, [r0, #28]
		if (color != 0)
 8006e70:	b163      	cbz	r3, 8006e8c <_ZN3TFT8SetPixelEllt+0x44>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] |= 1 << (y % 8);
 8006e72:	10d3      	asrs	r3, r2, #3
 8006e74:	fb04 1303 	mla	r3, r4, r3, r1
 8006e78:	f002 0207 	and.w	r2, r2, #7
 8006e7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8006e80:	5cc2      	ldrb	r2, [r0, r3]
 8006e82:	ea4c 0c02 	orr.w	ip, ip, r2
 8006e86:	f800 c003 	strb.w	ip, [r0, r3]
 8006e8a:	e7ee      	b.n	8006e6a <_ZN3TFT8SetPixelEllt+0x22>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] &= ~(1 << (y % 8));
 8006e8c:	10d3      	asrs	r3, r2, #3
 8006e8e:	fb04 1103 	mla	r1, r4, r3, r1
 8006e92:	f002 0207 	and.w	r2, r2, #7
 8006e96:	5c43      	ldrb	r3, [r0, r1]
 8006e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8006e9c:	ea23 030c 	bic.w	r3, r3, ip
 8006ea0:	5443      	strb	r3, [r0, r1]
 8006ea2:	e7e2      	b.n	8006e6a <_ZN3TFT8SetPixelEllt+0x22>

08006ea4 <_ZN3TFT5Fill1Et>:
	if (color)
		c = 0xFF;
	else
		c = 0;

	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8006ea4:	6802      	ldr	r2, [r0, #0]
	if (color)
 8006ea6:	f1b1 0c00 	subs.w	ip, r1, #0
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8006eaa:	e9d2 1300 	ldrd	r1, r3, [r2]
 8006eae:	fb01 f303 	mul.w	r3, r1, r3
	if (color)
 8006eb2:	bf18      	it	ne
 8006eb4:	f04f 0c01 	movne.w	ip, #1
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8006eb8:	2b07      	cmp	r3, #7
 8006eba:	dd16      	ble.n	8006eea <_ZN3TFT5Fill1Et+0x46>
 8006ebc:	2100      	movs	r1, #0
void TFT::Fill1(uint16_t color) {
 8006ebe:	b410      	push	{r4}
 8006ec0:	f1cc 0c00 	rsb	ip, ip, #0
 8006ec4:	fa5f fc8c 	uxtb.w	ip, ip
		LCD->buffer8[i] = c;
 8006ec8:	69d3      	ldr	r3, [r2, #28]
 8006eca:	f803 c001 	strb.w	ip, [r3, r1]
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8006ece:	6802      	ldr	r2, [r0, #0]
 8006ed0:	3101      	adds	r1, #1
 8006ed2:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006ed6:	fb04 f303 	mul.w	r3, r4, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	bfb8      	it	lt
 8006ede:	3307      	addlt	r3, #7
 8006ee0:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
 8006ee4:	dbf0      	blt.n	8006ec8 <_ZN3TFT5Fill1Et+0x24>
	return;
}
 8006ee6:	bc10      	pop	{r4}
 8006ee8:	4770      	bx	lr
 8006eea:	4770      	bx	lr

08006eec <_ZN3TFT5LineVElllt>:
			y0 += sy;
		}
	}
}

void TFT::LineV(int32_t X, int32_t Y1, int32_t Y2, uint16_t color) {
 8006eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef0:	4698      	mov	r8, r3

	if ((LCD->Bit) == 1) {
 8006ef2:	6803      	ldr	r3, [r0, #0]
void TFT::LineV(int32_t X, int32_t Y1, int32_t Y2, uint16_t color) {
 8006ef4:	4615      	mov	r5, r2
	if ((LCD->Bit) == 1) {
 8006ef6:	7a5a      	ldrb	r2, [r3, #9]
void TFT::LineV(int32_t X, int32_t Y1, int32_t Y2, uint16_t color) {
 8006ef8:	4607      	mov	r7, r0
	if ((LCD->Bit) == 1) {
 8006efa:	2a01      	cmp	r2, #1
void TFT::LineV(int32_t X, int32_t Y1, int32_t Y2, uint16_t color) {
 8006efc:	460c      	mov	r4, r1
 8006efe:	f8bd 9020 	ldrh.w	r9, [sp, #32]
	if ((LCD->Bit) == 1) {
 8006f02:	d065      	beq.n	8006fd0 <_ZN3TFT5LineVElllt+0xe4>
			for (i = Y1; i <= Y2; i++)
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] &= ~(1 << (i % 8));
		}
	}

	if ((LCD->Bit) == 4) {
 8006f04:	2a04      	cmp	r2, #4
 8006f06:	d005      	beq.n	8006f14 <_ZN3TFT5LineVElllt+0x28>
				{
			SetPixel(X, i, color);
		}
	}

	if (LCD->Bit == 16) {
 8006f08:	2a10      	cmp	r2, #16
 8006f0a:	d013      	beq.n	8006f34 <_ZN3TFT5LineVElllt+0x48>
			LCD->buffer16[X + i * LCD->TFT_WIDTH] = color;
		}
		return;
	}

	if (LCD->Bit == 8) {
 8006f0c:	2a08      	cmp	r2, #8
 8006f0e:	d03d      	beq.n	8006f8c <_ZN3TFT5LineVElllt+0xa0>
				{
			LCD->buffer8[X + i * LCD->TFT_WIDTH] = color;
		}
	}

}
 8006f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006f14:	4545      	cmp	r5, r8
 8006f16:	dcfb      	bgt.n	8006f10 <_ZN3TFT5LineVElllt+0x24>
void TFT::LineV(int32_t X, int32_t Y1, int32_t Y2, uint16_t color) {
 8006f18:	462e      	mov	r6, r5
			SetPixel(X, i, color);
 8006f1a:	4632      	mov	r2, r6
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4638      	mov	r0, r7
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006f22:	3601      	adds	r6, #1
			SetPixel(X, i, color);
 8006f24:	f7ff ff90 	bl	8006e48 <_ZN3TFT8SetPixelEllt>
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006f28:	45b0      	cmp	r8, r6
 8006f2a:	daf6      	bge.n	8006f1a <_ZN3TFT5LineVElllt+0x2e>
	if (LCD->Bit == 16) {
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	7a5a      	ldrb	r2, [r3, #9]
 8006f30:	2a10      	cmp	r2, #16
 8006f32:	d1eb      	bne.n	8006f0c <_ZN3TFT5LineVElllt+0x20>
		if (Y2 >= LCD->TFT_HEIGHT)
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	4542      	cmp	r2, r8
			Y2 = LCD->TFT_HEIGHT - 1;
 8006f38:	bfd8      	it	le
 8006f3a:	f102 38ff 	addle.w	r8, r2, #4294967295
		if (X >= LCD->TFT_WIDTH)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	42a2      	cmp	r2, r4
 8006f42:	dde5      	ble.n	8006f10 <_ZN3TFT5LineVElllt+0x24>
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006f44:	45a8      	cmp	r8, r5
 8006f46:	dbe3      	blt.n	8006f10 <_ZN3TFT5LineVElllt+0x24>
 8006f48:	2a01      	cmp	r2, #1
			LCD->buffer16[X + i * LCD->TFT_WIDTH] = color;
 8006f4a:	6999      	ldr	r1, [r3, #24]
 8006f4c:	f040 80ae 	bne.w	80070ac <_ZN3TFT5LineVElllt+0x1c0>
 8006f50:	f1c5 0601 	rsb	r6, r5, #1
 8006f54:	45a8      	cmp	r8, r5
 8006f56:	4446      	add	r6, r8
 8006f58:	d013      	beq.n	8006f82 <_ZN3TFT5LineVElllt+0x96>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	1963      	adds	r3, r4, r5
 8006f5e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006f62:	0870      	lsrs	r0, r6, #1
 8006f64:	f369 020f 	bfi	r2, r9, #0, #16
 8006f68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f6c:	f369 421f 	bfi	r2, r9, #16, #16
 8006f70:	f843 2b04 	str.w	r2, [r3], #4
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006f74:	4283      	cmp	r3, r0
 8006f76:	d1fb      	bne.n	8006f70 <_ZN3TFT5LineVElllt+0x84>
 8006f78:	f026 0301 	bic.w	r3, r6, #1
 8006f7c:	429e      	cmp	r6, r3
 8006f7e:	441d      	add	r5, r3
 8006f80:	d0c6      	beq.n	8006f10 <_ZN3TFT5LineVElllt+0x24>
			LCD->buffer16[X + i * LCD->TFT_WIDTH] = color;
 8006f82:	442c      	add	r4, r5
 8006f84:	f821 9014 	strh.w	r9, [r1, r4, lsl #1]
}
 8006f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (Y2 >= LCD->TFT_HEIGHT)
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	4542      	cmp	r2, r8
			Y2 = LCD->TFT_HEIGHT - 1;
 8006f90:	bfd8      	it	le
 8006f92:	f102 38ff 	addle.w	r8, r2, #4294967295
		if (X >= LCD->TFT_WIDTH)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	42a2      	cmp	r2, r4
 8006f9a:	ddb9      	ble.n	8006f10 <_ZN3TFT5LineVElllt+0x24>
		for (int32_t i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006f9c:	45a8      	cmp	r8, r5
 8006f9e:	dbb7      	blt.n	8006f10 <_ZN3TFT5LineVElllt+0x24>
			LCD->buffer8[X + i * LCD->TFT_WIDTH] = color;
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	fa5f f989 	uxtb.w	r9, r9
 8006fa6:	fb05 3302 	mla	r3, r5, r2, r3
		for (int32_t i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006faa:	3501      	adds	r5, #1
 8006fac:	45a8      	cmp	r8, r5
			LCD->buffer8[X + i * LCD->TFT_WIDTH] = color;
 8006fae:	f803 9004 	strb.w	r9, [r3, r4]
		for (int32_t i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006fb2:	dbad      	blt.n	8006f10 <_ZN3TFT5LineVElllt+0x24>
 8006fb4:	f108 0801 	add.w	r8, r8, #1
			LCD->buffer8[X + i * LCD->TFT_WIDTH] = color;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	fb02 3305 	mla	r3, r2, r5, r3
		for (int32_t i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006fc2:	3501      	adds	r5, #1
 8006fc4:	4545      	cmp	r5, r8
			LCD->buffer8[X + i * LCD->TFT_WIDTH] = color;
 8006fc6:	f803 9004 	strb.w	r9, [r3, r4]
		for (int32_t i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006fca:	d1f5      	bne.n	8006fb8 <_ZN3TFT5LineVElllt+0xcc>
}
 8006fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (color == 1) {
 8006fd0:	f1b9 0f01 	cmp.w	r9, #1
 8006fd4:	d037      	beq.n	8007046 <_ZN3TFT5LineVElllt+0x15a>
			for (i = Y1; i <= Y2; i++)
 8006fd6:	4545      	cmp	r5, r8
 8006fd8:	dc9a      	bgt.n	8006f10 <_ZN3TFT5LineVElllt+0x24>
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] &= ~(1 << (i % 8));
 8006fda:	462a      	mov	r2, r5
 8006fdc:	2601      	movs	r6, #1
 8006fde:	2d00      	cmp	r5, #0
 8006fe0:	6819      	ldr	r1, [r3, #0]
 8006fe2:	bfb8      	it	lt
 8006fe4:	1dea      	addlt	r2, r5, #7
 8006fe6:	10d2      	asrs	r2, r2, #3
 8006fe8:	fb01 4202 	mla	r2, r1, r2, r4
 8006fec:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8006ff0:	f005 0007 	and.w	r0, r5, #7
 8006ff4:	f81c 1002 	ldrb.w	r1, [ip, r2]
			for (i = Y1; i <= Y2; i++)
 8006ff8:	19ab      	adds	r3, r5, r6
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] &= ~(1 << (i % 8));
 8006ffa:	fa06 f000 	lsl.w	r0, r6, r0
 8006ffe:	ea21 0100 	bic.w	r1, r1, r0
			for (i = Y1; i <= Y2; i++)
 8007002:	4598      	cmp	r8, r3
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] &= ~(1 << (i % 8));
 8007004:	f80c 1002 	strb.w	r1, [ip, r2]
			for (i = Y1; i <= Y2; i++)
 8007008:	db17      	blt.n	800703a <_ZN3TFT5LineVElllt+0x14e>
 800700a:	eb08 0c06 	add.w	ip, r8, r6
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] &= ~(1 << (i % 8));
 800700e:	461a      	mov	r2, r3
	if ((LCD->Bit) == 4) {
 8007010:	6839      	ldr	r1, [r7, #0]
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] &= ~(1 << (i % 8));
 8007012:	2b00      	cmp	r3, #0
 8007014:	f8d1 a000 	ldr.w	sl, [r1]
 8007018:	bfb8      	it	lt
 800701a:	1dda      	addlt	r2, r3, #7
 800701c:	10d2      	asrs	r2, r2, #3
 800701e:	fb0a 4202 	mla	r2, sl, r2, r4
 8007022:	69c8      	ldr	r0, [r1, #28]
 8007024:	f003 0e07 	and.w	lr, r3, #7
 8007028:	5c81      	ldrb	r1, [r0, r2]
 800702a:	fa06 fe0e 	lsl.w	lr, r6, lr
			for (i = Y1; i <= Y2; i++)
 800702e:	3301      	adds	r3, #1
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] &= ~(1 << (i % 8));
 8007030:	ea21 010e 	bic.w	r1, r1, lr
			for (i = Y1; i <= Y2; i++)
 8007034:	4563      	cmp	r3, ip
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] &= ~(1 << (i % 8));
 8007036:	5481      	strb	r1, [r0, r2]
			for (i = Y1; i <= Y2; i++)
 8007038:	d1e9      	bne.n	800700e <_ZN3TFT5LineVElllt+0x122>
	if ((LCD->Bit) == 4) {
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	7a5a      	ldrb	r2, [r3, #9]
 800703e:	2a04      	cmp	r2, #4
 8007040:	f47f af62 	bne.w	8006f08 <_ZN3TFT5LineVElllt+0x1c>
 8007044:	e768      	b.n	8006f18 <_ZN3TFT5LineVElllt+0x2c>
			for (i = Y1; i <= Y2; i++)
 8007046:	4545      	cmp	r5, r8
 8007048:	f73f af62 	bgt.w	8006f10 <_ZN3TFT5LineVElllt+0x24>
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] |= 1 << (i % 8);
 800704c:	4629      	mov	r1, r5
 800704e:	2601      	movs	r6, #1
 8007050:	2d00      	cmp	r5, #0
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	bfb8      	it	lt
 8007056:	1de9      	addlt	r1, r5, #7
 8007058:	10c9      	asrs	r1, r1, #3
 800705a:	fb02 4101 	mla	r1, r2, r1, r4
 800705e:	69d8      	ldr	r0, [r3, #28]
 8007060:	f005 0307 	and.w	r3, r5, #7
 8007064:	f810 c001 	ldrb.w	ip, [r0, r1]
			for (i = Y1; i <= Y2; i++)
 8007068:	19aa      	adds	r2, r5, r6
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] |= 1 << (i % 8);
 800706a:	fa06 f303 	lsl.w	r3, r6, r3
 800706e:	ea43 030c 	orr.w	r3, r3, ip
			for (i = Y1; i <= Y2; i++)
 8007072:	4590      	cmp	r8, r2
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] |= 1 << (i % 8);
 8007074:	5443      	strb	r3, [r0, r1]
			for (i = Y1; i <= Y2; i++)
 8007076:	dbe0      	blt.n	800703a <_ZN3TFT5LineVElllt+0x14e>
 8007078:	eb08 0c06 	add.w	ip, r8, r6
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] |= 1 << (i % 8);
 800707c:	4613      	mov	r3, r2
	if ((LCD->Bit) == 4) {
 800707e:	6839      	ldr	r1, [r7, #0]
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] |= 1 << (i % 8);
 8007080:	2a00      	cmp	r2, #0
 8007082:	f8d1 e000 	ldr.w	lr, [r1]
 8007086:	bfb8      	it	lt
 8007088:	1dd3      	addlt	r3, r2, #7
 800708a:	10db      	asrs	r3, r3, #3
 800708c:	fb0e 4303 	mla	r3, lr, r3, r4
 8007090:	69c8      	ldr	r0, [r1, #28]
 8007092:	f002 0107 	and.w	r1, r2, #7
 8007096:	f810 e003 	ldrb.w	lr, [r0, r3]
 800709a:	fa06 f101 	lsl.w	r1, r6, r1
			for (i = Y1; i <= Y2; i++)
 800709e:	3201      	adds	r2, #1
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] |= 1 << (i % 8);
 80070a0:	ea41 010e 	orr.w	r1, r1, lr
			for (i = Y1; i <= Y2; i++)
 80070a4:	4562      	cmp	r2, ip
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] |= 1 << (i % 8);
 80070a6:	54c1      	strb	r1, [r0, r3]
			for (i = Y1; i <= Y2; i++)
 80070a8:	d1e8      	bne.n	800707c <_ZN3TFT5LineVElllt+0x190>
 80070aa:	e7c6      	b.n	800703a <_ZN3TFT5LineVElllt+0x14e>
 80070ac:	fb05 4302 	mla	r3, r5, r2, r4
 80070b0:	f108 0801 	add.w	r8, r8, #1
 80070b4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80070b8:	0052      	lsls	r2, r2, #1
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 80070ba:	3501      	adds	r5, #1
 80070bc:	45a8      	cmp	r8, r5
			LCD->buffer16[X + i * LCD->TFT_WIDTH] = color;
 80070be:	f8a3 9000 	strh.w	r9, [r3]
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 80070c2:	4413      	add	r3, r2
 80070c4:	d1f9      	bne.n	80070ba <_ZN3TFT5LineVElllt+0x1ce>
 80070c6:	e723      	b.n	8006f10 <_ZN3TFT5LineVElllt+0x24>

080070c8 <_ZN3TFT5LineHElllt>:

void TFT::LineH(int32_t Y, int32_t X1, int32_t X2, uint16_t color) {
 80070c8:	b5f0      	push	{r4, r5, r6, r7, lr}

	int32_t i;

	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 80070ca:	6805      	ldr	r5, [r0, #0]
void TFT::LineH(int32_t Y, int32_t X1, int32_t X2, uint16_t color) {
 80070cc:	f8bd c014 	ldrh.w	ip, [sp, #20]
	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 80070d0:	682c      	ldr	r4, [r5, #0]
	if (Y >= LCD->TFT_HEIGHT) return;
 80070d2:	686e      	ldr	r6, [r5, #4]
	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 80070d4:	429c      	cmp	r4, r3
 80070d6:	bfd8      	it	le
 80070d8:	f104 33ff 	addle.w	r3, r4, #4294967295
	if (Y >= LCD->TFT_HEIGHT) return;
 80070dc:	428e      	cmp	r6, r1
 80070de:	dd0d      	ble.n	80070fc <_ZN3TFT5LineHElllt+0x34>

	if ((LCD->Bit) == 1) {
 80070e0:	f895 e009 	ldrb.w	lr, [r5, #9]
 80070e4:	f1be 0f01 	cmp.w	lr, #1
 80070e8:	d042      	beq.n	8007170 <_ZN3TFT5LineHElllt+0xa8>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
		}
		return;
	}

	if ((LCD->Bit) == 16) {
 80070ea:	f1be 0f10 	cmp.w	lr, #16
 80070ee:	d006      	beq.n	80070fe <_ZN3TFT5LineHElllt+0x36>
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
		}
		return;
	}

	if ((LCD->Bit) == 4) {
 80070f0:	f1be 0f04 	cmp.w	lr, #4
 80070f4:	d065      	beq.n	80071c2 <_ZN3TFT5LineHElllt+0xfa>
			}
		}
		return;
	}

	if ((LCD->Bit) == 8) {
 80070f6:	f1be 0f08 	cmp.w	lr, #8
 80070fa:	d021      	beq.n	8007140 <_ZN3TFT5LineHElllt+0x78>
		for (int32_t i = X1; i <= X2; i++)
			LCD->buffer8[i + YY] = color;
		return;
	}

}
 80070fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80070fe:	4293      	cmp	r3, r2
 8007100:	dbfc      	blt.n	80070fc <_ZN3TFT5LineHElllt+0x34>
 8007102:	f1c2 0601 	rsb	r6, r2, #1
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 8007106:	fb04 f101 	mul.w	r1, r4, r1
 800710a:	69a8      	ldr	r0, [r5, #24]
 800710c:	441e      	add	r6, r3
 800710e:	d013      	beq.n	8007138 <_ZN3TFT5LineHElllt+0x70>
 8007110:	2400      	movs	r4, #0
 8007112:	188b      	adds	r3, r1, r2
 8007114:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007118:	0875      	lsrs	r5, r6, #1
 800711a:	f36c 040f 	bfi	r4, ip, #0, #16
 800711e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007122:	f36c 441f 	bfi	r4, ip, #16, #16
 8007126:	f843 4b04 	str.w	r4, [r3], #4
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800712a:	42ab      	cmp	r3, r5
 800712c:	d1fb      	bne.n	8007126 <_ZN3TFT5LineHElllt+0x5e>
 800712e:	f026 0301 	bic.w	r3, r6, #1
 8007132:	429e      	cmp	r6, r3
 8007134:	441a      	add	r2, r3
 8007136:	d0e1      	beq.n	80070fc <_ZN3TFT5LineHElllt+0x34>
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 8007138:	4411      	add	r1, r2
 800713a:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
}
 800713e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (int32_t i = X1; i <= X2; i++)
 8007140:	4293      	cmp	r3, r2
		int YY = Y * LCD->TFT_WIDTH;
 8007142:	fb01 f404 	mul.w	r4, r1, r4
		for (int32_t i = X1; i <= X2; i++)
 8007146:	dbd9      	blt.n	80070fc <_ZN3TFT5LineHElllt+0x34>
			LCD->buffer8[i + YY] = color;
 8007148:	69e9      	ldr	r1, [r5, #28]
 800714a:	fa5f fc8c 	uxtb.w	ip, ip
 800714e:	4421      	add	r1, r4
 8007150:	f801 c002 	strb.w	ip, [r1, r2]
		for (int32_t i = X1; i <= X2; i++)
 8007154:	3201      	adds	r2, #1
 8007156:	4293      	cmp	r3, r2
 8007158:	dbd0      	blt.n	80070fc <_ZN3TFT5LineHElllt+0x34>
 800715a:	4422      	add	r2, r4
 800715c:	3401      	adds	r4, #1
 800715e:	4423      	add	r3, r4
			LCD->buffer8[i + YY] = color;
 8007160:	6801      	ldr	r1, [r0, #0]
 8007162:	69c9      	ldr	r1, [r1, #28]
 8007164:	f801 c002 	strb.w	ip, [r1, r2]
		for (int32_t i = X1; i <= X2; i++)
 8007168:	3201      	adds	r2, #1
 800716a:	429a      	cmp	r2, r3
 800716c:	d1f8      	bne.n	8007160 <_ZN3TFT5LineHElllt+0x98>
}
 800716e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (color == 1) {
 8007170:	f1bc 0f01 	cmp.w	ip, #1
 8007174:	d07c      	beq.n	8007270 <_ZN3TFT5LineHElllt+0x1a8>
			for (i = X1; i <= X2; i++)
 8007176:	4293      	cmp	r3, r2
 8007178:	dbc0      	blt.n	80070fc <_ZN3TFT5LineHElllt+0x34>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 800717a:	2601      	movs	r6, #1
 800717c:	468c      	mov	ip, r1
 800717e:	2900      	cmp	r1, #0
 8007180:	bfb8      	it	lt
 8007182:	f101 0c07 	addlt.w	ip, r1, #7
 8007186:	f001 0107 	and.w	r1, r1, #7
 800718a:	408e      	lsls	r6, r1
 800718c:	43f6      	mvns	r6, r6
 800718e:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8007192:	fb0c 2404 	mla	r4, ip, r4, r2
 8007196:	69ed      	ldr	r5, [r5, #28]
			for (i = X1; i <= X2; i++)
 8007198:	3201      	adds	r2, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 800719a:	5d29      	ldrb	r1, [r5, r4]
			for (i = X1; i <= X2; i++)
 800719c:	4293      	cmp	r3, r2
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 800719e:	ea01 0106 	and.w	r1, r1, r6
 80071a2:	5529      	strb	r1, [r5, r4]
 80071a4:	b2f6      	uxtb	r6, r6
			for (i = X1; i <= X2; i++)
 80071a6:	dba9      	blt.n	80070fc <_ZN3TFT5LineHElllt+0x34>
 80071a8:	3301      	adds	r3, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80071aa:	6804      	ldr	r4, [r0, #0]
 80071ac:	6821      	ldr	r1, [r4, #0]
 80071ae:	69e5      	ldr	r5, [r4, #28]
 80071b0:	fb01 210c 	mla	r1, r1, ip, r2
 80071b4:	5c6c      	ldrb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 80071b6:	3201      	adds	r2, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80071b8:	4034      	ands	r4, r6
			for (i = X1; i <= X2; i++)
 80071ba:	4293      	cmp	r3, r2
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80071bc:	546c      	strb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 80071be:	d1f4      	bne.n	80071aa <_ZN3TFT5LineHElllt+0xe2>
}
 80071c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80071c2:	4293      	cmp	r3, r2
 80071c4:	db9a      	blt.n	80070fc <_ZN3TFT5LineHElllt+0x34>
								& (0x0F)) | (color << 4);
 80071c6:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
 80071ca:	2901      	cmp	r1, #1
 80071cc:	fa4f fe8e 	sxtb.w	lr, lr
 80071d0:	f103 0301 	add.w	r3, r3, #1
 80071d4:	d00c      	beq.n	80071f0 <_ZN3TFT5LineHElllt+0x128>
 80071d6:	e035      	b.n	8007244 <_ZN3TFT5LineHElllt+0x17c>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80071d8:	69ed      	ldr	r5, [r5, #28]
								& (0x0F)) | (color << 4);
 80071da:	5c6c      	ldrb	r4, [r5, r1]
 80071dc:	f004 040f 	and.w	r4, r4, #15
 80071e0:	ea4e 0404 	orr.w	r4, lr, r4
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 80071e4:	546c      	strb	r4, [r5, r1]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80071e6:	3201      	adds	r2, #1
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d087      	beq.n	80070fc <_ZN3TFT5LineHElllt+0x34>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80071ec:	6805      	ldr	r5, [r0, #0]
 80071ee:	682c      	ldr	r4, [r5, #0]
 80071f0:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 80071f4:	eb04 76d4 	add.w	r6, r4, r4, lsr #31
 80071f8:	1049      	asrs	r1, r1, #1
 80071fa:	eb01 0166 	add.w	r1, r1, r6, asr #1
			if (i % 2 == 0) {
 80071fe:	07d6      	lsls	r6, r2, #31
 8007200:	d5ea      	bpl.n	80071d8 <_ZN3TFT5LineHElllt+0x110>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8007202:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 8007206:	69ed      	ldr	r5, [r5, #28]
 8007208:	1049      	asrs	r1, r1, #1
 800720a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800720e:	eb01 0464 	add.w	r4, r1, r4, asr #1
								& (0xF0)) | color;
 8007212:	5d29      	ldrb	r1, [r5, r4]
 8007214:	f021 010f 	bic.w	r1, r1, #15
 8007218:	ea41 010c 	orr.w	r1, r1, ip
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 800721c:	5529      	strb	r1, [r5, r4]
 800721e:	e7e2      	b.n	80071e6 <_ZN3TFT5LineHElllt+0x11e>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8007220:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 8007224:	1064      	asrs	r4, r4, #1
 8007226:	fb01 4406 	mla	r4, r1, r6, r4
 800722a:	69ef      	ldr	r7, [r5, #28]
								& (0x0F)) | (color << 4);
 800722c:	5d3d      	ldrb	r5, [r7, r4]
 800722e:	f005 050f 	and.w	r5, r5, #15
 8007232:	ea4e 0505 	orr.w	r5, lr, r5
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8007236:	553d      	strb	r5, [r7, r4]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 8007238:	3201      	adds	r2, #1
 800723a:	429a      	cmp	r2, r3
 800723c:	f43f af5e 	beq.w	80070fc <_ZN3TFT5LineHElllt+0x34>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8007240:	6805      	ldr	r5, [r0, #0]
 8007242:	682c      	ldr	r4, [r5, #0]
 8007244:	eb04 76d4 	add.w	r6, r4, r4, lsr #31
			if (i % 2 == 0) {
 8007248:	07d7      	lsls	r7, r2, #31
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 800724a:	ea4f 0666 	mov.w	r6, r6, asr #1
			if (i % 2 == 0) {
 800724e:	d5e7      	bpl.n	8007220 <_ZN3TFT5LineHElllt+0x158>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8007250:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007254:	1066      	asrs	r6, r4, #1
 8007256:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 800725a:	1064      	asrs	r4, r4, #1
 800725c:	fb01 4406 	mla	r4, r1, r6, r4
 8007260:	69ef      	ldr	r7, [r5, #28]
								& (0xF0)) | color;
 8007262:	5d3d      	ldrb	r5, [r7, r4]
 8007264:	f025 050f 	bic.w	r5, r5, #15
 8007268:	ea45 050c 	orr.w	r5, r5, ip
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 800726c:	553d      	strb	r5, [r7, r4]
 800726e:	e7e3      	b.n	8007238 <_ZN3TFT5LineHElllt+0x170>
			for (i = X1; i <= X2; i++)
 8007270:	4293      	cmp	r3, r2
 8007272:	f6ff af43 	blt.w	80070fc <_ZN3TFT5LineHElllt+0x34>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 8007276:	460e      	mov	r6, r1
 8007278:	f04f 0c01 	mov.w	ip, #1
 800727c:	2900      	cmp	r1, #0
 800727e:	bfb8      	it	lt
 8007280:	1dce      	addlt	r6, r1, #7
 8007282:	10f6      	asrs	r6, r6, #3
 8007284:	fb06 2404 	mla	r4, r6, r4, r2
 8007288:	69ed      	ldr	r5, [r5, #28]
 800728a:	f001 0107 	and.w	r1, r1, #7
 800728e:	fa0c fc01 	lsl.w	ip, ip, r1
 8007292:	5d29      	ldrb	r1, [r5, r4]
			for (i = X1; i <= X2; i++)
 8007294:	3201      	adds	r2, #1
 8007296:	fa5f fc8c 	uxtb.w	ip, ip
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 800729a:	ea4c 0101 	orr.w	r1, ip, r1
			for (i = X1; i <= X2; i++)
 800729e:	4293      	cmp	r3, r2
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80072a0:	5529      	strb	r1, [r5, r4]
			for (i = X1; i <= X2; i++)
 80072a2:	f6ff af2b 	blt.w	80070fc <_ZN3TFT5LineHElllt+0x34>
 80072a6:	3301      	adds	r3, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80072a8:	6804      	ldr	r4, [r0, #0]
 80072aa:	6821      	ldr	r1, [r4, #0]
 80072ac:	69e5      	ldr	r5, [r4, #28]
 80072ae:	fb01 2106 	mla	r1, r1, r6, r2
 80072b2:	5c6c      	ldrb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 80072b4:	3201      	adds	r2, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80072b6:	ea4c 0404 	orr.w	r4, ip, r4
			for (i = X1; i <= X2; i++)
 80072ba:	429a      	cmp	r2, r3
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80072bc:	546c      	strb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 80072be:	d1f3      	bne.n	80072a8 <_ZN3TFT5LineHElllt+0x1e0>
}
 80072c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c2:	bf00      	nop

080072c4 <_ZN3TFT6LineHWElllt>:
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
		}

}

void TFT::LineHW(int32_t x, int32_t y, int32_t w, uint16_t color) {
 80072c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 80072c6:	6805      	ldr	r5, [r0, #0]
	LineH(y, x, x + w - 1, color);
 80072c8:	440b      	add	r3, r1
	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 80072ca:	682c      	ldr	r4, [r5, #0]
	LineH(y, x, x + w - 1, color);
 80072cc:	3b01      	subs	r3, #1
	if (Y >= LCD->TFT_HEIGHT) return;
 80072ce:	686e      	ldr	r6, [r5, #4]
	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	bfa8      	it	ge
 80072d4:	f104 33ff 	addge.w	r3, r4, #4294967295
	if (Y >= LCD->TFT_HEIGHT) return;
 80072d8:	42b2      	cmp	r2, r6
void TFT::LineHW(int32_t x, int32_t y, int32_t w, uint16_t color) {
 80072da:	f8bd c014 	ldrh.w	ip, [sp, #20]
	if (Y >= LCD->TFT_HEIGHT) return;
 80072de:	da0d      	bge.n	80072fc <_ZN3TFT6LineHWElllt+0x38>
	if ((LCD->Bit) == 1) {
 80072e0:	f895 e009 	ldrb.w	lr, [r5, #9]
 80072e4:	f1be 0f01 	cmp.w	lr, #1
 80072e8:	d043      	beq.n	8007372 <_ZN3TFT6LineHWElllt+0xae>
	if ((LCD->Bit) == 16) {
 80072ea:	f1be 0f10 	cmp.w	lr, #16
 80072ee:	d006      	beq.n	80072fe <_ZN3TFT6LineHWElllt+0x3a>
	if ((LCD->Bit) == 4) {
 80072f0:	f1be 0f04 	cmp.w	lr, #4
 80072f4:	d066      	beq.n	80073c4 <_ZN3TFT6LineHWElllt+0x100>
	if ((LCD->Bit) == 8) {
 80072f6:	f1be 0f08 	cmp.w	lr, #8
 80072fa:	d022      	beq.n	8007342 <_ZN3TFT6LineHWElllt+0x7e>
}
 80072fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80072fe:	4299      	cmp	r1, r3
 8007300:	dcfc      	bgt.n	80072fc <_ZN3TFT6LineHWElllt+0x38>
 8007302:	f1c1 0601 	rsb	r6, r1, #1
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 8007306:	fb04 f202 	mul.w	r2, r4, r2
 800730a:	69a8      	ldr	r0, [r5, #24]
 800730c:	441e      	add	r6, r3
 800730e:	d014      	beq.n	800733a <_ZN3TFT6LineHWElllt+0x76>
 8007310:	2400      	movs	r4, #0
 8007312:	1853      	adds	r3, r2, r1
 8007314:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007318:	0875      	lsrs	r5, r6, #1
 800731a:	f36c 040f 	bfi	r4, ip, #0, #16
 800731e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007322:	f36c 441f 	bfi	r4, ip, #16, #16
 8007326:	f843 4b04 	str.w	r4, [r3], #4
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800732a:	42ab      	cmp	r3, r5
 800732c:	d1fb      	bne.n	8007326 <_ZN3TFT6LineHWElllt+0x62>
 800732e:	f026 0401 	bic.w	r4, r6, #1
 8007332:	42a6      	cmp	r6, r4
 8007334:	eb04 0301 	add.w	r3, r4, r1
 8007338:	d0e0      	beq.n	80072fc <_ZN3TFT6LineHWElllt+0x38>
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 800733a:	441a      	add	r2, r3
 800733c:	f820 c012 	strh.w	ip, [r0, r2, lsl #1]
}
 8007340:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (int32_t i = X1; i <= X2; i++)
 8007342:	4299      	cmp	r1, r3
		int YY = Y * LCD->TFT_WIDTH;
 8007344:	fb04 f202 	mul.w	r2, r4, r2
		for (int32_t i = X1; i <= X2; i++)
 8007348:	dcd8      	bgt.n	80072fc <_ZN3TFT6LineHWElllt+0x38>
			LCD->buffer8[i + YY] = color;
 800734a:	69ec      	ldr	r4, [r5, #28]
 800734c:	fa5f fc8c 	uxtb.w	ip, ip
 8007350:	4414      	add	r4, r2
 8007352:	f804 c001 	strb.w	ip, [r4, r1]
		for (int32_t i = X1; i <= X2; i++)
 8007356:	3101      	adds	r1, #1
 8007358:	428b      	cmp	r3, r1
 800735a:	dbcf      	blt.n	80072fc <_ZN3TFT6LineHWElllt+0x38>
 800735c:	4411      	add	r1, r2
 800735e:	3201      	adds	r2, #1
 8007360:	4413      	add	r3, r2
			LCD->buffer8[i + YY] = color;
 8007362:	6802      	ldr	r2, [r0, #0]
 8007364:	69d2      	ldr	r2, [r2, #28]
 8007366:	f802 c001 	strb.w	ip, [r2, r1]
		for (int32_t i = X1; i <= X2; i++)
 800736a:	3101      	adds	r1, #1
 800736c:	4299      	cmp	r1, r3
 800736e:	d1f8      	bne.n	8007362 <_ZN3TFT6LineHWElllt+0x9e>
}
 8007370:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (color == 1) {
 8007372:	f1bc 0f01 	cmp.w	ip, #1
 8007376:	d07c      	beq.n	8007472 <_ZN3TFT6LineHWElllt+0x1ae>
			for (i = X1; i <= X2; i++)
 8007378:	4299      	cmp	r1, r3
 800737a:	dcbf      	bgt.n	80072fc <_ZN3TFT6LineHWElllt+0x38>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 800737c:	2601      	movs	r6, #1
 800737e:	4694      	mov	ip, r2
 8007380:	2a00      	cmp	r2, #0
 8007382:	bfb8      	it	lt
 8007384:	f102 0c07 	addlt.w	ip, r2, #7
 8007388:	f002 0207 	and.w	r2, r2, #7
 800738c:	4096      	lsls	r6, r2
 800738e:	43f6      	mvns	r6, r6
 8007390:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8007394:	fb0c 1404 	mla	r4, ip, r4, r1
 8007398:	69ed      	ldr	r5, [r5, #28]
			for (i = X1; i <= X2; i++)
 800739a:	3101      	adds	r1, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 800739c:	5d2a      	ldrb	r2, [r5, r4]
			for (i = X1; i <= X2; i++)
 800739e:	428b      	cmp	r3, r1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80073a0:	ea02 0206 	and.w	r2, r2, r6
 80073a4:	552a      	strb	r2, [r5, r4]
 80073a6:	b2f6      	uxtb	r6, r6
			for (i = X1; i <= X2; i++)
 80073a8:	dba8      	blt.n	80072fc <_ZN3TFT6LineHWElllt+0x38>
 80073aa:	3301      	adds	r3, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80073ac:	6804      	ldr	r4, [r0, #0]
 80073ae:	6822      	ldr	r2, [r4, #0]
 80073b0:	69e5      	ldr	r5, [r4, #28]
 80073b2:	fb02 120c 	mla	r2, r2, ip, r1
 80073b6:	5cac      	ldrb	r4, [r5, r2]
			for (i = X1; i <= X2; i++)
 80073b8:	3101      	adds	r1, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80073ba:	4034      	ands	r4, r6
			for (i = X1; i <= X2; i++)
 80073bc:	4299      	cmp	r1, r3
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80073be:	54ac      	strb	r4, [r5, r2]
			for (i = X1; i <= X2; i++)
 80073c0:	d1f4      	bne.n	80073ac <_ZN3TFT6LineHWElllt+0xe8>
}
 80073c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80073c4:	4299      	cmp	r1, r3
 80073c6:	dc99      	bgt.n	80072fc <_ZN3TFT6LineHWElllt+0x38>
								& (0x0F)) | (color << 4);
 80073c8:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
 80073cc:	2a01      	cmp	r2, #1
 80073ce:	fa4f fe8e 	sxtb.w	lr, lr
 80073d2:	f103 0301 	add.w	r3, r3, #1
 80073d6:	d00c      	beq.n	80073f2 <_ZN3TFT6LineHWElllt+0x12e>
 80073d8:	e035      	b.n	8007446 <_ZN3TFT6LineHWElllt+0x182>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80073da:	69ed      	ldr	r5, [r5, #28]
								& (0x0F)) | (color << 4);
 80073dc:	5cac      	ldrb	r4, [r5, r2]
 80073de:	f004 040f 	and.w	r4, r4, #15
 80073e2:	ea4e 0404 	orr.w	r4, lr, r4
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 80073e6:	54ac      	strb	r4, [r5, r2]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80073e8:	3101      	adds	r1, #1
 80073ea:	4299      	cmp	r1, r3
 80073ec:	d086      	beq.n	80072fc <_ZN3TFT6LineHWElllt+0x38>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80073ee:	6805      	ldr	r5, [r0, #0]
 80073f0:	682c      	ldr	r4, [r5, #0]
 80073f2:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
 80073f6:	eb04 76d4 	add.w	r6, r4, r4, lsr #31
 80073fa:	1052      	asrs	r2, r2, #1
 80073fc:	eb02 0266 	add.w	r2, r2, r6, asr #1
			if (i % 2 == 0) {
 8007400:	07ce      	lsls	r6, r1, #31
 8007402:	d5ea      	bpl.n	80073da <_ZN3TFT6LineHWElllt+0x116>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8007404:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
 8007408:	69ed      	ldr	r5, [r5, #28]
 800740a:	1052      	asrs	r2, r2, #1
 800740c:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007410:	eb02 0464 	add.w	r4, r2, r4, asr #1
								& (0xF0)) | color;
 8007414:	5d2a      	ldrb	r2, [r5, r4]
 8007416:	f022 020f 	bic.w	r2, r2, #15
 800741a:	ea42 020c 	orr.w	r2, r2, ip
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 800741e:	552a      	strb	r2, [r5, r4]
 8007420:	e7e2      	b.n	80073e8 <_ZN3TFT6LineHWElllt+0x124>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8007422:	eb01 74d1 	add.w	r4, r1, r1, lsr #31
 8007426:	1064      	asrs	r4, r4, #1
 8007428:	fb02 4406 	mla	r4, r2, r6, r4
 800742c:	69ef      	ldr	r7, [r5, #28]
								& (0x0F)) | (color << 4);
 800742e:	5d3d      	ldrb	r5, [r7, r4]
 8007430:	f005 050f 	and.w	r5, r5, #15
 8007434:	ea4e 0505 	orr.w	r5, lr, r5
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8007438:	553d      	strb	r5, [r7, r4]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800743a:	3101      	adds	r1, #1
 800743c:	4299      	cmp	r1, r3
 800743e:	f43f af5d 	beq.w	80072fc <_ZN3TFT6LineHWElllt+0x38>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8007442:	6805      	ldr	r5, [r0, #0]
 8007444:	682c      	ldr	r4, [r5, #0]
 8007446:	eb04 76d4 	add.w	r6, r4, r4, lsr #31
			if (i % 2 == 0) {
 800744a:	07cf      	lsls	r7, r1, #31
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 800744c:	ea4f 0666 	mov.w	r6, r6, asr #1
			if (i % 2 == 0) {
 8007450:	d5e7      	bpl.n	8007422 <_ZN3TFT6LineHWElllt+0x15e>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8007452:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007456:	1066      	asrs	r6, r4, #1
 8007458:	eb01 74d1 	add.w	r4, r1, r1, lsr #31
 800745c:	1064      	asrs	r4, r4, #1
 800745e:	fb02 4406 	mla	r4, r2, r6, r4
 8007462:	69ef      	ldr	r7, [r5, #28]
								& (0xF0)) | color;
 8007464:	5d3d      	ldrb	r5, [r7, r4]
 8007466:	f025 050f 	bic.w	r5, r5, #15
 800746a:	ea45 050c 	orr.w	r5, r5, ip
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 800746e:	553d      	strb	r5, [r7, r4]
 8007470:	e7e3      	b.n	800743a <_ZN3TFT6LineHWElllt+0x176>
			for (i = X1; i <= X2; i++)
 8007472:	4299      	cmp	r1, r3
 8007474:	f73f af42 	bgt.w	80072fc <_ZN3TFT6LineHWElllt+0x38>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 8007478:	4616      	mov	r6, r2
 800747a:	f04f 0c01 	mov.w	ip, #1
 800747e:	2a00      	cmp	r2, #0
 8007480:	bfb8      	it	lt
 8007482:	1dd6      	addlt	r6, r2, #7
 8007484:	10f6      	asrs	r6, r6, #3
 8007486:	fb06 1404 	mla	r4, r6, r4, r1
 800748a:	69ed      	ldr	r5, [r5, #28]
 800748c:	f002 0207 	and.w	r2, r2, #7
 8007490:	fa0c fc02 	lsl.w	ip, ip, r2
 8007494:	5d2a      	ldrb	r2, [r5, r4]
			for (i = X1; i <= X2; i++)
 8007496:	3101      	adds	r1, #1
 8007498:	fa5f fc8c 	uxtb.w	ip, ip
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 800749c:	ea4c 0202 	orr.w	r2, ip, r2
			for (i = X1; i <= X2; i++)
 80074a0:	428b      	cmp	r3, r1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80074a2:	552a      	strb	r2, [r5, r4]
			for (i = X1; i <= X2; i++)
 80074a4:	f6ff af2a 	blt.w	80072fc <_ZN3TFT6LineHWElllt+0x38>
 80074a8:	3301      	adds	r3, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80074aa:	6804      	ldr	r4, [r0, #0]
 80074ac:	6822      	ldr	r2, [r4, #0]
 80074ae:	69e5      	ldr	r5, [r4, #28]
 80074b0:	fb02 1206 	mla	r2, r2, r6, r1
 80074b4:	5cac      	ldrb	r4, [r5, r2]
			for (i = X1; i <= X2; i++)
 80074b6:	3101      	adds	r1, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80074b8:	ea4c 0404 	orr.w	r4, ip, r4
			for (i = X1; i <= X2; i++)
 80074bc:	4299      	cmp	r1, r3
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80074be:	54ac      	strb	r4, [r5, r2]
			for (i = X1; i <= X2; i++)
 80074c0:	d1f3      	bne.n	80074aa <_ZN3TFT6LineHWElllt+0x1e6>
}
 80074c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074c4 <_ZN3TFT9RectangleEllttt>:
	LineMoveX = x;
	LineMoveY = y;
}

// ----- Rectagle ----
void TFT::Rectangle(int32_t x, int32_t y, uint16_t w, uint16_t h, uint16_t c) {
 80074c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074c8:	4616      	mov	r6, r2
	/* Check input parameters */
	if (x >= LCD->TFT_WIDTH || y >= LCD->TFT_HEIGHT) return;
 80074ca:	6802      	ldr	r2, [r0, #0]
void TFT::Rectangle(int32_t x, int32_t y, uint16_t w, uint16_t h, uint16_t c) {
 80074cc:	b083      	sub	sp, #12
	if (x >= LCD->TFT_WIDTH || y >= LCD->TFT_HEIGHT) return;
 80074ce:	6817      	ldr	r7, [r2, #0]
void TFT::Rectangle(int32_t x, int32_t y, uint16_t w, uint16_t h, uint16_t c) {
 80074d0:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
	if (x >= LCD->TFT_WIDTH || y >= LCD->TFT_HEIGHT) return;
 80074d4:	428f      	cmp	r7, r1
void TFT::Rectangle(int32_t x, int32_t y, uint16_t w, uint16_t h, uint16_t c) {
 80074d6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
	if (x >= LCD->TFT_WIDTH || y >= LCD->TFT_HEIGHT) return;
 80074da:	dd02      	ble.n	80074e2 <_ZN3TFT9RectangleEllttt+0x1e>
 80074dc:	6852      	ldr	r2, [r2, #4]
 80074de:	42b2      	cmp	r2, r6
 80074e0:	dc02      	bgt.n	80074e8 <_ZN3TFT9RectangleEllttt+0x24>
	LineH(y, x, x + w, c);
	LineH(y + h, x, x + w, c);

	LineV(x, y, y + h, c);
	LineV(x + w, y, y + h, c);
}
 80074e2:	b003      	add	sp, #12
 80074e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e8:	4605      	mov	r5, r0
 80074ea:	460c      	mov	r4, r1
	LineH(y, x, x + w, c);
 80074ec:	185f      	adds	r7, r3, r1
	LineH(y + h, x, x + w, c);
 80074ee:	eb0c 0906 	add.w	r9, ip, r6
	LineH(y, x, x + w, c);
 80074f2:	463b      	mov	r3, r7
 80074f4:	460a      	mov	r2, r1
 80074f6:	f8cd 8000 	str.w	r8, [sp]
 80074fa:	4631      	mov	r1, r6
 80074fc:	f7ff fde4 	bl	80070c8 <_ZN3TFT5LineHElllt>
	LineH(y + h, x, x + w, c);
 8007500:	463b      	mov	r3, r7
 8007502:	4622      	mov	r2, r4
 8007504:	4649      	mov	r1, r9
 8007506:	4628      	mov	r0, r5
 8007508:	f8cd 8000 	str.w	r8, [sp]
 800750c:	f7ff fddc 	bl	80070c8 <_ZN3TFT5LineHElllt>
	LineV(x, y, y + h, c);
 8007510:	4621      	mov	r1, r4
 8007512:	464b      	mov	r3, r9
 8007514:	4632      	mov	r2, r6
 8007516:	4628      	mov	r0, r5
 8007518:	f8cd 8000 	str.w	r8, [sp]
 800751c:	f7ff fce6 	bl	8006eec <_ZN3TFT5LineVElllt>
	LineV(x + w, y, y + h, c);
 8007520:	464b      	mov	r3, r9
 8007522:	4632      	mov	r2, r6
 8007524:	4639      	mov	r1, r7
 8007526:	4628      	mov	r0, r5
 8007528:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
}
 800752c:	b003      	add	sp, #12
 800752e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	LineV(x + w, y, y + h, c);
 8007532:	f7ff bcdb 	b.w	8006eec <_ZN3TFT5LineVElllt>
 8007536:	bf00      	nop

08007538 <modff>:
 8007538:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800753c:	3b7f      	subs	r3, #127	; 0x7f
 800753e:	2b16      	cmp	r3, #22
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	460e      	mov	r6, r1
 8007546:	4605      	mov	r5, r0
 8007548:	dc16      	bgt.n	8007578 <modff+0x40>
 800754a:	2b00      	cmp	r3, #0
 800754c:	da04      	bge.n	8007558 <modff+0x20>
 800754e:	f000 4500 	and.w	r5, r0, #2147483648	; 0x80000000
 8007552:	600d      	str	r5, [r1, #0]
 8007554:	4620      	mov	r0, r4
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	4a0d      	ldr	r2, [pc, #52]	; (8007590 <modff+0x58>)
 800755a:	fa42 f303 	asr.w	r3, r2, r3
 800755e:	4218      	tst	r0, r3
 8007560:	d103      	bne.n	800756a <modff+0x32>
 8007562:	6030      	str	r0, [r6, #0]
 8007564:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007568:	e7f4      	b.n	8007554 <modff+0x1c>
 800756a:	ea20 0103 	bic.w	r1, r0, r3
 800756e:	6031      	str	r1, [r6, #0]
 8007570:	f7f9 fade 	bl	8000b30 <__aeabi_fsub>
 8007574:	4604      	mov	r4, r0
 8007576:	e7ed      	b.n	8007554 <modff+0x1c>
 8007578:	6008      	str	r0, [r1, #0]
 800757a:	f000 f80b 	bl	8007594 <__fpclassifyf>
 800757e:	2800      	cmp	r0, #0
 8007580:	d1f0      	bne.n	8007564 <modff+0x2c>
 8007582:	4621      	mov	r1, r4
 8007584:	4620      	mov	r0, r4
 8007586:	f7f9 fad5 	bl	8000b34 <__addsf3>
 800758a:	4604      	mov	r4, r0
 800758c:	6030      	str	r0, [r6, #0]
 800758e:	e7e1      	b.n	8007554 <modff+0x1c>
 8007590:	007fffff 	.word	0x007fffff

08007594 <__fpclassifyf>:
 8007594:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 8007598:	d00d      	beq.n	80075b6 <__fpclassifyf+0x22>
 800759a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800759e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80075a2:	d30a      	bcc.n	80075ba <__fpclassifyf+0x26>
 80075a4:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <__fpclassifyf+0x30>)
 80075a6:	1e42      	subs	r2, r0, #1
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d908      	bls.n	80075be <__fpclassifyf+0x2a>
 80075ac:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80075b0:	4258      	negs	r0, r3
 80075b2:	4158      	adcs	r0, r3
 80075b4:	4770      	bx	lr
 80075b6:	2002      	movs	r0, #2
 80075b8:	4770      	bx	lr
 80075ba:	2004      	movs	r0, #4
 80075bc:	4770      	bx	lr
 80075be:	2003      	movs	r0, #3
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	007ffffe 	.word	0x007ffffe

080075c8 <__cvt>:
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ce:	461f      	mov	r7, r3
 80075d0:	bfbb      	ittet	lt
 80075d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80075d6:	461f      	movlt	r7, r3
 80075d8:	2300      	movge	r3, #0
 80075da:	232d      	movlt	r3, #45	; 0x2d
 80075dc:	b088      	sub	sp, #32
 80075de:	4614      	mov	r4, r2
 80075e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80075e4:	7013      	strb	r3, [r2, #0]
 80075e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80075ec:	f023 0820 	bic.w	r8, r3, #32
 80075f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075f4:	d005      	beq.n	8007602 <__cvt+0x3a>
 80075f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075fa:	d100      	bne.n	80075fe <__cvt+0x36>
 80075fc:	3501      	adds	r5, #1
 80075fe:	2302      	movs	r3, #2
 8007600:	e000      	b.n	8007604 <__cvt+0x3c>
 8007602:	2303      	movs	r3, #3
 8007604:	aa07      	add	r2, sp, #28
 8007606:	9204      	str	r2, [sp, #16]
 8007608:	aa06      	add	r2, sp, #24
 800760a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800760e:	e9cd 3500 	strd	r3, r5, [sp]
 8007612:	4622      	mov	r2, r4
 8007614:	463b      	mov	r3, r7
 8007616:	f000 fe73 	bl	8008300 <_dtoa_r>
 800761a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800761e:	4606      	mov	r6, r0
 8007620:	d102      	bne.n	8007628 <__cvt+0x60>
 8007622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007624:	07db      	lsls	r3, r3, #31
 8007626:	d522      	bpl.n	800766e <__cvt+0xa6>
 8007628:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800762c:	eb06 0905 	add.w	r9, r6, r5
 8007630:	d110      	bne.n	8007654 <__cvt+0x8c>
 8007632:	7833      	ldrb	r3, [r6, #0]
 8007634:	2b30      	cmp	r3, #48	; 0x30
 8007636:	d10a      	bne.n	800764e <__cvt+0x86>
 8007638:	2200      	movs	r2, #0
 800763a:	2300      	movs	r3, #0
 800763c:	4620      	mov	r0, r4
 800763e:	4639      	mov	r1, r7
 8007640:	f7f9 f9b2 	bl	80009a8 <__aeabi_dcmpeq>
 8007644:	b918      	cbnz	r0, 800764e <__cvt+0x86>
 8007646:	f1c5 0501 	rsb	r5, r5, #1
 800764a:	f8ca 5000 	str.w	r5, [sl]
 800764e:	f8da 3000 	ldr.w	r3, [sl]
 8007652:	4499      	add	r9, r3
 8007654:	2200      	movs	r2, #0
 8007656:	2300      	movs	r3, #0
 8007658:	4620      	mov	r0, r4
 800765a:	4639      	mov	r1, r7
 800765c:	f7f9 f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8007660:	b108      	cbz	r0, 8007666 <__cvt+0x9e>
 8007662:	f8cd 901c 	str.w	r9, [sp, #28]
 8007666:	2230      	movs	r2, #48	; 0x30
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	454b      	cmp	r3, r9
 800766c:	d307      	bcc.n	800767e <__cvt+0xb6>
 800766e:	4630      	mov	r0, r6
 8007670:	9b07      	ldr	r3, [sp, #28]
 8007672:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007674:	1b9b      	subs	r3, r3, r6
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	b008      	add	sp, #32
 800767a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767e:	1c59      	adds	r1, r3, #1
 8007680:	9107      	str	r1, [sp, #28]
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	e7f0      	b.n	8007668 <__cvt+0xa0>

08007686 <__exponent>:
 8007686:	4603      	mov	r3, r0
 8007688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800768a:	2900      	cmp	r1, #0
 800768c:	f803 2b02 	strb.w	r2, [r3], #2
 8007690:	bfb6      	itet	lt
 8007692:	222d      	movlt	r2, #45	; 0x2d
 8007694:	222b      	movge	r2, #43	; 0x2b
 8007696:	4249      	neglt	r1, r1
 8007698:	2909      	cmp	r1, #9
 800769a:	7042      	strb	r2, [r0, #1]
 800769c:	dd2a      	ble.n	80076f4 <__exponent+0x6e>
 800769e:	f10d 0207 	add.w	r2, sp, #7
 80076a2:	4617      	mov	r7, r2
 80076a4:	260a      	movs	r6, #10
 80076a6:	fb91 f5f6 	sdiv	r5, r1, r6
 80076aa:	4694      	mov	ip, r2
 80076ac:	fb06 1415 	mls	r4, r6, r5, r1
 80076b0:	3430      	adds	r4, #48	; 0x30
 80076b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80076b6:	460c      	mov	r4, r1
 80076b8:	2c63      	cmp	r4, #99	; 0x63
 80076ba:	4629      	mov	r1, r5
 80076bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80076c0:	dcf1      	bgt.n	80076a6 <__exponent+0x20>
 80076c2:	3130      	adds	r1, #48	; 0x30
 80076c4:	f1ac 0402 	sub.w	r4, ip, #2
 80076c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80076cc:	4622      	mov	r2, r4
 80076ce:	1c41      	adds	r1, r0, #1
 80076d0:	42ba      	cmp	r2, r7
 80076d2:	d30a      	bcc.n	80076ea <__exponent+0x64>
 80076d4:	f10d 0209 	add.w	r2, sp, #9
 80076d8:	eba2 020c 	sub.w	r2, r2, ip
 80076dc:	42bc      	cmp	r4, r7
 80076de:	bf88      	it	hi
 80076e0:	2200      	movhi	r2, #0
 80076e2:	4413      	add	r3, r2
 80076e4:	1a18      	subs	r0, r3, r0
 80076e6:	b003      	add	sp, #12
 80076e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80076ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80076f2:	e7ed      	b.n	80076d0 <__exponent+0x4a>
 80076f4:	2330      	movs	r3, #48	; 0x30
 80076f6:	3130      	adds	r1, #48	; 0x30
 80076f8:	7083      	strb	r3, [r0, #2]
 80076fa:	70c1      	strb	r1, [r0, #3]
 80076fc:	1d03      	adds	r3, r0, #4
 80076fe:	e7f1      	b.n	80076e4 <__exponent+0x5e>

08007700 <_printf_float>:
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	b091      	sub	sp, #68	; 0x44
 8007706:	460c      	mov	r4, r1
 8007708:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800770c:	4616      	mov	r6, r2
 800770e:	461f      	mov	r7, r3
 8007710:	4605      	mov	r5, r0
 8007712:	f000 fce5 	bl	80080e0 <_localeconv_r>
 8007716:	6803      	ldr	r3, [r0, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	9309      	str	r3, [sp, #36]	; 0x24
 800771c:	f7f8 fd18 	bl	8000150 <strlen>
 8007720:	2300      	movs	r3, #0
 8007722:	930e      	str	r3, [sp, #56]	; 0x38
 8007724:	f8d8 3000 	ldr.w	r3, [r8]
 8007728:	900a      	str	r0, [sp, #40]	; 0x28
 800772a:	3307      	adds	r3, #7
 800772c:	f023 0307 	bic.w	r3, r3, #7
 8007730:	f103 0208 	add.w	r2, r3, #8
 8007734:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007738:	f8d4 b000 	ldr.w	fp, [r4]
 800773c:	f8c8 2000 	str.w	r2, [r8]
 8007740:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007744:	4652      	mov	r2, sl
 8007746:	4643      	mov	r3, r8
 8007748:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800774c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007750:	930b      	str	r3, [sp, #44]	; 0x2c
 8007752:	f04f 32ff 	mov.w	r2, #4294967295
 8007756:	4650      	mov	r0, sl
 8007758:	4b9c      	ldr	r3, [pc, #624]	; (80079cc <_printf_float+0x2cc>)
 800775a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800775c:	f7f9 f956 	bl	8000a0c <__aeabi_dcmpun>
 8007760:	bb70      	cbnz	r0, 80077c0 <_printf_float+0xc0>
 8007762:	f04f 32ff 	mov.w	r2, #4294967295
 8007766:	4650      	mov	r0, sl
 8007768:	4b98      	ldr	r3, [pc, #608]	; (80079cc <_printf_float+0x2cc>)
 800776a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800776c:	f7f9 f930 	bl	80009d0 <__aeabi_dcmple>
 8007770:	bb30      	cbnz	r0, 80077c0 <_printf_float+0xc0>
 8007772:	2200      	movs	r2, #0
 8007774:	2300      	movs	r3, #0
 8007776:	4650      	mov	r0, sl
 8007778:	4641      	mov	r1, r8
 800777a:	f7f9 f91f 	bl	80009bc <__aeabi_dcmplt>
 800777e:	b110      	cbz	r0, 8007786 <_printf_float+0x86>
 8007780:	232d      	movs	r3, #45	; 0x2d
 8007782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007786:	4a92      	ldr	r2, [pc, #584]	; (80079d0 <_printf_float+0x2d0>)
 8007788:	4b92      	ldr	r3, [pc, #584]	; (80079d4 <_printf_float+0x2d4>)
 800778a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800778e:	bf94      	ite	ls
 8007790:	4690      	movls	r8, r2
 8007792:	4698      	movhi	r8, r3
 8007794:	2303      	movs	r3, #3
 8007796:	f04f 0a00 	mov.w	sl, #0
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	f02b 0304 	bic.w	r3, fp, #4
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	4633      	mov	r3, r6
 80077a4:	4621      	mov	r1, r4
 80077a6:	4628      	mov	r0, r5
 80077a8:	9700      	str	r7, [sp, #0]
 80077aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80077ac:	f000 f9d6 	bl	8007b5c <_printf_common>
 80077b0:	3001      	adds	r0, #1
 80077b2:	f040 8090 	bne.w	80078d6 <_printf_float+0x1d6>
 80077b6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ba:	b011      	add	sp, #68	; 0x44
 80077bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c0:	4652      	mov	r2, sl
 80077c2:	4643      	mov	r3, r8
 80077c4:	4650      	mov	r0, sl
 80077c6:	4641      	mov	r1, r8
 80077c8:	f7f9 f920 	bl	8000a0c <__aeabi_dcmpun>
 80077cc:	b148      	cbz	r0, 80077e2 <_printf_float+0xe2>
 80077ce:	f1b8 0f00 	cmp.w	r8, #0
 80077d2:	bfb8      	it	lt
 80077d4:	232d      	movlt	r3, #45	; 0x2d
 80077d6:	4a80      	ldr	r2, [pc, #512]	; (80079d8 <_printf_float+0x2d8>)
 80077d8:	bfb8      	it	lt
 80077da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077de:	4b7f      	ldr	r3, [pc, #508]	; (80079dc <_printf_float+0x2dc>)
 80077e0:	e7d3      	b.n	800778a <_printf_float+0x8a>
 80077e2:	6863      	ldr	r3, [r4, #4]
 80077e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	d142      	bne.n	8007872 <_printf_float+0x172>
 80077ec:	2306      	movs	r3, #6
 80077ee:	6063      	str	r3, [r4, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	9206      	str	r2, [sp, #24]
 80077f4:	aa0e      	add	r2, sp, #56	; 0x38
 80077f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80077fa:	aa0d      	add	r2, sp, #52	; 0x34
 80077fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007800:	9203      	str	r2, [sp, #12]
 8007802:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007806:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800780a:	6023      	str	r3, [r4, #0]
 800780c:	6863      	ldr	r3, [r4, #4]
 800780e:	4652      	mov	r2, sl
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	4628      	mov	r0, r5
 8007814:	4643      	mov	r3, r8
 8007816:	910b      	str	r1, [sp, #44]	; 0x2c
 8007818:	f7ff fed6 	bl	80075c8 <__cvt>
 800781c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800781e:	4680      	mov	r8, r0
 8007820:	2947      	cmp	r1, #71	; 0x47
 8007822:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007824:	d108      	bne.n	8007838 <_printf_float+0x138>
 8007826:	1cc8      	adds	r0, r1, #3
 8007828:	db02      	blt.n	8007830 <_printf_float+0x130>
 800782a:	6863      	ldr	r3, [r4, #4]
 800782c:	4299      	cmp	r1, r3
 800782e:	dd40      	ble.n	80078b2 <_printf_float+0x1b2>
 8007830:	f1a9 0902 	sub.w	r9, r9, #2
 8007834:	fa5f f989 	uxtb.w	r9, r9
 8007838:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800783c:	d81f      	bhi.n	800787e <_printf_float+0x17e>
 800783e:	464a      	mov	r2, r9
 8007840:	3901      	subs	r1, #1
 8007842:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007846:	910d      	str	r1, [sp, #52]	; 0x34
 8007848:	f7ff ff1d 	bl	8007686 <__exponent>
 800784c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800784e:	4682      	mov	sl, r0
 8007850:	1813      	adds	r3, r2, r0
 8007852:	2a01      	cmp	r2, #1
 8007854:	6123      	str	r3, [r4, #16]
 8007856:	dc02      	bgt.n	800785e <_printf_float+0x15e>
 8007858:	6822      	ldr	r2, [r4, #0]
 800785a:	07d2      	lsls	r2, r2, #31
 800785c:	d501      	bpl.n	8007862 <_printf_float+0x162>
 800785e:	3301      	adds	r3, #1
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007866:	2b00      	cmp	r3, #0
 8007868:	d09b      	beq.n	80077a2 <_printf_float+0xa2>
 800786a:	232d      	movs	r3, #45	; 0x2d
 800786c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007870:	e797      	b.n	80077a2 <_printf_float+0xa2>
 8007872:	2947      	cmp	r1, #71	; 0x47
 8007874:	d1bc      	bne.n	80077f0 <_printf_float+0xf0>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1ba      	bne.n	80077f0 <_printf_float+0xf0>
 800787a:	2301      	movs	r3, #1
 800787c:	e7b7      	b.n	80077ee <_printf_float+0xee>
 800787e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007882:	d118      	bne.n	80078b6 <_printf_float+0x1b6>
 8007884:	2900      	cmp	r1, #0
 8007886:	6863      	ldr	r3, [r4, #4]
 8007888:	dd0b      	ble.n	80078a2 <_printf_float+0x1a2>
 800788a:	6121      	str	r1, [r4, #16]
 800788c:	b913      	cbnz	r3, 8007894 <_printf_float+0x194>
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	07d0      	lsls	r0, r2, #31
 8007892:	d502      	bpl.n	800789a <_printf_float+0x19a>
 8007894:	3301      	adds	r3, #1
 8007896:	440b      	add	r3, r1
 8007898:	6123      	str	r3, [r4, #16]
 800789a:	f04f 0a00 	mov.w	sl, #0
 800789e:	65a1      	str	r1, [r4, #88]	; 0x58
 80078a0:	e7df      	b.n	8007862 <_printf_float+0x162>
 80078a2:	b913      	cbnz	r3, 80078aa <_printf_float+0x1aa>
 80078a4:	6822      	ldr	r2, [r4, #0]
 80078a6:	07d2      	lsls	r2, r2, #31
 80078a8:	d501      	bpl.n	80078ae <_printf_float+0x1ae>
 80078aa:	3302      	adds	r3, #2
 80078ac:	e7f4      	b.n	8007898 <_printf_float+0x198>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e7f2      	b.n	8007898 <_printf_float+0x198>
 80078b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80078b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b8:	4299      	cmp	r1, r3
 80078ba:	db05      	blt.n	80078c8 <_printf_float+0x1c8>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	6121      	str	r1, [r4, #16]
 80078c0:	07d8      	lsls	r0, r3, #31
 80078c2:	d5ea      	bpl.n	800789a <_printf_float+0x19a>
 80078c4:	1c4b      	adds	r3, r1, #1
 80078c6:	e7e7      	b.n	8007898 <_printf_float+0x198>
 80078c8:	2900      	cmp	r1, #0
 80078ca:	bfcc      	ite	gt
 80078cc:	2201      	movgt	r2, #1
 80078ce:	f1c1 0202 	rsble	r2, r1, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	e7e0      	b.n	8007898 <_printf_float+0x198>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	055a      	lsls	r2, r3, #21
 80078da:	d407      	bmi.n	80078ec <_printf_float+0x1ec>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	4642      	mov	r2, r8
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	d12b      	bne.n	8007942 <_printf_float+0x242>
 80078ea:	e764      	b.n	80077b6 <_printf_float+0xb6>
 80078ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80078f0:	f240 80dd 	bls.w	8007aae <_printf_float+0x3ae>
 80078f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078f8:	2200      	movs	r2, #0
 80078fa:	2300      	movs	r3, #0
 80078fc:	f7f9 f854 	bl	80009a8 <__aeabi_dcmpeq>
 8007900:	2800      	cmp	r0, #0
 8007902:	d033      	beq.n	800796c <_printf_float+0x26c>
 8007904:	2301      	movs	r3, #1
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	4a35      	ldr	r2, [pc, #212]	; (80079e0 <_printf_float+0x2e0>)
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f43f af51 	beq.w	80077b6 <_printf_float+0xb6>
 8007914:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007918:	429a      	cmp	r2, r3
 800791a:	db02      	blt.n	8007922 <_printf_float+0x222>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	07d8      	lsls	r0, r3, #31
 8007920:	d50f      	bpl.n	8007942 <_printf_float+0x242>
 8007922:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	47b8      	blx	r7
 800792c:	3001      	adds	r0, #1
 800792e:	f43f af42 	beq.w	80077b6 <_printf_float+0xb6>
 8007932:	f04f 0800 	mov.w	r8, #0
 8007936:	f104 091a 	add.w	r9, r4, #26
 800793a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800793c:	3b01      	subs	r3, #1
 800793e:	4543      	cmp	r3, r8
 8007940:	dc09      	bgt.n	8007956 <_printf_float+0x256>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	079b      	lsls	r3, r3, #30
 8007946:	f100 8104 	bmi.w	8007b52 <_printf_float+0x452>
 800794a:	68e0      	ldr	r0, [r4, #12]
 800794c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800794e:	4298      	cmp	r0, r3
 8007950:	bfb8      	it	lt
 8007952:	4618      	movlt	r0, r3
 8007954:	e731      	b.n	80077ba <_printf_float+0xba>
 8007956:	2301      	movs	r3, #1
 8007958:	464a      	mov	r2, r9
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	f43f af28 	beq.w	80077b6 <_printf_float+0xb6>
 8007966:	f108 0801 	add.w	r8, r8, #1
 800796a:	e7e6      	b.n	800793a <_printf_float+0x23a>
 800796c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800796e:	2b00      	cmp	r3, #0
 8007970:	dc38      	bgt.n	80079e4 <_printf_float+0x2e4>
 8007972:	2301      	movs	r3, #1
 8007974:	4631      	mov	r1, r6
 8007976:	4628      	mov	r0, r5
 8007978:	4a19      	ldr	r2, [pc, #100]	; (80079e0 <_printf_float+0x2e0>)
 800797a:	47b8      	blx	r7
 800797c:	3001      	adds	r0, #1
 800797e:	f43f af1a 	beq.w	80077b6 <_printf_float+0xb6>
 8007982:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007986:	4313      	orrs	r3, r2
 8007988:	d102      	bne.n	8007990 <_printf_float+0x290>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	07d9      	lsls	r1, r3, #31
 800798e:	d5d8      	bpl.n	8007942 <_printf_float+0x242>
 8007990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007994:	4631      	mov	r1, r6
 8007996:	4628      	mov	r0, r5
 8007998:	47b8      	blx	r7
 800799a:	3001      	adds	r0, #1
 800799c:	f43f af0b 	beq.w	80077b6 <_printf_float+0xb6>
 80079a0:	f04f 0900 	mov.w	r9, #0
 80079a4:	f104 0a1a 	add.w	sl, r4, #26
 80079a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079aa:	425b      	negs	r3, r3
 80079ac:	454b      	cmp	r3, r9
 80079ae:	dc01      	bgt.n	80079b4 <_printf_float+0x2b4>
 80079b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079b2:	e794      	b.n	80078de <_printf_float+0x1de>
 80079b4:	2301      	movs	r3, #1
 80079b6:	4652      	mov	r2, sl
 80079b8:	4631      	mov	r1, r6
 80079ba:	4628      	mov	r0, r5
 80079bc:	47b8      	blx	r7
 80079be:	3001      	adds	r0, #1
 80079c0:	f43f aef9 	beq.w	80077b6 <_printf_float+0xb6>
 80079c4:	f109 0901 	add.w	r9, r9, #1
 80079c8:	e7ee      	b.n	80079a8 <_printf_float+0x2a8>
 80079ca:	bf00      	nop
 80079cc:	7fefffff 	.word	0x7fefffff
 80079d0:	0800cd40 	.word	0x0800cd40
 80079d4:	0800cd44 	.word	0x0800cd44
 80079d8:	0800cd48 	.word	0x0800cd48
 80079dc:	0800cd4c 	.word	0x0800cd4c
 80079e0:	0800cd50 	.word	0x0800cd50
 80079e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079e8:	429a      	cmp	r2, r3
 80079ea:	bfa8      	it	ge
 80079ec:	461a      	movge	r2, r3
 80079ee:	2a00      	cmp	r2, #0
 80079f0:	4691      	mov	r9, r2
 80079f2:	dc37      	bgt.n	8007a64 <_printf_float+0x364>
 80079f4:	f04f 0b00 	mov.w	fp, #0
 80079f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079fc:	f104 021a 	add.w	r2, r4, #26
 8007a00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007a04:	ebaa 0309 	sub.w	r3, sl, r9
 8007a08:	455b      	cmp	r3, fp
 8007a0a:	dc33      	bgt.n	8007a74 <_printf_float+0x374>
 8007a0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a10:	429a      	cmp	r2, r3
 8007a12:	db3b      	blt.n	8007a8c <_printf_float+0x38c>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	07da      	lsls	r2, r3, #31
 8007a18:	d438      	bmi.n	8007a8c <_printf_float+0x38c>
 8007a1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007a1e:	eba2 0903 	sub.w	r9, r2, r3
 8007a22:	eba2 020a 	sub.w	r2, r2, sl
 8007a26:	4591      	cmp	r9, r2
 8007a28:	bfa8      	it	ge
 8007a2a:	4691      	movge	r9, r2
 8007a2c:	f1b9 0f00 	cmp.w	r9, #0
 8007a30:	dc34      	bgt.n	8007a9c <_printf_float+0x39c>
 8007a32:	f04f 0800 	mov.w	r8, #0
 8007a36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a3a:	f104 0a1a 	add.w	sl, r4, #26
 8007a3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a42:	1a9b      	subs	r3, r3, r2
 8007a44:	eba3 0309 	sub.w	r3, r3, r9
 8007a48:	4543      	cmp	r3, r8
 8007a4a:	f77f af7a 	ble.w	8007942 <_printf_float+0x242>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4652      	mov	r2, sl
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	f43f aeac 	beq.w	80077b6 <_printf_float+0xb6>
 8007a5e:	f108 0801 	add.w	r8, r8, #1
 8007a62:	e7ec      	b.n	8007a3e <_printf_float+0x33e>
 8007a64:	4613      	mov	r3, r2
 8007a66:	4631      	mov	r1, r6
 8007a68:	4642      	mov	r2, r8
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d1c0      	bne.n	80079f4 <_printf_float+0x2f4>
 8007a72:	e6a0      	b.n	80077b6 <_printf_float+0xb6>
 8007a74:	2301      	movs	r3, #1
 8007a76:	4631      	mov	r1, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f ae99 	beq.w	80077b6 <_printf_float+0xb6>
 8007a84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a86:	f10b 0b01 	add.w	fp, fp, #1
 8007a8a:	e7b9      	b.n	8007a00 <_printf_float+0x300>
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	d1bf      	bne.n	8007a1a <_printf_float+0x31a>
 8007a9a:	e68c      	b.n	80077b6 <_printf_float+0xb6>
 8007a9c:	464b      	mov	r3, r9
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	eb08 020a 	add.w	r2, r8, sl
 8007aa6:	47b8      	blx	r7
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d1c2      	bne.n	8007a32 <_printf_float+0x332>
 8007aac:	e683      	b.n	80077b6 <_printf_float+0xb6>
 8007aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ab0:	2a01      	cmp	r2, #1
 8007ab2:	dc01      	bgt.n	8007ab8 <_printf_float+0x3b8>
 8007ab4:	07db      	lsls	r3, r3, #31
 8007ab6:	d539      	bpl.n	8007b2c <_printf_float+0x42c>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	4642      	mov	r2, r8
 8007abc:	4631      	mov	r1, r6
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b8      	blx	r7
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	f43f ae77 	beq.w	80077b6 <_printf_float+0xb6>
 8007ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007acc:	4631      	mov	r1, r6
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f43f ae6f 	beq.w	80077b6 <_printf_float+0xb6>
 8007ad8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007adc:	2200      	movs	r2, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007ae4:	f7f8 ff60 	bl	80009a8 <__aeabi_dcmpeq>
 8007ae8:	b9d8      	cbnz	r0, 8007b22 <_printf_float+0x422>
 8007aea:	f109 33ff 	add.w	r3, r9, #4294967295
 8007aee:	f108 0201 	add.w	r2, r8, #1
 8007af2:	4631      	mov	r1, r6
 8007af4:	4628      	mov	r0, r5
 8007af6:	47b8      	blx	r7
 8007af8:	3001      	adds	r0, #1
 8007afa:	d10e      	bne.n	8007b1a <_printf_float+0x41a>
 8007afc:	e65b      	b.n	80077b6 <_printf_float+0xb6>
 8007afe:	2301      	movs	r3, #1
 8007b00:	464a      	mov	r2, r9
 8007b02:	4631      	mov	r1, r6
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b8      	blx	r7
 8007b08:	3001      	adds	r0, #1
 8007b0a:	f43f ae54 	beq.w	80077b6 <_printf_float+0xb6>
 8007b0e:	f108 0801 	add.w	r8, r8, #1
 8007b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b14:	3b01      	subs	r3, #1
 8007b16:	4543      	cmp	r3, r8
 8007b18:	dcf1      	bgt.n	8007afe <_printf_float+0x3fe>
 8007b1a:	4653      	mov	r3, sl
 8007b1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b20:	e6de      	b.n	80078e0 <_printf_float+0x1e0>
 8007b22:	f04f 0800 	mov.w	r8, #0
 8007b26:	f104 091a 	add.w	r9, r4, #26
 8007b2a:	e7f2      	b.n	8007b12 <_printf_float+0x412>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	4642      	mov	r2, r8
 8007b30:	e7df      	b.n	8007af2 <_printf_float+0x3f2>
 8007b32:	2301      	movs	r3, #1
 8007b34:	464a      	mov	r2, r9
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b8      	blx	r7
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	f43f ae3a 	beq.w	80077b6 <_printf_float+0xb6>
 8007b42:	f108 0801 	add.w	r8, r8, #1
 8007b46:	68e3      	ldr	r3, [r4, #12]
 8007b48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b4a:	1a5b      	subs	r3, r3, r1
 8007b4c:	4543      	cmp	r3, r8
 8007b4e:	dcf0      	bgt.n	8007b32 <_printf_float+0x432>
 8007b50:	e6fb      	b.n	800794a <_printf_float+0x24a>
 8007b52:	f04f 0800 	mov.w	r8, #0
 8007b56:	f104 0919 	add.w	r9, r4, #25
 8007b5a:	e7f4      	b.n	8007b46 <_printf_float+0x446>

08007b5c <_printf_common>:
 8007b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	4616      	mov	r6, r2
 8007b62:	4699      	mov	r9, r3
 8007b64:	688a      	ldr	r2, [r1, #8]
 8007b66:	690b      	ldr	r3, [r1, #16]
 8007b68:	4607      	mov	r7, r0
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	bfb8      	it	lt
 8007b6e:	4613      	movlt	r3, r2
 8007b70:	6033      	str	r3, [r6, #0]
 8007b72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b76:	460c      	mov	r4, r1
 8007b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b7c:	b10a      	cbz	r2, 8007b82 <_printf_common+0x26>
 8007b7e:	3301      	adds	r3, #1
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	0699      	lsls	r1, r3, #26
 8007b86:	bf42      	ittt	mi
 8007b88:	6833      	ldrmi	r3, [r6, #0]
 8007b8a:	3302      	addmi	r3, #2
 8007b8c:	6033      	strmi	r3, [r6, #0]
 8007b8e:	6825      	ldr	r5, [r4, #0]
 8007b90:	f015 0506 	ands.w	r5, r5, #6
 8007b94:	d106      	bne.n	8007ba4 <_printf_common+0x48>
 8007b96:	f104 0a19 	add.w	sl, r4, #25
 8007b9a:	68e3      	ldr	r3, [r4, #12]
 8007b9c:	6832      	ldr	r2, [r6, #0]
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	42ab      	cmp	r3, r5
 8007ba2:	dc2b      	bgt.n	8007bfc <_printf_common+0xa0>
 8007ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ba8:	1e13      	subs	r3, r2, #0
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	bf18      	it	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	0692      	lsls	r2, r2, #26
 8007bb2:	d430      	bmi.n	8007c16 <_printf_common+0xba>
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bbc:	47c0      	blx	r8
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	d023      	beq.n	8007c0a <_printf_common+0xae>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	6922      	ldr	r2, [r4, #16]
 8007bc6:	f003 0306 	and.w	r3, r3, #6
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	bf14      	ite	ne
 8007bce:	2500      	movne	r5, #0
 8007bd0:	6833      	ldreq	r3, [r6, #0]
 8007bd2:	f04f 0600 	mov.w	r6, #0
 8007bd6:	bf08      	it	eq
 8007bd8:	68e5      	ldreq	r5, [r4, #12]
 8007bda:	f104 041a 	add.w	r4, r4, #26
 8007bde:	bf08      	it	eq
 8007be0:	1aed      	subeq	r5, r5, r3
 8007be2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007be6:	bf08      	it	eq
 8007be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bec:	4293      	cmp	r3, r2
 8007bee:	bfc4      	itt	gt
 8007bf0:	1a9b      	subgt	r3, r3, r2
 8007bf2:	18ed      	addgt	r5, r5, r3
 8007bf4:	42b5      	cmp	r5, r6
 8007bf6:	d11a      	bne.n	8007c2e <_printf_common+0xd2>
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	e008      	b.n	8007c0e <_printf_common+0xb2>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4652      	mov	r2, sl
 8007c00:	4649      	mov	r1, r9
 8007c02:	4638      	mov	r0, r7
 8007c04:	47c0      	blx	r8
 8007c06:	3001      	adds	r0, #1
 8007c08:	d103      	bne.n	8007c12 <_printf_common+0xb6>
 8007c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c12:	3501      	adds	r5, #1
 8007c14:	e7c1      	b.n	8007b9a <_printf_common+0x3e>
 8007c16:	2030      	movs	r0, #48	; 0x30
 8007c18:	18e1      	adds	r1, r4, r3
 8007c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c24:	4422      	add	r2, r4
 8007c26:	3302      	adds	r3, #2
 8007c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c2c:	e7c2      	b.n	8007bb4 <_printf_common+0x58>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4622      	mov	r2, r4
 8007c32:	4649      	mov	r1, r9
 8007c34:	4638      	mov	r0, r7
 8007c36:	47c0      	blx	r8
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d0e6      	beq.n	8007c0a <_printf_common+0xae>
 8007c3c:	3601      	adds	r6, #1
 8007c3e:	e7d9      	b.n	8007bf4 <_printf_common+0x98>

08007c40 <_printf_i>:
 8007c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	7e0f      	ldrb	r7, [r1, #24]
 8007c46:	4691      	mov	r9, r2
 8007c48:	2f78      	cmp	r7, #120	; 0x78
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	469a      	mov	sl, r3
 8007c50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c56:	d807      	bhi.n	8007c68 <_printf_i+0x28>
 8007c58:	2f62      	cmp	r7, #98	; 0x62
 8007c5a:	d80a      	bhi.n	8007c72 <_printf_i+0x32>
 8007c5c:	2f00      	cmp	r7, #0
 8007c5e:	f000 80d5 	beq.w	8007e0c <_printf_i+0x1cc>
 8007c62:	2f58      	cmp	r7, #88	; 0x58
 8007c64:	f000 80c1 	beq.w	8007dea <_printf_i+0x1aa>
 8007c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c70:	e03a      	b.n	8007ce8 <_printf_i+0xa8>
 8007c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c76:	2b15      	cmp	r3, #21
 8007c78:	d8f6      	bhi.n	8007c68 <_printf_i+0x28>
 8007c7a:	a101      	add	r1, pc, #4	; (adr r1, 8007c80 <_printf_i+0x40>)
 8007c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c80:	08007cd9 	.word	0x08007cd9
 8007c84:	08007ced 	.word	0x08007ced
 8007c88:	08007c69 	.word	0x08007c69
 8007c8c:	08007c69 	.word	0x08007c69
 8007c90:	08007c69 	.word	0x08007c69
 8007c94:	08007c69 	.word	0x08007c69
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007c69 	.word	0x08007c69
 8007ca0:	08007c69 	.word	0x08007c69
 8007ca4:	08007c69 	.word	0x08007c69
 8007ca8:	08007c69 	.word	0x08007c69
 8007cac:	08007df3 	.word	0x08007df3
 8007cb0:	08007d19 	.word	0x08007d19
 8007cb4:	08007dad 	.word	0x08007dad
 8007cb8:	08007c69 	.word	0x08007c69
 8007cbc:	08007c69 	.word	0x08007c69
 8007cc0:	08007e15 	.word	0x08007e15
 8007cc4:	08007c69 	.word	0x08007c69
 8007cc8:	08007d19 	.word	0x08007d19
 8007ccc:	08007c69 	.word	0x08007c69
 8007cd0:	08007c69 	.word	0x08007c69
 8007cd4:	08007db5 	.word	0x08007db5
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	1d1a      	adds	r2, r3, #4
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	602a      	str	r2, [r5, #0]
 8007ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e0a0      	b.n	8007e2e <_printf_i+0x1ee>
 8007cec:	6820      	ldr	r0, [r4, #0]
 8007cee:	682b      	ldr	r3, [r5, #0]
 8007cf0:	0607      	lsls	r7, r0, #24
 8007cf2:	f103 0104 	add.w	r1, r3, #4
 8007cf6:	6029      	str	r1, [r5, #0]
 8007cf8:	d501      	bpl.n	8007cfe <_printf_i+0xbe>
 8007cfa:	681e      	ldr	r6, [r3, #0]
 8007cfc:	e003      	b.n	8007d06 <_printf_i+0xc6>
 8007cfe:	0646      	lsls	r6, r0, #25
 8007d00:	d5fb      	bpl.n	8007cfa <_printf_i+0xba>
 8007d02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d06:	2e00      	cmp	r6, #0
 8007d08:	da03      	bge.n	8007d12 <_printf_i+0xd2>
 8007d0a:	232d      	movs	r3, #45	; 0x2d
 8007d0c:	4276      	negs	r6, r6
 8007d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d12:	230a      	movs	r3, #10
 8007d14:	4859      	ldr	r0, [pc, #356]	; (8007e7c <_printf_i+0x23c>)
 8007d16:	e012      	b.n	8007d3e <_printf_i+0xfe>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	6820      	ldr	r0, [r4, #0]
 8007d1c:	1d19      	adds	r1, r3, #4
 8007d1e:	6029      	str	r1, [r5, #0]
 8007d20:	0605      	lsls	r5, r0, #24
 8007d22:	d501      	bpl.n	8007d28 <_printf_i+0xe8>
 8007d24:	681e      	ldr	r6, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <_printf_i+0xee>
 8007d28:	0641      	lsls	r1, r0, #25
 8007d2a:	d5fb      	bpl.n	8007d24 <_printf_i+0xe4>
 8007d2c:	881e      	ldrh	r6, [r3, #0]
 8007d2e:	2f6f      	cmp	r7, #111	; 0x6f
 8007d30:	bf0c      	ite	eq
 8007d32:	2308      	moveq	r3, #8
 8007d34:	230a      	movne	r3, #10
 8007d36:	4851      	ldr	r0, [pc, #324]	; (8007e7c <_printf_i+0x23c>)
 8007d38:	2100      	movs	r1, #0
 8007d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d3e:	6865      	ldr	r5, [r4, #4]
 8007d40:	2d00      	cmp	r5, #0
 8007d42:	bfa8      	it	ge
 8007d44:	6821      	ldrge	r1, [r4, #0]
 8007d46:	60a5      	str	r5, [r4, #8]
 8007d48:	bfa4      	itt	ge
 8007d4a:	f021 0104 	bicge.w	r1, r1, #4
 8007d4e:	6021      	strge	r1, [r4, #0]
 8007d50:	b90e      	cbnz	r6, 8007d56 <_printf_i+0x116>
 8007d52:	2d00      	cmp	r5, #0
 8007d54:	d04b      	beq.n	8007dee <_printf_i+0x1ae>
 8007d56:	4615      	mov	r5, r2
 8007d58:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d5c:	fb03 6711 	mls	r7, r3, r1, r6
 8007d60:	5dc7      	ldrb	r7, [r0, r7]
 8007d62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d66:	4637      	mov	r7, r6
 8007d68:	42bb      	cmp	r3, r7
 8007d6a:	460e      	mov	r6, r1
 8007d6c:	d9f4      	bls.n	8007d58 <_printf_i+0x118>
 8007d6e:	2b08      	cmp	r3, #8
 8007d70:	d10b      	bne.n	8007d8a <_printf_i+0x14a>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	07de      	lsls	r6, r3, #31
 8007d76:	d508      	bpl.n	8007d8a <_printf_i+0x14a>
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	6861      	ldr	r1, [r4, #4]
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	bfde      	ittt	le
 8007d80:	2330      	movle	r3, #48	; 0x30
 8007d82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d8a:	1b52      	subs	r2, r2, r5
 8007d8c:	6122      	str	r2, [r4, #16]
 8007d8e:	464b      	mov	r3, r9
 8007d90:	4621      	mov	r1, r4
 8007d92:	4640      	mov	r0, r8
 8007d94:	f8cd a000 	str.w	sl, [sp]
 8007d98:	aa03      	add	r2, sp, #12
 8007d9a:	f7ff fedf 	bl	8007b5c <_printf_common>
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d14a      	bne.n	8007e38 <_printf_i+0x1f8>
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	b004      	add	sp, #16
 8007da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	f043 0320 	orr.w	r3, r3, #32
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	2778      	movs	r7, #120	; 0x78
 8007db6:	4832      	ldr	r0, [pc, #200]	; (8007e80 <_printf_i+0x240>)
 8007db8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	6829      	ldr	r1, [r5, #0]
 8007dc0:	061f      	lsls	r7, r3, #24
 8007dc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8007dc6:	d402      	bmi.n	8007dce <_printf_i+0x18e>
 8007dc8:	065f      	lsls	r7, r3, #25
 8007dca:	bf48      	it	mi
 8007dcc:	b2b6      	uxthmi	r6, r6
 8007dce:	07df      	lsls	r7, r3, #31
 8007dd0:	bf48      	it	mi
 8007dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8007dd6:	6029      	str	r1, [r5, #0]
 8007dd8:	bf48      	it	mi
 8007dda:	6023      	strmi	r3, [r4, #0]
 8007ddc:	b91e      	cbnz	r6, 8007de6 <_printf_i+0x1a6>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	f023 0320 	bic.w	r3, r3, #32
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	2310      	movs	r3, #16
 8007de8:	e7a6      	b.n	8007d38 <_printf_i+0xf8>
 8007dea:	4824      	ldr	r0, [pc, #144]	; (8007e7c <_printf_i+0x23c>)
 8007dec:	e7e4      	b.n	8007db8 <_printf_i+0x178>
 8007dee:	4615      	mov	r5, r2
 8007df0:	e7bd      	b.n	8007d6e <_printf_i+0x12e>
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	6826      	ldr	r6, [r4, #0]
 8007df6:	1d18      	adds	r0, r3, #4
 8007df8:	6961      	ldr	r1, [r4, #20]
 8007dfa:	6028      	str	r0, [r5, #0]
 8007dfc:	0635      	lsls	r5, r6, #24
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	d501      	bpl.n	8007e06 <_printf_i+0x1c6>
 8007e02:	6019      	str	r1, [r3, #0]
 8007e04:	e002      	b.n	8007e0c <_printf_i+0x1cc>
 8007e06:	0670      	lsls	r0, r6, #25
 8007e08:	d5fb      	bpl.n	8007e02 <_printf_i+0x1c2>
 8007e0a:	8019      	strh	r1, [r3, #0]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4615      	mov	r5, r2
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	e7bc      	b.n	8007d8e <_printf_i+0x14e>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	2100      	movs	r1, #0
 8007e18:	1d1a      	adds	r2, r3, #4
 8007e1a:	602a      	str	r2, [r5, #0]
 8007e1c:	681d      	ldr	r5, [r3, #0]
 8007e1e:	6862      	ldr	r2, [r4, #4]
 8007e20:	4628      	mov	r0, r5
 8007e22:	f000 f9d4 	bl	80081ce <memchr>
 8007e26:	b108      	cbz	r0, 8007e2c <_printf_i+0x1ec>
 8007e28:	1b40      	subs	r0, r0, r5
 8007e2a:	6060      	str	r0, [r4, #4]
 8007e2c:	6863      	ldr	r3, [r4, #4]
 8007e2e:	6123      	str	r3, [r4, #16]
 8007e30:	2300      	movs	r3, #0
 8007e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e36:	e7aa      	b.n	8007d8e <_printf_i+0x14e>
 8007e38:	462a      	mov	r2, r5
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	6923      	ldr	r3, [r4, #16]
 8007e40:	47d0      	blx	sl
 8007e42:	3001      	adds	r0, #1
 8007e44:	d0ad      	beq.n	8007da2 <_printf_i+0x162>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	079b      	lsls	r3, r3, #30
 8007e4a:	d413      	bmi.n	8007e74 <_printf_i+0x234>
 8007e4c:	68e0      	ldr	r0, [r4, #12]
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	4298      	cmp	r0, r3
 8007e52:	bfb8      	it	lt
 8007e54:	4618      	movlt	r0, r3
 8007e56:	e7a6      	b.n	8007da6 <_printf_i+0x166>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4632      	mov	r2, r6
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	4640      	mov	r0, r8
 8007e60:	47d0      	blx	sl
 8007e62:	3001      	adds	r0, #1
 8007e64:	d09d      	beq.n	8007da2 <_printf_i+0x162>
 8007e66:	3501      	adds	r5, #1
 8007e68:	68e3      	ldr	r3, [r4, #12]
 8007e6a:	9903      	ldr	r1, [sp, #12]
 8007e6c:	1a5b      	subs	r3, r3, r1
 8007e6e:	42ab      	cmp	r3, r5
 8007e70:	dcf2      	bgt.n	8007e58 <_printf_i+0x218>
 8007e72:	e7eb      	b.n	8007e4c <_printf_i+0x20c>
 8007e74:	2500      	movs	r5, #0
 8007e76:	f104 0619 	add.w	r6, r4, #25
 8007e7a:	e7f5      	b.n	8007e68 <_printf_i+0x228>
 8007e7c:	0800cd52 	.word	0x0800cd52
 8007e80:	0800cd63 	.word	0x0800cd63

08007e84 <std>:
 8007e84:	2300      	movs	r3, #0
 8007e86:	b510      	push	{r4, lr}
 8007e88:	4604      	mov	r4, r0
 8007e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e92:	6083      	str	r3, [r0, #8]
 8007e94:	8181      	strh	r1, [r0, #12]
 8007e96:	6643      	str	r3, [r0, #100]	; 0x64
 8007e98:	81c2      	strh	r2, [r0, #14]
 8007e9a:	6183      	str	r3, [r0, #24]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	2208      	movs	r2, #8
 8007ea0:	305c      	adds	r0, #92	; 0x5c
 8007ea2:	f000 f914 	bl	80080ce <memset>
 8007ea6:	4b0d      	ldr	r3, [pc, #52]	; (8007edc <std+0x58>)
 8007ea8:	6224      	str	r4, [r4, #32]
 8007eaa:	6263      	str	r3, [r4, #36]	; 0x24
 8007eac:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <std+0x5c>)
 8007eae:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <std+0x60>)
 8007eb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <std+0x64>)
 8007eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <std+0x68>)
 8007eba:	429c      	cmp	r4, r3
 8007ebc:	d006      	beq.n	8007ecc <std+0x48>
 8007ebe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ec2:	4294      	cmp	r4, r2
 8007ec4:	d002      	beq.n	8007ecc <std+0x48>
 8007ec6:	33d0      	adds	r3, #208	; 0xd0
 8007ec8:	429c      	cmp	r4, r3
 8007eca:	d105      	bne.n	8007ed8 <std+0x54>
 8007ecc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed4:	f000 b978 	b.w	80081c8 <__retarget_lock_init_recursive>
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	bf00      	nop
 8007edc:	08008049 	.word	0x08008049
 8007ee0:	0800806b 	.word	0x0800806b
 8007ee4:	080080a3 	.word	0x080080a3
 8007ee8:	080080c7 	.word	0x080080c7
 8007eec:	20000998 	.word	0x20000998

08007ef0 <stdio_exit_handler>:
 8007ef0:	4a02      	ldr	r2, [pc, #8]	; (8007efc <stdio_exit_handler+0xc>)
 8007ef2:	4903      	ldr	r1, [pc, #12]	; (8007f00 <stdio_exit_handler+0x10>)
 8007ef4:	4803      	ldr	r0, [pc, #12]	; (8007f04 <stdio_exit_handler+0x14>)
 8007ef6:	f000 b869 	b.w	8007fcc <_fwalk_sglue>
 8007efa:	bf00      	nop
 8007efc:	20000078 	.word	0x20000078
 8007f00:	08009b65 	.word	0x08009b65
 8007f04:	20000084 	.word	0x20000084

08007f08 <cleanup_stdio>:
 8007f08:	6841      	ldr	r1, [r0, #4]
 8007f0a:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <cleanup_stdio+0x34>)
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	4299      	cmp	r1, r3
 8007f10:	4604      	mov	r4, r0
 8007f12:	d001      	beq.n	8007f18 <cleanup_stdio+0x10>
 8007f14:	f001 fe26 	bl	8009b64 <_fflush_r>
 8007f18:	68a1      	ldr	r1, [r4, #8]
 8007f1a:	4b09      	ldr	r3, [pc, #36]	; (8007f40 <cleanup_stdio+0x38>)
 8007f1c:	4299      	cmp	r1, r3
 8007f1e:	d002      	beq.n	8007f26 <cleanup_stdio+0x1e>
 8007f20:	4620      	mov	r0, r4
 8007f22:	f001 fe1f 	bl	8009b64 <_fflush_r>
 8007f26:	68e1      	ldr	r1, [r4, #12]
 8007f28:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <cleanup_stdio+0x3c>)
 8007f2a:	4299      	cmp	r1, r3
 8007f2c:	d004      	beq.n	8007f38 <cleanup_stdio+0x30>
 8007f2e:	4620      	mov	r0, r4
 8007f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f34:	f001 be16 	b.w	8009b64 <_fflush_r>
 8007f38:	bd10      	pop	{r4, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000998 	.word	0x20000998
 8007f40:	20000a00 	.word	0x20000a00
 8007f44:	20000a68 	.word	0x20000a68

08007f48 <global_stdio_init.part.0>:
 8007f48:	b510      	push	{r4, lr}
 8007f4a:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <global_stdio_init.part.0+0x30>)
 8007f4c:	4c0b      	ldr	r4, [pc, #44]	; (8007f7c <global_stdio_init.part.0+0x34>)
 8007f4e:	4a0c      	ldr	r2, [pc, #48]	; (8007f80 <global_stdio_init.part.0+0x38>)
 8007f50:	4620      	mov	r0, r4
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	2104      	movs	r1, #4
 8007f56:	2200      	movs	r2, #0
 8007f58:	f7ff ff94 	bl	8007e84 <std>
 8007f5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f60:	2201      	movs	r2, #1
 8007f62:	2109      	movs	r1, #9
 8007f64:	f7ff ff8e 	bl	8007e84 <std>
 8007f68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f72:	2112      	movs	r1, #18
 8007f74:	f7ff bf86 	b.w	8007e84 <std>
 8007f78:	20000ad0 	.word	0x20000ad0
 8007f7c:	20000998 	.word	0x20000998
 8007f80:	08007ef1 	.word	0x08007ef1

08007f84 <__sfp_lock_acquire>:
 8007f84:	4801      	ldr	r0, [pc, #4]	; (8007f8c <__sfp_lock_acquire+0x8>)
 8007f86:	f000 b920 	b.w	80081ca <__retarget_lock_acquire_recursive>
 8007f8a:	bf00      	nop
 8007f8c:	20000ad9 	.word	0x20000ad9

08007f90 <__sfp_lock_release>:
 8007f90:	4801      	ldr	r0, [pc, #4]	; (8007f98 <__sfp_lock_release+0x8>)
 8007f92:	f000 b91b 	b.w	80081cc <__retarget_lock_release_recursive>
 8007f96:	bf00      	nop
 8007f98:	20000ad9 	.word	0x20000ad9

08007f9c <__sinit>:
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	f7ff fff0 	bl	8007f84 <__sfp_lock_acquire>
 8007fa4:	6a23      	ldr	r3, [r4, #32]
 8007fa6:	b11b      	cbz	r3, 8007fb0 <__sinit+0x14>
 8007fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fac:	f7ff bff0 	b.w	8007f90 <__sfp_lock_release>
 8007fb0:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <__sinit+0x28>)
 8007fb2:	6223      	str	r3, [r4, #32]
 8007fb4:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <__sinit+0x2c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1f5      	bne.n	8007fa8 <__sinit+0xc>
 8007fbc:	f7ff ffc4 	bl	8007f48 <global_stdio_init.part.0>
 8007fc0:	e7f2      	b.n	8007fa8 <__sinit+0xc>
 8007fc2:	bf00      	nop
 8007fc4:	08007f09 	.word	0x08007f09
 8007fc8:	20000ad0 	.word	0x20000ad0

08007fcc <_fwalk_sglue>:
 8007fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	4688      	mov	r8, r1
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8007fe0:	d505      	bpl.n	8007fee <_fwalk_sglue+0x22>
 8007fe2:	6824      	ldr	r4, [r4, #0]
 8007fe4:	2c00      	cmp	r4, #0
 8007fe6:	d1f7      	bne.n	8007fd8 <_fwalk_sglue+0xc>
 8007fe8:	4630      	mov	r0, r6
 8007fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d907      	bls.n	8008004 <_fwalk_sglue+0x38>
 8007ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	d003      	beq.n	8008004 <_fwalk_sglue+0x38>
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	4638      	mov	r0, r7
 8008000:	47c0      	blx	r8
 8008002:	4306      	orrs	r6, r0
 8008004:	3568      	adds	r5, #104	; 0x68
 8008006:	e7e9      	b.n	8007fdc <_fwalk_sglue+0x10>

08008008 <siprintf>:
 8008008:	b40e      	push	{r1, r2, r3}
 800800a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800800e:	b500      	push	{lr}
 8008010:	b09c      	sub	sp, #112	; 0x70
 8008012:	ab1d      	add	r3, sp, #116	; 0x74
 8008014:	9002      	str	r0, [sp, #8]
 8008016:	9006      	str	r0, [sp, #24]
 8008018:	9107      	str	r1, [sp, #28]
 800801a:	9104      	str	r1, [sp, #16]
 800801c:	4808      	ldr	r0, [pc, #32]	; (8008040 <siprintf+0x38>)
 800801e:	4909      	ldr	r1, [pc, #36]	; (8008044 <siprintf+0x3c>)
 8008020:	f853 2b04 	ldr.w	r2, [r3], #4
 8008024:	9105      	str	r1, [sp, #20]
 8008026:	6800      	ldr	r0, [r0, #0]
 8008028:	a902      	add	r1, sp, #8
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	f001 fc1a 	bl	8009864 <_svfiprintf_r>
 8008030:	2200      	movs	r2, #0
 8008032:	9b02      	ldr	r3, [sp, #8]
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	b01c      	add	sp, #112	; 0x70
 8008038:	f85d eb04 	ldr.w	lr, [sp], #4
 800803c:	b003      	add	sp, #12
 800803e:	4770      	bx	lr
 8008040:	200000d0 	.word	0x200000d0
 8008044:	ffff0208 	.word	0xffff0208

08008048 <__sread>:
 8008048:	b510      	push	{r4, lr}
 800804a:	460c      	mov	r4, r1
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	f000 f86c 	bl	800812c <_read_r>
 8008054:	2800      	cmp	r0, #0
 8008056:	bfab      	itete	ge
 8008058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800805a:	89a3      	ldrhlt	r3, [r4, #12]
 800805c:	181b      	addge	r3, r3, r0
 800805e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008062:	bfac      	ite	ge
 8008064:	6563      	strge	r3, [r4, #84]	; 0x54
 8008066:	81a3      	strhlt	r3, [r4, #12]
 8008068:	bd10      	pop	{r4, pc}

0800806a <__swrite>:
 800806a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	461f      	mov	r7, r3
 8008070:	898b      	ldrh	r3, [r1, #12]
 8008072:	4605      	mov	r5, r0
 8008074:	05db      	lsls	r3, r3, #23
 8008076:	460c      	mov	r4, r1
 8008078:	4616      	mov	r6, r2
 800807a:	d505      	bpl.n	8008088 <__swrite+0x1e>
 800807c:	2302      	movs	r3, #2
 800807e:	2200      	movs	r2, #0
 8008080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008084:	f000 f840 	bl	8008108 <_lseek_r>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	4632      	mov	r2, r6
 800808c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	4628      	mov	r0, r5
 8008094:	463b      	mov	r3, r7
 8008096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800809a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800809e:	f000 b857 	b.w	8008150 <_write_r>

080080a2 <__sseek>:
 80080a2:	b510      	push	{r4, lr}
 80080a4:	460c      	mov	r4, r1
 80080a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080aa:	f000 f82d 	bl	8008108 <_lseek_r>
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	bf15      	itete	ne
 80080b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80080b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080be:	81a3      	strheq	r3, [r4, #12]
 80080c0:	bf18      	it	ne
 80080c2:	81a3      	strhne	r3, [r4, #12]
 80080c4:	bd10      	pop	{r4, pc}

080080c6 <__sclose>:
 80080c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ca:	f000 b80d 	b.w	80080e8 <_close_r>

080080ce <memset>:
 80080ce:	4603      	mov	r3, r0
 80080d0:	4402      	add	r2, r0
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d100      	bne.n	80080d8 <memset+0xa>
 80080d6:	4770      	bx	lr
 80080d8:	f803 1b01 	strb.w	r1, [r3], #1
 80080dc:	e7f9      	b.n	80080d2 <memset+0x4>
	...

080080e0 <_localeconv_r>:
 80080e0:	4800      	ldr	r0, [pc, #0]	; (80080e4 <_localeconv_r+0x4>)
 80080e2:	4770      	bx	lr
 80080e4:	200001c4 	.word	0x200001c4

080080e8 <_close_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	2300      	movs	r3, #0
 80080ec:	4d05      	ldr	r5, [pc, #20]	; (8008104 <_close_r+0x1c>)
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	f7fb fd15 	bl	8003b22 <_close>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_close_r+0x1a>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_close_r+0x1a>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	20000ad4 	.word	0x20000ad4

08008108 <_lseek_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4604      	mov	r4, r0
 800810c:	4608      	mov	r0, r1
 800810e:	4611      	mov	r1, r2
 8008110:	2200      	movs	r2, #0
 8008112:	4d05      	ldr	r5, [pc, #20]	; (8008128 <_lseek_r+0x20>)
 8008114:	602a      	str	r2, [r5, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	f7fb fd27 	bl	8003b6a <_lseek>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_lseek_r+0x1e>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	b103      	cbz	r3, 8008126 <_lseek_r+0x1e>
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	20000ad4 	.word	0x20000ad4

0800812c <_read_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4604      	mov	r4, r0
 8008130:	4608      	mov	r0, r1
 8008132:	4611      	mov	r1, r2
 8008134:	2200      	movs	r2, #0
 8008136:	4d05      	ldr	r5, [pc, #20]	; (800814c <_read_r+0x20>)
 8008138:	602a      	str	r2, [r5, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	f7fb fcb8 	bl	8003ab0 <_read>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_read_r+0x1e>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_read_r+0x1e>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	20000ad4 	.word	0x20000ad4

08008150 <_write_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4604      	mov	r4, r0
 8008154:	4608      	mov	r0, r1
 8008156:	4611      	mov	r1, r2
 8008158:	2200      	movs	r2, #0
 800815a:	4d05      	ldr	r5, [pc, #20]	; (8008170 <_write_r+0x20>)
 800815c:	602a      	str	r2, [r5, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	f7fb fcc3 	bl	8003aea <_write>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_write_r+0x1e>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_write_r+0x1e>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20000ad4 	.word	0x20000ad4

08008174 <__errno>:
 8008174:	4b01      	ldr	r3, [pc, #4]	; (800817c <__errno+0x8>)
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	200000d0 	.word	0x200000d0

08008180 <__libc_init_array>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	2600      	movs	r6, #0
 8008184:	4d0c      	ldr	r5, [pc, #48]	; (80081b8 <__libc_init_array+0x38>)
 8008186:	4c0d      	ldr	r4, [pc, #52]	; (80081bc <__libc_init_array+0x3c>)
 8008188:	1b64      	subs	r4, r4, r5
 800818a:	10a4      	asrs	r4, r4, #2
 800818c:	42a6      	cmp	r6, r4
 800818e:	d109      	bne.n	80081a4 <__libc_init_array+0x24>
 8008190:	f002 f888 	bl	800a2a4 <_init>
 8008194:	2600      	movs	r6, #0
 8008196:	4d0a      	ldr	r5, [pc, #40]	; (80081c0 <__libc_init_array+0x40>)
 8008198:	4c0a      	ldr	r4, [pc, #40]	; (80081c4 <__libc_init_array+0x44>)
 800819a:	1b64      	subs	r4, r4, r5
 800819c:	10a4      	asrs	r4, r4, #2
 800819e:	42a6      	cmp	r6, r4
 80081a0:	d105      	bne.n	80081ae <__libc_init_array+0x2e>
 80081a2:	bd70      	pop	{r4, r5, r6, pc}
 80081a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a8:	4798      	blx	r3
 80081aa:	3601      	adds	r6, #1
 80081ac:	e7ee      	b.n	800818c <__libc_init_array+0xc>
 80081ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b2:	4798      	blx	r3
 80081b4:	3601      	adds	r6, #1
 80081b6:	e7f2      	b.n	800819e <__libc_init_array+0x1e>
 80081b8:	0800d0b4 	.word	0x0800d0b4
 80081bc:	0800d0b4 	.word	0x0800d0b4
 80081c0:	0800d0b4 	.word	0x0800d0b4
 80081c4:	0800d0bc 	.word	0x0800d0bc

080081c8 <__retarget_lock_init_recursive>:
 80081c8:	4770      	bx	lr

080081ca <__retarget_lock_acquire_recursive>:
 80081ca:	4770      	bx	lr

080081cc <__retarget_lock_release_recursive>:
 80081cc:	4770      	bx	lr

080081ce <memchr>:
 80081ce:	4603      	mov	r3, r0
 80081d0:	b510      	push	{r4, lr}
 80081d2:	b2c9      	uxtb	r1, r1
 80081d4:	4402      	add	r2, r0
 80081d6:	4293      	cmp	r3, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	d101      	bne.n	80081e0 <memchr+0x12>
 80081dc:	2000      	movs	r0, #0
 80081de:	e003      	b.n	80081e8 <memchr+0x1a>
 80081e0:	7804      	ldrb	r4, [r0, #0]
 80081e2:	3301      	adds	r3, #1
 80081e4:	428c      	cmp	r4, r1
 80081e6:	d1f6      	bne.n	80081d6 <memchr+0x8>
 80081e8:	bd10      	pop	{r4, pc}

080081ea <quorem>:
 80081ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ee:	6903      	ldr	r3, [r0, #16]
 80081f0:	690c      	ldr	r4, [r1, #16]
 80081f2:	4607      	mov	r7, r0
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	db7f      	blt.n	80082f8 <quorem+0x10e>
 80081f8:	3c01      	subs	r4, #1
 80081fa:	f100 0514 	add.w	r5, r0, #20
 80081fe:	f101 0814 	add.w	r8, r1, #20
 8008202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800820c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008210:	3301      	adds	r3, #1
 8008212:	429a      	cmp	r2, r3
 8008214:	fbb2 f6f3 	udiv	r6, r2, r3
 8008218:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800821c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008220:	d331      	bcc.n	8008286 <quorem+0x9c>
 8008222:	f04f 0e00 	mov.w	lr, #0
 8008226:	4640      	mov	r0, r8
 8008228:	46ac      	mov	ip, r5
 800822a:	46f2      	mov	sl, lr
 800822c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008230:	b293      	uxth	r3, r2
 8008232:	fb06 e303 	mla	r3, r6, r3, lr
 8008236:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800823a:	0c1a      	lsrs	r2, r3, #16
 800823c:	b29b      	uxth	r3, r3
 800823e:	fb06 220e 	mla	r2, r6, lr, r2
 8008242:	ebaa 0303 	sub.w	r3, sl, r3
 8008246:	f8dc a000 	ldr.w	sl, [ip]
 800824a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800824e:	fa1f fa8a 	uxth.w	sl, sl
 8008252:	4453      	add	r3, sl
 8008254:	f8dc a000 	ldr.w	sl, [ip]
 8008258:	b292      	uxth	r2, r2
 800825a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800825e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008262:	b29b      	uxth	r3, r3
 8008264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008268:	4581      	cmp	r9, r0
 800826a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800826e:	f84c 3b04 	str.w	r3, [ip], #4
 8008272:	d2db      	bcs.n	800822c <quorem+0x42>
 8008274:	f855 300b 	ldr.w	r3, [r5, fp]
 8008278:	b92b      	cbnz	r3, 8008286 <quorem+0x9c>
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	3b04      	subs	r3, #4
 800827e:	429d      	cmp	r5, r3
 8008280:	461a      	mov	r2, r3
 8008282:	d32d      	bcc.n	80082e0 <quorem+0xf6>
 8008284:	613c      	str	r4, [r7, #16]
 8008286:	4638      	mov	r0, r7
 8008288:	f001 f994 	bl	80095b4 <__mcmp>
 800828c:	2800      	cmp	r0, #0
 800828e:	db23      	blt.n	80082d8 <quorem+0xee>
 8008290:	4629      	mov	r1, r5
 8008292:	2000      	movs	r0, #0
 8008294:	3601      	adds	r6, #1
 8008296:	f858 2b04 	ldr.w	r2, [r8], #4
 800829a:	f8d1 c000 	ldr.w	ip, [r1]
 800829e:	b293      	uxth	r3, r2
 80082a0:	1ac3      	subs	r3, r0, r3
 80082a2:	0c12      	lsrs	r2, r2, #16
 80082a4:	fa1f f08c 	uxth.w	r0, ip
 80082a8:	4403      	add	r3, r0
 80082aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80082ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b8:	45c1      	cmp	r9, r8
 80082ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082be:	f841 3b04 	str.w	r3, [r1], #4
 80082c2:	d2e8      	bcs.n	8008296 <quorem+0xac>
 80082c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082cc:	b922      	cbnz	r2, 80082d8 <quorem+0xee>
 80082ce:	3b04      	subs	r3, #4
 80082d0:	429d      	cmp	r5, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	d30a      	bcc.n	80082ec <quorem+0x102>
 80082d6:	613c      	str	r4, [r7, #16]
 80082d8:	4630      	mov	r0, r6
 80082da:	b003      	add	sp, #12
 80082dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	3b04      	subs	r3, #4
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	d1cd      	bne.n	8008284 <quorem+0x9a>
 80082e8:	3c01      	subs	r4, #1
 80082ea:	e7c8      	b.n	800827e <quorem+0x94>
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	3b04      	subs	r3, #4
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	d1f0      	bne.n	80082d6 <quorem+0xec>
 80082f4:	3c01      	subs	r4, #1
 80082f6:	e7eb      	b.n	80082d0 <quorem+0xe6>
 80082f8:	2000      	movs	r0, #0
 80082fa:	e7ee      	b.n	80082da <quorem+0xf0>
 80082fc:	0000      	movs	r0, r0
	...

08008300 <_dtoa_r>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	4616      	mov	r6, r2
 8008306:	461f      	mov	r7, r3
 8008308:	69c4      	ldr	r4, [r0, #28]
 800830a:	b099      	sub	sp, #100	; 0x64
 800830c:	4605      	mov	r5, r0
 800830e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008312:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008316:	b974      	cbnz	r4, 8008336 <_dtoa_r+0x36>
 8008318:	2010      	movs	r0, #16
 800831a:	f000 fe1d 	bl	8008f58 <malloc>
 800831e:	4602      	mov	r2, r0
 8008320:	61e8      	str	r0, [r5, #28]
 8008322:	b920      	cbnz	r0, 800832e <_dtoa_r+0x2e>
 8008324:	21ef      	movs	r1, #239	; 0xef
 8008326:	4bac      	ldr	r3, [pc, #688]	; (80085d8 <_dtoa_r+0x2d8>)
 8008328:	48ac      	ldr	r0, [pc, #688]	; (80085dc <_dtoa_r+0x2dc>)
 800832a:	f001 fc7b 	bl	8009c24 <__assert_func>
 800832e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008332:	6004      	str	r4, [r0, #0]
 8008334:	60c4      	str	r4, [r0, #12]
 8008336:	69eb      	ldr	r3, [r5, #28]
 8008338:	6819      	ldr	r1, [r3, #0]
 800833a:	b151      	cbz	r1, 8008352 <_dtoa_r+0x52>
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	2301      	movs	r3, #1
 8008340:	4093      	lsls	r3, r2
 8008342:	604a      	str	r2, [r1, #4]
 8008344:	608b      	str	r3, [r1, #8]
 8008346:	4628      	mov	r0, r5
 8008348:	f000 fefa 	bl	8009140 <_Bfree>
 800834c:	2200      	movs	r2, #0
 800834e:	69eb      	ldr	r3, [r5, #28]
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	1e3b      	subs	r3, r7, #0
 8008354:	bfaf      	iteee	ge
 8008356:	2300      	movge	r3, #0
 8008358:	2201      	movlt	r2, #1
 800835a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800835e:	9305      	strlt	r3, [sp, #20]
 8008360:	bfa8      	it	ge
 8008362:	f8c8 3000 	strge.w	r3, [r8]
 8008366:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800836a:	4b9d      	ldr	r3, [pc, #628]	; (80085e0 <_dtoa_r+0x2e0>)
 800836c:	bfb8      	it	lt
 800836e:	f8c8 2000 	strlt.w	r2, [r8]
 8008372:	ea33 0309 	bics.w	r3, r3, r9
 8008376:	d119      	bne.n	80083ac <_dtoa_r+0xac>
 8008378:	f242 730f 	movw	r3, #9999	; 0x270f
 800837c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008384:	4333      	orrs	r3, r6
 8008386:	f000 8589 	beq.w	8008e9c <_dtoa_r+0xb9c>
 800838a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800838c:	b953      	cbnz	r3, 80083a4 <_dtoa_r+0xa4>
 800838e:	4b95      	ldr	r3, [pc, #596]	; (80085e4 <_dtoa_r+0x2e4>)
 8008390:	e023      	b.n	80083da <_dtoa_r+0xda>
 8008392:	4b95      	ldr	r3, [pc, #596]	; (80085e8 <_dtoa_r+0x2e8>)
 8008394:	9303      	str	r3, [sp, #12]
 8008396:	3308      	adds	r3, #8
 8008398:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	9803      	ldr	r0, [sp, #12]
 800839e:	b019      	add	sp, #100	; 0x64
 80083a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a4:	4b8f      	ldr	r3, [pc, #572]	; (80085e4 <_dtoa_r+0x2e4>)
 80083a6:	9303      	str	r3, [sp, #12]
 80083a8:	3303      	adds	r3, #3
 80083aa:	e7f5      	b.n	8008398 <_dtoa_r+0x98>
 80083ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80083b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80083b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083b8:	2200      	movs	r2, #0
 80083ba:	2300      	movs	r3, #0
 80083bc:	f7f8 faf4 	bl	80009a8 <__aeabi_dcmpeq>
 80083c0:	4680      	mov	r8, r0
 80083c2:	b160      	cbz	r0, 80083de <_dtoa_r+0xde>
 80083c4:	2301      	movs	r3, #1
 80083c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 8562 	beq.w	8008e96 <_dtoa_r+0xb96>
 80083d2:	4b86      	ldr	r3, [pc, #536]	; (80085ec <_dtoa_r+0x2ec>)
 80083d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	3b01      	subs	r3, #1
 80083da:	9303      	str	r3, [sp, #12]
 80083dc:	e7de      	b.n	800839c <_dtoa_r+0x9c>
 80083de:	ab16      	add	r3, sp, #88	; 0x58
 80083e0:	9301      	str	r3, [sp, #4]
 80083e2:	ab17      	add	r3, sp, #92	; 0x5c
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	4628      	mov	r0, r5
 80083e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083ec:	f001 f98a 	bl	8009704 <__d2b>
 80083f0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80083f4:	4682      	mov	sl, r0
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	d07e      	beq.n	80084f8 <_dtoa_r+0x1f8>
 80083fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008400:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008408:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800840c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008410:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008414:	4619      	mov	r1, r3
 8008416:	2200      	movs	r2, #0
 8008418:	4b75      	ldr	r3, [pc, #468]	; (80085f0 <_dtoa_r+0x2f0>)
 800841a:	f7f7 fea5 	bl	8000168 <__aeabi_dsub>
 800841e:	a368      	add	r3, pc, #416	; (adr r3, 80085c0 <_dtoa_r+0x2c0>)
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f7f8 f858 	bl	80004d8 <__aeabi_dmul>
 8008428:	a367      	add	r3, pc, #412	; (adr r3, 80085c8 <_dtoa_r+0x2c8>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f7f7 fe9d 	bl	800016c <__adddf3>
 8008432:	4606      	mov	r6, r0
 8008434:	4620      	mov	r0, r4
 8008436:	460f      	mov	r7, r1
 8008438:	f7f7 ffe4 	bl	8000404 <__aeabi_i2d>
 800843c:	a364      	add	r3, pc, #400	; (adr r3, 80085d0 <_dtoa_r+0x2d0>)
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	f7f8 f849 	bl	80004d8 <__aeabi_dmul>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4630      	mov	r0, r6
 800844c:	4639      	mov	r1, r7
 800844e:	f7f7 fe8d 	bl	800016c <__adddf3>
 8008452:	4606      	mov	r6, r0
 8008454:	460f      	mov	r7, r1
 8008456:	f7f8 faef 	bl	8000a38 <__aeabi_d2iz>
 800845a:	2200      	movs	r2, #0
 800845c:	4683      	mov	fp, r0
 800845e:	2300      	movs	r3, #0
 8008460:	4630      	mov	r0, r6
 8008462:	4639      	mov	r1, r7
 8008464:	f7f8 faaa 	bl	80009bc <__aeabi_dcmplt>
 8008468:	b148      	cbz	r0, 800847e <_dtoa_r+0x17e>
 800846a:	4658      	mov	r0, fp
 800846c:	f7f7 ffca 	bl	8000404 <__aeabi_i2d>
 8008470:	4632      	mov	r2, r6
 8008472:	463b      	mov	r3, r7
 8008474:	f7f8 fa98 	bl	80009a8 <__aeabi_dcmpeq>
 8008478:	b908      	cbnz	r0, 800847e <_dtoa_r+0x17e>
 800847a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800847e:	f1bb 0f16 	cmp.w	fp, #22
 8008482:	d857      	bhi.n	8008534 <_dtoa_r+0x234>
 8008484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008488:	4b5a      	ldr	r3, [pc, #360]	; (80085f4 <_dtoa_r+0x2f4>)
 800848a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f8 fa93 	bl	80009bc <__aeabi_dcmplt>
 8008496:	2800      	cmp	r0, #0
 8008498:	d04e      	beq.n	8008538 <_dtoa_r+0x238>
 800849a:	2300      	movs	r3, #0
 800849c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80084a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80084a4:	1b1b      	subs	r3, r3, r4
 80084a6:	1e5a      	subs	r2, r3, #1
 80084a8:	bf46      	itte	mi
 80084aa:	f1c3 0901 	rsbmi	r9, r3, #1
 80084ae:	2300      	movmi	r3, #0
 80084b0:	f04f 0900 	movpl.w	r9, #0
 80084b4:	9209      	str	r2, [sp, #36]	; 0x24
 80084b6:	bf48      	it	mi
 80084b8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80084ba:	f1bb 0f00 	cmp.w	fp, #0
 80084be:	db3d      	blt.n	800853c <_dtoa_r+0x23c>
 80084c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80084c6:	445b      	add	r3, fp
 80084c8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ca:	2300      	movs	r3, #0
 80084cc:	930a      	str	r3, [sp, #40]	; 0x28
 80084ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084d0:	2b09      	cmp	r3, #9
 80084d2:	d867      	bhi.n	80085a4 <_dtoa_r+0x2a4>
 80084d4:	2b05      	cmp	r3, #5
 80084d6:	bfc4      	itt	gt
 80084d8:	3b04      	subgt	r3, #4
 80084da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80084dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084de:	bfc8      	it	gt
 80084e0:	2400      	movgt	r4, #0
 80084e2:	f1a3 0302 	sub.w	r3, r3, #2
 80084e6:	bfd8      	it	le
 80084e8:	2401      	movle	r4, #1
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	f200 8086 	bhi.w	80085fc <_dtoa_r+0x2fc>
 80084f0:	e8df f003 	tbb	[pc, r3]
 80084f4:	5637392c 	.word	0x5637392c
 80084f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80084fc:	441c      	add	r4, r3
 80084fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008502:	2b20      	cmp	r3, #32
 8008504:	bfc1      	itttt	gt
 8008506:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800850a:	fa09 f903 	lslgt.w	r9, r9, r3
 800850e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008512:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008516:	bfd6      	itet	le
 8008518:	f1c3 0320 	rsble	r3, r3, #32
 800851c:	ea49 0003 	orrgt.w	r0, r9, r3
 8008520:	fa06 f003 	lslle.w	r0, r6, r3
 8008524:	f7f7 ff5e 	bl	80003e4 <__aeabi_ui2d>
 8008528:	2201      	movs	r2, #1
 800852a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800852e:	3c01      	subs	r4, #1
 8008530:	9213      	str	r2, [sp, #76]	; 0x4c
 8008532:	e76f      	b.n	8008414 <_dtoa_r+0x114>
 8008534:	2301      	movs	r3, #1
 8008536:	e7b3      	b.n	80084a0 <_dtoa_r+0x1a0>
 8008538:	900f      	str	r0, [sp, #60]	; 0x3c
 800853a:	e7b2      	b.n	80084a2 <_dtoa_r+0x1a2>
 800853c:	f1cb 0300 	rsb	r3, fp, #0
 8008540:	930a      	str	r3, [sp, #40]	; 0x28
 8008542:	2300      	movs	r3, #0
 8008544:	eba9 090b 	sub.w	r9, r9, fp
 8008548:	930e      	str	r3, [sp, #56]	; 0x38
 800854a:	e7c0      	b.n	80084ce <_dtoa_r+0x1ce>
 800854c:	2300      	movs	r3, #0
 800854e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008550:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008552:	2b00      	cmp	r3, #0
 8008554:	dc55      	bgt.n	8008602 <_dtoa_r+0x302>
 8008556:	2301      	movs	r3, #1
 8008558:	461a      	mov	r2, r3
 800855a:	9306      	str	r3, [sp, #24]
 800855c:	9308      	str	r3, [sp, #32]
 800855e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008560:	e00b      	b.n	800857a <_dtoa_r+0x27a>
 8008562:	2301      	movs	r3, #1
 8008564:	e7f3      	b.n	800854e <_dtoa_r+0x24e>
 8008566:	2300      	movs	r3, #0
 8008568:	930b      	str	r3, [sp, #44]	; 0x2c
 800856a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800856c:	445b      	add	r3, fp
 800856e:	9306      	str	r3, [sp, #24]
 8008570:	3301      	adds	r3, #1
 8008572:	2b01      	cmp	r3, #1
 8008574:	9308      	str	r3, [sp, #32]
 8008576:	bfb8      	it	lt
 8008578:	2301      	movlt	r3, #1
 800857a:	2100      	movs	r1, #0
 800857c:	2204      	movs	r2, #4
 800857e:	69e8      	ldr	r0, [r5, #28]
 8008580:	f102 0614 	add.w	r6, r2, #20
 8008584:	429e      	cmp	r6, r3
 8008586:	d940      	bls.n	800860a <_dtoa_r+0x30a>
 8008588:	6041      	str	r1, [r0, #4]
 800858a:	4628      	mov	r0, r5
 800858c:	f000 fd98 	bl	80090c0 <_Balloc>
 8008590:	9003      	str	r0, [sp, #12]
 8008592:	2800      	cmp	r0, #0
 8008594:	d13c      	bne.n	8008610 <_dtoa_r+0x310>
 8008596:	4602      	mov	r2, r0
 8008598:	f240 11af 	movw	r1, #431	; 0x1af
 800859c:	4b16      	ldr	r3, [pc, #88]	; (80085f8 <_dtoa_r+0x2f8>)
 800859e:	e6c3      	b.n	8008328 <_dtoa_r+0x28>
 80085a0:	2301      	movs	r3, #1
 80085a2:	e7e1      	b.n	8008568 <_dtoa_r+0x268>
 80085a4:	2401      	movs	r4, #1
 80085a6:	2300      	movs	r3, #0
 80085a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80085aa:	9322      	str	r3, [sp, #136]	; 0x88
 80085ac:	f04f 33ff 	mov.w	r3, #4294967295
 80085b0:	2200      	movs	r2, #0
 80085b2:	9306      	str	r3, [sp, #24]
 80085b4:	9308      	str	r3, [sp, #32]
 80085b6:	2312      	movs	r3, #18
 80085b8:	e7d1      	b.n	800855e <_dtoa_r+0x25e>
 80085ba:	bf00      	nop
 80085bc:	f3af 8000 	nop.w
 80085c0:	636f4361 	.word	0x636f4361
 80085c4:	3fd287a7 	.word	0x3fd287a7
 80085c8:	8b60c8b3 	.word	0x8b60c8b3
 80085cc:	3fc68a28 	.word	0x3fc68a28
 80085d0:	509f79fb 	.word	0x509f79fb
 80085d4:	3fd34413 	.word	0x3fd34413
 80085d8:	0800cd81 	.word	0x0800cd81
 80085dc:	0800cd98 	.word	0x0800cd98
 80085e0:	7ff00000 	.word	0x7ff00000
 80085e4:	0800cd7d 	.word	0x0800cd7d
 80085e8:	0800cd74 	.word	0x0800cd74
 80085ec:	0800cd51 	.word	0x0800cd51
 80085f0:	3ff80000 	.word	0x3ff80000
 80085f4:	0800ce88 	.word	0x0800ce88
 80085f8:	0800cdf0 	.word	0x0800cdf0
 80085fc:	2301      	movs	r3, #1
 80085fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008600:	e7d4      	b.n	80085ac <_dtoa_r+0x2ac>
 8008602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008604:	9306      	str	r3, [sp, #24]
 8008606:	9308      	str	r3, [sp, #32]
 8008608:	e7b7      	b.n	800857a <_dtoa_r+0x27a>
 800860a:	3101      	adds	r1, #1
 800860c:	0052      	lsls	r2, r2, #1
 800860e:	e7b7      	b.n	8008580 <_dtoa_r+0x280>
 8008610:	69eb      	ldr	r3, [r5, #28]
 8008612:	9a03      	ldr	r2, [sp, #12]
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	9b08      	ldr	r3, [sp, #32]
 8008618:	2b0e      	cmp	r3, #14
 800861a:	f200 80a8 	bhi.w	800876e <_dtoa_r+0x46e>
 800861e:	2c00      	cmp	r4, #0
 8008620:	f000 80a5 	beq.w	800876e <_dtoa_r+0x46e>
 8008624:	f1bb 0f00 	cmp.w	fp, #0
 8008628:	dd34      	ble.n	8008694 <_dtoa_r+0x394>
 800862a:	4b9a      	ldr	r3, [pc, #616]	; (8008894 <_dtoa_r+0x594>)
 800862c:	f00b 020f 	and.w	r2, fp, #15
 8008630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008634:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008638:	e9d3 3400 	ldrd	r3, r4, [r3]
 800863c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008640:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008644:	d016      	beq.n	8008674 <_dtoa_r+0x374>
 8008646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800864a:	4b93      	ldr	r3, [pc, #588]	; (8008898 <_dtoa_r+0x598>)
 800864c:	2703      	movs	r7, #3
 800864e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008652:	f7f8 f86b 	bl	800072c <__aeabi_ddiv>
 8008656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800865a:	f004 040f 	and.w	r4, r4, #15
 800865e:	4e8e      	ldr	r6, [pc, #568]	; (8008898 <_dtoa_r+0x598>)
 8008660:	b954      	cbnz	r4, 8008678 <_dtoa_r+0x378>
 8008662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800866a:	f7f8 f85f 	bl	800072c <__aeabi_ddiv>
 800866e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008672:	e029      	b.n	80086c8 <_dtoa_r+0x3c8>
 8008674:	2702      	movs	r7, #2
 8008676:	e7f2      	b.n	800865e <_dtoa_r+0x35e>
 8008678:	07e1      	lsls	r1, r4, #31
 800867a:	d508      	bpl.n	800868e <_dtoa_r+0x38e>
 800867c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008680:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008684:	f7f7 ff28 	bl	80004d8 <__aeabi_dmul>
 8008688:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800868c:	3701      	adds	r7, #1
 800868e:	1064      	asrs	r4, r4, #1
 8008690:	3608      	adds	r6, #8
 8008692:	e7e5      	b.n	8008660 <_dtoa_r+0x360>
 8008694:	f000 80a5 	beq.w	80087e2 <_dtoa_r+0x4e2>
 8008698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800869c:	f1cb 0400 	rsb	r4, fp, #0
 80086a0:	4b7c      	ldr	r3, [pc, #496]	; (8008894 <_dtoa_r+0x594>)
 80086a2:	f004 020f 	and.w	r2, r4, #15
 80086a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	f7f7 ff13 	bl	80004d8 <__aeabi_dmul>
 80086b2:	2702      	movs	r7, #2
 80086b4:	2300      	movs	r3, #0
 80086b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ba:	4e77      	ldr	r6, [pc, #476]	; (8008898 <_dtoa_r+0x598>)
 80086bc:	1124      	asrs	r4, r4, #4
 80086be:	2c00      	cmp	r4, #0
 80086c0:	f040 8084 	bne.w	80087cc <_dtoa_r+0x4cc>
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1d2      	bne.n	800866e <_dtoa_r+0x36e>
 80086c8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80086cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80086d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 8087 	beq.w	80087e6 <_dtoa_r+0x4e6>
 80086d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086dc:	2200      	movs	r2, #0
 80086de:	4b6f      	ldr	r3, [pc, #444]	; (800889c <_dtoa_r+0x59c>)
 80086e0:	f7f8 f96c 	bl	80009bc <__aeabi_dcmplt>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d07e      	beq.n	80087e6 <_dtoa_r+0x4e6>
 80086e8:	9b08      	ldr	r3, [sp, #32]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d07b      	beq.n	80087e6 <_dtoa_r+0x4e6>
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	dd38      	ble.n	8008766 <_dtoa_r+0x466>
 80086f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086f8:	2200      	movs	r2, #0
 80086fa:	4b69      	ldr	r3, [pc, #420]	; (80088a0 <_dtoa_r+0x5a0>)
 80086fc:	f7f7 feec 	bl	80004d8 <__aeabi_dmul>
 8008700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008704:	9c06      	ldr	r4, [sp, #24]
 8008706:	f10b 38ff 	add.w	r8, fp, #4294967295
 800870a:	3701      	adds	r7, #1
 800870c:	4638      	mov	r0, r7
 800870e:	f7f7 fe79 	bl	8000404 <__aeabi_i2d>
 8008712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008716:	f7f7 fedf 	bl	80004d8 <__aeabi_dmul>
 800871a:	2200      	movs	r2, #0
 800871c:	4b61      	ldr	r3, [pc, #388]	; (80088a4 <_dtoa_r+0x5a4>)
 800871e:	f7f7 fd25 	bl	800016c <__adddf3>
 8008722:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008726:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800872a:	9611      	str	r6, [sp, #68]	; 0x44
 800872c:	2c00      	cmp	r4, #0
 800872e:	d15d      	bne.n	80087ec <_dtoa_r+0x4ec>
 8008730:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008734:	2200      	movs	r2, #0
 8008736:	4b5c      	ldr	r3, [pc, #368]	; (80088a8 <_dtoa_r+0x5a8>)
 8008738:	f7f7 fd16 	bl	8000168 <__aeabi_dsub>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008744:	4633      	mov	r3, r6
 8008746:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008748:	f7f8 f956 	bl	80009f8 <__aeabi_dcmpgt>
 800874c:	2800      	cmp	r0, #0
 800874e:	f040 8295 	bne.w	8008c7c <_dtoa_r+0x97c>
 8008752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008756:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008758:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800875c:	f7f8 f92e 	bl	80009bc <__aeabi_dcmplt>
 8008760:	2800      	cmp	r0, #0
 8008762:	f040 8289 	bne.w	8008c78 <_dtoa_r+0x978>
 8008766:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800876a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800876e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008770:	2b00      	cmp	r3, #0
 8008772:	f2c0 8151 	blt.w	8008a18 <_dtoa_r+0x718>
 8008776:	f1bb 0f0e 	cmp.w	fp, #14
 800877a:	f300 814d 	bgt.w	8008a18 <_dtoa_r+0x718>
 800877e:	4b45      	ldr	r3, [pc, #276]	; (8008894 <_dtoa_r+0x594>)
 8008780:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008784:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008788:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800878c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800878e:	2b00      	cmp	r3, #0
 8008790:	f280 80da 	bge.w	8008948 <_dtoa_r+0x648>
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f300 80d6 	bgt.w	8008948 <_dtoa_r+0x648>
 800879c:	f040 826b 	bne.w	8008c76 <_dtoa_r+0x976>
 80087a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087a4:	2200      	movs	r2, #0
 80087a6:	4b40      	ldr	r3, [pc, #256]	; (80088a8 <_dtoa_r+0x5a8>)
 80087a8:	f7f7 fe96 	bl	80004d8 <__aeabi_dmul>
 80087ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087b0:	f7f8 f918 	bl	80009e4 <__aeabi_dcmpge>
 80087b4:	9c08      	ldr	r4, [sp, #32]
 80087b6:	4626      	mov	r6, r4
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f040 8241 	bne.w	8008c40 <_dtoa_r+0x940>
 80087be:	2331      	movs	r3, #49	; 0x31
 80087c0:	9f03      	ldr	r7, [sp, #12]
 80087c2:	f10b 0b01 	add.w	fp, fp, #1
 80087c6:	f807 3b01 	strb.w	r3, [r7], #1
 80087ca:	e23d      	b.n	8008c48 <_dtoa_r+0x948>
 80087cc:	07e2      	lsls	r2, r4, #31
 80087ce:	d505      	bpl.n	80087dc <_dtoa_r+0x4dc>
 80087d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087d4:	f7f7 fe80 	bl	80004d8 <__aeabi_dmul>
 80087d8:	2301      	movs	r3, #1
 80087da:	3701      	adds	r7, #1
 80087dc:	1064      	asrs	r4, r4, #1
 80087de:	3608      	adds	r6, #8
 80087e0:	e76d      	b.n	80086be <_dtoa_r+0x3be>
 80087e2:	2702      	movs	r7, #2
 80087e4:	e770      	b.n	80086c8 <_dtoa_r+0x3c8>
 80087e6:	46d8      	mov	r8, fp
 80087e8:	9c08      	ldr	r4, [sp, #32]
 80087ea:	e78f      	b.n	800870c <_dtoa_r+0x40c>
 80087ec:	9903      	ldr	r1, [sp, #12]
 80087ee:	4b29      	ldr	r3, [pc, #164]	; (8008894 <_dtoa_r+0x594>)
 80087f0:	4421      	add	r1, r4
 80087f2:	9112      	str	r1, [sp, #72]	; 0x48
 80087f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087fa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80087fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008802:	2900      	cmp	r1, #0
 8008804:	d054      	beq.n	80088b0 <_dtoa_r+0x5b0>
 8008806:	2000      	movs	r0, #0
 8008808:	4928      	ldr	r1, [pc, #160]	; (80088ac <_dtoa_r+0x5ac>)
 800880a:	f7f7 ff8f 	bl	800072c <__aeabi_ddiv>
 800880e:	463b      	mov	r3, r7
 8008810:	4632      	mov	r2, r6
 8008812:	f7f7 fca9 	bl	8000168 <__aeabi_dsub>
 8008816:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800881a:	9f03      	ldr	r7, [sp, #12]
 800881c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008820:	f7f8 f90a 	bl	8000a38 <__aeabi_d2iz>
 8008824:	4604      	mov	r4, r0
 8008826:	f7f7 fded 	bl	8000404 <__aeabi_i2d>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008832:	f7f7 fc99 	bl	8000168 <__aeabi_dsub>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	3430      	adds	r4, #48	; 0x30
 800883c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008844:	f807 4b01 	strb.w	r4, [r7], #1
 8008848:	f7f8 f8b8 	bl	80009bc <__aeabi_dcmplt>
 800884c:	2800      	cmp	r0, #0
 800884e:	d173      	bne.n	8008938 <_dtoa_r+0x638>
 8008850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008854:	2000      	movs	r0, #0
 8008856:	4911      	ldr	r1, [pc, #68]	; (800889c <_dtoa_r+0x59c>)
 8008858:	f7f7 fc86 	bl	8000168 <__aeabi_dsub>
 800885c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008860:	f7f8 f8ac 	bl	80009bc <__aeabi_dcmplt>
 8008864:	2800      	cmp	r0, #0
 8008866:	f040 80b6 	bne.w	80089d6 <_dtoa_r+0x6d6>
 800886a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800886c:	429f      	cmp	r7, r3
 800886e:	f43f af7a 	beq.w	8008766 <_dtoa_r+0x466>
 8008872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008876:	2200      	movs	r2, #0
 8008878:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <_dtoa_r+0x5a0>)
 800887a:	f7f7 fe2d 	bl	80004d8 <__aeabi_dmul>
 800887e:	2200      	movs	r2, #0
 8008880:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008888:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <_dtoa_r+0x5a0>)
 800888a:	f7f7 fe25 	bl	80004d8 <__aeabi_dmul>
 800888e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008892:	e7c3      	b.n	800881c <_dtoa_r+0x51c>
 8008894:	0800ce88 	.word	0x0800ce88
 8008898:	0800ce60 	.word	0x0800ce60
 800889c:	3ff00000 	.word	0x3ff00000
 80088a0:	40240000 	.word	0x40240000
 80088a4:	401c0000 	.word	0x401c0000
 80088a8:	40140000 	.word	0x40140000
 80088ac:	3fe00000 	.word	0x3fe00000
 80088b0:	4630      	mov	r0, r6
 80088b2:	4639      	mov	r1, r7
 80088b4:	f7f7 fe10 	bl	80004d8 <__aeabi_dmul>
 80088b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088be:	9c03      	ldr	r4, [sp, #12]
 80088c0:	9314      	str	r3, [sp, #80]	; 0x50
 80088c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088c6:	f7f8 f8b7 	bl	8000a38 <__aeabi_d2iz>
 80088ca:	9015      	str	r0, [sp, #84]	; 0x54
 80088cc:	f7f7 fd9a 	bl	8000404 <__aeabi_i2d>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088d8:	f7f7 fc46 	bl	8000168 <__aeabi_dsub>
 80088dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088de:	4606      	mov	r6, r0
 80088e0:	3330      	adds	r3, #48	; 0x30
 80088e2:	f804 3b01 	strb.w	r3, [r4], #1
 80088e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088e8:	460f      	mov	r7, r1
 80088ea:	429c      	cmp	r4, r3
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	d124      	bne.n	800893c <_dtoa_r+0x63c>
 80088f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088f6:	4baf      	ldr	r3, [pc, #700]	; (8008bb4 <_dtoa_r+0x8b4>)
 80088f8:	f7f7 fc38 	bl	800016c <__adddf3>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4630      	mov	r0, r6
 8008902:	4639      	mov	r1, r7
 8008904:	f7f8 f878 	bl	80009f8 <__aeabi_dcmpgt>
 8008908:	2800      	cmp	r0, #0
 800890a:	d163      	bne.n	80089d4 <_dtoa_r+0x6d4>
 800890c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008910:	2000      	movs	r0, #0
 8008912:	49a8      	ldr	r1, [pc, #672]	; (8008bb4 <_dtoa_r+0x8b4>)
 8008914:	f7f7 fc28 	bl	8000168 <__aeabi_dsub>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4630      	mov	r0, r6
 800891e:	4639      	mov	r1, r7
 8008920:	f7f8 f84c 	bl	80009bc <__aeabi_dcmplt>
 8008924:	2800      	cmp	r0, #0
 8008926:	f43f af1e 	beq.w	8008766 <_dtoa_r+0x466>
 800892a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800892c:	1e7b      	subs	r3, r7, #1
 800892e:	9314      	str	r3, [sp, #80]	; 0x50
 8008930:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008934:	2b30      	cmp	r3, #48	; 0x30
 8008936:	d0f8      	beq.n	800892a <_dtoa_r+0x62a>
 8008938:	46c3      	mov	fp, r8
 800893a:	e03b      	b.n	80089b4 <_dtoa_r+0x6b4>
 800893c:	4b9e      	ldr	r3, [pc, #632]	; (8008bb8 <_dtoa_r+0x8b8>)
 800893e:	f7f7 fdcb 	bl	80004d8 <__aeabi_dmul>
 8008942:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008946:	e7bc      	b.n	80088c2 <_dtoa_r+0x5c2>
 8008948:	9f03      	ldr	r7, [sp, #12]
 800894a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800894e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008952:	4640      	mov	r0, r8
 8008954:	4649      	mov	r1, r9
 8008956:	f7f7 fee9 	bl	800072c <__aeabi_ddiv>
 800895a:	f7f8 f86d 	bl	8000a38 <__aeabi_d2iz>
 800895e:	4604      	mov	r4, r0
 8008960:	f7f7 fd50 	bl	8000404 <__aeabi_i2d>
 8008964:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008968:	f7f7 fdb6 	bl	80004d8 <__aeabi_dmul>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4640      	mov	r0, r8
 8008972:	4649      	mov	r1, r9
 8008974:	f7f7 fbf8 	bl	8000168 <__aeabi_dsub>
 8008978:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800897c:	f807 6b01 	strb.w	r6, [r7], #1
 8008980:	9e03      	ldr	r6, [sp, #12]
 8008982:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008986:	1bbe      	subs	r6, r7, r6
 8008988:	45b4      	cmp	ip, r6
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	d136      	bne.n	80089fe <_dtoa_r+0x6fe>
 8008990:	f7f7 fbec 	bl	800016c <__adddf3>
 8008994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008998:	4680      	mov	r8, r0
 800899a:	4689      	mov	r9, r1
 800899c:	f7f8 f82c 	bl	80009f8 <__aeabi_dcmpgt>
 80089a0:	bb58      	cbnz	r0, 80089fa <_dtoa_r+0x6fa>
 80089a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089a6:	4640      	mov	r0, r8
 80089a8:	4649      	mov	r1, r9
 80089aa:	f7f7 fffd 	bl	80009a8 <__aeabi_dcmpeq>
 80089ae:	b108      	cbz	r0, 80089b4 <_dtoa_r+0x6b4>
 80089b0:	07e3      	lsls	r3, r4, #31
 80089b2:	d422      	bmi.n	80089fa <_dtoa_r+0x6fa>
 80089b4:	4651      	mov	r1, sl
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 fbc2 	bl	8009140 <_Bfree>
 80089bc:	2300      	movs	r3, #0
 80089be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089c0:	703b      	strb	r3, [r7, #0]
 80089c2:	f10b 0301 	add.w	r3, fp, #1
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f43f ace6 	beq.w	800839c <_dtoa_r+0x9c>
 80089d0:	601f      	str	r7, [r3, #0]
 80089d2:	e4e3      	b.n	800839c <_dtoa_r+0x9c>
 80089d4:	4627      	mov	r7, r4
 80089d6:	463b      	mov	r3, r7
 80089d8:	461f      	mov	r7, r3
 80089da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089de:	2a39      	cmp	r2, #57	; 0x39
 80089e0:	d107      	bne.n	80089f2 <_dtoa_r+0x6f2>
 80089e2:	9a03      	ldr	r2, [sp, #12]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d1f7      	bne.n	80089d8 <_dtoa_r+0x6d8>
 80089e8:	2230      	movs	r2, #48	; 0x30
 80089ea:	9903      	ldr	r1, [sp, #12]
 80089ec:	f108 0801 	add.w	r8, r8, #1
 80089f0:	700a      	strb	r2, [r1, #0]
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	3201      	adds	r2, #1
 80089f6:	701a      	strb	r2, [r3, #0]
 80089f8:	e79e      	b.n	8008938 <_dtoa_r+0x638>
 80089fa:	46d8      	mov	r8, fp
 80089fc:	e7eb      	b.n	80089d6 <_dtoa_r+0x6d6>
 80089fe:	2200      	movs	r2, #0
 8008a00:	4b6d      	ldr	r3, [pc, #436]	; (8008bb8 <_dtoa_r+0x8b8>)
 8008a02:	f7f7 fd69 	bl	80004d8 <__aeabi_dmul>
 8008a06:	2200      	movs	r2, #0
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4680      	mov	r8, r0
 8008a0c:	4689      	mov	r9, r1
 8008a0e:	f7f7 ffcb 	bl	80009a8 <__aeabi_dcmpeq>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d09b      	beq.n	800894e <_dtoa_r+0x64e>
 8008a16:	e7cd      	b.n	80089b4 <_dtoa_r+0x6b4>
 8008a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a1a:	2a00      	cmp	r2, #0
 8008a1c:	f000 80c4 	beq.w	8008ba8 <_dtoa_r+0x8a8>
 8008a20:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a22:	2a01      	cmp	r2, #1
 8008a24:	f300 80a8 	bgt.w	8008b78 <_dtoa_r+0x878>
 8008a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	f000 80a0 	beq.w	8008b70 <_dtoa_r+0x870>
 8008a30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a34:	464f      	mov	r7, r9
 8008a36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	441a      	add	r2, r3
 8008a3e:	4628      	mov	r0, r5
 8008a40:	4499      	add	r9, r3
 8008a42:	9209      	str	r2, [sp, #36]	; 0x24
 8008a44:	f000 fc32 	bl	80092ac <__i2b>
 8008a48:	4606      	mov	r6, r0
 8008a4a:	b15f      	cbz	r7, 8008a64 <_dtoa_r+0x764>
 8008a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	dd08      	ble.n	8008a64 <_dtoa_r+0x764>
 8008a52:	42bb      	cmp	r3, r7
 8008a54:	bfa8      	it	ge
 8008a56:	463b      	movge	r3, r7
 8008a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a5a:	eba9 0903 	sub.w	r9, r9, r3
 8008a5e:	1aff      	subs	r7, r7, r3
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	9309      	str	r3, [sp, #36]	; 0x24
 8008a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a66:	b1f3      	cbz	r3, 8008aa6 <_dtoa_r+0x7a6>
 8008a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80a0 	beq.w	8008bb0 <_dtoa_r+0x8b0>
 8008a70:	2c00      	cmp	r4, #0
 8008a72:	dd10      	ble.n	8008a96 <_dtoa_r+0x796>
 8008a74:	4631      	mov	r1, r6
 8008a76:	4622      	mov	r2, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f000 fcd5 	bl	8009428 <__pow5mult>
 8008a7e:	4652      	mov	r2, sl
 8008a80:	4601      	mov	r1, r0
 8008a82:	4606      	mov	r6, r0
 8008a84:	4628      	mov	r0, r5
 8008a86:	f000 fc27 	bl	80092d8 <__multiply>
 8008a8a:	4680      	mov	r8, r0
 8008a8c:	4651      	mov	r1, sl
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f000 fb56 	bl	8009140 <_Bfree>
 8008a94:	46c2      	mov	sl, r8
 8008a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a98:	1b1a      	subs	r2, r3, r4
 8008a9a:	d004      	beq.n	8008aa6 <_dtoa_r+0x7a6>
 8008a9c:	4651      	mov	r1, sl
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f000 fcc2 	bl	8009428 <__pow5mult>
 8008aa4:	4682      	mov	sl, r0
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f000 fbff 	bl	80092ac <__i2b>
 8008aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f340 8082 	ble.w	8008bbc <_dtoa_r+0x8bc>
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4601      	mov	r1, r0
 8008abc:	4628      	mov	r0, r5
 8008abe:	f000 fcb3 	bl	8009428 <__pow5mult>
 8008ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	dd7b      	ble.n	8008bc2 <_dtoa_r+0x8c2>
 8008aca:	f04f 0800 	mov.w	r8, #0
 8008ace:	6923      	ldr	r3, [r4, #16]
 8008ad0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ad4:	6918      	ldr	r0, [r3, #16]
 8008ad6:	f000 fb9b 	bl	8009210 <__hi0bits>
 8008ada:	f1c0 0020 	rsb	r0, r0, #32
 8008ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae0:	4418      	add	r0, r3
 8008ae2:	f010 001f 	ands.w	r0, r0, #31
 8008ae6:	f000 8092 	beq.w	8008c0e <_dtoa_r+0x90e>
 8008aea:	f1c0 0320 	rsb	r3, r0, #32
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	f340 8085 	ble.w	8008bfe <_dtoa_r+0x8fe>
 8008af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af6:	f1c0 001c 	rsb	r0, r0, #28
 8008afa:	4403      	add	r3, r0
 8008afc:	4481      	add	r9, r0
 8008afe:	4407      	add	r7, r0
 8008b00:	9309      	str	r3, [sp, #36]	; 0x24
 8008b02:	f1b9 0f00 	cmp.w	r9, #0
 8008b06:	dd05      	ble.n	8008b14 <_dtoa_r+0x814>
 8008b08:	4651      	mov	r1, sl
 8008b0a:	464a      	mov	r2, r9
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f000 fce5 	bl	80094dc <__lshift>
 8008b12:	4682      	mov	sl, r0
 8008b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	dd05      	ble.n	8008b26 <_dtoa_r+0x826>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f000 fcdc 	bl	80094dc <__lshift>
 8008b24:	4604      	mov	r4, r0
 8008b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d072      	beq.n	8008c12 <_dtoa_r+0x912>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4650      	mov	r0, sl
 8008b30:	f000 fd40 	bl	80095b4 <__mcmp>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	da6c      	bge.n	8008c12 <_dtoa_r+0x912>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4651      	mov	r1, sl
 8008b3c:	220a      	movs	r2, #10
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f000 fb20 	bl	8009184 <__multadd>
 8008b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b46:	4682      	mov	sl, r0
 8008b48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 81ac 	beq.w	8008eaa <_dtoa_r+0xbaa>
 8008b52:	2300      	movs	r3, #0
 8008b54:	4631      	mov	r1, r6
 8008b56:	220a      	movs	r2, #10
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f000 fb13 	bl	8009184 <__multadd>
 8008b5e:	9b06      	ldr	r3, [sp, #24]
 8008b60:	4606      	mov	r6, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f300 8093 	bgt.w	8008c8e <_dtoa_r+0x98e>
 8008b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	dc59      	bgt.n	8008c22 <_dtoa_r+0x922>
 8008b6e:	e08e      	b.n	8008c8e <_dtoa_r+0x98e>
 8008b70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b76:	e75d      	b.n	8008a34 <_dtoa_r+0x734>
 8008b78:	9b08      	ldr	r3, [sp, #32]
 8008b7a:	1e5c      	subs	r4, r3, #1
 8008b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7e:	42a3      	cmp	r3, r4
 8008b80:	bfbf      	itttt	lt
 8008b82:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b84:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008b86:	1ae3      	sublt	r3, r4, r3
 8008b88:	18d2      	addlt	r2, r2, r3
 8008b8a:	bfa8      	it	ge
 8008b8c:	1b1c      	subge	r4, r3, r4
 8008b8e:	9b08      	ldr	r3, [sp, #32]
 8008b90:	bfbe      	ittt	lt
 8008b92:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008b94:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008b96:	2400      	movlt	r4, #0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	bfb5      	itete	lt
 8008b9c:	eba9 0703 	sublt.w	r7, r9, r3
 8008ba0:	464f      	movge	r7, r9
 8008ba2:	2300      	movlt	r3, #0
 8008ba4:	9b08      	ldrge	r3, [sp, #32]
 8008ba6:	e747      	b.n	8008a38 <_dtoa_r+0x738>
 8008ba8:	464f      	mov	r7, r9
 8008baa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008bac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008bae:	e74c      	b.n	8008a4a <_dtoa_r+0x74a>
 8008bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bb2:	e773      	b.n	8008a9c <_dtoa_r+0x79c>
 8008bb4:	3fe00000 	.word	0x3fe00000
 8008bb8:	40240000 	.word	0x40240000
 8008bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	dc18      	bgt.n	8008bf4 <_dtoa_r+0x8f4>
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	b9b3      	cbnz	r3, 8008bf4 <_dtoa_r+0x8f4>
 8008bc6:	9b05      	ldr	r3, [sp, #20]
 8008bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bcc:	b993      	cbnz	r3, 8008bf4 <_dtoa_r+0x8f4>
 8008bce:	9b05      	ldr	r3, [sp, #20]
 8008bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bd4:	0d1b      	lsrs	r3, r3, #20
 8008bd6:	051b      	lsls	r3, r3, #20
 8008bd8:	b17b      	cbz	r3, 8008bfa <_dtoa_r+0x8fa>
 8008bda:	f04f 0801 	mov.w	r8, #1
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	f109 0901 	add.w	r9, r9, #1
 8008be4:	3301      	adds	r3, #1
 8008be6:	9309      	str	r3, [sp, #36]	; 0x24
 8008be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f47f af6f 	bne.w	8008ace <_dtoa_r+0x7ce>
 8008bf0:	2001      	movs	r0, #1
 8008bf2:	e774      	b.n	8008ade <_dtoa_r+0x7de>
 8008bf4:	f04f 0800 	mov.w	r8, #0
 8008bf8:	e7f6      	b.n	8008be8 <_dtoa_r+0x8e8>
 8008bfa:	4698      	mov	r8, r3
 8008bfc:	e7f4      	b.n	8008be8 <_dtoa_r+0x8e8>
 8008bfe:	d080      	beq.n	8008b02 <_dtoa_r+0x802>
 8008c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c02:	331c      	adds	r3, #28
 8008c04:	441a      	add	r2, r3
 8008c06:	4499      	add	r9, r3
 8008c08:	441f      	add	r7, r3
 8008c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c0c:	e779      	b.n	8008b02 <_dtoa_r+0x802>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	e7f6      	b.n	8008c00 <_dtoa_r+0x900>
 8008c12:	9b08      	ldr	r3, [sp, #32]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	dc34      	bgt.n	8008c82 <_dtoa_r+0x982>
 8008c18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	dd31      	ble.n	8008c82 <_dtoa_r+0x982>
 8008c1e:	9b08      	ldr	r3, [sp, #32]
 8008c20:	9306      	str	r3, [sp, #24]
 8008c22:	9b06      	ldr	r3, [sp, #24]
 8008c24:	b963      	cbnz	r3, 8008c40 <_dtoa_r+0x940>
 8008c26:	4621      	mov	r1, r4
 8008c28:	2205      	movs	r2, #5
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f000 faaa 	bl	8009184 <__multadd>
 8008c30:	4601      	mov	r1, r0
 8008c32:	4604      	mov	r4, r0
 8008c34:	4650      	mov	r0, sl
 8008c36:	f000 fcbd 	bl	80095b4 <__mcmp>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f73f adbf 	bgt.w	80087be <_dtoa_r+0x4be>
 8008c40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c42:	9f03      	ldr	r7, [sp, #12]
 8008c44:	ea6f 0b03 	mvn.w	fp, r3
 8008c48:	f04f 0800 	mov.w	r8, #0
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 fa76 	bl	8009140 <_Bfree>
 8008c54:	2e00      	cmp	r6, #0
 8008c56:	f43f aead 	beq.w	80089b4 <_dtoa_r+0x6b4>
 8008c5a:	f1b8 0f00 	cmp.w	r8, #0
 8008c5e:	d005      	beq.n	8008c6c <_dtoa_r+0x96c>
 8008c60:	45b0      	cmp	r8, r6
 8008c62:	d003      	beq.n	8008c6c <_dtoa_r+0x96c>
 8008c64:	4641      	mov	r1, r8
 8008c66:	4628      	mov	r0, r5
 8008c68:	f000 fa6a 	bl	8009140 <_Bfree>
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f000 fa66 	bl	8009140 <_Bfree>
 8008c74:	e69e      	b.n	80089b4 <_dtoa_r+0x6b4>
 8008c76:	2400      	movs	r4, #0
 8008c78:	4626      	mov	r6, r4
 8008c7a:	e7e1      	b.n	8008c40 <_dtoa_r+0x940>
 8008c7c:	46c3      	mov	fp, r8
 8008c7e:	4626      	mov	r6, r4
 8008c80:	e59d      	b.n	80087be <_dtoa_r+0x4be>
 8008c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 80c8 	beq.w	8008e1a <_dtoa_r+0xb1a>
 8008c8a:	9b08      	ldr	r3, [sp, #32]
 8008c8c:	9306      	str	r3, [sp, #24]
 8008c8e:	2f00      	cmp	r7, #0
 8008c90:	dd05      	ble.n	8008c9e <_dtoa_r+0x99e>
 8008c92:	4631      	mov	r1, r6
 8008c94:	463a      	mov	r2, r7
 8008c96:	4628      	mov	r0, r5
 8008c98:	f000 fc20 	bl	80094dc <__lshift>
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	f1b8 0f00 	cmp.w	r8, #0
 8008ca2:	d05b      	beq.n	8008d5c <_dtoa_r+0xa5c>
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	6871      	ldr	r1, [r6, #4]
 8008ca8:	f000 fa0a 	bl	80090c0 <_Balloc>
 8008cac:	4607      	mov	r7, r0
 8008cae:	b928      	cbnz	r0, 8008cbc <_dtoa_r+0x9bc>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008cb6:	4b81      	ldr	r3, [pc, #516]	; (8008ebc <_dtoa_r+0xbbc>)
 8008cb8:	f7ff bb36 	b.w	8008328 <_dtoa_r+0x28>
 8008cbc:	6932      	ldr	r2, [r6, #16]
 8008cbe:	f106 010c 	add.w	r1, r6, #12
 8008cc2:	3202      	adds	r2, #2
 8008cc4:	0092      	lsls	r2, r2, #2
 8008cc6:	300c      	adds	r0, #12
 8008cc8:	f000 ff9e 	bl	8009c08 <memcpy>
 8008ccc:	2201      	movs	r2, #1
 8008cce:	4639      	mov	r1, r7
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f000 fc03 	bl	80094dc <__lshift>
 8008cd6:	46b0      	mov	r8, r6
 8008cd8:	4606      	mov	r6, r0
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	9a03      	ldr	r2, [sp, #12]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	9308      	str	r3, [sp, #32]
 8008ce2:	9b06      	ldr	r3, [sp, #24]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ce8:	9b04      	ldr	r3, [sp, #16]
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf0:	9b08      	ldr	r3, [sp, #32]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	4650      	mov	r0, sl
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	f7ff fa76 	bl	80081ea <quorem>
 8008cfe:	4641      	mov	r1, r8
 8008d00:	9006      	str	r0, [sp, #24]
 8008d02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d06:	4650      	mov	r0, sl
 8008d08:	f000 fc54 	bl	80095b4 <__mcmp>
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	9009      	str	r0, [sp, #36]	; 0x24
 8008d10:	4621      	mov	r1, r4
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 fc6a 	bl	80095ec <__mdiff>
 8008d18:	68c2      	ldr	r2, [r0, #12]
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	bb02      	cbnz	r2, 8008d60 <_dtoa_r+0xa60>
 8008d1e:	4601      	mov	r1, r0
 8008d20:	4650      	mov	r0, sl
 8008d22:	f000 fc47 	bl	80095b4 <__mcmp>
 8008d26:	4602      	mov	r2, r0
 8008d28:	4639      	mov	r1, r7
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	920c      	str	r2, [sp, #48]	; 0x30
 8008d2e:	f000 fa07 	bl	8009140 <_Bfree>
 8008d32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d36:	9f08      	ldr	r7, [sp, #32]
 8008d38:	ea43 0102 	orr.w	r1, r3, r2
 8008d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d3e:	4319      	orrs	r1, r3
 8008d40:	d110      	bne.n	8008d64 <_dtoa_r+0xa64>
 8008d42:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d46:	d029      	beq.n	8008d9c <_dtoa_r+0xa9c>
 8008d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	dd02      	ble.n	8008d54 <_dtoa_r+0xa54>
 8008d4e:	9b06      	ldr	r3, [sp, #24]
 8008d50:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008d54:	9b04      	ldr	r3, [sp, #16]
 8008d56:	f883 9000 	strb.w	r9, [r3]
 8008d5a:	e777      	b.n	8008c4c <_dtoa_r+0x94c>
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	e7ba      	b.n	8008cd6 <_dtoa_r+0x9d6>
 8008d60:	2201      	movs	r2, #1
 8008d62:	e7e1      	b.n	8008d28 <_dtoa_r+0xa28>
 8008d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	db04      	blt.n	8008d74 <_dtoa_r+0xa74>
 8008d6a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008d6c:	430b      	orrs	r3, r1
 8008d6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d70:	430b      	orrs	r3, r1
 8008d72:	d120      	bne.n	8008db6 <_dtoa_r+0xab6>
 8008d74:	2a00      	cmp	r2, #0
 8008d76:	dded      	ble.n	8008d54 <_dtoa_r+0xa54>
 8008d78:	4651      	mov	r1, sl
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f000 fbad 	bl	80094dc <__lshift>
 8008d82:	4621      	mov	r1, r4
 8008d84:	4682      	mov	sl, r0
 8008d86:	f000 fc15 	bl	80095b4 <__mcmp>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	dc03      	bgt.n	8008d96 <_dtoa_r+0xa96>
 8008d8e:	d1e1      	bne.n	8008d54 <_dtoa_r+0xa54>
 8008d90:	f019 0f01 	tst.w	r9, #1
 8008d94:	d0de      	beq.n	8008d54 <_dtoa_r+0xa54>
 8008d96:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d9a:	d1d8      	bne.n	8008d4e <_dtoa_r+0xa4e>
 8008d9c:	2339      	movs	r3, #57	; 0x39
 8008d9e:	9a04      	ldr	r2, [sp, #16]
 8008da0:	7013      	strb	r3, [r2, #0]
 8008da2:	463b      	mov	r3, r7
 8008da4:	461f      	mov	r7, r3
 8008da6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	2a39      	cmp	r2, #57	; 0x39
 8008dae:	d06b      	beq.n	8008e88 <_dtoa_r+0xb88>
 8008db0:	3201      	adds	r2, #1
 8008db2:	701a      	strb	r2, [r3, #0]
 8008db4:	e74a      	b.n	8008c4c <_dtoa_r+0x94c>
 8008db6:	2a00      	cmp	r2, #0
 8008db8:	dd07      	ble.n	8008dca <_dtoa_r+0xaca>
 8008dba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008dbe:	d0ed      	beq.n	8008d9c <_dtoa_r+0xa9c>
 8008dc0:	9a04      	ldr	r2, [sp, #16]
 8008dc2:	f109 0301 	add.w	r3, r9, #1
 8008dc6:	7013      	strb	r3, [r2, #0]
 8008dc8:	e740      	b.n	8008c4c <_dtoa_r+0x94c>
 8008dca:	9b08      	ldr	r3, [sp, #32]
 8008dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dce:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d042      	beq.n	8008e5c <_dtoa_r+0xb5c>
 8008dd6:	4651      	mov	r1, sl
 8008dd8:	2300      	movs	r3, #0
 8008dda:	220a      	movs	r2, #10
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f000 f9d1 	bl	8009184 <__multadd>
 8008de2:	45b0      	cmp	r8, r6
 8008de4:	4682      	mov	sl, r0
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	f04f 020a 	mov.w	r2, #10
 8008dee:	4641      	mov	r1, r8
 8008df0:	4628      	mov	r0, r5
 8008df2:	d107      	bne.n	8008e04 <_dtoa_r+0xb04>
 8008df4:	f000 f9c6 	bl	8009184 <__multadd>
 8008df8:	4680      	mov	r8, r0
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	9b08      	ldr	r3, [sp, #32]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	9308      	str	r3, [sp, #32]
 8008e02:	e775      	b.n	8008cf0 <_dtoa_r+0x9f0>
 8008e04:	f000 f9be 	bl	8009184 <__multadd>
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	220a      	movs	r2, #10
 8008e10:	4628      	mov	r0, r5
 8008e12:	f000 f9b7 	bl	8009184 <__multadd>
 8008e16:	4606      	mov	r6, r0
 8008e18:	e7f0      	b.n	8008dfc <_dtoa_r+0xafc>
 8008e1a:	9b08      	ldr	r3, [sp, #32]
 8008e1c:	9306      	str	r3, [sp, #24]
 8008e1e:	9f03      	ldr	r7, [sp, #12]
 8008e20:	4621      	mov	r1, r4
 8008e22:	4650      	mov	r0, sl
 8008e24:	f7ff f9e1 	bl	80081ea <quorem>
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008e2e:	f807 9b01 	strb.w	r9, [r7], #1
 8008e32:	1afa      	subs	r2, r7, r3
 8008e34:	9b06      	ldr	r3, [sp, #24]
 8008e36:	4293      	cmp	r3, r2
 8008e38:	dd07      	ble.n	8008e4a <_dtoa_r+0xb4a>
 8008e3a:	4651      	mov	r1, sl
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	220a      	movs	r2, #10
 8008e40:	4628      	mov	r0, r5
 8008e42:	f000 f99f 	bl	8009184 <__multadd>
 8008e46:	4682      	mov	sl, r0
 8008e48:	e7ea      	b.n	8008e20 <_dtoa_r+0xb20>
 8008e4a:	9b06      	ldr	r3, [sp, #24]
 8008e4c:	f04f 0800 	mov.w	r8, #0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	bfcc      	ite	gt
 8008e54:	461f      	movgt	r7, r3
 8008e56:	2701      	movle	r7, #1
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	441f      	add	r7, r3
 8008e5c:	4651      	mov	r1, sl
 8008e5e:	2201      	movs	r2, #1
 8008e60:	4628      	mov	r0, r5
 8008e62:	f000 fb3b 	bl	80094dc <__lshift>
 8008e66:	4621      	mov	r1, r4
 8008e68:	4682      	mov	sl, r0
 8008e6a:	f000 fba3 	bl	80095b4 <__mcmp>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	dc97      	bgt.n	8008da2 <_dtoa_r+0xaa2>
 8008e72:	d102      	bne.n	8008e7a <_dtoa_r+0xb7a>
 8008e74:	f019 0f01 	tst.w	r9, #1
 8008e78:	d193      	bne.n	8008da2 <_dtoa_r+0xaa2>
 8008e7a:	463b      	mov	r3, r7
 8008e7c:	461f      	mov	r7, r3
 8008e7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e82:	2a30      	cmp	r2, #48	; 0x30
 8008e84:	d0fa      	beq.n	8008e7c <_dtoa_r+0xb7c>
 8008e86:	e6e1      	b.n	8008c4c <_dtoa_r+0x94c>
 8008e88:	9a03      	ldr	r2, [sp, #12]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d18a      	bne.n	8008da4 <_dtoa_r+0xaa4>
 8008e8e:	2331      	movs	r3, #49	; 0x31
 8008e90:	f10b 0b01 	add.w	fp, fp, #1
 8008e94:	e797      	b.n	8008dc6 <_dtoa_r+0xac6>
 8008e96:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <_dtoa_r+0xbc0>)
 8008e98:	f7ff ba9f 	b.w	80083da <_dtoa_r+0xda>
 8008e9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f47f aa77 	bne.w	8008392 <_dtoa_r+0x92>
 8008ea4:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <_dtoa_r+0xbc4>)
 8008ea6:	f7ff ba98 	b.w	80083da <_dtoa_r+0xda>
 8008eaa:	9b06      	ldr	r3, [sp, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dcb6      	bgt.n	8008e1e <_dtoa_r+0xb1e>
 8008eb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	f73f aeb5 	bgt.w	8008c22 <_dtoa_r+0x922>
 8008eb8:	e7b1      	b.n	8008e1e <_dtoa_r+0xb1e>
 8008eba:	bf00      	nop
 8008ebc:	0800cdf0 	.word	0x0800cdf0
 8008ec0:	0800cd50 	.word	0x0800cd50
 8008ec4:	0800cd74 	.word	0x0800cd74

08008ec8 <_free_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4605      	mov	r5, r0
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	d040      	beq.n	8008f52 <_free_r+0x8a>
 8008ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed4:	1f0c      	subs	r4, r1, #4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bfb8      	it	lt
 8008eda:	18e4      	addlt	r4, r4, r3
 8008edc:	f000 f8e4 	bl	80090a8 <__malloc_lock>
 8008ee0:	4a1c      	ldr	r2, [pc, #112]	; (8008f54 <_free_r+0x8c>)
 8008ee2:	6813      	ldr	r3, [r2, #0]
 8008ee4:	b933      	cbnz	r3, 8008ef4 <_free_r+0x2c>
 8008ee6:	6063      	str	r3, [r4, #4]
 8008ee8:	6014      	str	r4, [r2, #0]
 8008eea:	4628      	mov	r0, r5
 8008eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ef0:	f000 b8e0 	b.w	80090b4 <__malloc_unlock>
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	d908      	bls.n	8008f0a <_free_r+0x42>
 8008ef8:	6820      	ldr	r0, [r4, #0]
 8008efa:	1821      	adds	r1, r4, r0
 8008efc:	428b      	cmp	r3, r1
 8008efe:	bf01      	itttt	eq
 8008f00:	6819      	ldreq	r1, [r3, #0]
 8008f02:	685b      	ldreq	r3, [r3, #4]
 8008f04:	1809      	addeq	r1, r1, r0
 8008f06:	6021      	streq	r1, [r4, #0]
 8008f08:	e7ed      	b.n	8008ee6 <_free_r+0x1e>
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	b10b      	cbz	r3, 8008f14 <_free_r+0x4c>
 8008f10:	42a3      	cmp	r3, r4
 8008f12:	d9fa      	bls.n	8008f0a <_free_r+0x42>
 8008f14:	6811      	ldr	r1, [r2, #0]
 8008f16:	1850      	adds	r0, r2, r1
 8008f18:	42a0      	cmp	r0, r4
 8008f1a:	d10b      	bne.n	8008f34 <_free_r+0x6c>
 8008f1c:	6820      	ldr	r0, [r4, #0]
 8008f1e:	4401      	add	r1, r0
 8008f20:	1850      	adds	r0, r2, r1
 8008f22:	4283      	cmp	r3, r0
 8008f24:	6011      	str	r1, [r2, #0]
 8008f26:	d1e0      	bne.n	8008eea <_free_r+0x22>
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	4408      	add	r0, r1
 8008f2e:	6010      	str	r0, [r2, #0]
 8008f30:	6053      	str	r3, [r2, #4]
 8008f32:	e7da      	b.n	8008eea <_free_r+0x22>
 8008f34:	d902      	bls.n	8008f3c <_free_r+0x74>
 8008f36:	230c      	movs	r3, #12
 8008f38:	602b      	str	r3, [r5, #0]
 8008f3a:	e7d6      	b.n	8008eea <_free_r+0x22>
 8008f3c:	6820      	ldr	r0, [r4, #0]
 8008f3e:	1821      	adds	r1, r4, r0
 8008f40:	428b      	cmp	r3, r1
 8008f42:	bf01      	itttt	eq
 8008f44:	6819      	ldreq	r1, [r3, #0]
 8008f46:	685b      	ldreq	r3, [r3, #4]
 8008f48:	1809      	addeq	r1, r1, r0
 8008f4a:	6021      	streq	r1, [r4, #0]
 8008f4c:	6063      	str	r3, [r4, #4]
 8008f4e:	6054      	str	r4, [r2, #4]
 8008f50:	e7cb      	b.n	8008eea <_free_r+0x22>
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20000adc 	.word	0x20000adc

08008f58 <malloc>:
 8008f58:	4b02      	ldr	r3, [pc, #8]	; (8008f64 <malloc+0xc>)
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	f000 b823 	b.w	8008fa8 <_malloc_r>
 8008f62:	bf00      	nop
 8008f64:	200000d0 	.word	0x200000d0

08008f68 <sbrk_aligned>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4e0e      	ldr	r6, [pc, #56]	; (8008fa4 <sbrk_aligned+0x3c>)
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	6831      	ldr	r1, [r6, #0]
 8008f70:	4605      	mov	r5, r0
 8008f72:	b911      	cbnz	r1, 8008f7a <sbrk_aligned+0x12>
 8008f74:	f000 fe38 	bl	8009be8 <_sbrk_r>
 8008f78:	6030      	str	r0, [r6, #0]
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f000 fe33 	bl	8009be8 <_sbrk_r>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d00a      	beq.n	8008f9c <sbrk_aligned+0x34>
 8008f86:	1cc4      	adds	r4, r0, #3
 8008f88:	f024 0403 	bic.w	r4, r4, #3
 8008f8c:	42a0      	cmp	r0, r4
 8008f8e:	d007      	beq.n	8008fa0 <sbrk_aligned+0x38>
 8008f90:	1a21      	subs	r1, r4, r0
 8008f92:	4628      	mov	r0, r5
 8008f94:	f000 fe28 	bl	8009be8 <_sbrk_r>
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d101      	bne.n	8008fa0 <sbrk_aligned+0x38>
 8008f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	20000ae0 	.word	0x20000ae0

08008fa8 <_malloc_r>:
 8008fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fac:	1ccd      	adds	r5, r1, #3
 8008fae:	f025 0503 	bic.w	r5, r5, #3
 8008fb2:	3508      	adds	r5, #8
 8008fb4:	2d0c      	cmp	r5, #12
 8008fb6:	bf38      	it	cc
 8008fb8:	250c      	movcc	r5, #12
 8008fba:	2d00      	cmp	r5, #0
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	db01      	blt.n	8008fc4 <_malloc_r+0x1c>
 8008fc0:	42a9      	cmp	r1, r5
 8008fc2:	d905      	bls.n	8008fd0 <_malloc_r+0x28>
 8008fc4:	230c      	movs	r3, #12
 8008fc6:	2600      	movs	r6, #0
 8008fc8:	603b      	str	r3, [r7, #0]
 8008fca:	4630      	mov	r0, r6
 8008fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090a4 <_malloc_r+0xfc>
 8008fd4:	f000 f868 	bl	80090a8 <__malloc_lock>
 8008fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8008fdc:	461c      	mov	r4, r3
 8008fde:	bb5c      	cbnz	r4, 8009038 <_malloc_r+0x90>
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	f7ff ffc0 	bl	8008f68 <sbrk_aligned>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	4604      	mov	r4, r0
 8008fec:	d155      	bne.n	800909a <_malloc_r+0xf2>
 8008fee:	f8d8 4000 	ldr.w	r4, [r8]
 8008ff2:	4626      	mov	r6, r4
 8008ff4:	2e00      	cmp	r6, #0
 8008ff6:	d145      	bne.n	8009084 <_malloc_r+0xdc>
 8008ff8:	2c00      	cmp	r4, #0
 8008ffa:	d048      	beq.n	800908e <_malloc_r+0xe6>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	4631      	mov	r1, r6
 8009000:	4638      	mov	r0, r7
 8009002:	eb04 0903 	add.w	r9, r4, r3
 8009006:	f000 fdef 	bl	8009be8 <_sbrk_r>
 800900a:	4581      	cmp	r9, r0
 800900c:	d13f      	bne.n	800908e <_malloc_r+0xe6>
 800900e:	6821      	ldr	r1, [r4, #0]
 8009010:	4638      	mov	r0, r7
 8009012:	1a6d      	subs	r5, r5, r1
 8009014:	4629      	mov	r1, r5
 8009016:	f7ff ffa7 	bl	8008f68 <sbrk_aligned>
 800901a:	3001      	adds	r0, #1
 800901c:	d037      	beq.n	800908e <_malloc_r+0xe6>
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	442b      	add	r3, r5
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	f8d8 3000 	ldr.w	r3, [r8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d038      	beq.n	800909e <_malloc_r+0xf6>
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	42a2      	cmp	r2, r4
 8009030:	d12b      	bne.n	800908a <_malloc_r+0xe2>
 8009032:	2200      	movs	r2, #0
 8009034:	605a      	str	r2, [r3, #4]
 8009036:	e00f      	b.n	8009058 <_malloc_r+0xb0>
 8009038:	6822      	ldr	r2, [r4, #0]
 800903a:	1b52      	subs	r2, r2, r5
 800903c:	d41f      	bmi.n	800907e <_malloc_r+0xd6>
 800903e:	2a0b      	cmp	r2, #11
 8009040:	d917      	bls.n	8009072 <_malloc_r+0xca>
 8009042:	1961      	adds	r1, r4, r5
 8009044:	42a3      	cmp	r3, r4
 8009046:	6025      	str	r5, [r4, #0]
 8009048:	bf18      	it	ne
 800904a:	6059      	strne	r1, [r3, #4]
 800904c:	6863      	ldr	r3, [r4, #4]
 800904e:	bf08      	it	eq
 8009050:	f8c8 1000 	streq.w	r1, [r8]
 8009054:	5162      	str	r2, [r4, r5]
 8009056:	604b      	str	r3, [r1, #4]
 8009058:	4638      	mov	r0, r7
 800905a:	f104 060b 	add.w	r6, r4, #11
 800905e:	f000 f829 	bl	80090b4 <__malloc_unlock>
 8009062:	f026 0607 	bic.w	r6, r6, #7
 8009066:	1d23      	adds	r3, r4, #4
 8009068:	1af2      	subs	r2, r6, r3
 800906a:	d0ae      	beq.n	8008fca <_malloc_r+0x22>
 800906c:	1b9b      	subs	r3, r3, r6
 800906e:	50a3      	str	r3, [r4, r2]
 8009070:	e7ab      	b.n	8008fca <_malloc_r+0x22>
 8009072:	42a3      	cmp	r3, r4
 8009074:	6862      	ldr	r2, [r4, #4]
 8009076:	d1dd      	bne.n	8009034 <_malloc_r+0x8c>
 8009078:	f8c8 2000 	str.w	r2, [r8]
 800907c:	e7ec      	b.n	8009058 <_malloc_r+0xb0>
 800907e:	4623      	mov	r3, r4
 8009080:	6864      	ldr	r4, [r4, #4]
 8009082:	e7ac      	b.n	8008fde <_malloc_r+0x36>
 8009084:	4634      	mov	r4, r6
 8009086:	6876      	ldr	r6, [r6, #4]
 8009088:	e7b4      	b.n	8008ff4 <_malloc_r+0x4c>
 800908a:	4613      	mov	r3, r2
 800908c:	e7cc      	b.n	8009028 <_malloc_r+0x80>
 800908e:	230c      	movs	r3, #12
 8009090:	4638      	mov	r0, r7
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	f000 f80e 	bl	80090b4 <__malloc_unlock>
 8009098:	e797      	b.n	8008fca <_malloc_r+0x22>
 800909a:	6025      	str	r5, [r4, #0]
 800909c:	e7dc      	b.n	8009058 <_malloc_r+0xb0>
 800909e:	605b      	str	r3, [r3, #4]
 80090a0:	deff      	udf	#255	; 0xff
 80090a2:	bf00      	nop
 80090a4:	20000adc 	.word	0x20000adc

080090a8 <__malloc_lock>:
 80090a8:	4801      	ldr	r0, [pc, #4]	; (80090b0 <__malloc_lock+0x8>)
 80090aa:	f7ff b88e 	b.w	80081ca <__retarget_lock_acquire_recursive>
 80090ae:	bf00      	nop
 80090b0:	20000ad8 	.word	0x20000ad8

080090b4 <__malloc_unlock>:
 80090b4:	4801      	ldr	r0, [pc, #4]	; (80090bc <__malloc_unlock+0x8>)
 80090b6:	f7ff b889 	b.w	80081cc <__retarget_lock_release_recursive>
 80090ba:	bf00      	nop
 80090bc:	20000ad8 	.word	0x20000ad8

080090c0 <_Balloc>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	69c6      	ldr	r6, [r0, #28]
 80090c4:	4604      	mov	r4, r0
 80090c6:	460d      	mov	r5, r1
 80090c8:	b976      	cbnz	r6, 80090e8 <_Balloc+0x28>
 80090ca:	2010      	movs	r0, #16
 80090cc:	f7ff ff44 	bl	8008f58 <malloc>
 80090d0:	4602      	mov	r2, r0
 80090d2:	61e0      	str	r0, [r4, #28]
 80090d4:	b920      	cbnz	r0, 80090e0 <_Balloc+0x20>
 80090d6:	216b      	movs	r1, #107	; 0x6b
 80090d8:	4b17      	ldr	r3, [pc, #92]	; (8009138 <_Balloc+0x78>)
 80090da:	4818      	ldr	r0, [pc, #96]	; (800913c <_Balloc+0x7c>)
 80090dc:	f000 fda2 	bl	8009c24 <__assert_func>
 80090e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090e4:	6006      	str	r6, [r0, #0]
 80090e6:	60c6      	str	r6, [r0, #12]
 80090e8:	69e6      	ldr	r6, [r4, #28]
 80090ea:	68f3      	ldr	r3, [r6, #12]
 80090ec:	b183      	cbz	r3, 8009110 <_Balloc+0x50>
 80090ee:	69e3      	ldr	r3, [r4, #28]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090f6:	b9b8      	cbnz	r0, 8009128 <_Balloc+0x68>
 80090f8:	2101      	movs	r1, #1
 80090fa:	fa01 f605 	lsl.w	r6, r1, r5
 80090fe:	1d72      	adds	r2, r6, #5
 8009100:	4620      	mov	r0, r4
 8009102:	0092      	lsls	r2, r2, #2
 8009104:	f000 fdac 	bl	8009c60 <_calloc_r>
 8009108:	b160      	cbz	r0, 8009124 <_Balloc+0x64>
 800910a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800910e:	e00e      	b.n	800912e <_Balloc+0x6e>
 8009110:	2221      	movs	r2, #33	; 0x21
 8009112:	2104      	movs	r1, #4
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fda3 	bl	8009c60 <_calloc_r>
 800911a:	69e3      	ldr	r3, [r4, #28]
 800911c:	60f0      	str	r0, [r6, #12]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e4      	bne.n	80090ee <_Balloc+0x2e>
 8009124:	2000      	movs	r0, #0
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	6802      	ldr	r2, [r0, #0]
 800912a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800912e:	2300      	movs	r3, #0
 8009130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009134:	e7f7      	b.n	8009126 <_Balloc+0x66>
 8009136:	bf00      	nop
 8009138:	0800cd81 	.word	0x0800cd81
 800913c:	0800ce01 	.word	0x0800ce01

08009140 <_Bfree>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	69c6      	ldr	r6, [r0, #28]
 8009144:	4605      	mov	r5, r0
 8009146:	460c      	mov	r4, r1
 8009148:	b976      	cbnz	r6, 8009168 <_Bfree+0x28>
 800914a:	2010      	movs	r0, #16
 800914c:	f7ff ff04 	bl	8008f58 <malloc>
 8009150:	4602      	mov	r2, r0
 8009152:	61e8      	str	r0, [r5, #28]
 8009154:	b920      	cbnz	r0, 8009160 <_Bfree+0x20>
 8009156:	218f      	movs	r1, #143	; 0x8f
 8009158:	4b08      	ldr	r3, [pc, #32]	; (800917c <_Bfree+0x3c>)
 800915a:	4809      	ldr	r0, [pc, #36]	; (8009180 <_Bfree+0x40>)
 800915c:	f000 fd62 	bl	8009c24 <__assert_func>
 8009160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009164:	6006      	str	r6, [r0, #0]
 8009166:	60c6      	str	r6, [r0, #12]
 8009168:	b13c      	cbz	r4, 800917a <_Bfree+0x3a>
 800916a:	69eb      	ldr	r3, [r5, #28]
 800916c:	6862      	ldr	r2, [r4, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009174:	6021      	str	r1, [r4, #0]
 8009176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	0800cd81 	.word	0x0800cd81
 8009180:	0800ce01 	.word	0x0800ce01

08009184 <__multadd>:
 8009184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009188:	4607      	mov	r7, r0
 800918a:	460c      	mov	r4, r1
 800918c:	461e      	mov	r6, r3
 800918e:	2000      	movs	r0, #0
 8009190:	690d      	ldr	r5, [r1, #16]
 8009192:	f101 0c14 	add.w	ip, r1, #20
 8009196:	f8dc 3000 	ldr.w	r3, [ip]
 800919a:	3001      	adds	r0, #1
 800919c:	b299      	uxth	r1, r3
 800919e:	fb02 6101 	mla	r1, r2, r1, r6
 80091a2:	0c1e      	lsrs	r6, r3, #16
 80091a4:	0c0b      	lsrs	r3, r1, #16
 80091a6:	fb02 3306 	mla	r3, r2, r6, r3
 80091aa:	b289      	uxth	r1, r1
 80091ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091b0:	4285      	cmp	r5, r0
 80091b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091b6:	f84c 1b04 	str.w	r1, [ip], #4
 80091ba:	dcec      	bgt.n	8009196 <__multadd+0x12>
 80091bc:	b30e      	cbz	r6, 8009202 <__multadd+0x7e>
 80091be:	68a3      	ldr	r3, [r4, #8]
 80091c0:	42ab      	cmp	r3, r5
 80091c2:	dc19      	bgt.n	80091f8 <__multadd+0x74>
 80091c4:	6861      	ldr	r1, [r4, #4]
 80091c6:	4638      	mov	r0, r7
 80091c8:	3101      	adds	r1, #1
 80091ca:	f7ff ff79 	bl	80090c0 <_Balloc>
 80091ce:	4680      	mov	r8, r0
 80091d0:	b928      	cbnz	r0, 80091de <__multadd+0x5a>
 80091d2:	4602      	mov	r2, r0
 80091d4:	21ba      	movs	r1, #186	; 0xba
 80091d6:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <__multadd+0x84>)
 80091d8:	480c      	ldr	r0, [pc, #48]	; (800920c <__multadd+0x88>)
 80091da:	f000 fd23 	bl	8009c24 <__assert_func>
 80091de:	6922      	ldr	r2, [r4, #16]
 80091e0:	f104 010c 	add.w	r1, r4, #12
 80091e4:	3202      	adds	r2, #2
 80091e6:	0092      	lsls	r2, r2, #2
 80091e8:	300c      	adds	r0, #12
 80091ea:	f000 fd0d 	bl	8009c08 <memcpy>
 80091ee:	4621      	mov	r1, r4
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff ffa5 	bl	8009140 <_Bfree>
 80091f6:	4644      	mov	r4, r8
 80091f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091fc:	3501      	adds	r5, #1
 80091fe:	615e      	str	r6, [r3, #20]
 8009200:	6125      	str	r5, [r4, #16]
 8009202:	4620      	mov	r0, r4
 8009204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009208:	0800cdf0 	.word	0x0800cdf0
 800920c:	0800ce01 	.word	0x0800ce01

08009210 <__hi0bits>:
 8009210:	0c02      	lsrs	r2, r0, #16
 8009212:	0412      	lsls	r2, r2, #16
 8009214:	4603      	mov	r3, r0
 8009216:	b9ca      	cbnz	r2, 800924c <__hi0bits+0x3c>
 8009218:	0403      	lsls	r3, r0, #16
 800921a:	2010      	movs	r0, #16
 800921c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009220:	bf04      	itt	eq
 8009222:	021b      	lsleq	r3, r3, #8
 8009224:	3008      	addeq	r0, #8
 8009226:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800922a:	bf04      	itt	eq
 800922c:	011b      	lsleq	r3, r3, #4
 800922e:	3004      	addeq	r0, #4
 8009230:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009234:	bf04      	itt	eq
 8009236:	009b      	lsleq	r3, r3, #2
 8009238:	3002      	addeq	r0, #2
 800923a:	2b00      	cmp	r3, #0
 800923c:	db05      	blt.n	800924a <__hi0bits+0x3a>
 800923e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009242:	f100 0001 	add.w	r0, r0, #1
 8009246:	bf08      	it	eq
 8009248:	2020      	moveq	r0, #32
 800924a:	4770      	bx	lr
 800924c:	2000      	movs	r0, #0
 800924e:	e7e5      	b.n	800921c <__hi0bits+0xc>

08009250 <__lo0bits>:
 8009250:	6803      	ldr	r3, [r0, #0]
 8009252:	4602      	mov	r2, r0
 8009254:	f013 0007 	ands.w	r0, r3, #7
 8009258:	d00b      	beq.n	8009272 <__lo0bits+0x22>
 800925a:	07d9      	lsls	r1, r3, #31
 800925c:	d421      	bmi.n	80092a2 <__lo0bits+0x52>
 800925e:	0798      	lsls	r0, r3, #30
 8009260:	bf49      	itett	mi
 8009262:	085b      	lsrmi	r3, r3, #1
 8009264:	089b      	lsrpl	r3, r3, #2
 8009266:	2001      	movmi	r0, #1
 8009268:	6013      	strmi	r3, [r2, #0]
 800926a:	bf5c      	itt	pl
 800926c:	2002      	movpl	r0, #2
 800926e:	6013      	strpl	r3, [r2, #0]
 8009270:	4770      	bx	lr
 8009272:	b299      	uxth	r1, r3
 8009274:	b909      	cbnz	r1, 800927a <__lo0bits+0x2a>
 8009276:	2010      	movs	r0, #16
 8009278:	0c1b      	lsrs	r3, r3, #16
 800927a:	b2d9      	uxtb	r1, r3
 800927c:	b909      	cbnz	r1, 8009282 <__lo0bits+0x32>
 800927e:	3008      	adds	r0, #8
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	0719      	lsls	r1, r3, #28
 8009284:	bf04      	itt	eq
 8009286:	091b      	lsreq	r3, r3, #4
 8009288:	3004      	addeq	r0, #4
 800928a:	0799      	lsls	r1, r3, #30
 800928c:	bf04      	itt	eq
 800928e:	089b      	lsreq	r3, r3, #2
 8009290:	3002      	addeq	r0, #2
 8009292:	07d9      	lsls	r1, r3, #31
 8009294:	d403      	bmi.n	800929e <__lo0bits+0x4e>
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	f100 0001 	add.w	r0, r0, #1
 800929c:	d003      	beq.n	80092a6 <__lo0bits+0x56>
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	4770      	bx	lr
 80092a2:	2000      	movs	r0, #0
 80092a4:	4770      	bx	lr
 80092a6:	2020      	movs	r0, #32
 80092a8:	4770      	bx	lr
	...

080092ac <__i2b>:
 80092ac:	b510      	push	{r4, lr}
 80092ae:	460c      	mov	r4, r1
 80092b0:	2101      	movs	r1, #1
 80092b2:	f7ff ff05 	bl	80090c0 <_Balloc>
 80092b6:	4602      	mov	r2, r0
 80092b8:	b928      	cbnz	r0, 80092c6 <__i2b+0x1a>
 80092ba:	f240 1145 	movw	r1, #325	; 0x145
 80092be:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <__i2b+0x24>)
 80092c0:	4804      	ldr	r0, [pc, #16]	; (80092d4 <__i2b+0x28>)
 80092c2:	f000 fcaf 	bl	8009c24 <__assert_func>
 80092c6:	2301      	movs	r3, #1
 80092c8:	6144      	str	r4, [r0, #20]
 80092ca:	6103      	str	r3, [r0, #16]
 80092cc:	bd10      	pop	{r4, pc}
 80092ce:	bf00      	nop
 80092d0:	0800cdf0 	.word	0x0800cdf0
 80092d4:	0800ce01 	.word	0x0800ce01

080092d8 <__multiply>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	4691      	mov	r9, r2
 80092de:	690a      	ldr	r2, [r1, #16]
 80092e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092e4:	460c      	mov	r4, r1
 80092e6:	429a      	cmp	r2, r3
 80092e8:	bfbe      	ittt	lt
 80092ea:	460b      	movlt	r3, r1
 80092ec:	464c      	movlt	r4, r9
 80092ee:	4699      	movlt	r9, r3
 80092f0:	6927      	ldr	r7, [r4, #16]
 80092f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092f6:	68a3      	ldr	r3, [r4, #8]
 80092f8:	6861      	ldr	r1, [r4, #4]
 80092fa:	eb07 060a 	add.w	r6, r7, sl
 80092fe:	42b3      	cmp	r3, r6
 8009300:	b085      	sub	sp, #20
 8009302:	bfb8      	it	lt
 8009304:	3101      	addlt	r1, #1
 8009306:	f7ff fedb 	bl	80090c0 <_Balloc>
 800930a:	b930      	cbnz	r0, 800931a <__multiply+0x42>
 800930c:	4602      	mov	r2, r0
 800930e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009312:	4b43      	ldr	r3, [pc, #268]	; (8009420 <__multiply+0x148>)
 8009314:	4843      	ldr	r0, [pc, #268]	; (8009424 <__multiply+0x14c>)
 8009316:	f000 fc85 	bl	8009c24 <__assert_func>
 800931a:	f100 0514 	add.w	r5, r0, #20
 800931e:	462b      	mov	r3, r5
 8009320:	2200      	movs	r2, #0
 8009322:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009326:	4543      	cmp	r3, r8
 8009328:	d321      	bcc.n	800936e <__multiply+0x96>
 800932a:	f104 0314 	add.w	r3, r4, #20
 800932e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009332:	f109 0314 	add.w	r3, r9, #20
 8009336:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800933a:	9202      	str	r2, [sp, #8]
 800933c:	1b3a      	subs	r2, r7, r4
 800933e:	3a15      	subs	r2, #21
 8009340:	f022 0203 	bic.w	r2, r2, #3
 8009344:	3204      	adds	r2, #4
 8009346:	f104 0115 	add.w	r1, r4, #21
 800934a:	428f      	cmp	r7, r1
 800934c:	bf38      	it	cc
 800934e:	2204      	movcc	r2, #4
 8009350:	9201      	str	r2, [sp, #4]
 8009352:	9a02      	ldr	r2, [sp, #8]
 8009354:	9303      	str	r3, [sp, #12]
 8009356:	429a      	cmp	r2, r3
 8009358:	d80c      	bhi.n	8009374 <__multiply+0x9c>
 800935a:	2e00      	cmp	r6, #0
 800935c:	dd03      	ble.n	8009366 <__multiply+0x8e>
 800935e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009362:	2b00      	cmp	r3, #0
 8009364:	d05a      	beq.n	800941c <__multiply+0x144>
 8009366:	6106      	str	r6, [r0, #16]
 8009368:	b005      	add	sp, #20
 800936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	f843 2b04 	str.w	r2, [r3], #4
 8009372:	e7d8      	b.n	8009326 <__multiply+0x4e>
 8009374:	f8b3 a000 	ldrh.w	sl, [r3]
 8009378:	f1ba 0f00 	cmp.w	sl, #0
 800937c:	d023      	beq.n	80093c6 <__multiply+0xee>
 800937e:	46a9      	mov	r9, r5
 8009380:	f04f 0c00 	mov.w	ip, #0
 8009384:	f104 0e14 	add.w	lr, r4, #20
 8009388:	f85e 2b04 	ldr.w	r2, [lr], #4
 800938c:	f8d9 1000 	ldr.w	r1, [r9]
 8009390:	fa1f fb82 	uxth.w	fp, r2
 8009394:	b289      	uxth	r1, r1
 8009396:	fb0a 110b 	mla	r1, sl, fp, r1
 800939a:	4461      	add	r1, ip
 800939c:	f8d9 c000 	ldr.w	ip, [r9]
 80093a0:	0c12      	lsrs	r2, r2, #16
 80093a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80093a6:	fb0a c202 	mla	r2, sl, r2, ip
 80093aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093ae:	b289      	uxth	r1, r1
 80093b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093b4:	4577      	cmp	r7, lr
 80093b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093ba:	f849 1b04 	str.w	r1, [r9], #4
 80093be:	d8e3      	bhi.n	8009388 <__multiply+0xb0>
 80093c0:	9a01      	ldr	r2, [sp, #4]
 80093c2:	f845 c002 	str.w	ip, [r5, r2]
 80093c6:	9a03      	ldr	r2, [sp, #12]
 80093c8:	3304      	adds	r3, #4
 80093ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093ce:	f1b9 0f00 	cmp.w	r9, #0
 80093d2:	d021      	beq.n	8009418 <__multiply+0x140>
 80093d4:	46ae      	mov	lr, r5
 80093d6:	f04f 0a00 	mov.w	sl, #0
 80093da:	6829      	ldr	r1, [r5, #0]
 80093dc:	f104 0c14 	add.w	ip, r4, #20
 80093e0:	f8bc b000 	ldrh.w	fp, [ip]
 80093e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093e8:	b289      	uxth	r1, r1
 80093ea:	fb09 220b 	mla	r2, r9, fp, r2
 80093ee:	4452      	add	r2, sl
 80093f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093f4:	f84e 1b04 	str.w	r1, [lr], #4
 80093f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80093fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009400:	f8be 1000 	ldrh.w	r1, [lr]
 8009404:	4567      	cmp	r7, ip
 8009406:	fb09 110a 	mla	r1, r9, sl, r1
 800940a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800940e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009412:	d8e5      	bhi.n	80093e0 <__multiply+0x108>
 8009414:	9a01      	ldr	r2, [sp, #4]
 8009416:	50a9      	str	r1, [r5, r2]
 8009418:	3504      	adds	r5, #4
 800941a:	e79a      	b.n	8009352 <__multiply+0x7a>
 800941c:	3e01      	subs	r6, #1
 800941e:	e79c      	b.n	800935a <__multiply+0x82>
 8009420:	0800cdf0 	.word	0x0800cdf0
 8009424:	0800ce01 	.word	0x0800ce01

08009428 <__pow5mult>:
 8009428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800942c:	4615      	mov	r5, r2
 800942e:	f012 0203 	ands.w	r2, r2, #3
 8009432:	4606      	mov	r6, r0
 8009434:	460f      	mov	r7, r1
 8009436:	d007      	beq.n	8009448 <__pow5mult+0x20>
 8009438:	4c25      	ldr	r4, [pc, #148]	; (80094d0 <__pow5mult+0xa8>)
 800943a:	3a01      	subs	r2, #1
 800943c:	2300      	movs	r3, #0
 800943e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009442:	f7ff fe9f 	bl	8009184 <__multadd>
 8009446:	4607      	mov	r7, r0
 8009448:	10ad      	asrs	r5, r5, #2
 800944a:	d03d      	beq.n	80094c8 <__pow5mult+0xa0>
 800944c:	69f4      	ldr	r4, [r6, #28]
 800944e:	b97c      	cbnz	r4, 8009470 <__pow5mult+0x48>
 8009450:	2010      	movs	r0, #16
 8009452:	f7ff fd81 	bl	8008f58 <malloc>
 8009456:	4602      	mov	r2, r0
 8009458:	61f0      	str	r0, [r6, #28]
 800945a:	b928      	cbnz	r0, 8009468 <__pow5mult+0x40>
 800945c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009460:	4b1c      	ldr	r3, [pc, #112]	; (80094d4 <__pow5mult+0xac>)
 8009462:	481d      	ldr	r0, [pc, #116]	; (80094d8 <__pow5mult+0xb0>)
 8009464:	f000 fbde 	bl	8009c24 <__assert_func>
 8009468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800946c:	6004      	str	r4, [r0, #0]
 800946e:	60c4      	str	r4, [r0, #12]
 8009470:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009478:	b94c      	cbnz	r4, 800948e <__pow5mult+0x66>
 800947a:	f240 2171 	movw	r1, #625	; 0x271
 800947e:	4630      	mov	r0, r6
 8009480:	f7ff ff14 	bl	80092ac <__i2b>
 8009484:	2300      	movs	r3, #0
 8009486:	4604      	mov	r4, r0
 8009488:	f8c8 0008 	str.w	r0, [r8, #8]
 800948c:	6003      	str	r3, [r0, #0]
 800948e:	f04f 0900 	mov.w	r9, #0
 8009492:	07eb      	lsls	r3, r5, #31
 8009494:	d50a      	bpl.n	80094ac <__pow5mult+0x84>
 8009496:	4639      	mov	r1, r7
 8009498:	4622      	mov	r2, r4
 800949a:	4630      	mov	r0, r6
 800949c:	f7ff ff1c 	bl	80092d8 <__multiply>
 80094a0:	4680      	mov	r8, r0
 80094a2:	4639      	mov	r1, r7
 80094a4:	4630      	mov	r0, r6
 80094a6:	f7ff fe4b 	bl	8009140 <_Bfree>
 80094aa:	4647      	mov	r7, r8
 80094ac:	106d      	asrs	r5, r5, #1
 80094ae:	d00b      	beq.n	80094c8 <__pow5mult+0xa0>
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	b938      	cbnz	r0, 80094c4 <__pow5mult+0x9c>
 80094b4:	4622      	mov	r2, r4
 80094b6:	4621      	mov	r1, r4
 80094b8:	4630      	mov	r0, r6
 80094ba:	f7ff ff0d 	bl	80092d8 <__multiply>
 80094be:	6020      	str	r0, [r4, #0]
 80094c0:	f8c0 9000 	str.w	r9, [r0]
 80094c4:	4604      	mov	r4, r0
 80094c6:	e7e4      	b.n	8009492 <__pow5mult+0x6a>
 80094c8:	4638      	mov	r0, r7
 80094ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ce:	bf00      	nop
 80094d0:	0800cf50 	.word	0x0800cf50
 80094d4:	0800cd81 	.word	0x0800cd81
 80094d8:	0800ce01 	.word	0x0800ce01

080094dc <__lshift>:
 80094dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e0:	460c      	mov	r4, r1
 80094e2:	4607      	mov	r7, r0
 80094e4:	4691      	mov	r9, r2
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	6849      	ldr	r1, [r1, #4]
 80094ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094ee:	68a3      	ldr	r3, [r4, #8]
 80094f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094f4:	f108 0601 	add.w	r6, r8, #1
 80094f8:	42b3      	cmp	r3, r6
 80094fa:	db0b      	blt.n	8009514 <__lshift+0x38>
 80094fc:	4638      	mov	r0, r7
 80094fe:	f7ff fddf 	bl	80090c0 <_Balloc>
 8009502:	4605      	mov	r5, r0
 8009504:	b948      	cbnz	r0, 800951a <__lshift+0x3e>
 8009506:	4602      	mov	r2, r0
 8009508:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800950c:	4b27      	ldr	r3, [pc, #156]	; (80095ac <__lshift+0xd0>)
 800950e:	4828      	ldr	r0, [pc, #160]	; (80095b0 <__lshift+0xd4>)
 8009510:	f000 fb88 	bl	8009c24 <__assert_func>
 8009514:	3101      	adds	r1, #1
 8009516:	005b      	lsls	r3, r3, #1
 8009518:	e7ee      	b.n	80094f8 <__lshift+0x1c>
 800951a:	2300      	movs	r3, #0
 800951c:	f100 0114 	add.w	r1, r0, #20
 8009520:	f100 0210 	add.w	r2, r0, #16
 8009524:	4618      	mov	r0, r3
 8009526:	4553      	cmp	r3, sl
 8009528:	db33      	blt.n	8009592 <__lshift+0xb6>
 800952a:	6920      	ldr	r0, [r4, #16]
 800952c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009530:	f104 0314 	add.w	r3, r4, #20
 8009534:	f019 091f 	ands.w	r9, r9, #31
 8009538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800953c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009540:	d02b      	beq.n	800959a <__lshift+0xbe>
 8009542:	468a      	mov	sl, r1
 8009544:	2200      	movs	r2, #0
 8009546:	f1c9 0e20 	rsb	lr, r9, #32
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	fa00 f009 	lsl.w	r0, r0, r9
 8009550:	4310      	orrs	r0, r2
 8009552:	f84a 0b04 	str.w	r0, [sl], #4
 8009556:	f853 2b04 	ldr.w	r2, [r3], #4
 800955a:	459c      	cmp	ip, r3
 800955c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009560:	d8f3      	bhi.n	800954a <__lshift+0x6e>
 8009562:	ebac 0304 	sub.w	r3, ip, r4
 8009566:	3b15      	subs	r3, #21
 8009568:	f023 0303 	bic.w	r3, r3, #3
 800956c:	3304      	adds	r3, #4
 800956e:	f104 0015 	add.w	r0, r4, #21
 8009572:	4584      	cmp	ip, r0
 8009574:	bf38      	it	cc
 8009576:	2304      	movcc	r3, #4
 8009578:	50ca      	str	r2, [r1, r3]
 800957a:	b10a      	cbz	r2, 8009580 <__lshift+0xa4>
 800957c:	f108 0602 	add.w	r6, r8, #2
 8009580:	3e01      	subs	r6, #1
 8009582:	4638      	mov	r0, r7
 8009584:	4621      	mov	r1, r4
 8009586:	612e      	str	r6, [r5, #16]
 8009588:	f7ff fdda 	bl	8009140 <_Bfree>
 800958c:	4628      	mov	r0, r5
 800958e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009592:	f842 0f04 	str.w	r0, [r2, #4]!
 8009596:	3301      	adds	r3, #1
 8009598:	e7c5      	b.n	8009526 <__lshift+0x4a>
 800959a:	3904      	subs	r1, #4
 800959c:	f853 2b04 	ldr.w	r2, [r3], #4
 80095a0:	459c      	cmp	ip, r3
 80095a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80095a6:	d8f9      	bhi.n	800959c <__lshift+0xc0>
 80095a8:	e7ea      	b.n	8009580 <__lshift+0xa4>
 80095aa:	bf00      	nop
 80095ac:	0800cdf0 	.word	0x0800cdf0
 80095b0:	0800ce01 	.word	0x0800ce01

080095b4 <__mcmp>:
 80095b4:	4603      	mov	r3, r0
 80095b6:	690a      	ldr	r2, [r1, #16]
 80095b8:	6900      	ldr	r0, [r0, #16]
 80095ba:	b530      	push	{r4, r5, lr}
 80095bc:	1a80      	subs	r0, r0, r2
 80095be:	d10d      	bne.n	80095dc <__mcmp+0x28>
 80095c0:	3314      	adds	r3, #20
 80095c2:	3114      	adds	r1, #20
 80095c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095d4:	4295      	cmp	r5, r2
 80095d6:	d002      	beq.n	80095de <__mcmp+0x2a>
 80095d8:	d304      	bcc.n	80095e4 <__mcmp+0x30>
 80095da:	2001      	movs	r0, #1
 80095dc:	bd30      	pop	{r4, r5, pc}
 80095de:	42a3      	cmp	r3, r4
 80095e0:	d3f4      	bcc.n	80095cc <__mcmp+0x18>
 80095e2:	e7fb      	b.n	80095dc <__mcmp+0x28>
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295
 80095e8:	e7f8      	b.n	80095dc <__mcmp+0x28>
	...

080095ec <__mdiff>:
 80095ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	460d      	mov	r5, r1
 80095f2:	4607      	mov	r7, r0
 80095f4:	4611      	mov	r1, r2
 80095f6:	4628      	mov	r0, r5
 80095f8:	4614      	mov	r4, r2
 80095fa:	f7ff ffdb 	bl	80095b4 <__mcmp>
 80095fe:	1e06      	subs	r6, r0, #0
 8009600:	d111      	bne.n	8009626 <__mdiff+0x3a>
 8009602:	4631      	mov	r1, r6
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff fd5b 	bl	80090c0 <_Balloc>
 800960a:	4602      	mov	r2, r0
 800960c:	b928      	cbnz	r0, 800961a <__mdiff+0x2e>
 800960e:	f240 2137 	movw	r1, #567	; 0x237
 8009612:	4b3a      	ldr	r3, [pc, #232]	; (80096fc <__mdiff+0x110>)
 8009614:	483a      	ldr	r0, [pc, #232]	; (8009700 <__mdiff+0x114>)
 8009616:	f000 fb05 	bl	8009c24 <__assert_func>
 800961a:	2301      	movs	r3, #1
 800961c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009620:	4610      	mov	r0, r2
 8009622:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	bfa4      	itt	ge
 8009628:	4623      	movge	r3, r4
 800962a:	462c      	movge	r4, r5
 800962c:	4638      	mov	r0, r7
 800962e:	6861      	ldr	r1, [r4, #4]
 8009630:	bfa6      	itte	ge
 8009632:	461d      	movge	r5, r3
 8009634:	2600      	movge	r6, #0
 8009636:	2601      	movlt	r6, #1
 8009638:	f7ff fd42 	bl	80090c0 <_Balloc>
 800963c:	4602      	mov	r2, r0
 800963e:	b918      	cbnz	r0, 8009648 <__mdiff+0x5c>
 8009640:	f240 2145 	movw	r1, #581	; 0x245
 8009644:	4b2d      	ldr	r3, [pc, #180]	; (80096fc <__mdiff+0x110>)
 8009646:	e7e5      	b.n	8009614 <__mdiff+0x28>
 8009648:	f102 0814 	add.w	r8, r2, #20
 800964c:	46c2      	mov	sl, r8
 800964e:	f04f 0c00 	mov.w	ip, #0
 8009652:	6927      	ldr	r7, [r4, #16]
 8009654:	60c6      	str	r6, [r0, #12]
 8009656:	692e      	ldr	r6, [r5, #16]
 8009658:	f104 0014 	add.w	r0, r4, #20
 800965c:	f105 0914 	add.w	r9, r5, #20
 8009660:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009664:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009668:	3410      	adds	r4, #16
 800966a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800966e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009672:	fa1f f18b 	uxth.w	r1, fp
 8009676:	4461      	add	r1, ip
 8009678:	fa1f fc83 	uxth.w	ip, r3
 800967c:	0c1b      	lsrs	r3, r3, #16
 800967e:	eba1 010c 	sub.w	r1, r1, ip
 8009682:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009686:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800968a:	b289      	uxth	r1, r1
 800968c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009690:	454e      	cmp	r6, r9
 8009692:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009696:	f84a 1b04 	str.w	r1, [sl], #4
 800969a:	d8e6      	bhi.n	800966a <__mdiff+0x7e>
 800969c:	1b73      	subs	r3, r6, r5
 800969e:	3b15      	subs	r3, #21
 80096a0:	f023 0303 	bic.w	r3, r3, #3
 80096a4:	3515      	adds	r5, #21
 80096a6:	3304      	adds	r3, #4
 80096a8:	42ae      	cmp	r6, r5
 80096aa:	bf38      	it	cc
 80096ac:	2304      	movcc	r3, #4
 80096ae:	4418      	add	r0, r3
 80096b0:	4443      	add	r3, r8
 80096b2:	461e      	mov	r6, r3
 80096b4:	4605      	mov	r5, r0
 80096b6:	4575      	cmp	r5, lr
 80096b8:	d30e      	bcc.n	80096d8 <__mdiff+0xec>
 80096ba:	f10e 0103 	add.w	r1, lr, #3
 80096be:	1a09      	subs	r1, r1, r0
 80096c0:	f021 0103 	bic.w	r1, r1, #3
 80096c4:	3803      	subs	r0, #3
 80096c6:	4586      	cmp	lr, r0
 80096c8:	bf38      	it	cc
 80096ca:	2100      	movcc	r1, #0
 80096cc:	440b      	add	r3, r1
 80096ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096d2:	b189      	cbz	r1, 80096f8 <__mdiff+0x10c>
 80096d4:	6117      	str	r7, [r2, #16]
 80096d6:	e7a3      	b.n	8009620 <__mdiff+0x34>
 80096d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80096dc:	fa1f f188 	uxth.w	r1, r8
 80096e0:	4461      	add	r1, ip
 80096e2:	140c      	asrs	r4, r1, #16
 80096e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096e8:	b289      	uxth	r1, r1
 80096ea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80096ee:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80096f2:	f846 1b04 	str.w	r1, [r6], #4
 80096f6:	e7de      	b.n	80096b6 <__mdiff+0xca>
 80096f8:	3f01      	subs	r7, #1
 80096fa:	e7e8      	b.n	80096ce <__mdiff+0xe2>
 80096fc:	0800cdf0 	.word	0x0800cdf0
 8009700:	0800ce01 	.word	0x0800ce01

08009704 <__d2b>:
 8009704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009706:	2101      	movs	r1, #1
 8009708:	4617      	mov	r7, r2
 800970a:	461c      	mov	r4, r3
 800970c:	9e08      	ldr	r6, [sp, #32]
 800970e:	f7ff fcd7 	bl	80090c0 <_Balloc>
 8009712:	4605      	mov	r5, r0
 8009714:	b930      	cbnz	r0, 8009724 <__d2b+0x20>
 8009716:	4602      	mov	r2, r0
 8009718:	f240 310f 	movw	r1, #783	; 0x30f
 800971c:	4b22      	ldr	r3, [pc, #136]	; (80097a8 <__d2b+0xa4>)
 800971e:	4823      	ldr	r0, [pc, #140]	; (80097ac <__d2b+0xa8>)
 8009720:	f000 fa80 	bl	8009c24 <__assert_func>
 8009724:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009728:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800972c:	bb24      	cbnz	r4, 8009778 <__d2b+0x74>
 800972e:	2f00      	cmp	r7, #0
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	d026      	beq.n	8009782 <__d2b+0x7e>
 8009734:	4668      	mov	r0, sp
 8009736:	9700      	str	r7, [sp, #0]
 8009738:	f7ff fd8a 	bl	8009250 <__lo0bits>
 800973c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009740:	b1e8      	cbz	r0, 800977e <__d2b+0x7a>
 8009742:	f1c0 0320 	rsb	r3, r0, #32
 8009746:	fa02 f303 	lsl.w	r3, r2, r3
 800974a:	430b      	orrs	r3, r1
 800974c:	40c2      	lsrs	r2, r0
 800974e:	616b      	str	r3, [r5, #20]
 8009750:	9201      	str	r2, [sp, #4]
 8009752:	9b01      	ldr	r3, [sp, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	bf14      	ite	ne
 8009758:	2102      	movne	r1, #2
 800975a:	2101      	moveq	r1, #1
 800975c:	61ab      	str	r3, [r5, #24]
 800975e:	6129      	str	r1, [r5, #16]
 8009760:	b1bc      	cbz	r4, 8009792 <__d2b+0x8e>
 8009762:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009766:	4404      	add	r4, r0
 8009768:	6034      	str	r4, [r6, #0]
 800976a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800976e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009770:	6018      	str	r0, [r3, #0]
 8009772:	4628      	mov	r0, r5
 8009774:	b003      	add	sp, #12
 8009776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800977c:	e7d7      	b.n	800972e <__d2b+0x2a>
 800977e:	6169      	str	r1, [r5, #20]
 8009780:	e7e7      	b.n	8009752 <__d2b+0x4e>
 8009782:	a801      	add	r0, sp, #4
 8009784:	f7ff fd64 	bl	8009250 <__lo0bits>
 8009788:	9b01      	ldr	r3, [sp, #4]
 800978a:	2101      	movs	r1, #1
 800978c:	616b      	str	r3, [r5, #20]
 800978e:	3020      	adds	r0, #32
 8009790:	e7e5      	b.n	800975e <__d2b+0x5a>
 8009792:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009796:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800979a:	6030      	str	r0, [r6, #0]
 800979c:	6918      	ldr	r0, [r3, #16]
 800979e:	f7ff fd37 	bl	8009210 <__hi0bits>
 80097a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80097a6:	e7e2      	b.n	800976e <__d2b+0x6a>
 80097a8:	0800cdf0 	.word	0x0800cdf0
 80097ac:	0800ce01 	.word	0x0800ce01

080097b0 <__ssputs_r>:
 80097b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	461f      	mov	r7, r3
 80097b6:	688e      	ldr	r6, [r1, #8]
 80097b8:	4682      	mov	sl, r0
 80097ba:	42be      	cmp	r6, r7
 80097bc:	460c      	mov	r4, r1
 80097be:	4690      	mov	r8, r2
 80097c0:	680b      	ldr	r3, [r1, #0]
 80097c2:	d82c      	bhi.n	800981e <__ssputs_r+0x6e>
 80097c4:	898a      	ldrh	r2, [r1, #12]
 80097c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097ca:	d026      	beq.n	800981a <__ssputs_r+0x6a>
 80097cc:	6965      	ldr	r5, [r4, #20]
 80097ce:	6909      	ldr	r1, [r1, #16]
 80097d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097d4:	eba3 0901 	sub.w	r9, r3, r1
 80097d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097dc:	1c7b      	adds	r3, r7, #1
 80097de:	444b      	add	r3, r9
 80097e0:	106d      	asrs	r5, r5, #1
 80097e2:	429d      	cmp	r5, r3
 80097e4:	bf38      	it	cc
 80097e6:	461d      	movcc	r5, r3
 80097e8:	0553      	lsls	r3, r2, #21
 80097ea:	d527      	bpl.n	800983c <__ssputs_r+0x8c>
 80097ec:	4629      	mov	r1, r5
 80097ee:	f7ff fbdb 	bl	8008fa8 <_malloc_r>
 80097f2:	4606      	mov	r6, r0
 80097f4:	b360      	cbz	r0, 8009850 <__ssputs_r+0xa0>
 80097f6:	464a      	mov	r2, r9
 80097f8:	6921      	ldr	r1, [r4, #16]
 80097fa:	f000 fa05 	bl	8009c08 <memcpy>
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	6126      	str	r6, [r4, #16]
 800980c:	444e      	add	r6, r9
 800980e:	6026      	str	r6, [r4, #0]
 8009810:	463e      	mov	r6, r7
 8009812:	6165      	str	r5, [r4, #20]
 8009814:	eba5 0509 	sub.w	r5, r5, r9
 8009818:	60a5      	str	r5, [r4, #8]
 800981a:	42be      	cmp	r6, r7
 800981c:	d900      	bls.n	8009820 <__ssputs_r+0x70>
 800981e:	463e      	mov	r6, r7
 8009820:	4632      	mov	r2, r6
 8009822:	4641      	mov	r1, r8
 8009824:	6820      	ldr	r0, [r4, #0]
 8009826:	f000 f9c5 	bl	8009bb4 <memmove>
 800982a:	2000      	movs	r0, #0
 800982c:	68a3      	ldr	r3, [r4, #8]
 800982e:	1b9b      	subs	r3, r3, r6
 8009830:	60a3      	str	r3, [r4, #8]
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	4433      	add	r3, r6
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983c:	462a      	mov	r2, r5
 800983e:	f000 fa35 	bl	8009cac <_realloc_r>
 8009842:	4606      	mov	r6, r0
 8009844:	2800      	cmp	r0, #0
 8009846:	d1e0      	bne.n	800980a <__ssputs_r+0x5a>
 8009848:	4650      	mov	r0, sl
 800984a:	6921      	ldr	r1, [r4, #16]
 800984c:	f7ff fb3c 	bl	8008ec8 <_free_r>
 8009850:	230c      	movs	r3, #12
 8009852:	f8ca 3000 	str.w	r3, [sl]
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	f04f 30ff 	mov.w	r0, #4294967295
 800985c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	e7e9      	b.n	8009838 <__ssputs_r+0x88>

08009864 <_svfiprintf_r>:
 8009864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009868:	4698      	mov	r8, r3
 800986a:	898b      	ldrh	r3, [r1, #12]
 800986c:	4607      	mov	r7, r0
 800986e:	061b      	lsls	r3, r3, #24
 8009870:	460d      	mov	r5, r1
 8009872:	4614      	mov	r4, r2
 8009874:	b09d      	sub	sp, #116	; 0x74
 8009876:	d50e      	bpl.n	8009896 <_svfiprintf_r+0x32>
 8009878:	690b      	ldr	r3, [r1, #16]
 800987a:	b963      	cbnz	r3, 8009896 <_svfiprintf_r+0x32>
 800987c:	2140      	movs	r1, #64	; 0x40
 800987e:	f7ff fb93 	bl	8008fa8 <_malloc_r>
 8009882:	6028      	str	r0, [r5, #0]
 8009884:	6128      	str	r0, [r5, #16]
 8009886:	b920      	cbnz	r0, 8009892 <_svfiprintf_r+0x2e>
 8009888:	230c      	movs	r3, #12
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	f04f 30ff 	mov.w	r0, #4294967295
 8009890:	e0d0      	b.n	8009a34 <_svfiprintf_r+0x1d0>
 8009892:	2340      	movs	r3, #64	; 0x40
 8009894:	616b      	str	r3, [r5, #20]
 8009896:	2300      	movs	r3, #0
 8009898:	9309      	str	r3, [sp, #36]	; 0x24
 800989a:	2320      	movs	r3, #32
 800989c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098a0:	2330      	movs	r3, #48	; 0x30
 80098a2:	f04f 0901 	mov.w	r9, #1
 80098a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009a4c <_svfiprintf_r+0x1e8>
 80098ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098b2:	4623      	mov	r3, r4
 80098b4:	469a      	mov	sl, r3
 80098b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ba:	b10a      	cbz	r2, 80098c0 <_svfiprintf_r+0x5c>
 80098bc:	2a25      	cmp	r2, #37	; 0x25
 80098be:	d1f9      	bne.n	80098b4 <_svfiprintf_r+0x50>
 80098c0:	ebba 0b04 	subs.w	fp, sl, r4
 80098c4:	d00b      	beq.n	80098de <_svfiprintf_r+0x7a>
 80098c6:	465b      	mov	r3, fp
 80098c8:	4622      	mov	r2, r4
 80098ca:	4629      	mov	r1, r5
 80098cc:	4638      	mov	r0, r7
 80098ce:	f7ff ff6f 	bl	80097b0 <__ssputs_r>
 80098d2:	3001      	adds	r0, #1
 80098d4:	f000 80a9 	beq.w	8009a2a <_svfiprintf_r+0x1c6>
 80098d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098da:	445a      	add	r2, fp
 80098dc:	9209      	str	r2, [sp, #36]	; 0x24
 80098de:	f89a 3000 	ldrb.w	r3, [sl]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 80a1 	beq.w	8009a2a <_svfiprintf_r+0x1c6>
 80098e8:	2300      	movs	r3, #0
 80098ea:	f04f 32ff 	mov.w	r2, #4294967295
 80098ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098f2:	f10a 0a01 	add.w	sl, sl, #1
 80098f6:	9304      	str	r3, [sp, #16]
 80098f8:	9307      	str	r3, [sp, #28]
 80098fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009900:	4654      	mov	r4, sl
 8009902:	2205      	movs	r2, #5
 8009904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009908:	4850      	ldr	r0, [pc, #320]	; (8009a4c <_svfiprintf_r+0x1e8>)
 800990a:	f7fe fc60 	bl	80081ce <memchr>
 800990e:	9a04      	ldr	r2, [sp, #16]
 8009910:	b9d8      	cbnz	r0, 800994a <_svfiprintf_r+0xe6>
 8009912:	06d0      	lsls	r0, r2, #27
 8009914:	bf44      	itt	mi
 8009916:	2320      	movmi	r3, #32
 8009918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800991c:	0711      	lsls	r1, r2, #28
 800991e:	bf44      	itt	mi
 8009920:	232b      	movmi	r3, #43	; 0x2b
 8009922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009926:	f89a 3000 	ldrb.w	r3, [sl]
 800992a:	2b2a      	cmp	r3, #42	; 0x2a
 800992c:	d015      	beq.n	800995a <_svfiprintf_r+0xf6>
 800992e:	4654      	mov	r4, sl
 8009930:	2000      	movs	r0, #0
 8009932:	f04f 0c0a 	mov.w	ip, #10
 8009936:	9a07      	ldr	r2, [sp, #28]
 8009938:	4621      	mov	r1, r4
 800993a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800993e:	3b30      	subs	r3, #48	; 0x30
 8009940:	2b09      	cmp	r3, #9
 8009942:	d94d      	bls.n	80099e0 <_svfiprintf_r+0x17c>
 8009944:	b1b0      	cbz	r0, 8009974 <_svfiprintf_r+0x110>
 8009946:	9207      	str	r2, [sp, #28]
 8009948:	e014      	b.n	8009974 <_svfiprintf_r+0x110>
 800994a:	eba0 0308 	sub.w	r3, r0, r8
 800994e:	fa09 f303 	lsl.w	r3, r9, r3
 8009952:	4313      	orrs	r3, r2
 8009954:	46a2      	mov	sl, r4
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	e7d2      	b.n	8009900 <_svfiprintf_r+0x9c>
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	1d19      	adds	r1, r3, #4
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	9103      	str	r1, [sp, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	bfbb      	ittet	lt
 8009966:	425b      	neglt	r3, r3
 8009968:	f042 0202 	orrlt.w	r2, r2, #2
 800996c:	9307      	strge	r3, [sp, #28]
 800996e:	9307      	strlt	r3, [sp, #28]
 8009970:	bfb8      	it	lt
 8009972:	9204      	strlt	r2, [sp, #16]
 8009974:	7823      	ldrb	r3, [r4, #0]
 8009976:	2b2e      	cmp	r3, #46	; 0x2e
 8009978:	d10c      	bne.n	8009994 <_svfiprintf_r+0x130>
 800997a:	7863      	ldrb	r3, [r4, #1]
 800997c:	2b2a      	cmp	r3, #42	; 0x2a
 800997e:	d134      	bne.n	80099ea <_svfiprintf_r+0x186>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	3402      	adds	r4, #2
 8009984:	1d1a      	adds	r2, r3, #4
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	9203      	str	r2, [sp, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	bfb8      	it	lt
 800998e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009992:	9305      	str	r3, [sp, #20]
 8009994:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009a50 <_svfiprintf_r+0x1ec>
 8009998:	2203      	movs	r2, #3
 800999a:	4650      	mov	r0, sl
 800999c:	7821      	ldrb	r1, [r4, #0]
 800999e:	f7fe fc16 	bl	80081ce <memchr>
 80099a2:	b138      	cbz	r0, 80099b4 <_svfiprintf_r+0x150>
 80099a4:	2240      	movs	r2, #64	; 0x40
 80099a6:	9b04      	ldr	r3, [sp, #16]
 80099a8:	eba0 000a 	sub.w	r0, r0, sl
 80099ac:	4082      	lsls	r2, r0
 80099ae:	4313      	orrs	r3, r2
 80099b0:	3401      	adds	r4, #1
 80099b2:	9304      	str	r3, [sp, #16]
 80099b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099b8:	2206      	movs	r2, #6
 80099ba:	4826      	ldr	r0, [pc, #152]	; (8009a54 <_svfiprintf_r+0x1f0>)
 80099bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099c0:	f7fe fc05 	bl	80081ce <memchr>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d038      	beq.n	8009a3a <_svfiprintf_r+0x1d6>
 80099c8:	4b23      	ldr	r3, [pc, #140]	; (8009a58 <_svfiprintf_r+0x1f4>)
 80099ca:	bb1b      	cbnz	r3, 8009a14 <_svfiprintf_r+0x1b0>
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	3307      	adds	r3, #7
 80099d0:	f023 0307 	bic.w	r3, r3, #7
 80099d4:	3308      	adds	r3, #8
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099da:	4433      	add	r3, r6
 80099dc:	9309      	str	r3, [sp, #36]	; 0x24
 80099de:	e768      	b.n	80098b2 <_svfiprintf_r+0x4e>
 80099e0:	460c      	mov	r4, r1
 80099e2:	2001      	movs	r0, #1
 80099e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80099e8:	e7a6      	b.n	8009938 <_svfiprintf_r+0xd4>
 80099ea:	2300      	movs	r3, #0
 80099ec:	f04f 0c0a 	mov.w	ip, #10
 80099f0:	4619      	mov	r1, r3
 80099f2:	3401      	adds	r4, #1
 80099f4:	9305      	str	r3, [sp, #20]
 80099f6:	4620      	mov	r0, r4
 80099f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099fc:	3a30      	subs	r2, #48	; 0x30
 80099fe:	2a09      	cmp	r2, #9
 8009a00:	d903      	bls.n	8009a0a <_svfiprintf_r+0x1a6>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0c6      	beq.n	8009994 <_svfiprintf_r+0x130>
 8009a06:	9105      	str	r1, [sp, #20]
 8009a08:	e7c4      	b.n	8009994 <_svfiprintf_r+0x130>
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a12:	e7f0      	b.n	80099f6 <_svfiprintf_r+0x192>
 8009a14:	ab03      	add	r3, sp, #12
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	462a      	mov	r2, r5
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <_svfiprintf_r+0x1f8>)
 8009a1e:	a904      	add	r1, sp, #16
 8009a20:	f7fd fe6e 	bl	8007700 <_printf_float>
 8009a24:	1c42      	adds	r2, r0, #1
 8009a26:	4606      	mov	r6, r0
 8009a28:	d1d6      	bne.n	80099d8 <_svfiprintf_r+0x174>
 8009a2a:	89ab      	ldrh	r3, [r5, #12]
 8009a2c:	065b      	lsls	r3, r3, #25
 8009a2e:	f53f af2d 	bmi.w	800988c <_svfiprintf_r+0x28>
 8009a32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a34:	b01d      	add	sp, #116	; 0x74
 8009a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3a:	ab03      	add	r3, sp, #12
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	462a      	mov	r2, r5
 8009a40:	4638      	mov	r0, r7
 8009a42:	4b06      	ldr	r3, [pc, #24]	; (8009a5c <_svfiprintf_r+0x1f8>)
 8009a44:	a904      	add	r1, sp, #16
 8009a46:	f7fe f8fb 	bl	8007c40 <_printf_i>
 8009a4a:	e7eb      	b.n	8009a24 <_svfiprintf_r+0x1c0>
 8009a4c:	0800cf5c 	.word	0x0800cf5c
 8009a50:	0800cf62 	.word	0x0800cf62
 8009a54:	0800cf66 	.word	0x0800cf66
 8009a58:	08007701 	.word	0x08007701
 8009a5c:	080097b1 	.word	0x080097b1

08009a60 <__sflush_r>:
 8009a60:	898a      	ldrh	r2, [r1, #12]
 8009a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a64:	4605      	mov	r5, r0
 8009a66:	0710      	lsls	r0, r2, #28
 8009a68:	460c      	mov	r4, r1
 8009a6a:	d457      	bmi.n	8009b1c <__sflush_r+0xbc>
 8009a6c:	684b      	ldr	r3, [r1, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	dc04      	bgt.n	8009a7c <__sflush_r+0x1c>
 8009a72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dc01      	bgt.n	8009a7c <__sflush_r+0x1c>
 8009a78:	2000      	movs	r0, #0
 8009a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	d0fa      	beq.n	8009a78 <__sflush_r+0x18>
 8009a82:	2300      	movs	r3, #0
 8009a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a88:	682f      	ldr	r7, [r5, #0]
 8009a8a:	6a21      	ldr	r1, [r4, #32]
 8009a8c:	602b      	str	r3, [r5, #0]
 8009a8e:	d032      	beq.n	8009af6 <__sflush_r+0x96>
 8009a90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	075a      	lsls	r2, r3, #29
 8009a96:	d505      	bpl.n	8009aa4 <__sflush_r+0x44>
 8009a98:	6863      	ldr	r3, [r4, #4]
 8009a9a:	1ac0      	subs	r0, r0, r3
 8009a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a9e:	b10b      	cbz	r3, 8009aa4 <__sflush_r+0x44>
 8009aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009aa2:	1ac0      	subs	r0, r0, r3
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aaa:	4628      	mov	r0, r5
 8009aac:	6a21      	ldr	r1, [r4, #32]
 8009aae:	47b0      	blx	r6
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	d106      	bne.n	8009ac4 <__sflush_r+0x64>
 8009ab6:	6829      	ldr	r1, [r5, #0]
 8009ab8:	291d      	cmp	r1, #29
 8009aba:	d82b      	bhi.n	8009b14 <__sflush_r+0xb4>
 8009abc:	4a28      	ldr	r2, [pc, #160]	; (8009b60 <__sflush_r+0x100>)
 8009abe:	410a      	asrs	r2, r1
 8009ac0:	07d6      	lsls	r6, r2, #31
 8009ac2:	d427      	bmi.n	8009b14 <__sflush_r+0xb4>
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	6062      	str	r2, [r4, #4]
 8009ac8:	6922      	ldr	r2, [r4, #16]
 8009aca:	04d9      	lsls	r1, r3, #19
 8009acc:	6022      	str	r2, [r4, #0]
 8009ace:	d504      	bpl.n	8009ada <__sflush_r+0x7a>
 8009ad0:	1c42      	adds	r2, r0, #1
 8009ad2:	d101      	bne.n	8009ad8 <__sflush_r+0x78>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	b903      	cbnz	r3, 8009ada <__sflush_r+0x7a>
 8009ad8:	6560      	str	r0, [r4, #84]	; 0x54
 8009ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009adc:	602f      	str	r7, [r5, #0]
 8009ade:	2900      	cmp	r1, #0
 8009ae0:	d0ca      	beq.n	8009a78 <__sflush_r+0x18>
 8009ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ae6:	4299      	cmp	r1, r3
 8009ae8:	d002      	beq.n	8009af0 <__sflush_r+0x90>
 8009aea:	4628      	mov	r0, r5
 8009aec:	f7ff f9ec 	bl	8008ec8 <_free_r>
 8009af0:	2000      	movs	r0, #0
 8009af2:	6360      	str	r0, [r4, #52]	; 0x34
 8009af4:	e7c1      	b.n	8009a7a <__sflush_r+0x1a>
 8009af6:	2301      	movs	r3, #1
 8009af8:	4628      	mov	r0, r5
 8009afa:	47b0      	blx	r6
 8009afc:	1c41      	adds	r1, r0, #1
 8009afe:	d1c8      	bne.n	8009a92 <__sflush_r+0x32>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0c5      	beq.n	8009a92 <__sflush_r+0x32>
 8009b06:	2b1d      	cmp	r3, #29
 8009b08:	d001      	beq.n	8009b0e <__sflush_r+0xae>
 8009b0a:	2b16      	cmp	r3, #22
 8009b0c:	d101      	bne.n	8009b12 <__sflush_r+0xb2>
 8009b0e:	602f      	str	r7, [r5, #0]
 8009b10:	e7b2      	b.n	8009a78 <__sflush_r+0x18>
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	e7ae      	b.n	8009a7a <__sflush_r+0x1a>
 8009b1c:	690f      	ldr	r7, [r1, #16]
 8009b1e:	2f00      	cmp	r7, #0
 8009b20:	d0aa      	beq.n	8009a78 <__sflush_r+0x18>
 8009b22:	0793      	lsls	r3, r2, #30
 8009b24:	bf18      	it	ne
 8009b26:	2300      	movne	r3, #0
 8009b28:	680e      	ldr	r6, [r1, #0]
 8009b2a:	bf08      	it	eq
 8009b2c:	694b      	ldreq	r3, [r1, #20]
 8009b2e:	1bf6      	subs	r6, r6, r7
 8009b30:	600f      	str	r7, [r1, #0]
 8009b32:	608b      	str	r3, [r1, #8]
 8009b34:	2e00      	cmp	r6, #0
 8009b36:	dd9f      	ble.n	8009a78 <__sflush_r+0x18>
 8009b38:	4633      	mov	r3, r6
 8009b3a:	463a      	mov	r2, r7
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	6a21      	ldr	r1, [r4, #32]
 8009b40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009b44:	47e0      	blx	ip
 8009b46:	2800      	cmp	r0, #0
 8009b48:	dc06      	bgt.n	8009b58 <__sflush_r+0xf8>
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b54:	81a3      	strh	r3, [r4, #12]
 8009b56:	e790      	b.n	8009a7a <__sflush_r+0x1a>
 8009b58:	4407      	add	r7, r0
 8009b5a:	1a36      	subs	r6, r6, r0
 8009b5c:	e7ea      	b.n	8009b34 <__sflush_r+0xd4>
 8009b5e:	bf00      	nop
 8009b60:	dfbffffe 	.word	0xdfbffffe

08009b64 <_fflush_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	690b      	ldr	r3, [r1, #16]
 8009b68:	4605      	mov	r5, r0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	b913      	cbnz	r3, 8009b74 <_fflush_r+0x10>
 8009b6e:	2500      	movs	r5, #0
 8009b70:	4628      	mov	r0, r5
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	b118      	cbz	r0, 8009b7e <_fflush_r+0x1a>
 8009b76:	6a03      	ldr	r3, [r0, #32]
 8009b78:	b90b      	cbnz	r3, 8009b7e <_fflush_r+0x1a>
 8009b7a:	f7fe fa0f 	bl	8007f9c <__sinit>
 8009b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0f3      	beq.n	8009b6e <_fflush_r+0xa>
 8009b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b88:	07d0      	lsls	r0, r2, #31
 8009b8a:	d404      	bmi.n	8009b96 <_fflush_r+0x32>
 8009b8c:	0599      	lsls	r1, r3, #22
 8009b8e:	d402      	bmi.n	8009b96 <_fflush_r+0x32>
 8009b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b92:	f7fe fb1a 	bl	80081ca <__retarget_lock_acquire_recursive>
 8009b96:	4628      	mov	r0, r5
 8009b98:	4621      	mov	r1, r4
 8009b9a:	f7ff ff61 	bl	8009a60 <__sflush_r>
 8009b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	07da      	lsls	r2, r3, #31
 8009ba4:	d4e4      	bmi.n	8009b70 <_fflush_r+0xc>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	059b      	lsls	r3, r3, #22
 8009baa:	d4e1      	bmi.n	8009b70 <_fflush_r+0xc>
 8009bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bae:	f7fe fb0d 	bl	80081cc <__retarget_lock_release_recursive>
 8009bb2:	e7dd      	b.n	8009b70 <_fflush_r+0xc>

08009bb4 <memmove>:
 8009bb4:	4288      	cmp	r0, r1
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	eb01 0402 	add.w	r4, r1, r2
 8009bbc:	d902      	bls.n	8009bc4 <memmove+0x10>
 8009bbe:	4284      	cmp	r4, r0
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	d807      	bhi.n	8009bd4 <memmove+0x20>
 8009bc4:	1e43      	subs	r3, r0, #1
 8009bc6:	42a1      	cmp	r1, r4
 8009bc8:	d008      	beq.n	8009bdc <memmove+0x28>
 8009bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bd2:	e7f8      	b.n	8009bc6 <memmove+0x12>
 8009bd4:	4601      	mov	r1, r0
 8009bd6:	4402      	add	r2, r0
 8009bd8:	428a      	cmp	r2, r1
 8009bda:	d100      	bne.n	8009bde <memmove+0x2a>
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009be6:	e7f7      	b.n	8009bd8 <memmove+0x24>

08009be8 <_sbrk_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	2300      	movs	r3, #0
 8009bec:	4d05      	ldr	r5, [pc, #20]	; (8009c04 <_sbrk_r+0x1c>)
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	f7f9 ffc6 	bl	8003b84 <_sbrk>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_sbrk_r+0x1a>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_sbrk_r+0x1a>
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	20000ad4 	.word	0x20000ad4

08009c08 <memcpy>:
 8009c08:	440a      	add	r2, r1
 8009c0a:	4291      	cmp	r1, r2
 8009c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c10:	d100      	bne.n	8009c14 <memcpy+0xc>
 8009c12:	4770      	bx	lr
 8009c14:	b510      	push	{r4, lr}
 8009c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c1a:	4291      	cmp	r1, r2
 8009c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c20:	d1f9      	bne.n	8009c16 <memcpy+0xe>
 8009c22:	bd10      	pop	{r4, pc}

08009c24 <__assert_func>:
 8009c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c26:	4614      	mov	r4, r2
 8009c28:	461a      	mov	r2, r3
 8009c2a:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <__assert_func+0x2c>)
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68d8      	ldr	r0, [r3, #12]
 8009c32:	b14c      	cbz	r4, 8009c48 <__assert_func+0x24>
 8009c34:	4b07      	ldr	r3, [pc, #28]	; (8009c54 <__assert_func+0x30>)
 8009c36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c3a:	9100      	str	r1, [sp, #0]
 8009c3c:	462b      	mov	r3, r5
 8009c3e:	4906      	ldr	r1, [pc, #24]	; (8009c58 <__assert_func+0x34>)
 8009c40:	f000 f870 	bl	8009d24 <fiprintf>
 8009c44:	f000 f880 	bl	8009d48 <abort>
 8009c48:	4b04      	ldr	r3, [pc, #16]	; (8009c5c <__assert_func+0x38>)
 8009c4a:	461c      	mov	r4, r3
 8009c4c:	e7f3      	b.n	8009c36 <__assert_func+0x12>
 8009c4e:	bf00      	nop
 8009c50:	200000d0 	.word	0x200000d0
 8009c54:	0800cf77 	.word	0x0800cf77
 8009c58:	0800cf84 	.word	0x0800cf84
 8009c5c:	0800cfb2 	.word	0x0800cfb2

08009c60 <_calloc_r>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	fba1 5402 	umull	r5, r4, r1, r2
 8009c66:	b934      	cbnz	r4, 8009c76 <_calloc_r+0x16>
 8009c68:	4629      	mov	r1, r5
 8009c6a:	f7ff f99d 	bl	8008fa8 <_malloc_r>
 8009c6e:	4606      	mov	r6, r0
 8009c70:	b928      	cbnz	r0, 8009c7e <_calloc_r+0x1e>
 8009c72:	4630      	mov	r0, r6
 8009c74:	bd70      	pop	{r4, r5, r6, pc}
 8009c76:	220c      	movs	r2, #12
 8009c78:	2600      	movs	r6, #0
 8009c7a:	6002      	str	r2, [r0, #0]
 8009c7c:	e7f9      	b.n	8009c72 <_calloc_r+0x12>
 8009c7e:	462a      	mov	r2, r5
 8009c80:	4621      	mov	r1, r4
 8009c82:	f7fe fa24 	bl	80080ce <memset>
 8009c86:	e7f4      	b.n	8009c72 <_calloc_r+0x12>

08009c88 <__ascii_mbtowc>:
 8009c88:	b082      	sub	sp, #8
 8009c8a:	b901      	cbnz	r1, 8009c8e <__ascii_mbtowc+0x6>
 8009c8c:	a901      	add	r1, sp, #4
 8009c8e:	b142      	cbz	r2, 8009ca2 <__ascii_mbtowc+0x1a>
 8009c90:	b14b      	cbz	r3, 8009ca6 <__ascii_mbtowc+0x1e>
 8009c92:	7813      	ldrb	r3, [r2, #0]
 8009c94:	600b      	str	r3, [r1, #0]
 8009c96:	7812      	ldrb	r2, [r2, #0]
 8009c98:	1e10      	subs	r0, r2, #0
 8009c9a:	bf18      	it	ne
 8009c9c:	2001      	movne	r0, #1
 8009c9e:	b002      	add	sp, #8
 8009ca0:	4770      	bx	lr
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	e7fb      	b.n	8009c9e <__ascii_mbtowc+0x16>
 8009ca6:	f06f 0001 	mvn.w	r0, #1
 8009caa:	e7f8      	b.n	8009c9e <__ascii_mbtowc+0x16>

08009cac <_realloc_r>:
 8009cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb0:	4680      	mov	r8, r0
 8009cb2:	4614      	mov	r4, r2
 8009cb4:	460e      	mov	r6, r1
 8009cb6:	b921      	cbnz	r1, 8009cc2 <_realloc_r+0x16>
 8009cb8:	4611      	mov	r1, r2
 8009cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbe:	f7ff b973 	b.w	8008fa8 <_malloc_r>
 8009cc2:	b92a      	cbnz	r2, 8009cd0 <_realloc_r+0x24>
 8009cc4:	f7ff f900 	bl	8008ec8 <_free_r>
 8009cc8:	4625      	mov	r5, r4
 8009cca:	4628      	mov	r0, r5
 8009ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd0:	f000 f841 	bl	8009d56 <_malloc_usable_size_r>
 8009cd4:	4284      	cmp	r4, r0
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	d802      	bhi.n	8009ce0 <_realloc_r+0x34>
 8009cda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cde:	d812      	bhi.n	8009d06 <_realloc_r+0x5a>
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	f7ff f960 	bl	8008fa8 <_malloc_r>
 8009ce8:	4605      	mov	r5, r0
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d0ed      	beq.n	8009cca <_realloc_r+0x1e>
 8009cee:	42bc      	cmp	r4, r7
 8009cf0:	4622      	mov	r2, r4
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	bf28      	it	cs
 8009cf6:	463a      	movcs	r2, r7
 8009cf8:	f7ff ff86 	bl	8009c08 <memcpy>
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	4640      	mov	r0, r8
 8009d00:	f7ff f8e2 	bl	8008ec8 <_free_r>
 8009d04:	e7e1      	b.n	8009cca <_realloc_r+0x1e>
 8009d06:	4635      	mov	r5, r6
 8009d08:	e7df      	b.n	8009cca <_realloc_r+0x1e>

08009d0a <__ascii_wctomb>:
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	b141      	cbz	r1, 8009d22 <__ascii_wctomb+0x18>
 8009d10:	2aff      	cmp	r2, #255	; 0xff
 8009d12:	d904      	bls.n	8009d1e <__ascii_wctomb+0x14>
 8009d14:	228a      	movs	r2, #138	; 0x8a
 8009d16:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	4770      	bx	lr
 8009d1e:	2001      	movs	r0, #1
 8009d20:	700a      	strb	r2, [r1, #0]
 8009d22:	4770      	bx	lr

08009d24 <fiprintf>:
 8009d24:	b40e      	push	{r1, r2, r3}
 8009d26:	b503      	push	{r0, r1, lr}
 8009d28:	4601      	mov	r1, r0
 8009d2a:	ab03      	add	r3, sp, #12
 8009d2c:	4805      	ldr	r0, [pc, #20]	; (8009d44 <fiprintf+0x20>)
 8009d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d32:	6800      	ldr	r0, [r0, #0]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	f000 f83d 	bl	8009db4 <_vfiprintf_r>
 8009d3a:	b002      	add	sp, #8
 8009d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d40:	b003      	add	sp, #12
 8009d42:	4770      	bx	lr
 8009d44:	200000d0 	.word	0x200000d0

08009d48 <abort>:
 8009d48:	2006      	movs	r0, #6
 8009d4a:	b508      	push	{r3, lr}
 8009d4c:	f000 fa0a 	bl	800a164 <raise>
 8009d50:	2001      	movs	r0, #1
 8009d52:	f7f9 fea3 	bl	8003a9c <_exit>

08009d56 <_malloc_usable_size_r>:
 8009d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d5a:	1f18      	subs	r0, r3, #4
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bfbc      	itt	lt
 8009d60:	580b      	ldrlt	r3, [r1, r0]
 8009d62:	18c0      	addlt	r0, r0, r3
 8009d64:	4770      	bx	lr

08009d66 <__sfputc_r>:
 8009d66:	6893      	ldr	r3, [r2, #8]
 8009d68:	b410      	push	{r4}
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	6093      	str	r3, [r2, #8]
 8009d70:	da07      	bge.n	8009d82 <__sfputc_r+0x1c>
 8009d72:	6994      	ldr	r4, [r2, #24]
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	db01      	blt.n	8009d7c <__sfputc_r+0x16>
 8009d78:	290a      	cmp	r1, #10
 8009d7a:	d102      	bne.n	8009d82 <__sfputc_r+0x1c>
 8009d7c:	bc10      	pop	{r4}
 8009d7e:	f000 b933 	b.w	8009fe8 <__swbuf_r>
 8009d82:	6813      	ldr	r3, [r2, #0]
 8009d84:	1c58      	adds	r0, r3, #1
 8009d86:	6010      	str	r0, [r2, #0]
 8009d88:	7019      	strb	r1, [r3, #0]
 8009d8a:	4608      	mov	r0, r1
 8009d8c:	bc10      	pop	{r4}
 8009d8e:	4770      	bx	lr

08009d90 <__sfputs_r>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	4606      	mov	r6, r0
 8009d94:	460f      	mov	r7, r1
 8009d96:	4614      	mov	r4, r2
 8009d98:	18d5      	adds	r5, r2, r3
 8009d9a:	42ac      	cmp	r4, r5
 8009d9c:	d101      	bne.n	8009da2 <__sfputs_r+0x12>
 8009d9e:	2000      	movs	r0, #0
 8009da0:	e007      	b.n	8009db2 <__sfputs_r+0x22>
 8009da2:	463a      	mov	r2, r7
 8009da4:	4630      	mov	r0, r6
 8009da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009daa:	f7ff ffdc 	bl	8009d66 <__sfputc_r>
 8009dae:	1c43      	adds	r3, r0, #1
 8009db0:	d1f3      	bne.n	8009d9a <__sfputs_r+0xa>
 8009db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009db4 <_vfiprintf_r>:
 8009db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db8:	460d      	mov	r5, r1
 8009dba:	4614      	mov	r4, r2
 8009dbc:	4698      	mov	r8, r3
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	b09d      	sub	sp, #116	; 0x74
 8009dc2:	b118      	cbz	r0, 8009dcc <_vfiprintf_r+0x18>
 8009dc4:	6a03      	ldr	r3, [r0, #32]
 8009dc6:	b90b      	cbnz	r3, 8009dcc <_vfiprintf_r+0x18>
 8009dc8:	f7fe f8e8 	bl	8007f9c <__sinit>
 8009dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dce:	07d9      	lsls	r1, r3, #31
 8009dd0:	d405      	bmi.n	8009dde <_vfiprintf_r+0x2a>
 8009dd2:	89ab      	ldrh	r3, [r5, #12]
 8009dd4:	059a      	lsls	r2, r3, #22
 8009dd6:	d402      	bmi.n	8009dde <_vfiprintf_r+0x2a>
 8009dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dda:	f7fe f9f6 	bl	80081ca <__retarget_lock_acquire_recursive>
 8009dde:	89ab      	ldrh	r3, [r5, #12]
 8009de0:	071b      	lsls	r3, r3, #28
 8009de2:	d501      	bpl.n	8009de8 <_vfiprintf_r+0x34>
 8009de4:	692b      	ldr	r3, [r5, #16]
 8009de6:	b99b      	cbnz	r3, 8009e10 <_vfiprintf_r+0x5c>
 8009de8:	4629      	mov	r1, r5
 8009dea:	4630      	mov	r0, r6
 8009dec:	f000 f93a 	bl	800a064 <__swsetup_r>
 8009df0:	b170      	cbz	r0, 8009e10 <_vfiprintf_r+0x5c>
 8009df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009df4:	07dc      	lsls	r4, r3, #31
 8009df6:	d504      	bpl.n	8009e02 <_vfiprintf_r+0x4e>
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	b01d      	add	sp, #116	; 0x74
 8009dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e02:	89ab      	ldrh	r3, [r5, #12]
 8009e04:	0598      	lsls	r0, r3, #22
 8009e06:	d4f7      	bmi.n	8009df8 <_vfiprintf_r+0x44>
 8009e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e0a:	f7fe f9df 	bl	80081cc <__retarget_lock_release_recursive>
 8009e0e:	e7f3      	b.n	8009df8 <_vfiprintf_r+0x44>
 8009e10:	2300      	movs	r3, #0
 8009e12:	9309      	str	r3, [sp, #36]	; 0x24
 8009e14:	2320      	movs	r3, #32
 8009e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e1a:	2330      	movs	r3, #48	; 0x30
 8009e1c:	f04f 0901 	mov.w	r9, #1
 8009e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e24:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009fd4 <_vfiprintf_r+0x220>
 8009e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e2c:	4623      	mov	r3, r4
 8009e2e:	469a      	mov	sl, r3
 8009e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e34:	b10a      	cbz	r2, 8009e3a <_vfiprintf_r+0x86>
 8009e36:	2a25      	cmp	r2, #37	; 0x25
 8009e38:	d1f9      	bne.n	8009e2e <_vfiprintf_r+0x7a>
 8009e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e3e:	d00b      	beq.n	8009e58 <_vfiprintf_r+0xa4>
 8009e40:	465b      	mov	r3, fp
 8009e42:	4622      	mov	r2, r4
 8009e44:	4629      	mov	r1, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7ff ffa2 	bl	8009d90 <__sfputs_r>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	f000 80a9 	beq.w	8009fa4 <_vfiprintf_r+0x1f0>
 8009e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e54:	445a      	add	r2, fp
 8009e56:	9209      	str	r2, [sp, #36]	; 0x24
 8009e58:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 80a1 	beq.w	8009fa4 <_vfiprintf_r+0x1f0>
 8009e62:	2300      	movs	r3, #0
 8009e64:	f04f 32ff 	mov.w	r2, #4294967295
 8009e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e6c:	f10a 0a01 	add.w	sl, sl, #1
 8009e70:	9304      	str	r3, [sp, #16]
 8009e72:	9307      	str	r3, [sp, #28]
 8009e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e78:	931a      	str	r3, [sp, #104]	; 0x68
 8009e7a:	4654      	mov	r4, sl
 8009e7c:	2205      	movs	r2, #5
 8009e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e82:	4854      	ldr	r0, [pc, #336]	; (8009fd4 <_vfiprintf_r+0x220>)
 8009e84:	f7fe f9a3 	bl	80081ce <memchr>
 8009e88:	9a04      	ldr	r2, [sp, #16]
 8009e8a:	b9d8      	cbnz	r0, 8009ec4 <_vfiprintf_r+0x110>
 8009e8c:	06d1      	lsls	r1, r2, #27
 8009e8e:	bf44      	itt	mi
 8009e90:	2320      	movmi	r3, #32
 8009e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e96:	0713      	lsls	r3, r2, #28
 8009e98:	bf44      	itt	mi
 8009e9a:	232b      	movmi	r3, #43	; 0x2b
 8009e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea6:	d015      	beq.n	8009ed4 <_vfiprintf_r+0x120>
 8009ea8:	4654      	mov	r4, sl
 8009eaa:	2000      	movs	r0, #0
 8009eac:	f04f 0c0a 	mov.w	ip, #10
 8009eb0:	9a07      	ldr	r2, [sp, #28]
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb8:	3b30      	subs	r3, #48	; 0x30
 8009eba:	2b09      	cmp	r3, #9
 8009ebc:	d94d      	bls.n	8009f5a <_vfiprintf_r+0x1a6>
 8009ebe:	b1b0      	cbz	r0, 8009eee <_vfiprintf_r+0x13a>
 8009ec0:	9207      	str	r2, [sp, #28]
 8009ec2:	e014      	b.n	8009eee <_vfiprintf_r+0x13a>
 8009ec4:	eba0 0308 	sub.w	r3, r0, r8
 8009ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	46a2      	mov	sl, r4
 8009ed0:	9304      	str	r3, [sp, #16]
 8009ed2:	e7d2      	b.n	8009e7a <_vfiprintf_r+0xc6>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	1d19      	adds	r1, r3, #4
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	9103      	str	r1, [sp, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfbb      	ittet	lt
 8009ee0:	425b      	neglt	r3, r3
 8009ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee6:	9307      	strge	r3, [sp, #28]
 8009ee8:	9307      	strlt	r3, [sp, #28]
 8009eea:	bfb8      	it	lt
 8009eec:	9204      	strlt	r2, [sp, #16]
 8009eee:	7823      	ldrb	r3, [r4, #0]
 8009ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef2:	d10c      	bne.n	8009f0e <_vfiprintf_r+0x15a>
 8009ef4:	7863      	ldrb	r3, [r4, #1]
 8009ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef8:	d134      	bne.n	8009f64 <_vfiprintf_r+0x1b0>
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	3402      	adds	r4, #2
 8009efe:	1d1a      	adds	r2, r3, #4
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	9203      	str	r2, [sp, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	bfb8      	it	lt
 8009f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f0c:	9305      	str	r3, [sp, #20]
 8009f0e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fd8 <_vfiprintf_r+0x224>
 8009f12:	2203      	movs	r2, #3
 8009f14:	4650      	mov	r0, sl
 8009f16:	7821      	ldrb	r1, [r4, #0]
 8009f18:	f7fe f959 	bl	80081ce <memchr>
 8009f1c:	b138      	cbz	r0, 8009f2e <_vfiprintf_r+0x17a>
 8009f1e:	2240      	movs	r2, #64	; 0x40
 8009f20:	9b04      	ldr	r3, [sp, #16]
 8009f22:	eba0 000a 	sub.w	r0, r0, sl
 8009f26:	4082      	lsls	r2, r0
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	3401      	adds	r4, #1
 8009f2c:	9304      	str	r3, [sp, #16]
 8009f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f32:	2206      	movs	r2, #6
 8009f34:	4829      	ldr	r0, [pc, #164]	; (8009fdc <_vfiprintf_r+0x228>)
 8009f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f3a:	f7fe f948 	bl	80081ce <memchr>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d03f      	beq.n	8009fc2 <_vfiprintf_r+0x20e>
 8009f42:	4b27      	ldr	r3, [pc, #156]	; (8009fe0 <_vfiprintf_r+0x22c>)
 8009f44:	bb1b      	cbnz	r3, 8009f8e <_vfiprintf_r+0x1da>
 8009f46:	9b03      	ldr	r3, [sp, #12]
 8009f48:	3307      	adds	r3, #7
 8009f4a:	f023 0307 	bic.w	r3, r3, #7
 8009f4e:	3308      	adds	r3, #8
 8009f50:	9303      	str	r3, [sp, #12]
 8009f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f54:	443b      	add	r3, r7
 8009f56:	9309      	str	r3, [sp, #36]	; 0x24
 8009f58:	e768      	b.n	8009e2c <_vfiprintf_r+0x78>
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f62:	e7a6      	b.n	8009eb2 <_vfiprintf_r+0xfe>
 8009f64:	2300      	movs	r3, #0
 8009f66:	f04f 0c0a 	mov.w	ip, #10
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	3401      	adds	r4, #1
 8009f6e:	9305      	str	r3, [sp, #20]
 8009f70:	4620      	mov	r0, r4
 8009f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f76:	3a30      	subs	r2, #48	; 0x30
 8009f78:	2a09      	cmp	r2, #9
 8009f7a:	d903      	bls.n	8009f84 <_vfiprintf_r+0x1d0>
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d0c6      	beq.n	8009f0e <_vfiprintf_r+0x15a>
 8009f80:	9105      	str	r1, [sp, #20]
 8009f82:	e7c4      	b.n	8009f0e <_vfiprintf_r+0x15a>
 8009f84:	4604      	mov	r4, r0
 8009f86:	2301      	movs	r3, #1
 8009f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f8c:	e7f0      	b.n	8009f70 <_vfiprintf_r+0x1bc>
 8009f8e:	ab03      	add	r3, sp, #12
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	462a      	mov	r2, r5
 8009f94:	4630      	mov	r0, r6
 8009f96:	4b13      	ldr	r3, [pc, #76]	; (8009fe4 <_vfiprintf_r+0x230>)
 8009f98:	a904      	add	r1, sp, #16
 8009f9a:	f7fd fbb1 	bl	8007700 <_printf_float>
 8009f9e:	4607      	mov	r7, r0
 8009fa0:	1c78      	adds	r0, r7, #1
 8009fa2:	d1d6      	bne.n	8009f52 <_vfiprintf_r+0x19e>
 8009fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fa6:	07d9      	lsls	r1, r3, #31
 8009fa8:	d405      	bmi.n	8009fb6 <_vfiprintf_r+0x202>
 8009faa:	89ab      	ldrh	r3, [r5, #12]
 8009fac:	059a      	lsls	r2, r3, #22
 8009fae:	d402      	bmi.n	8009fb6 <_vfiprintf_r+0x202>
 8009fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fb2:	f7fe f90b 	bl	80081cc <__retarget_lock_release_recursive>
 8009fb6:	89ab      	ldrh	r3, [r5, #12]
 8009fb8:	065b      	lsls	r3, r3, #25
 8009fba:	f53f af1d 	bmi.w	8009df8 <_vfiprintf_r+0x44>
 8009fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fc0:	e71c      	b.n	8009dfc <_vfiprintf_r+0x48>
 8009fc2:	ab03      	add	r3, sp, #12
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	462a      	mov	r2, r5
 8009fc8:	4630      	mov	r0, r6
 8009fca:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <_vfiprintf_r+0x230>)
 8009fcc:	a904      	add	r1, sp, #16
 8009fce:	f7fd fe37 	bl	8007c40 <_printf_i>
 8009fd2:	e7e4      	b.n	8009f9e <_vfiprintf_r+0x1ea>
 8009fd4:	0800cf5c 	.word	0x0800cf5c
 8009fd8:	0800cf62 	.word	0x0800cf62
 8009fdc:	0800cf66 	.word	0x0800cf66
 8009fe0:	08007701 	.word	0x08007701
 8009fe4:	08009d91 	.word	0x08009d91

08009fe8 <__swbuf_r>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	460e      	mov	r6, r1
 8009fec:	4614      	mov	r4, r2
 8009fee:	4605      	mov	r5, r0
 8009ff0:	b118      	cbz	r0, 8009ffa <__swbuf_r+0x12>
 8009ff2:	6a03      	ldr	r3, [r0, #32]
 8009ff4:	b90b      	cbnz	r3, 8009ffa <__swbuf_r+0x12>
 8009ff6:	f7fd ffd1 	bl	8007f9c <__sinit>
 8009ffa:	69a3      	ldr	r3, [r4, #24]
 8009ffc:	60a3      	str	r3, [r4, #8]
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	071a      	lsls	r2, r3, #28
 800a002:	d525      	bpl.n	800a050 <__swbuf_r+0x68>
 800a004:	6923      	ldr	r3, [r4, #16]
 800a006:	b31b      	cbz	r3, 800a050 <__swbuf_r+0x68>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	6922      	ldr	r2, [r4, #16]
 800a00c:	b2f6      	uxtb	r6, r6
 800a00e:	1a98      	subs	r0, r3, r2
 800a010:	6963      	ldr	r3, [r4, #20]
 800a012:	4637      	mov	r7, r6
 800a014:	4283      	cmp	r3, r0
 800a016:	dc04      	bgt.n	800a022 <__swbuf_r+0x3a>
 800a018:	4621      	mov	r1, r4
 800a01a:	4628      	mov	r0, r5
 800a01c:	f7ff fda2 	bl	8009b64 <_fflush_r>
 800a020:	b9e0      	cbnz	r0, 800a05c <__swbuf_r+0x74>
 800a022:	68a3      	ldr	r3, [r4, #8]
 800a024:	3b01      	subs	r3, #1
 800a026:	60a3      	str	r3, [r4, #8]
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	1c5a      	adds	r2, r3, #1
 800a02c:	6022      	str	r2, [r4, #0]
 800a02e:	701e      	strb	r6, [r3, #0]
 800a030:	6962      	ldr	r2, [r4, #20]
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	429a      	cmp	r2, r3
 800a036:	d004      	beq.n	800a042 <__swbuf_r+0x5a>
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	07db      	lsls	r3, r3, #31
 800a03c:	d506      	bpl.n	800a04c <__swbuf_r+0x64>
 800a03e:	2e0a      	cmp	r6, #10
 800a040:	d104      	bne.n	800a04c <__swbuf_r+0x64>
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f7ff fd8d 	bl	8009b64 <_fflush_r>
 800a04a:	b938      	cbnz	r0, 800a05c <__swbuf_r+0x74>
 800a04c:	4638      	mov	r0, r7
 800a04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a050:	4621      	mov	r1, r4
 800a052:	4628      	mov	r0, r5
 800a054:	f000 f806 	bl	800a064 <__swsetup_r>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d0d5      	beq.n	800a008 <__swbuf_r+0x20>
 800a05c:	f04f 37ff 	mov.w	r7, #4294967295
 800a060:	e7f4      	b.n	800a04c <__swbuf_r+0x64>
	...

0800a064 <__swsetup_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4b2a      	ldr	r3, [pc, #168]	; (800a110 <__swsetup_r+0xac>)
 800a068:	4605      	mov	r5, r0
 800a06a:	6818      	ldr	r0, [r3, #0]
 800a06c:	460c      	mov	r4, r1
 800a06e:	b118      	cbz	r0, 800a078 <__swsetup_r+0x14>
 800a070:	6a03      	ldr	r3, [r0, #32]
 800a072:	b90b      	cbnz	r3, 800a078 <__swsetup_r+0x14>
 800a074:	f7fd ff92 	bl	8007f9c <__sinit>
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a07e:	0718      	lsls	r0, r3, #28
 800a080:	d422      	bmi.n	800a0c8 <__swsetup_r+0x64>
 800a082:	06d9      	lsls	r1, r3, #27
 800a084:	d407      	bmi.n	800a096 <__swsetup_r+0x32>
 800a086:	2309      	movs	r3, #9
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a08e:	f04f 30ff 	mov.w	r0, #4294967295
 800a092:	81a3      	strh	r3, [r4, #12]
 800a094:	e034      	b.n	800a100 <__swsetup_r+0x9c>
 800a096:	0758      	lsls	r0, r3, #29
 800a098:	d512      	bpl.n	800a0c0 <__swsetup_r+0x5c>
 800a09a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a09c:	b141      	cbz	r1, 800a0b0 <__swsetup_r+0x4c>
 800a09e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0a2:	4299      	cmp	r1, r3
 800a0a4:	d002      	beq.n	800a0ac <__swsetup_r+0x48>
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f7fe ff0e 	bl	8008ec8 <_free_r>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	6363      	str	r3, [r4, #52]	; 0x34
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	6063      	str	r3, [r4, #4]
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	f043 0308 	orr.w	r3, r3, #8
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	b94b      	cbnz	r3, 800a0e0 <__swsetup_r+0x7c>
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0d6:	d003      	beq.n	800a0e0 <__swsetup_r+0x7c>
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f000 f883 	bl	800a1e6 <__smakebuf_r>
 800a0e0:	89a0      	ldrh	r0, [r4, #12]
 800a0e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0e6:	f010 0301 	ands.w	r3, r0, #1
 800a0ea:	d00a      	beq.n	800a102 <__swsetup_r+0x9e>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60a3      	str	r3, [r4, #8]
 800a0f0:	6963      	ldr	r3, [r4, #20]
 800a0f2:	425b      	negs	r3, r3
 800a0f4:	61a3      	str	r3, [r4, #24]
 800a0f6:	6923      	ldr	r3, [r4, #16]
 800a0f8:	b943      	cbnz	r3, 800a10c <__swsetup_r+0xa8>
 800a0fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0fe:	d1c4      	bne.n	800a08a <__swsetup_r+0x26>
 800a100:	bd38      	pop	{r3, r4, r5, pc}
 800a102:	0781      	lsls	r1, r0, #30
 800a104:	bf58      	it	pl
 800a106:	6963      	ldrpl	r3, [r4, #20]
 800a108:	60a3      	str	r3, [r4, #8]
 800a10a:	e7f4      	b.n	800a0f6 <__swsetup_r+0x92>
 800a10c:	2000      	movs	r0, #0
 800a10e:	e7f7      	b.n	800a100 <__swsetup_r+0x9c>
 800a110:	200000d0 	.word	0x200000d0

0800a114 <_raise_r>:
 800a114:	291f      	cmp	r1, #31
 800a116:	b538      	push	{r3, r4, r5, lr}
 800a118:	4604      	mov	r4, r0
 800a11a:	460d      	mov	r5, r1
 800a11c:	d904      	bls.n	800a128 <_raise_r+0x14>
 800a11e:	2316      	movs	r3, #22
 800a120:	6003      	str	r3, [r0, #0]
 800a122:	f04f 30ff 	mov.w	r0, #4294967295
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a12a:	b112      	cbz	r2, 800a132 <_raise_r+0x1e>
 800a12c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a130:	b94b      	cbnz	r3, 800a146 <_raise_r+0x32>
 800a132:	4620      	mov	r0, r4
 800a134:	f000 f830 	bl	800a198 <_getpid_r>
 800a138:	462a      	mov	r2, r5
 800a13a:	4601      	mov	r1, r0
 800a13c:	4620      	mov	r0, r4
 800a13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a142:	f000 b817 	b.w	800a174 <_kill_r>
 800a146:	2b01      	cmp	r3, #1
 800a148:	d00a      	beq.n	800a160 <_raise_r+0x4c>
 800a14a:	1c59      	adds	r1, r3, #1
 800a14c:	d103      	bne.n	800a156 <_raise_r+0x42>
 800a14e:	2316      	movs	r3, #22
 800a150:	6003      	str	r3, [r0, #0]
 800a152:	2001      	movs	r0, #1
 800a154:	e7e7      	b.n	800a126 <_raise_r+0x12>
 800a156:	2400      	movs	r4, #0
 800a158:	4628      	mov	r0, r5
 800a15a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a15e:	4798      	blx	r3
 800a160:	2000      	movs	r0, #0
 800a162:	e7e0      	b.n	800a126 <_raise_r+0x12>

0800a164 <raise>:
 800a164:	4b02      	ldr	r3, [pc, #8]	; (800a170 <raise+0xc>)
 800a166:	4601      	mov	r1, r0
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	f7ff bfd3 	b.w	800a114 <_raise_r>
 800a16e:	bf00      	nop
 800a170:	200000d0 	.word	0x200000d0

0800a174 <_kill_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	2300      	movs	r3, #0
 800a178:	4d06      	ldr	r5, [pc, #24]	; (800a194 <_kill_r+0x20>)
 800a17a:	4604      	mov	r4, r0
 800a17c:	4608      	mov	r0, r1
 800a17e:	4611      	mov	r1, r2
 800a180:	602b      	str	r3, [r5, #0]
 800a182:	f7f9 fc7b 	bl	8003a7c <_kill>
 800a186:	1c43      	adds	r3, r0, #1
 800a188:	d102      	bne.n	800a190 <_kill_r+0x1c>
 800a18a:	682b      	ldr	r3, [r5, #0]
 800a18c:	b103      	cbz	r3, 800a190 <_kill_r+0x1c>
 800a18e:	6023      	str	r3, [r4, #0]
 800a190:	bd38      	pop	{r3, r4, r5, pc}
 800a192:	bf00      	nop
 800a194:	20000ad4 	.word	0x20000ad4

0800a198 <_getpid_r>:
 800a198:	f7f9 bc69 	b.w	8003a6e <_getpid>

0800a19c <__swhatbuf_r>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	460c      	mov	r4, r1
 800a1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a4:	4615      	mov	r5, r2
 800a1a6:	2900      	cmp	r1, #0
 800a1a8:	461e      	mov	r6, r3
 800a1aa:	b096      	sub	sp, #88	; 0x58
 800a1ac:	da0c      	bge.n	800a1c8 <__swhatbuf_r+0x2c>
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a1b6:	bf0c      	ite	eq
 800a1b8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a1bc:	2340      	movne	r3, #64	; 0x40
 800a1be:	2000      	movs	r0, #0
 800a1c0:	6031      	str	r1, [r6, #0]
 800a1c2:	602b      	str	r3, [r5, #0]
 800a1c4:	b016      	add	sp, #88	; 0x58
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}
 800a1c8:	466a      	mov	r2, sp
 800a1ca:	f000 f849 	bl	800a260 <_fstat_r>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	dbed      	blt.n	800a1ae <__swhatbuf_r+0x12>
 800a1d2:	9901      	ldr	r1, [sp, #4]
 800a1d4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a1d8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a1dc:	4259      	negs	r1, r3
 800a1de:	4159      	adcs	r1, r3
 800a1e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e4:	e7eb      	b.n	800a1be <__swhatbuf_r+0x22>

0800a1e6 <__smakebuf_r>:
 800a1e6:	898b      	ldrh	r3, [r1, #12]
 800a1e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1ea:	079d      	lsls	r5, r3, #30
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	d507      	bpl.n	800a202 <__smakebuf_r+0x1c>
 800a1f2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1f6:	6023      	str	r3, [r4, #0]
 800a1f8:	6123      	str	r3, [r4, #16]
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	6163      	str	r3, [r4, #20]
 800a1fe:	b002      	add	sp, #8
 800a200:	bd70      	pop	{r4, r5, r6, pc}
 800a202:	466a      	mov	r2, sp
 800a204:	ab01      	add	r3, sp, #4
 800a206:	f7ff ffc9 	bl	800a19c <__swhatbuf_r>
 800a20a:	9900      	ldr	r1, [sp, #0]
 800a20c:	4605      	mov	r5, r0
 800a20e:	4630      	mov	r0, r6
 800a210:	f7fe feca 	bl	8008fa8 <_malloc_r>
 800a214:	b948      	cbnz	r0, 800a22a <__smakebuf_r+0x44>
 800a216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21a:	059a      	lsls	r2, r3, #22
 800a21c:	d4ef      	bmi.n	800a1fe <__smakebuf_r+0x18>
 800a21e:	f023 0303 	bic.w	r3, r3, #3
 800a222:	f043 0302 	orr.w	r3, r3, #2
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	e7e3      	b.n	800a1f2 <__smakebuf_r+0xc>
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	6020      	str	r0, [r4, #0]
 800a22e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a232:	81a3      	strh	r3, [r4, #12]
 800a234:	9b00      	ldr	r3, [sp, #0]
 800a236:	6120      	str	r0, [r4, #16]
 800a238:	6163      	str	r3, [r4, #20]
 800a23a:	9b01      	ldr	r3, [sp, #4]
 800a23c:	b15b      	cbz	r3, 800a256 <__smakebuf_r+0x70>
 800a23e:	4630      	mov	r0, r6
 800a240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a244:	f000 f81e 	bl	800a284 <_isatty_r>
 800a248:	b128      	cbz	r0, 800a256 <__smakebuf_r+0x70>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f023 0303 	bic.w	r3, r3, #3
 800a250:	f043 0301 	orr.w	r3, r3, #1
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	431d      	orrs	r5, r3
 800a25a:	81a5      	strh	r5, [r4, #12]
 800a25c:	e7cf      	b.n	800a1fe <__smakebuf_r+0x18>
	...

0800a260 <_fstat_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	2300      	movs	r3, #0
 800a264:	4d06      	ldr	r5, [pc, #24]	; (800a280 <_fstat_r+0x20>)
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	4611      	mov	r1, r2
 800a26c:	602b      	str	r3, [r5, #0]
 800a26e:	f7f9 fc63 	bl	8003b38 <_fstat>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	d102      	bne.n	800a27c <_fstat_r+0x1c>
 800a276:	682b      	ldr	r3, [r5, #0]
 800a278:	b103      	cbz	r3, 800a27c <_fstat_r+0x1c>
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	bd38      	pop	{r3, r4, r5, pc}
 800a27e:	bf00      	nop
 800a280:	20000ad4 	.word	0x20000ad4

0800a284 <_isatty_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	2300      	movs	r3, #0
 800a288:	4d05      	ldr	r5, [pc, #20]	; (800a2a0 <_isatty_r+0x1c>)
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	f7f9 fc61 	bl	8003b56 <_isatty>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_isatty_r+0x1a>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_isatty_r+0x1a>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20000ad4 	.word	0x20000ad4

0800a2a4 <_init>:
 800a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a6:	bf00      	nop
 800a2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2aa:	bc08      	pop	{r3}
 800a2ac:	469e      	mov	lr, r3
 800a2ae:	4770      	bx	lr

0800a2b0 <_fini>:
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b2:	bf00      	nop
 800a2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b6:	bc08      	pop	{r3}
 800a2b8:	469e      	mov	lr, r3
 800a2ba:	4770      	bx	lr
