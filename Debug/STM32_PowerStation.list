
STM32_PowerStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009534  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e60  08009648  08009648  0000a648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4a8  0800c4a8  0000e240  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4a8  0800c4a8  0000d4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4b0  0800c4b0  0000e240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c4b0  0800c4b0  0000d4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4b8  0800c4b8  0000d4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800c4bc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  20000240  0800c6fc  0000e240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  0800c6fc  0000eae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef56  00000000  00000000  0000e269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e66  00000000  00000000  0002d1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00031028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d8  00000000  00000000  000325d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e35e  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0fe  00000000  00000000  00051a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f0f  00000000  00000000  0006fb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107a1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d64  00000000  00000000  00107a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0010e7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000240 	.word	0x20000240
 800012c:	00000000 	.word	0x00000000
 8000130:	0800962c 	.word	0x0800962c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000244 	.word	0x20000244
 800014c:	0800962c 	.word	0x0800962c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001130:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <MX_GPIO_Init+0xbc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a28      	ldr	r2, [pc, #160]	@ (80011d8 <MX_GPIO_Init+0xbc>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <MX_GPIO_Init+0xbc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <MX_GPIO_Init+0xbc>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a22      	ldr	r2, [pc, #136]	@ (80011d8 <MX_GPIO_Init+0xbc>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <MX_GPIO_Init+0xbc>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_GPIO_Init+0xbc>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a1c      	ldr	r2, [pc, #112]	@ (80011d8 <MX_GPIO_Init+0xbc>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_GPIO_Init+0xbc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2110      	movs	r1, #16
 800117c:	4817      	ldr	r0, [pc, #92]	@ (80011dc <MX_GPIO_Init+0xc0>)
 800117e:	f002 fb7c 	bl	800387a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001182:	2310      	movs	r3, #16
 8001184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2302      	movs	r3, #2
 8001190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	@ (80011dc <MX_GPIO_Init+0xc0>)
 800119a:	f002 f9d3 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB15 */
  GPIO_InitStruct.Pin = DRDY_Pin|GPIO_PIN_15;
 800119e:	f248 0301 	movw	r3, #32769	@ 0x8001
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4619      	mov	r1, r3
 80011b2:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <MX_GPIO_Init+0xc4>)
 80011b4:	f002 f9c6 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80011b8:	2340      	movs	r3, #64	@ 0x40
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_GPIO_Init+0xc4>)
 80011cc:	f002 f9ba 	bl	8003544 <HAL_GPIO_Init>

}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010800 	.word	0x40010800
 80011e0:	40010c00 	.word	0x40010c00

080011e4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <MX_I2C2_Init+0x50>)
 80011ea:	4a13      	ldr	r2, [pc, #76]	@ (8001238 <MX_I2C2_Init+0x54>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_I2C2_Init+0x50>)
 80011f0:	4a12      	ldr	r2, [pc, #72]	@ (800123c <MX_I2C2_Init+0x58>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <MX_I2C2_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_I2C2_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_I2C2_Init+0x50>)
 8001202:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001206:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <MX_I2C2_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_I2C2_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <MX_I2C2_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_I2C2_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <MX_I2C2_Init+0x50>)
 8001222:	f002 fb43 	bl	80038ac <HAL_I2C_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800122c:	f001 fd37 	bl	8002c9e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000025c 	.word	0x2000025c
 8001238:	40005800 	.word	0x40005800
 800123c:	00061a80 	.word	0x00061a80

08001240 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a16      	ldr	r2, [pc, #88]	@ (80012b4 <HAL_I2C_MspInit+0x74>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d124      	bne.n	80012aa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_I2C_MspInit+0x78>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <HAL_I2C_MspInit+0x78>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_I2C_MspInit+0x78>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001278:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800127c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127e:	2312      	movs	r3, #18
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4619      	mov	r1, r3
 800128c:	480b      	ldr	r0, [pc, #44]	@ (80012bc <HAL_I2C_MspInit+0x7c>)
 800128e:	f002 f959 	bl	8003544 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_I2C_MspInit+0x78>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_I2C_MspInit+0x78>)
 8001298:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_I2C_MspInit+0x78>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40005800 	.word	0x40005800
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010c00 	.word	0x40010c00

080012c0 <_ZN10TFT_Driver4initEP9TFT_LCD_t>:

	uint32_t DMA_TX_Complete; //����� ������ ��������� DMA �������� ������ ��� �����
	uint32_t blockUpdate;
	uint32_t needUpdate;

	void init(TFT_LCD_t *_LCD) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
		LCD = _LCD;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	601a      	str	r2, [r3, #0]

		switch (LCD->LCD_Driver) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	7a1b      	ldrb	r3, [r3, #8]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d103      	bne.n	80012e2 <_ZN10TFT_Driver4initEP9TFT_LCD_t+0x22>

#if defined(TFT_DRIVER_SSD1306)
		case SSD1306:
			SSD1306_Init();
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f004 fe70 	bl	8005fc0 <_ZN10TFT_Driver12SSD1306_InitEv>
			break;
 80012e0:	e000      	b.n	80012e4 <_ZN10TFT_Driver4initEP9TFT_LCD_t+0x24>
			  ST7735S_init();
			  break;
#endif

		default:
			break;
 80012e2:	bf00      	nop
		}
	}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_ZN10TFT_Driver6UpdateEv>:

	void Update(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
		switch (LCD->LCD_Driver) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	7a1b      	ldrb	r3, [r3, #8]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d103      	bne.n	8001306 <_ZN10TFT_Driver6UpdateEv+0x1a>

#if defined(TFT_DRIVER_SSD1306)
		case SSD1306:
			SSD1306_UpdateScreen();
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f004 feea 	bl	80060d8 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
			break;
 8001304:	e000      	b.n	8001308 <_ZN10TFT_Driver6UpdateEv+0x1c>
			uTFT_USB_Update();
			break;
#endif

		default:
			break;
 8001306:	bf00      	nop
		}
	}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZN3TFT4initEP9TFT_LCD_t>:

	int16_t _xPivot;   // TFT x pivot point coordinate for rotated Sprites
	int16_t _yPivot;   // TFT x pivot point coordinate for rotated Sprites

	////////////////////////////////////////////////////////////////////////////////////////////
	void init(TFT_LCD_t *_LCD) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
		LCD = _LCD;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	601a      	str	r2, [r3, #0]
		driver.init(_LCD);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3304      	adds	r3, #4
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffca 	bl	80012c0 <_ZN10TFT_Driver4initEP9TFT_LCD_t>
	}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZN3TFT12SetFontColorEtt>:

	void Gradient_Vertical(u32 x0, u32 y0, u32 w, u32 h,
			u8 otR, u8 otG, u8 otB, u8 doR, u8 doG,	u8 doB);

	//Работает на все фонты//////////////////////////////////////////////////////////////
	void SetFontColor(u16 Color, u16 BColor) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	803b      	strh	r3, [r7, #0]
		uTFT.Color = Color;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	831a      	strh	r2, [r3, #24]
		uTFT.BColor = BColor;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	883a      	ldrh	r2, [r7, #0]
 800134e:	835a      	strh	r2, [r3, #26]
	}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <_ZN3TFT6GotoXYEss>:
		uTFT.Color = Color;
	}
	void SetBColor(u16 BColor) {
		uTFT.BColor = BColor;
	}
	void GotoXY(i16 x, i16 y) {
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	807b      	strh	r3, [r7, #2]
 8001366:	4613      	mov	r3, r2
 8001368:	803b      	strh	r3, [r7, #0]
		uTFT.CurrentX = x;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	887a      	ldrh	r2, [r7, #2]
 800136e:	829a      	strh	r2, [r3, #20]
		uTFT.CurrentY = y;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	883a      	ldrh	r2, [r7, #0]
 8001374:	82da      	strh	r2, [r3, #22]
	}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <_ZL15FontClassicPutcP3TFTcP9FontDef_th>:
  * @param  ch символ.
  * @param  Font указатель на структуру
  * @param  NoBack true если не нужен задний фон за символом, по умолчанию 0
  * @retval ch status
  */
static inline char FontClassicPutc(TFT * tft, char ch, FontDef_t* Font, uint8_t NoBack ) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	461a      	mov	r2, r3
 800138c:	460b      	mov	r3, r1
 800138e:	72fb      	strb	r3, [r7, #11]
 8001390:	4613      	mov	r3, r2
 8001392:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	if (NoBack)
 8001394:	7abb      	ldrb	r3, [r7, #10]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d042      	beq.n	8001420 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0xa0>
	for (i = 0; i < Font->FontHeight; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	e038      	b.n	8001412 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x92>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	7afb      	ldrb	r3, [r7, #11]
 80013a6:	3b20      	subs	r3, #32
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	7849      	ldrb	r1, [r1, #1]
 80013ac:	fb01 f303 	mul.w	r3, r1, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	440b      	add	r3, r1
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	e01d      	b.n	8001400 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x80>
			if ((b << j) & 0x8000) {
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d012      	beq.n	80013fa <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x7a>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013da:	461a      	mov	r2, r3
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	4413      	add	r3, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80013e8:	461a      	mov	r2, r3
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8b1b      	ldrh	r3, [r3, #24]
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f004 fea9 	bl	800614c <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	3301      	adds	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4293      	cmp	r3, r2
 800140a:	d3db      	bcc.n	80013c4 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x44>
	for (i = 0; i < Font->FontHeight; i++) {
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	3301      	adds	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	785b      	ldrb	r3, [r3, #1]
 8001416:	461a      	mov	r2, r3
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	4293      	cmp	r3, r2
 800141c:	d3c0      	bcc.n	80013a0 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x20>
 800141e:	e055      	b.n	80014cc <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x14c>
		}
	}
	else
	for (i = 0; i < Font->FontHeight; i++) {
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	e04c      	b.n	80014c0 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x140>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	3b20      	subs	r3, #32
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	7849      	ldrb	r1, [r1, #1]
 8001432:	fb01 f303 	mul.w	r3, r1, r3
 8001436:	4619      	mov	r1, r3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	440b      	add	r3, r1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	e031      	b.n	80014ae <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x12e>
			if ((b << j) & 0x8000) {
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d013      	beq.n	8001482 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x102>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001460:	461a      	mov	r2, r3
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4413      	add	r3, r2
 8001466:	4619      	mov	r1, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800146e:	461a      	mov	r2, r3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	4413      	add	r3, r2
 8001474:	461a      	mov	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8b1b      	ldrh	r3, [r3, #24]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f004 fe66 	bl	800614c <_ZN3TFT8SetPixelEllt>
 8001480:	e012      	b.n	80014a8 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0x128>
			else {
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001488:	461a      	mov	r2, r3
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4413      	add	r3, r2
 800148e:	4619      	mov	r1, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001496:	461a      	mov	r2, r3
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	4413      	add	r3, r2
 800149c:	461a      	mov	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8b5b      	ldrh	r3, [r3, #26]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f004 fe52 	bl	800614c <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	3301      	adds	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d3c7      	bcc.n	800144a <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0xca>
	for (i = 0; i < Font->FontHeight; i++) {
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3301      	adds	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	785b      	ldrb	r3, [r3, #1]
 80014c4:	461a      	mov	r2, r3
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d3ac      	bcc.n	8001426 <_ZL15FontClassicPutcP3TFTcP9FontDef_th+0xa6>
		}
	}

	/* Increase pointer */
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	829a      	strh	r2, [r3, #20]

	/* Return character written */
	return ch;
 80014e6:	7afb      	ldrb	r3, [r7, #11]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th>:
  * @param  sMasterConfig pointer to a TIM_MasterConfigTypeDef structure that
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
static inline char FontClassicPuts(TFT * tft, char* str, FontDef_t* Font, uint8_t NoBack) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 80014fe:	e017      	b.n	8001530 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x40>
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	7819      	ldrb	r1, [r3, #0]
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff ff39 	bl	8001380 <_ZL15FontClassicPutcP3TFTcP9FontDef_th>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	bf14      	ite	ne
 800151a:	2301      	movne	r3, #1
 800151c:	2300      	moveq	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x3a>
			return *str;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	e008      	b.n	800153c <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x4c>
		}
		str++;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1e3      	bne.n	8001500 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th+0x10>
	}
	/* Everything OK, zero should be returned */
	return *str;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	781b      	ldrb	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZN7ADS12438XferByteEh>:
	ADS124xRegister ADSregister;

	uint32_t ValueData;

	// Получить байт, одновременно отправить данные
	unsigned char XferByte(uint8_t txData) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	70fb      	strb	r3, [r7, #3]
		uint8_t rxData;
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001550:	bf00      	nop
 8001552:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <_ZN7ADS12438XferByteEh+0x44>)
 8001554:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	bf0c      	ite	eq
 800155e:	2301      	moveq	r3, #1
 8001560:	2300      	movne	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f4      	bne.n	8001552 <_ZN7ADS12438XferByteEh+0xe>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001568:	f107 020f 	add.w	r2, r7, #15
 800156c:	1cf9      	adds	r1, r7, #3
 800156e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	4804      	ldr	r0, [pc, #16]	@ (8001588 <_ZN7ADS12438XferByteEh+0x44>)
 8001578:	f003 fac8 	bl	8004b0c <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
	}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200008a0 	.word	0x200008a0

0800158c <_ZN7ADS124313writeRegisterEhh>:

	void writeRegister(uint8_t r, uint8_t data) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
 8001598:	4613      	mov	r3, r2
 800159a:	70bb      	strb	r3, [r7, #2]
		ADS124x_CS_0;
 800159c:	2200      	movs	r2, #0
 800159e:	2110      	movs	r1, #16
 80015a0:	4828      	ldr	r0, [pc, #160]	@ (8001644 <_ZN7ADS124313writeRegisterEhh+0xb8>)
 80015a2:	f002 f96a 	bl	800387a <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <_ZN7ADS124313writeRegisterEhh+0xbc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	4b27      	ldr	r3, [pc, #156]	@ (800164c <_ZN7ADS124313writeRegisterEhh+0xc0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <_ZN7ADS124313writeRegisterEhh+0xc4>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	0c9a      	lsrs	r2, r3, #18
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	3b10      	subs	r3, #16
 80015c2:	4a24      	ldr	r2, [pc, #144]	@ (8001654 <_ZN7ADS124313writeRegisterEhh+0xc8>)
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <_ZN7ADS124313writeRegisterEhh+0xbc>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <_ZN7ADS124313writeRegisterEhh+0xc8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	bf34      	ite	cc
 80015d2:	2301      	movcc	r3, #1
 80015d4:	2300      	movcs	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f4      	bne.n	80015c6 <_ZN7ADS124313writeRegisterEhh+0x3a>
		XferByte(0x50 + r);
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	3350      	adds	r3, #80	@ 0x50
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffad 	bl	8001544 <_ZN7ADS12438XferByteEh>
		XferByte(0);
 80015ea:	2100      	movs	r1, #0
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffa9 	bl	8001544 <_ZN7ADS12438XferByteEh>
		XferByte(data);
 80015f2:	78bb      	ldrb	r3, [r7, #2]
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa4 	bl	8001544 <_ZN7ADS12438XferByteEh>
		delayMicroseconds(20);
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <_ZN7ADS124313writeRegisterEhh+0xbc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <_ZN7ADS124313writeRegisterEhh+0xc0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <_ZN7ADS124313writeRegisterEhh+0xc4>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	0c9a      	lsrs	r2, r3, #18
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	3b10      	subs	r3, #16
 8001618:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <_ZN7ADS124313writeRegisterEhh+0xc8>)
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <_ZN7ADS124313writeRegisterEhh+0xbc>)
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <_ZN7ADS124313writeRegisterEhh+0xc8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	bf34      	ite	cc
 8001628:	2301      	movcc	r3, #1
 800162a:	2300      	movcs	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f4      	bne.n	800161c <_ZN7ADS124313writeRegisterEhh+0x90>
		ADS124x_CS_1;
 8001632:	2201      	movs	r2, #1
 8001634:	2110      	movs	r1, #16
 8001636:	4803      	ldr	r0, [pc, #12]	@ (8001644 <_ZN7ADS124313writeRegisterEhh+0xb8>)
 8001638:	f002 f91f 	bl	800387a <HAL_GPIO_WritePin>

	}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40010800 	.word	0x40010800
 8001648:	e0001000 	.word	0xe0001000
 800164c:	2000005c 	.word	0x2000005c
 8001650:	431bde83 	.word	0x431bde83
 8001654:	20000990 	.word	0x20000990

08001658 <_ZN7ADS124315readAllRegisterEv>:

	void readAllRegister() {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
		ADS124x_CS_0;
 8001660:	2200      	movs	r2, #0
 8001662:	2110      	movs	r1, #16
 8001664:	4868      	ldr	r0, [pc, #416]	@ (8001808 <_ZN7ADS124315readAllRegisterEv+0x1b0>)
 8001666:	f002 f908 	bl	800387a <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		delayMicroseconds(20);
 800166a:	4b68      	ldr	r3, [pc, #416]	@ (800180c <_ZN7ADS124315readAllRegisterEv+0x1b4>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	4b67      	ldr	r3, [pc, #412]	@ (8001810 <_ZN7ADS124315readAllRegisterEv+0x1b8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a67      	ldr	r2, [pc, #412]	@ (8001814 <_ZN7ADS124315readAllRegisterEv+0x1bc>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9a      	lsrs	r2, r3, #18
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3b10      	subs	r3, #16
 8001686:	4a64      	ldr	r2, [pc, #400]	@ (8001818 <_ZN7ADS124315readAllRegisterEv+0x1c0>)
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b60      	ldr	r3, [pc, #384]	@ (800180c <_ZN7ADS124315readAllRegisterEv+0x1b4>)
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4b62      	ldr	r3, [pc, #392]	@ (8001818 <_ZN7ADS124315readAllRegisterEv+0x1c0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	bf34      	ite	cc
 8001696:	2301      	movcc	r3, #1
 8001698:	2300      	movcs	r3, #0
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f4      	bne.n	800168a <_ZN7ADS124315readAllRegisterEv+0x32>

		XferByte(0x10);
 80016a0:	2110      	movs	r1, #16
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff4e 	bl	8001544 <_ZN7ADS12438XferByteEh>
		XferByte(15);
 80016a8:	210f      	movs	r1, #15
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff4a 	bl	8001544 <_ZN7ADS12438XferByteEh>

		readSETUP(XferByte(0));
 80016b0:	2100      	movs	r1, #0
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ff46 	bl	8001544 <_ZN7ADS12438XferByteEh>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f9ab 	bl	8001a18 <_ZN7ADS12439readSETUPEh>
		readMUX(XferByte(0));
 80016c2:	2100      	movs	r1, #0
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff3d 	bl	8001544 <_ZN7ADS12438XferByteEh>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4619      	mov	r1, r3
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f9cc 	bl	8001a6c <_ZN7ADS12437readMUXEh>
		readACR(XferByte(0));
 80016d4:	2100      	movs	r1, #0
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ff34 	bl	8001544 <_ZN7ADS12438XferByteEh>
 80016dc:	4603      	mov	r3, r0
 80016de:	4619      	mov	r1, r3
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f9e2 	bl	8001aaa <_ZN7ADS12437readACREh>

		ADSregister.ODAC = XferByte(0);
 80016e6:	2100      	movs	r1, #0
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff2b 	bl	8001544 <_ZN7ADS12438XferByteEh>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	70da      	strb	r2, [r3, #3]
		ADSregister.DIO = XferByte(0);
 80016f6:	2100      	movs	r1, #0
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff23 	bl	8001544 <_ZN7ADS12438XferByteEh>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	711a      	strb	r2, [r3, #4]
		ADSregister.DIR = XferByte(0);
 8001706:	2100      	movs	r1, #0
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff1b 	bl	8001544 <_ZN7ADS12438XferByteEh>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	715a      	strb	r2, [r3, #5]
		ADSregister.IOCON = XferByte(0);
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff13 	bl	8001544 <_ZN7ADS12438XferByteEh>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	719a      	strb	r2, [r3, #6]
		ADSregister.OCR0 = XferByte(0);
 8001726:	2100      	movs	r1, #0
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff0b 	bl	8001544 <_ZN7ADS12438XferByteEh>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	71da      	strb	r2, [r3, #7]
		ADSregister.OCR1 = XferByte(0);
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff03 	bl	8001544 <_ZN7ADS12438XferByteEh>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	721a      	strb	r2, [r3, #8]
		ADSregister.OCR2 = XferByte(0);
 8001746:	2100      	movs	r1, #0
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fefb 	bl	8001544 <_ZN7ADS12438XferByteEh>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	725a      	strb	r2, [r3, #9]
		ADSregister.FSR0 = XferByte(0);
 8001756:	2100      	movs	r1, #0
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fef3 	bl	8001544 <_ZN7ADS12438XferByteEh>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	729a      	strb	r2, [r3, #10]
		ADSregister.FSR1 = XferByte(0);
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff feeb 	bl	8001544 <_ZN7ADS12438XferByteEh>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	72da      	strb	r2, [r3, #11]
		ADSregister.FSR2 = XferByte(0);
 8001776:	2100      	movs	r1, #0
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fee3 	bl	8001544 <_ZN7ADS12438XferByteEh>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	731a      	strb	r2, [r3, #12]
		ADSregister.DOR2 = XferByte(0);
 8001786:	2100      	movs	r1, #0
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fedb 	bl	8001544 <_ZN7ADS12438XferByteEh>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	735a      	strb	r2, [r3, #13]
		ADSregister.DOR1 = XferByte(0);
 8001796:	2100      	movs	r1, #0
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fed3 	bl	8001544 <_ZN7ADS12438XferByteEh>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	739a      	strb	r2, [r3, #14]
		ADSregister.DOR0 = XferByte(0);
 80017a6:	2100      	movs	r1, #0
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff fecb 	bl	8001544 <_ZN7ADS12438XferByteEh>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	73da      	strb	r2, [r3, #15]

		delayMicroseconds(20);
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <_ZN7ADS124315readAllRegisterEv+0x1b4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <_ZN7ADS124315readAllRegisterEv+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <_ZN7ADS124315readAllRegisterEv+0x1bc>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	0c9a      	lsrs	r2, r3, #18
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	3b10      	subs	r3, #16
 80017d2:	4a11      	ldr	r2, [pc, #68]	@ (8001818 <_ZN7ADS124315readAllRegisterEv+0x1c0>)
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <_ZN7ADS124315readAllRegisterEv+0x1b4>)
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <_ZN7ADS124315readAllRegisterEv+0x1c0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	bf34      	ite	cc
 80017e2:	2301      	movcc	r3, #1
 80017e4:	2300      	movcs	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f4      	bne.n	80017d6 <_ZN7ADS124315readAllRegisterEv+0x17e>
		XferByte(15);
 80017ec:	210f      	movs	r1, #15
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fea8 	bl	8001544 <_ZN7ADS12438XferByteEh>
		ADS124x_CS_1;
 80017f4:	2201      	movs	r2, #1
 80017f6:	2110      	movs	r1, #16
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <_ZN7ADS124315readAllRegisterEv+0x1b0>)
 80017fa:	f002 f83e 	bl	800387a <HAL_GPIO_WritePin>

	}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40010800 	.word	0x40010800
 800180c:	e0001000 	.word	0xe0001000
 8001810:	2000005c 	.word	0x2000005c
 8001814:	431bde83 	.word	0x431bde83
 8001818:	20000990 	.word	0x20000990

0800181c <_ZN7ADS124311sendCommandEh>:

	void sendCommand(uint8_t cmd)
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
	{
		ADS124x_CS_0;
 8001828:	2200      	movs	r2, #0
 800182a:	2110      	movs	r1, #16
 800182c:	4823      	ldr	r0, [pc, #140]	@ (80018bc <_ZN7ADS124311sendCommandEh+0xa0>)
 800182e:	f002 f824 	bl	800387a <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001832:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <_ZN7ADS124311sendCommandEh+0xa4>)
 8001834:	2200      	movs	r2, #0
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	4b22      	ldr	r3, [pc, #136]	@ (80018c4 <_ZN7ADS124311sendCommandEh+0xa8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a22      	ldr	r2, [pc, #136]	@ (80018c8 <_ZN7ADS124311sendCommandEh+0xac>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0c9a      	lsrs	r2, r3, #18
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	3b10      	subs	r3, #16
 800184e:	4a1f      	ldr	r2, [pc, #124]	@ (80018cc <_ZN7ADS124311sendCommandEh+0xb0>)
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <_ZN7ADS124311sendCommandEh+0xa4>)
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <_ZN7ADS124311sendCommandEh+0xb0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	bf34      	ite	cc
 800185e:	2301      	movcc	r3, #1
 8001860:	2300      	movcs	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f4      	bne.n	8001852 <_ZN7ADS124311sendCommandEh+0x36>
		XferByte(cmd);
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fe69 	bl	8001544 <_ZN7ADS12438XferByteEh>
		delayMicroseconds(20);
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <_ZN7ADS124311sendCommandEh+0xa4>)
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <_ZN7ADS124311sendCommandEh+0xa8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <_ZN7ADS124311sendCommandEh+0xac>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9a      	lsrs	r2, r3, #18
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	3b10      	subs	r3, #16
 800188e:	4a0f      	ldr	r2, [pc, #60]	@ (80018cc <_ZN7ADS124311sendCommandEh+0xb0>)
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <_ZN7ADS124311sendCommandEh+0xa4>)
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <_ZN7ADS124311sendCommandEh+0xb0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	bf34      	ite	cc
 800189e:	2301      	movcc	r3, #1
 80018a0:	2300      	movcs	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f4      	bne.n	8001892 <_ZN7ADS124311sendCommandEh+0x76>
		ADS124x_CS_1;
 80018a8:	2201      	movs	r2, #1
 80018aa:	2110      	movs	r1, #16
 80018ac:	4803      	ldr	r0, [pc, #12]	@ (80018bc <_ZN7ADS124311sendCommandEh+0xa0>)
 80018ae:	f001 ffe4 	bl	800387a <HAL_GPIO_WritePin>
	}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40010800 	.word	0x40010800
 80018c0:	e0001000 	.word	0xe0001000
 80018c4:	2000005c 	.word	0x2000005c
 80018c8:	431bde83 	.word	0x431bde83
 80018cc:	20000990 	.word	0x20000990

080018d0 <_ZN7ADS12438read_bitEhi>:



	uint8_t read_bit(uint8_t value, int pos) {
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	460b      	mov	r3, r1
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	72fb      	strb	r3, [r7, #11]
		return (value >> pos) & 1;
 80018de:	7afa      	ldrb	r2, [r7, #11]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	fa42 f303 	asr.w	r3, r2, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
	}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <_ZN7ADS12436setPGAE4_PGA>:

	//PGA
	void setPGA(_PGA pga)
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	70fb      	strb	r3, [r7, #3]
	{
		ADSregister.SETUP.PGA = pga;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	b2d9      	uxtb	r1, r3
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	7813      	ldrb	r3, [r2, #0]
 8001910:	f361 0302 	bfi	r3, r1, #0, #3
 8001914:	7013      	strb	r3, [r2, #0]
	    uint8_t p = (ADSregister.SETUP.ID << 4) | (ADSregister.SETUP.BOCS << 3) |  ADSregister.SETUP.PGA;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800191e:	b2db      	uxtb	r3, r3
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	b25a      	sxtb	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	b25b      	sxtb	r3, r3
 8001932:	4313      	orrs	r3, r2
 8001934:	b25a      	sxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	b25b      	sxtb	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b25b      	sxtb	r3, r3
 8001946:	73fb      	strb	r3, [r7, #15]
		writeRegister(0, p);
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	461a      	mov	r2, r3
 800194c:	2100      	movs	r1, #0
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fe1c 	bl	800158c <_ZN7ADS124313writeRegisterEhh>
	}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_ZN7ADS12438setPNSelEhh>:

	//PN Sel----------------------------------
	void setPNSel(uint8_t p, uint8_t n) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
 8001968:	4613      	mov	r3, r2
 800196a:	70bb      	strb	r3, [r7, #2]
		ADSregister.MUX.PSEL = p;
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	b2d9      	uxtb	r1, r3
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	7853      	ldrb	r3, [r2, #1]
 8001978:	f361 1307 	bfi	r3, r1, #4, #4
 800197c:	7053      	strb	r3, [r2, #1]
		ADSregister.MUX.NSEL = n;
 800197e:	78bb      	ldrb	r3, [r7, #2]
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	b2d9      	uxtb	r1, r3
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	7853      	ldrb	r3, [r2, #1]
 800198a:	f361 0303 	bfi	r3, r1, #0, #4
 800198e:	7053      	strb	r3, [r2, #1]
		writeRegister(1, (ADSregister.MUX.PSEL << 4) | ADSregister.MUX.NSEL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001998:	b2db      	uxtb	r3, r3
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	b25a      	sxtb	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	2101      	movs	r1, #1
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fde9 	bl	800158c <_ZN7ADS124313writeRegisterEhh>
	}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_ZN7ADS12437readADCEhh>:
		ADSregister.MUX.NSEL = value;
		uint8_t r = (ADSregister.MUX.PSEL << 4) | ADSregister.MUX.NSEL;
		writeRegister(1, r);
	}

	uint32_t readADC(uint8_t p, uint8_t n)
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	70fb      	strb	r3, [r7, #3]
 80019ce:	4613      	mov	r3, r2
 80019d0:	70bb      	strb	r3, [r7, #2]
	{
		HAL_Delay(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f001 fc84 	bl	80032e0 <HAL_Delay>
		sendCommand(DSYNC);
 80019d8:	21fc      	movs	r1, #252	@ 0xfc
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ff1e 	bl	800181c <_ZN7ADS124311sendCommandEh>
		setPNSel(p, n);
 80019e0:	78ba      	ldrb	r2, [r7, #2]
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	4619      	mov	r1, r3
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffb8 	bl	800195c <_ZN7ADS12438setPNSelEhh>
		HAL_Delay(41);
 80019ec:	2029      	movs	r0, #41	@ 0x29
 80019ee:	f001 fc77 	bl	80032e0 <HAL_Delay>
		readAllRegister();
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fe30 	bl	8001658 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7b5b      	ldrb	r3, [r3, #13]
 80019fc:	041a      	lsls	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7b9b      	ldrb	r3, [r3, #14]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	4313      	orrs	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	7bd2      	ldrb	r2, [r2, #15]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
		return r;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
	}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_ZN7ADS12439readSETUPEh>:

private:



	void readSETUP(uint8_t p) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
		ADSregister.SETUP.PGA = p & 0x7;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	b2d9      	uxtb	r1, r3
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	7813      	ldrb	r3, [r2, #0]
 8001a30:	f361 0302 	bfi	r3, r1, #0, #3
 8001a34:	7013      	strb	r3, [r2, #0]
		ADSregister.SETUP.BOCS = (p >> 3) & 0x1;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	b2d9      	uxtb	r1, r3
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	7813      	ldrb	r3, [r2, #0]
 8001a46:	f361 03c3 	bfi	r3, r1, #3, #1
 8001a4a:	7013      	strb	r3, [r2, #0]
		ADSregister.SETUP.ID = p >> 4;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	b2d9      	uxtb	r1, r3
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	7813      	ldrb	r3, [r2, #0]
 8001a5c:	f361 1307 	bfi	r3, r1, #4, #4
 8001a60:	7013      	strb	r3, [r2, #0]
	}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <_ZN7ADS12437readMUXEh>:

	void readMUX(uint8_t p) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
		ADSregister.MUX.NSEL = p & 0x0F;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	b2d9      	uxtb	r1, r3
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	7853      	ldrb	r3, [r2, #1]
 8001a84:	f361 0303 	bfi	r3, r1, #0, #4
 8001a88:	7053      	strb	r3, [r2, #1]
		ADSregister.MUX.PSEL = (uint8_t) ((p >> 4) & 0x0F);
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	b2d9      	uxtb	r1, r3
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	7853      	ldrb	r3, [r2, #1]
 8001a9a:	f361 1307 	bfi	r3, r1, #4, #4
 8001a9e:	7053      	strb	r3, [r2, #1]
	}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <_ZN7ADS12437readACREh>:

	void readACR(uint8_t p) {
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	70fb      	strb	r3, [r7, #3]
		ADSregister.ACR.DR0 = read_bit(p, 0);
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff07 	bl	80018d0 <_ZN7ADS12438read_bitEhi>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	b2d9      	uxtb	r1, r3
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	7893      	ldrb	r3, [r2, #2]
 8001ace:	f361 0300 	bfi	r3, r1, #0, #1
 8001ad2:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.DR1 = read_bit(p, 1);
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fef8 	bl	80018d0 <_ZN7ADS12438read_bitEhi>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	b2d9      	uxtb	r1, r3
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	7893      	ldrb	r3, [r2, #2]
 8001aec:	f361 0341 	bfi	r3, r1, #1, #1
 8001af0:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.RANGE = read_bit(p, 2);
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	2202      	movs	r2, #2
 8001af6:	4619      	mov	r1, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fee9 	bl	80018d0 <_ZN7ADS12438read_bitEhi>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	b2d9      	uxtb	r1, r3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	7893      	ldrb	r3, [r2, #2]
 8001b0a:	f361 0382 	bfi	r3, r1, #2, #1
 8001b0e:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.BITORDER = read_bit(p, 3);
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	2203      	movs	r2, #3
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff feda 	bl	80018d0 <_ZN7ADS12438read_bitEhi>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	b2d9      	uxtb	r1, r3
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	7893      	ldrb	r3, [r2, #2]
 8001b28:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b2c:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.BUFFER = read_bit(p, 4);
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	2204      	movs	r2, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff fecb 	bl	80018d0 <_ZN7ADS12438read_bitEhi>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	b2d9      	uxtb	r1, r3
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	7893      	ldrb	r3, [r2, #2]
 8001b46:	f361 1304 	bfi	r3, r1, #4, #1
 8001b4a:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.SPEED = read_bit(p, 5);
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	2205      	movs	r2, #5
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff febc 	bl	80018d0 <_ZN7ADS12438read_bitEhi>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	b2d9      	uxtb	r1, r3
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	7893      	ldrb	r3, [r2, #2]
 8001b64:	f361 1345 	bfi	r3, r1, #5, #1
 8001b68:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.DataFormat = read_bit(p, 6);
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	2206      	movs	r2, #6
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fead 	bl	80018d0 <_ZN7ADS12438read_bitEhi>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	b2d9      	uxtb	r1, r3
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	7893      	ldrb	r3, [r2, #2]
 8001b82:	f361 1386 	bfi	r3, r1, #6, #1
 8001b86:	7093      	strb	r3, [r2, #2]
		ADSregister.ACR.DRDY = read_bit(p, 7);
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe9e 	bl	80018d0 <_ZN7ADS12438read_bitEhi>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	b2d9      	uxtb	r1, r3
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	7893      	ldrb	r3, [r2, #2]
 8001ba0:	f361 13c7 	bfi	r3, r1, #7, #1
 8001ba4:	7093      	strb	r3, [r2, #2]
	}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_ZN8classLog4initEP20__UART_HandleTypeDef>:
#define COLOR_RESET   "\33[0m"

class classLog {
public:

	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <_ZN8classLog1iEPKc>:

	UART_HandleTypeDef *huart;

	void w(char const *const format) {colorStringln(11, format);}
	void e(char const *const format) {colorStringln(9, format);}
	void i(char const *const format) {colorStringln(45, format);}
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	212d      	movs	r1, #45	@ 0x2d
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f004 f9b7 	bl	8005f4c <_ZN8classLog13colorStringlnEiPKc>
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZN7GFXFONT11set_delta_xEa>:
public:

	TFT *_tft;
	GFXfont *gfxFont;

	void set_delta_x(int8_t x) {
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
		delta_x = x;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <_ZN7GFXFONT4initEP3TFT>:

	void init(TFT *tft) {
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
		_tft = tft;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
	}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <_ZN7GFXFONT4PutsEPc>:


	void Puts(char *str) {
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
		while (*str) {
 8001c28:	e009      	b.n	8001c3e <_ZN7GFXFONT4PutsEPc+0x20>
			drawChar(*str);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4619      	mov	r1, r3
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f819 	bl	8001c6a <_ZN7GFXFONT8drawCharEhh>
			str++;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	603b      	str	r3, [r7, #0]
		while (*str) {
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f1      	bne.n	8001c2a <_ZN7GFXFONT4PutsEPc+0xc>

		}
	}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_ZN7GFXFONT7setFontEPK7GFXfont>:
			str++;

		}
	}

	void setFont(const GFXfont *f) {
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
		gfxFont = (GFXfont*) f;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
	}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <_ZN7GFXFONT8drawCharEhh>:

	void drawChar(unsigned char c, uint8_t size = 1) {
 8001c6a:	b5b0      	push	{r4, r5, r7, lr}
 8001c6c:	b08c      	sub	sp, #48	@ 0x30
 8001c6e:	af02      	add	r7, sp, #8
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	70fb      	strb	r3, [r7, #3]
 8001c76:	4613      	mov	r3, r2
 8001c78:	70bb      	strb	r3, [r7, #2]

		int16_t x = _tft->uTFT.CurrentX;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	8a9b      	ldrh	r3, [r3, #20]
 8001c80:	83bb      	strh	r3, [r7, #28]
		int16_t y = _tft->uTFT.CurrentY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	8adb      	ldrh	r3, [r3, #22]
 8001c88:	837b      	strh	r3, [r7, #26]
		uint16_t color = _tft->uTFT.Color;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	8b1b      	ldrh	r3, [r3, #24]
 8001c90:	833b      	strh	r3, [r7, #24]

		c -= gfxFont->first;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	891b      	ldrh	r3, [r3, #8]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	70fb      	strb	r3, [r7, #3]

		GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8c0 	bl	8001e2e <_ZN7GFXFONT18pgm_read_glyph_ptrEPK7GFXfonth>
 8001cae:	6178      	str	r0, [r7, #20]
		uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8ca 	bl	8001e50 <_ZN7GFXFONT19pgm_read_bitmap_ptrEPK7GFXfont>
 8001cbc:	6138      	str	r0, [r7, #16]

		uint16_t bo = glyph->bitmapOffset;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	84fb      	strh	r3, [r7, #38]	@ 0x26

		uint8_t w = glyph->width, h = glyph->height;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	789b      	ldrb	r3, [r3, #2]
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	78db      	ldrb	r3, [r3, #3]
 8001cce:	73bb      	strb	r3, [r7, #14]
		int8_t xo = glyph->xOffset, yo = glyph->yOffset;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	795b      	ldrb	r3, [r3, #5]
 8001cd4:	737b      	strb	r3, [r7, #13]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	799b      	ldrb	r3, [r3, #6]
 8001cda:	733b      	strb	r3, [r7, #12]

		uint8_t xx, yy, bits = 0, bit = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		int16_t xo16 = 0, yo16 = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	843b      	strh	r3, [r7, #32]
 8001cec:	2300      	movs	r3, #0
 8001cee:	83fb      	strh	r3, [r7, #30]

		if (size > 1) {
 8001cf0:	78bb      	ldrb	r3, [r7, #2]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d905      	bls.n	8001d02 <_ZN7GFXFONT8drawCharEhh+0x98>
			xo16 = xo;
 8001cf6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cfa:	843b      	strh	r3, [r7, #32]
			yo16 = yo;
 8001cfc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d00:	83fb      	strh	r3, [r7, #30]
		}

		for (yy = 0; yy < h; yy++) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001d08:	e074      	b.n	8001df4 <_ZN7GFXFONT8drawCharEhh+0x18a>
			for (xx = 0; xx < w; xx++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001d10:	e066      	b.n	8001de0 <_ZN7GFXFONT8drawCharEhh+0x176>
				if (!(bit++ & 7)) {
 8001d12:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	f887 2022 	strb.w	r2, [r7, #34]	@ 0x22
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <_ZN7GFXFONT8drawCharEhh+0xd6>
					bits = bitmap[bo++];
 8001d2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8001d34:	461a      	mov	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				}
				if (bits & 0x80) {
 8001d40:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	da41      	bge.n	8001dcc <_ZN7GFXFONT8drawCharEhh+0x162>
					if (size == 1) {
 8001d48:	78bb      	ldrb	r3, [r7, #2]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d115      	bne.n	8001d7a <_ZN7GFXFONT8drawCharEhh+0x110>
						_tft->SetPixel(x + xo + xx, y + yo + yy, color);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001d56:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d5a:	441a      	add	r2, r3
 8001d5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d60:	18d1      	adds	r1, r2, r3
 8001d62:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001d66:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d70:	441a      	add	r2, r3
 8001d72:	8b3b      	ldrh	r3, [r7, #24]
 8001d74:	f004 f9ea 	bl	800614c <_ZN3TFT8SetPixelEllt>
 8001d78:	e028      	b.n	8001dcc <_ZN7GFXFONT8drawCharEhh+0x162>
					} else {

						_tft->RectangleFilled(x + (xo16 + xx) * size,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001d82:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d86:	4413      	add	r3, r2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	78ba      	ldrb	r2, [r7, #2]
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	8bbb      	ldrh	r3, [r7, #28]
 8001d96:	4413      	add	r3, r2
 8001d98:	b299      	uxth	r1, r3
								y + (yo16 + yy) * size, size, size, color);
 8001d9a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001d9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001da2:	4413      	add	r3, r2
						_tft->RectangleFilled(x + (xo16 + xx) * size,
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	78ba      	ldrb	r2, [r7, #2]
 8001da8:	b292      	uxth	r2, r2
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	8b7b      	ldrh	r3, [r7, #26]
 8001db2:	4413      	add	r3, r2
 8001db4:	b29c      	uxth	r4, r3
 8001db6:	78bb      	ldrb	r3, [r7, #2]
 8001db8:	b29d      	uxth	r5, r3
 8001dba:	78bb      	ldrb	r3, [r7, #2]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	8b3a      	ldrh	r2, [r7, #24]
 8001dc0:	9201      	str	r2, [sp, #4]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	462b      	mov	r3, r5
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	f004 fd05 	bl	80067d6 <_ZN3TFT15RectangleFilledEttttt>
					}
				}
				bits <<= 1;
 8001dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			for (xx = 0; xx < w; xx++) {
 8001dd6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001de0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d393      	bcc.n	8001d12 <_ZN7GFXFONT8drawCharEhh+0xa8>
		for (yy = 0; yy < h; yy++) {
 8001dea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dee:	3301      	adds	r3, #1
 8001df0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001df4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d385      	bcc.n	8001d0a <_ZN7GFXFONT8drawCharEhh+0xa0>
			}
		}

		//_tft->uTFT.CurrentX += glyph->width + delta_x;
		_tft->uTFT.CurrentX += glyph->xAdvance + delta_x;// +glyph->xOffset + delta_x;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	791b      	ldrb	r3, [r3, #4]
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f991 1049 	ldrsb.w	r1, [r1, #73]	@ 0x49
 8001e14:	440b      	add	r3, r1
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b212      	sxth	r2, r2
 8001e24:	829a      	strh	r2, [r3, #20]

	}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	@ 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bdb0      	pop	{r4, r5, r7, pc}

08001e2e <_ZN7GFXFONT18pgm_read_glyph_ptrEPK7GFXfonth>:
  }
  return target;
}

private:
	inline GFXglyph* pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	71fb      	strb	r3, [r7, #7]
		return gfxFont->glyph + c;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
	}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <_ZN7GFXFONT19pgm_read_bitmap_ptrEPK7GFXfont>:

	inline uint8_t* pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
		return gfxFont->bitmap;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
	}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <_ZN7GFXFONTC1Ev>:
class GFXFONT {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	330c      	adds	r3, #12
 8001e78:	223d      	movs	r2, #61	@ 0x3d
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f005 fb02 	bl	8007486 <memset>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_ZN5Power4initEv>:

	GPIO_PinState lastKey;

	GPIO_PinState keyC;

	void init() {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
		gfxfont.init(tft);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4803      	ldr	r0, [pc, #12]	@ (8001eb0 <_ZN5Power4initEv+0x1c>)
 8001ea4:	f7ff feae 	bl	8001c04 <_ZN7GFXFONT4initEP3TFT>
	}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200002f0 	.word	0x200002f0

08001eb4 <_ZN5Power7tickKeyEv>:

	void tickKey() {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

		key.tick();
 8001ebc:	480d      	ldr	r0, [pc, #52]	@ (8001ef4 <_ZN5Power7tickKeyEv+0x40>)
 8001ebe:	f003 fed3 	bl	8005c68 <_ZN7GButton4tickEv>

		if (key.isPress()) {
 8001ec2:	480c      	ldr	r0, [pc, #48]	@ (8001ef4 <_ZN5Power7tickKeyEv+0x40>)
 8001ec4:	f003 feaf 	bl	8005c26 <_ZN7GButton7isPressEv>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00d      	beq.n	8001eea <_ZN5Power7tickKeyEv+0x36>
			if (screen == UI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <_ZN5Power7tickKeyEv+0x2e>
				screen = BATTERY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			else
				screen = UI;
		}

	}
 8001ee0:	e003      	b.n	8001eea <_ZN5Power7tickKeyEv+0x36>
				screen = UI;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200002b0 	.word	0x200002b0

08001ef8 <_ZN5Power4tickEv>:

	void tick() {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

		if (screen == UI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <_ZN5Power4tickEv+0x1a>
			screenUI();
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f808 	bl	8001f20 <_ZN5Power8screenUIEv>
		else
			screenBattery();

	}
 8001f10:	e002      	b.n	8001f18 <_ZN5Power4tickEv+0x20>
			screenBattery();
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f9f6 	bl	8002304 <_ZN5Power13screenBatteryEv>
	}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZN5Power8screenUIEv>:

	void screenUI() {
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b099      	sub	sp, #100	@ 0x64
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	6078      	str	r0, [r7, #4]

		tft->Fill1(0);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 f986 	bl	8006240 <_ZN3TFT5Fill1Et>

		adc.readAllRegister();
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	331c      	adds	r3, #28
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fb8d 	bl	8001658 <_ZN7ADS124315readAllRegisterEv>
		if (adc.ADSregister.SETUP.PGA != PGA_1) {
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7f1b      	ldrb	r3, [r3, #28]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d017      	beq.n	8001f7c <_ZN5Power8screenUIEv+0x5c>

			adc.setPGA(PGA_1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	331c      	adds	r3, #28
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fcd0 	bl	80018f8 <_ZN7ADS12436setPGAE4_PGA>
			HAL_Delay(1);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f001 f9c1 	bl	80032e0 <HAL_Delay>
			adc.sendCommand(SELFCAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	331c      	adds	r3, #28
 8001f62:	21f0      	movs	r1, #240	@ 0xf0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fc59 	bl	800181c <_ZN7ADS124311sendCommandEh>
			adc.sendCommand(DSYNC);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	331c      	adds	r3, #28
 8001f6e:	21fc      	movs	r1, #252	@ 0xfc
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fc53 	bl	800181c <_ZN7ADS124311sendCommandEh>
			HAL_Delay(100);
 8001f76:	2064      	movs	r0, #100	@ 0x64
 8001f78:	f001 f9b2 	bl	80032e0 <HAL_Delay>
		}
		readOut();
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fc43 	bl	8002808 <_ZN5Power7readOutEv>
		readI();
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fd2c 	bl	80029e0 <_ZN5Power5readIEv>

		char str[64];

		tft->Rectangle(0, 0, 127, 63, 1);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	233f      	movs	r3, #63	@ 0x3f
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	237f      	movs	r3, #127	@ 0x7f
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f004 fbd4 	bl	8006746 <_ZN3TFT9RectangleEllttt>
		tft->LineHW(1, 47, 126, 1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	237e      	movs	r3, #126	@ 0x7e
 8001fa8:	222f      	movs	r2, #47	@ 0x2f
 8001faa:	2101      	movs	r1, #1
 8001fac:	f004 fbb4 	bl	8006718 <_ZN3TFT6LineHWElllt>

		///////////////////////////////////////////////
		gfxfont.setFont(&DejaVu_Sans_Mono_Bold_24);
 8001fb0:	49b8      	ldr	r1, [pc, #736]	@ (8002294 <_ZN5Power8screenUIEv+0x374>)
 8001fb2:	48b9      	ldr	r0, [pc, #740]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 8001fb4:	f7ff fe4c 	bl	8001c50 <_ZN7GFXFONT7setFontEPK7GFXfont>
		gfxfont.set_delta_x(2);
 8001fb8:	2102      	movs	r1, #2
 8001fba:	48b7      	ldr	r0, [pc, #732]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 8001fbc:	f7ff fe13 	bl	8001be6 <_ZN7GFXFONT11set_delta_xEa>

		tft->GotoXY(109, 22);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	2216      	movs	r2, #22
 8001fc6:	216d      	movs	r1, #109	@ 0x6d
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff f9c6 	bl	800135a <_ZN3TFT6GotoXYEss>

		gfxfont.Puts((char*) "V");
 8001fce:	49b3      	ldr	r1, [pc, #716]	@ (800229c <_ZN5Power8screenUIEv+0x37c>)
 8001fd0:	48b1      	ldr	r0, [pc, #708]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 8001fd2:	f7ff fe24 	bl	8001c1e <_ZN7GFXFONT4PutsEPc>
		tft->GotoXY(109, 44);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	222c      	movs	r2, #44	@ 0x2c
 8001fdc:	216d      	movs	r1, #109	@ 0x6d
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff f9bb 	bl	800135a <_ZN3TFT6GotoXYEss>
		gfxfont.Puts((char*) "A");
 8001fe4:	49ae      	ldr	r1, [pc, #696]	@ (80022a0 <_ZN5Power8screenUIEv+0x380>)
 8001fe6:	48ac      	ldr	r0, [pc, #688]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 8001fe8:	f7ff fe19 	bl	8001c1e <_ZN7GFXFONT4PutsEPc>

		sprintf(str, "%6.3f", vOut);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fa19 	bl	8000428 <__aeabi_f2d>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	f107 000c 	add.w	r0, r7, #12
 8001ffe:	49a9      	ldr	r1, [pc, #676]	@ (80022a4 <_ZN5Power8screenUIEv+0x384>)
 8002000:	f005 f9de 	bl	80073c0 <siprintf>
		tft->GotoXY(12, 22);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	2216      	movs	r2, #22
 800200a:	210c      	movs	r1, #12
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff f9a4 	bl	800135a <_ZN3TFT6GotoXYEss>
		gfxfont.Puts(str);
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	4619      	mov	r1, r3
 8002018:	489f      	ldr	r0, [pc, #636]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 800201a:	f7ff fe00 	bl	8001c1e <_ZN7GFXFONT4PutsEPc>

		sprintf(str, "%6.3f", iOut / 1000.0F);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	49a1      	ldr	r1, [pc, #644]	@ (80022a8 <_ZN5Power8screenUIEv+0x388>)
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe ff41 	bl	8000eac <__aeabi_fdiv>
 800202a:	4603      	mov	r3, r0
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe f9fb 	bl	8000428 <__aeabi_f2d>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	f107 000c 	add.w	r0, r7, #12
 800203a:	499a      	ldr	r1, [pc, #616]	@ (80022a4 <_ZN5Power8screenUIEv+0x384>)
 800203c:	f005 f9c0 	bl	80073c0 <siprintf>
		tft->GotoXY(12, 44);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	222c      	movs	r2, #44	@ 0x2c
 8002046:	210c      	movs	r1, #12
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f986 	bl	800135a <_ZN3TFT6GotoXYEss>
		gfxfont.Puts(str);
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	4619      	mov	r1, r3
 8002054:	4890      	ldr	r0, [pc, #576]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 8002056:	f7ff fde2 	bl	8001c1e <_ZN7GFXFONT4PutsEPc>
		///////////////////////////////////////////////

		tft->LineV(63, 48, 63, 1);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800205e:	2301      	movs	r3, #1
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	233f      	movs	r3, #63	@ 0x3f
 8002064:	2230      	movs	r2, #48	@ 0x30
 8002066:	213f      	movs	r1, #63	@ 0x3f
 8002068:	f004 f91a 	bl	80062a0 <_ZN3TFT5LineVElllt>

		gfxfont.setFont(&FreeMono9pt7b);
 800206c:	498f      	ldr	r1, [pc, #572]	@ (80022ac <_ZN5Power8screenUIEv+0x38c>)
 800206e:	488a      	ldr	r0, [pc, #552]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 8002070:	f7ff fdee 	bl	8001c50 <_ZN7GFXFONT7setFontEPK7GFXfont>
		gfxfont.set_delta_x(-3);
 8002074:	f06f 0102 	mvn.w	r1, #2
 8002078:	4887      	ldr	r0, [pc, #540]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 800207a:	f7ff fdb4 	bl	8001be6 <_ZN7GFXFONT11set_delta_xEa>
		tft->GotoXY(2, 60);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	223c      	movs	r2, #60	@ 0x3c
 8002084:	2102      	movs	r1, #2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f967 	bl	800135a <_ZN3TFT6GotoXYEss>
		gfxfont.Puts((char*) "P");
 800208c:	4988      	ldr	r1, [pc, #544]	@ (80022b0 <_ZN5Power8screenUIEv+0x390>)
 800208e:	4882      	ldr	r0, [pc, #520]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 8002090:	f7ff fdc5 	bl	8001c1e <_ZN7GFXFONT4PutsEPc>

		tft->GotoXY(64, 60);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	223c      	movs	r2, #60	@ 0x3c
 800209a:	2140      	movs	r1, #64	@ 0x40
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f95c 	bl	800135a <_ZN3TFT6GotoXYEss>
		gfxfont.Puts((char*) "R");
 80020a2:	4984      	ldr	r1, [pc, #528]	@ (80022b4 <_ZN5Power8screenUIEv+0x394>)
 80020a4:	487c      	ldr	r0, [pc, #496]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 80020a6:	f7ff fdba 	bl	8001c1e <_ZN7GFXFONT4PutsEPc>

		gfxfont.setFont(&FreeMono9pt7bNew);
 80020aa:	4983      	ldr	r1, [pc, #524]	@ (80022b8 <_ZN5Power8screenUIEv+0x398>)
 80020ac:	487a      	ldr	r0, [pc, #488]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 80020ae:	f7ff fdcf 	bl	8001c50 <_ZN7GFXFONT7setFontEPK7GFXfont>
		gfxfont.set_delta_x(-2);
 80020b2:	f06f 0101 	mvn.w	r1, #1
 80020b6:	4878      	ldr	r0, [pc, #480]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 80020b8:	f7ff fd95 	bl	8001be6 <_ZN7GFXFONT11set_delta_xEa>
		float power = vOut * iOut / 1000.0F;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f7fe fe3c 	bl	8000d44 <__aeabi_fmul>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4976      	ldr	r1, [pc, #472]	@ (80022a8 <_ZN5Power8screenUIEv+0x388>)
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe feeb 	bl	8000eac <__aeabi_fdiv>
 80020d6:	4603      	mov	r3, r0
 80020d8:	657b      	str	r3, [r7, #84]	@ 0x54

		float cc1, dc1;
		///////////////////////////////////////////////
		dc1 = modff(power, &cc1);
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	4619      	mov	r1, r3
 80020e0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80020e2:	f004 fc07 	bl	80068f4 <modff>
 80020e6:	6538      	str	r0, [r7, #80]	@ 0x50
		tft->GotoXY(21, 60);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	223c      	movs	r2, #60	@ 0x3c
 80020ee:	2115      	movs	r1, #21
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff f932 	bl	800135a <_ZN3TFT6GotoXYEss>
		if (cc1 < 100) {
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4970      	ldr	r1, [pc, #448]	@ (80022bc <_ZN5Power8screenUIEv+0x39c>)
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe ffc0 	bl	8001080 <__aeabi_fcmplt>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d038      	beq.n	8002178 <_ZN5Power8screenUIEv+0x258>
			if (cc1 < 10.0F) {
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	496d      	ldr	r1, [pc, #436]	@ (80022c0 <_ZN5Power8screenUIEv+0x3a0>)
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe ffb8 	bl	8001080 <__aeabi_fcmplt>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d014      	beq.n	8002140 <_ZN5Power8screenUIEv+0x220>
				sprintf(str, "%d .%03d", (int) cc1, (int) (dc1 * 1000));
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe ffd9 	bl	80010d0 <__aeabi_f2iz>
 800211e:	4604      	mov	r4, r0
 8002120:	4961      	ldr	r1, [pc, #388]	@ (80022a8 <_ZN5Power8screenUIEv+0x388>)
 8002122:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002124:	f7fe fe0e 	bl	8000d44 <__aeabi_fmul>
 8002128:	4603      	mov	r3, r0
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe ffd0 	bl	80010d0 <__aeabi_f2iz>
 8002130:	4603      	mov	r3, r0
 8002132:	f107 000c 	add.w	r0, r7, #12
 8002136:	4622      	mov	r2, r4
 8002138:	4962      	ldr	r1, [pc, #392]	@ (80022c4 <_ZN5Power8screenUIEv+0x3a4>)
 800213a:	f005 f941 	bl	80073c0 <siprintf>
 800213e:	e02f      	b.n	80021a0 <_ZN5Power8screenUIEv+0x280>
			} else {
				sprintf(str, "%d .%03d", (int) cc1, (int) (dc1 * 1000));
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe ffc4 	bl	80010d0 <__aeabi_f2iz>
 8002148:	4604      	mov	r4, r0
 800214a:	4957      	ldr	r1, [pc, #348]	@ (80022a8 <_ZN5Power8screenUIEv+0x388>)
 800214c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800214e:	f7fe fdf9 	bl	8000d44 <__aeabi_fmul>
 8002152:	4603      	mov	r3, r0
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe ffbb 	bl	80010d0 <__aeabi_f2iz>
 800215a:	4603      	mov	r3, r0
 800215c:	f107 000c 	add.w	r0, r7, #12
 8002160:	4622      	mov	r2, r4
 8002162:	4958      	ldr	r1, [pc, #352]	@ (80022c4 <_ZN5Power8screenUIEv+0x3a4>)
 8002164:	f005 f92c 	bl	80073c0 <siprintf>
				tft->GotoXY(13, 60);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	223c      	movs	r2, #60	@ 0x3c
 800216e:	210d      	movs	r1, #13
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f8f2 	bl	800135a <_ZN3TFT6GotoXYEss>
 8002176:	e013      	b.n	80021a0 <_ZN5Power8screenUIEv+0x280>
			}
		} else
			sprintf(str, "%d .%01d", (int) cc1, (int) (dc1 * 10));
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ffa8 	bl	80010d0 <__aeabi_f2iz>
 8002180:	4604      	mov	r4, r0
 8002182:	494f      	ldr	r1, [pc, #316]	@ (80022c0 <_ZN5Power8screenUIEv+0x3a0>)
 8002184:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002186:	f7fe fddd 	bl	8000d44 <__aeabi_fmul>
 800218a:	4603      	mov	r3, r0
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe ff9f 	bl	80010d0 <__aeabi_f2iz>
 8002192:	4603      	mov	r3, r0
 8002194:	f107 000c 	add.w	r0, r7, #12
 8002198:	4622      	mov	r2, r4
 800219a:	494b      	ldr	r1, [pc, #300]	@ (80022c8 <_ZN5Power8screenUIEv+0x3a8>)
 800219c:	f005 f910 	bl	80073c0 <siprintf>
		gfxfont.Puts(str);
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	4619      	mov	r1, r3
 80021a6:	483c      	ldr	r0, [pc, #240]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 80021a8:	f7ff fd39 	bl	8001c1e <_ZN7GFXFONT4PutsEPc>
		///////////////////////////////////////////////
		float R = vOut / (iOut / 1000.0F);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691c      	ldr	r4, [r3, #16]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	493c      	ldr	r1, [pc, #240]	@ (80022a8 <_ZN5Power8screenUIEv+0x388>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fe78 	bl	8000eac <__aeabi_fdiv>
 80021bc:	4603      	mov	r3, r0
 80021be:	4619      	mov	r1, r3
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7fe fe73 	bl	8000eac <__aeabi_fdiv>
 80021c6:	4603      	mov	r3, r0
 80021c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		if (R < 20000) {
 80021ca:	4940      	ldr	r1, [pc, #256]	@ (80022cc <_ZN5Power8screenUIEv+0x3ac>)
 80021cc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80021ce:	f7fe ff57 	bl	8001080 <__aeabi_fcmplt>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d037      	beq.n	8002248 <_ZN5Power8screenUIEv+0x328>
			dc1 = modff(R, &cc1);
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	4619      	mov	r1, r3
 80021de:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80021e0:	f004 fb88 	bl	80068f4 <modff>
 80021e4:	6538      	str	r0, [r7, #80]	@ 0x50
			//sprintf(str, "%d .%2d", (int) cc1, (int) (dc1 * 10));

			if (R > 10000.0f){
 80021e6:	493a      	ldr	r1, [pc, #232]	@ (80022d0 <_ZN5Power8screenUIEv+0x3b0>)
 80021e8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80021ea:	f7fe ff67 	bl	80010bc <__aeabi_fcmpgt>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d011      	beq.n	8002218 <_ZN5Power8screenUIEv+0x2f8>
			tft->GotoXY(80, 60);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f8:	223c      	movs	r2, #60	@ 0x3c
 80021fa:	2150      	movs	r1, #80	@ 0x50
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f8ac 	bl	800135a <_ZN3TFT6GotoXYEss>
			sprintf(str, "%.0f", R);
 8002202:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002204:	f7fe f910 	bl	8000428 <__aeabi_f2d>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	f107 000c 	add.w	r0, r7, #12
 8002210:	4930      	ldr	r1, [pc, #192]	@ (80022d4 <_ZN5Power8screenUIEv+0x3b4>)
 8002212:	f005 f8d5 	bl	80073c0 <siprintf>
 8002216:	e010      	b.n	800223a <_ZN5Power8screenUIEv+0x31a>
			}
			else
			{
				tft->GotoXY(78, 60);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	223c      	movs	r2, #60	@ 0x3c
 800221e:	214e      	movs	r1, #78	@ 0x4e
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff f89a 	bl	800135a <_ZN3TFT6GotoXYEss>
							sprintf(str, "%.1f", R);
 8002226:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002228:	f7fe f8fe 	bl	8000428 <__aeabi_f2d>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	f107 000c 	add.w	r0, r7, #12
 8002234:	4928      	ldr	r1, [pc, #160]	@ (80022d8 <_ZN5Power8screenUIEv+0x3b8>)
 8002236:	f005 f8c3 	bl	80073c0 <siprintf>
			}

			gfxfont.Puts(str);
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4619      	mov	r1, r3
 8002240:	4815      	ldr	r0, [pc, #84]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 8002242:	f7ff fcec 	bl	8001c1e <_ZN7GFXFONT4PutsEPc>
 8002246:	e01b      	b.n	8002280 <_ZN5Power8screenUIEv+0x360>
		} else {
			gfxfont.setFont(&FreeMono9pt7b);
 8002248:	4918      	ldr	r1, [pc, #96]	@ (80022ac <_ZN5Power8screenUIEv+0x38c>)
 800224a:	4813      	ldr	r0, [pc, #76]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 800224c:	f7ff fd00 	bl	8001c50 <_ZN7GFXFONT7setFontEPK7GFXfont>
			gfxfont.set_delta_x(-2);
 8002250:	f06f 0101 	mvn.w	r1, #1
 8002254:	4810      	ldr	r0, [pc, #64]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 8002256:	f7ff fcc6 	bl	8001be6 <_ZN7GFXFONT11set_delta_xEa>
			sprintf(str, "INF");
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	491f      	ldr	r1, [pc, #124]	@ (80022dc <_ZN5Power8screenUIEv+0x3bc>)
 8002260:	4618      	mov	r0, r3
 8002262:	f005 f8ad 	bl	80073c0 <siprintf>
			tft->GotoXY(98, 60);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	223c      	movs	r2, #60	@ 0x3c
 800226c:	2162      	movs	r1, #98	@ 0x62
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f873 	bl	800135a <_ZN3TFT6GotoXYEss>
			gfxfont.Puts(str);
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4619      	mov	r1, r3
 800227a:	4807      	ldr	r0, [pc, #28]	@ (8002298 <_ZN5Power8screenUIEv+0x378>)
 800227c:	f7ff fccf 	bl	8001c1e <_ZN7GFXFONT4PutsEPc>
//			tft->GotoXY(2, 4);
//			sprintf(str, "CV", iOut);
//			FontClassicPuts(tft, str, &Font_11x18, 0);
//		}

		tft->driver.Update();
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	3304      	adds	r3, #4
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f830 	bl	80012ec <_ZN10TFT_Driver6UpdateEv>
	}
 800228c:	bf00      	nop
 800228e:	375c      	adds	r7, #92	@ 0x5c
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}
 8002294:	0800ac30 	.word	0x0800ac30
 8002298:	200002f0 	.word	0x200002f0
 800229c:	08009648 	.word	0x08009648
 80022a0:	0800964c 	.word	0x0800964c
 80022a4:	08009650 	.word	0x08009650
 80022a8:	447a0000 	.word	0x447a0000
 80022ac:	08009d5c 	.word	0x08009d5c
 80022b0:	08009658 	.word	0x08009658
 80022b4:	0800965c 	.word	0x0800965c
 80022b8:	0800a0d8 	.word	0x0800a0d8
 80022bc:	42c80000 	.word	0x42c80000
 80022c0:	41200000 	.word	0x41200000
 80022c4:	08009660 	.word	0x08009660
 80022c8:	0800966c 	.word	0x0800966c
 80022cc:	469c4000 	.word	0x469c4000
 80022d0:	461c4000 	.word	0x461c4000
 80022d4:	08009678 	.word	0x08009678
 80022d8:	08009680 	.word	0x08009680
 80022dc:	08009688 	.word	0x08009688

080022e0 <_ZN5Power11tickBatteryEv>:

	void tickBattery() {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
		readB1();
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f909 	bl	8002500 <_ZN5Power6readB1Ev>
		readB2();
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f966 	bl	80025c0 <_ZN5Power6readB2Ev>
		readB3();
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f9ff 	bl	80026f8 <_ZN5Power6readB3Ev>
	}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <_ZN5Power13screenBatteryEv>:

	void screenBattery() {
 8002304:	b580      	push	{r7, lr}
 8002306:	b096      	sub	sp, #88	@ 0x58
 8002308:	af02      	add	r7, sp, #8
 800230a:	6078      	str	r0, [r7, #4]

		adc.readAllRegister();
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	331c      	adds	r3, #28
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff f9a1 	bl	8001658 <_ZN7ADS124315readAllRegisterEv>

		if (adc.ADSregister.SETUP.PGA != PGA_1) {
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7f1b      	ldrb	r3, [r3, #28]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <_ZN5Power13screenBatteryEv+0x50>

			adc.setPGA(PGA_1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	331c      	adds	r3, #28
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fae4 	bl	80018f8 <_ZN7ADS12436setPGAE4_PGA>
			HAL_Delay(1);
 8002330:	2001      	movs	r0, #1
 8002332:	f000 ffd5 	bl	80032e0 <HAL_Delay>
			adc.sendCommand(SELFCAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	331c      	adds	r3, #28
 800233a:	21f0      	movs	r1, #240	@ 0xf0
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fa6d 	bl	800181c <_ZN7ADS124311sendCommandEh>
			adc.sendCommand(DSYNC);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	331c      	adds	r3, #28
 8002346:	21fc      	movs	r1, #252	@ 0xfc
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fa67 	bl	800181c <_ZN7ADS124311sendCommandEh>
			HAL_Delay(100);
 800234e:	2064      	movs	r0, #100	@ 0x64
 8002350:	f000 ffc6 	bl	80032e0 <HAL_Delay>
		}

		tickBattery();
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ffc3 	bl	80022e0 <_ZN5Power11tickBatteryEv>

		char str[64];

		tft->Fill1(0);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f003 ff6d 	bl	8006240 <_ZN3TFT5Fill1Et>

		tft->GotoXY(64, 2);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	2202      	movs	r2, #2
 800236c:	2140      	movs	r1, #64	@ 0x40
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fff3 	bl	800135a <_ZN3TFT6GotoXYEss>
		sprintf(str, "%2.3f", v12);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe f855 	bl	8000428 <__aeabi_f2d>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	f107 000c 	add.w	r0, r7, #12
 8002386:	4958      	ldr	r1, [pc, #352]	@ (80024e8 <_ZN5Power13screenBatteryEv+0x1e4>)
 8002388:	f005 f81a 	bl	80073c0 <siprintf>
		FontClassicPuts(tft, str, &Font_11x18, 0);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002390:	f107 010c 	add.w	r1, r7, #12
 8002394:	2300      	movs	r3, #0
 8002396:	4a55      	ldr	r2, [pc, #340]	@ (80024ec <_ZN5Power13screenBatteryEv+0x1e8>)
 8002398:	f7ff f8aa 	bl	80014f0 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th>

		uint8_t x = 2;
 800239c:	2302      	movs	r3, #2
 800239e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		tft->GotoXY(x, 2);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80023aa:	b211      	sxth	r1, r2
 80023ac:	2202      	movs	r2, #2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe ffd3 	bl	800135a <_ZN3TFT6GotoXYEss>
		sprintf(str, "%.4f", b3);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f835 	bl	8000428 <__aeabi_f2d>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	f107 000c 	add.w	r0, r7, #12
 80023c6:	494a      	ldr	r1, [pc, #296]	@ (80024f0 <_ZN5Power13screenBatteryEv+0x1ec>)
 80023c8:	f004 fffa 	bl	80073c0 <siprintf>
		FontClassicPuts(tft, str, &Font_11x18, 0);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80023d0:	f107 010c 	add.w	r1, r7, #12
 80023d4:	2300      	movs	r3, #0
 80023d6:	4a45      	ldr	r2, [pc, #276]	@ (80024ec <_ZN5Power13screenBatteryEv+0x1e8>)
 80023d8:	f7ff f88a 	bl	80014f0 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th>

		tft->GotoXY(x, 23);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80023e4:	b211      	sxth	r1, r2
 80023e6:	2217      	movs	r2, #23
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ffb6 	bl	800135a <_ZN3TFT6GotoXYEss>
		sprintf(str, "%.4f", b2);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f818 	bl	8000428 <__aeabi_f2d>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	f107 000c 	add.w	r0, r7, #12
 8002400:	493b      	ldr	r1, [pc, #236]	@ (80024f0 <_ZN5Power13screenBatteryEv+0x1ec>)
 8002402:	f004 ffdd 	bl	80073c0 <siprintf>
		FontClassicPuts(tft, str, &Font_11x18, 0);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800240a:	f107 010c 	add.w	r1, r7, #12
 800240e:	2300      	movs	r3, #0
 8002410:	4a36      	ldr	r2, [pc, #216]	@ (80024ec <_ZN5Power13screenBatteryEv+0x1e8>)
 8002412:	f7ff f86d 	bl	80014f0 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th>

		tft->GotoXY(x, 45);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800241e:	b211      	sxth	r1, r2
 8002420:	222d      	movs	r2, #45	@ 0x2d
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe ff99 	bl	800135a <_ZN3TFT6GotoXYEss>
		sprintf(str, "%.4f", b1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fd fffb 	bl	8000428 <__aeabi_f2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	f107 000c 	add.w	r0, r7, #12
 800243a:	492d      	ldr	r1, [pc, #180]	@ (80024f0 <_ZN5Power13screenBatteryEv+0x1ec>)
 800243c:	f004 ffc0 	bl	80073c0 <siprintf>
		FontClassicPuts(tft, str, &Font_11x18, 0);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002444:	f107 010c 	add.w	r1, r7, #12
 8002448:	2300      	movs	r3, #0
 800244a:	4a28      	ldr	r2, [pc, #160]	@ (80024ec <_ZN5Power13screenBatteryEv+0x1e8>)
 800244c:	f7ff f850 	bl	80014f0 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th>

		tft->GotoXY(65, 53);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	2235      	movs	r2, #53	@ 0x35
 8002456:	2141      	movs	r1, #65	@ 0x41
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe ff7e 	bl	800135a <_ZN3TFT6GotoXYEss>
		sprintf(str, "v8  %.4f", v8);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fd ffe0 	bl	8000428 <__aeabi_f2d>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	f107 000c 	add.w	r0, r7, #12
 8002470:	4920      	ldr	r1, [pc, #128]	@ (80024f4 <_ZN5Power13screenBatteryEv+0x1f0>)
 8002472:	f004 ffa5 	bl	80073c0 <siprintf>
		FontClassicPuts(tft, str, &Font_7x10, 0);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800247a:	f107 010c 	add.w	r1, r7, #12
 800247e:	2300      	movs	r3, #0
 8002480:	4a1d      	ldr	r2, [pc, #116]	@ (80024f8 <_ZN5Power13screenBatteryEv+0x1f4>)
 8002482:	f7ff f835 	bl	80014f0 <_ZL15FontClassicPutsP3TFTPcP9FontDef_th>

		tft->Rectangle(0, 0, 127, 63, 1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800248a:	2301      	movs	r3, #1
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	233f      	movs	r3, #63	@ 0x3f
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	237f      	movs	r3, #127	@ 0x7f
 8002494:	2200      	movs	r2, #0
 8002496:	2100      	movs	r1, #0
 8002498:	f004 f955 	bl	8006746 <_ZN3TFT9RectangleEllttt>
		tft->LineV(63, 1, 63, 1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80024a0:	2301      	movs	r3, #1
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	233f      	movs	r3, #63	@ 0x3f
 80024a6:	2201      	movs	r2, #1
 80024a8:	213f      	movs	r1, #63	@ 0x3f
 80024aa:	f003 fef9 	bl	80062a0 <_ZN3TFT5LineVElllt>
		tft->LineHW(1, 20, 63, 1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80024b2:	2301      	movs	r3, #1
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	233f      	movs	r3, #63	@ 0x3f
 80024b8:	2214      	movs	r2, #20
 80024ba:	2101      	movs	r1, #1
 80024bc:	f004 f92c 	bl	8006718 <_ZN3TFT6LineHWElllt>
        tft->LineHW(1, 42, 63, 1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80024c4:	2301      	movs	r3, #1
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	233f      	movs	r3, #63	@ 0x3f
 80024ca:	222a      	movs	r2, #42	@ 0x2a
 80024cc:	2101      	movs	r1, #1
 80024ce:	f004 f923 	bl	8006718 <_ZN3TFT6LineHWElllt>

		tft->driver.Update();
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	3304      	adds	r3, #4
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe ff07 	bl	80012ec <_ZN10TFT_Driver6UpdateEv>
	}
 80024de:	bf00      	nop
 80024e0:	3750      	adds	r7, #80	@ 0x50
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	0800968c 	.word	0x0800968c
 80024ec:	20000070 	.word	0x20000070
 80024f0:	08009694 	.word	0x08009694
 80024f4:	0800969c 	.word	0x0800969c
 80024f8:	20000068 	.word	0x20000068
 80024fc:	00000000 	.word	0x00000000

08002500 <_ZN5Power6readB1Ev>:

	void readB1(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
		uint32_t v = adc.readADC(5, 6);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	331c      	adds	r3, #28
 800250c:	2206      	movs	r2, #6
 800250e:	2105      	movs	r1, #5
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fa56 	bl	80019c2 <_ZN7ADS12437readADCEhh>
 8002516:	60f8      	str	r0, [r7, #12]
		b1 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 4.120 / 2.0202
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7fe fbbb 	bl	8000c94 <__aeabi_ui2f>
 800251e:	4603      	mov	r3, r0
 8002520:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fcc1 	bl	8000eac <__aeabi_fdiv>
 800252a:	4603      	mov	r3, r0
 800252c:	4922      	ldr	r1, [pc, #136]	@ (80025b8 <_ZN5Power6readB1Ev+0xb8>)
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fc08 	bl	8000d44 <__aeabi_fmul>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f7fd ff76 	bl	8000428 <__aeabi_f2d>
 800253c:	a316      	add	r3, pc, #88	@ (adr r3, 8002598 <_ZN5Power6readB1Ev+0x98>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fd ffc9 	bl	80004d8 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	a314      	add	r3, pc, #80	@ (adr r3, 80025a0 <_ZN5Power6readB1Ev+0xa0>)
 8002550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002554:	f7fe f8ea 	bl	800072c <__aeabi_ddiv>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
				* 4.119 / 4.2;
 8002560:	a311      	add	r3, pc, #68	@ (adr r3, 80025a8 <_ZN5Power6readB1Ev+0xa8>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f7fd ffb7 	bl	80004d8 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	a30f      	add	r3, pc, #60	@ (adr r3, 80025b0 <_ZN5Power6readB1Ev+0xb0>)
 8002574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002578:	f7fe f8d8 	bl	800072c <__aeabi_ddiv>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	f7fe fa80 	bl	8000a88 <__aeabi_d2f>
 8002588:	4602      	mov	r2, r0
		b1 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 4.120 / 2.0202
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	601a      	str	r2, [r3, #0]
	}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	47ae147b 	.word	0x47ae147b
 800259c:	40107ae1 	.word	0x40107ae1
 80025a0:	9e1b089a 	.word	0x9e1b089a
 80025a4:	4000295e 	.word	0x4000295e
 80025a8:	22d0e560 	.word	0x22d0e560
 80025ac:	401079db 	.word	0x401079db
 80025b0:	cccccccd 	.word	0xcccccccd
 80025b4:	4010cccc 	.word	0x4010cccc
 80025b8:	40200000 	.word	0x40200000
 80025bc:	00000000 	.word	0x00000000

080025c0 <_ZN5Power6readB2Ev>:

	void readB2() {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

		uint32_t v = adc.readADC(4, 6);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	331c      	adds	r3, #28
 80025cc:	2206      	movs	r2, #6
 80025ce:	2104      	movs	r1, #4
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f9f6 	bl	80019c2 <_ZN7ADS12437readADCEhh>
 80025d6:	60f8      	str	r0, [r7, #12]
		v8 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 8.197 / 2.1743
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f7fe fb5b 	bl	8000c94 <__aeabi_ui2f>
 80025de:	4603      	mov	r3, r0
 80025e0:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fc61 	bl	8000eac <__aeabi_fdiv>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4940      	ldr	r1, [pc, #256]	@ (80026f0 <_ZN5Power6readB2Ev+0x130>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fba8 	bl	8000d44 <__aeabi_fmul>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ff16 	bl	8000428 <__aeabi_f2d>
 80025fc:	a32e      	add	r3, pc, #184	@ (adr r3, 80026b8 <_ZN5Power6readB2Ev+0xf8>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fd ff69 	bl	80004d8 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	a32c      	add	r3, pc, #176	@ (adr r3, 80026c0 <_ZN5Power6readB2Ev+0x100>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	f7fe f88a 	bl	800072c <__aeabi_ddiv>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
				* 8.197 / 8.196 * 8.192 / 8.191 * 8.090/8.092;
 8002620:	a325      	add	r3, pc, #148	@ (adr r3, 80026b8 <_ZN5Power6readB2Ev+0xf8>)
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f7fd ff57 	bl	80004d8 <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	a325      	add	r3, pc, #148	@ (adr r3, 80026c8 <_ZN5Power6readB2Ev+0x108>)
 8002634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002638:	f7fe f878 	bl	800072c <__aeabi_ddiv>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	a322      	add	r3, pc, #136	@ (adr r3, 80026d0 <_ZN5Power6readB2Ev+0x110>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fd ff45 	bl	80004d8 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	a320      	add	r3, pc, #128	@ (adr r3, 80026d8 <_ZN5Power6readB2Ev+0x118>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f7fe f866 	bl	800072c <__aeabi_ddiv>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	a31d      	add	r3, pc, #116	@ (adr r3, 80026e0 <_ZN5Power6readB2Ev+0x120>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd ff33 	bl	80004d8 <__aeabi_dmul>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	a31b      	add	r3, pc, #108	@ (adr r3, 80026e8 <_ZN5Power6readB2Ev+0x128>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	f7fe f854 	bl	800072c <__aeabi_ddiv>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe f9fc 	bl	8000a88 <__aeabi_d2f>
 8002690:	4602      	mov	r2, r0
		v8 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 8.197 / 2.1743
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	619a      	str	r2, [r3, #24]
		b2 = v8 - b1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f7fe fa45 	bl	8000b30 <__aeabi_fsub>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	605a      	str	r2, [r3, #4]
	}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2f1a9fbe 	.word	0x2f1a9fbe
 80026bc:	402064dd 	.word	0x402064dd
 80026c0:	65fd8adb 	.word	0x65fd8adb
 80026c4:	400164f7 	.word	0x400164f7
 80026c8:	1cac0831 	.word	0x1cac0831
 80026cc:	4020645a 	.word	0x4020645a
 80026d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026d4:	4020624d 	.word	0x4020624d
 80026d8:	c083126f 	.word	0xc083126f
 80026dc:	402061ca 	.word	0x402061ca
 80026e0:	7ae147ae 	.word	0x7ae147ae
 80026e4:	40202e14 	.word	0x40202e14
 80026e8:	9fbe76c9 	.word	0x9fbe76c9
 80026ec:	40202f1a 	.word	0x40202f1a
 80026f0:	40200000 	.word	0x40200000
 80026f4:	00000000 	.word	0x00000000

080026f8 <_ZN5Power6readB3Ev>:

	void readB3(void) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
		uint32_t v = adc.readADC(1, 6);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	331c      	adds	r3, #28
 8002704:	2206      	movs	r2, #6
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f95a 	bl	80019c2 <_ZN7ADS12437readADCEhh>
 800270e:	60f8      	str	r0, [r7, #12]
		v12 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.292 / 2.1478 * 12.143/12.146 *12.150/12.147;
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7fe fabf 	bl	8000c94 <__aeabi_ui2f>
 8002716:	4603      	mov	r3, r0
 8002718:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fbc5 	bl	8000eac <__aeabi_fdiv>
 8002722:	4603      	mov	r3, r0
 8002724:	4936      	ldr	r1, [pc, #216]	@ (8002800 <_ZN5Power6readB3Ev+0x108>)
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fb0c 	bl	8000d44 <__aeabi_fmul>
 800272c:	4603      	mov	r3, r0
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fe7a 	bl	8000428 <__aeabi_f2d>
 8002734:	a326      	add	r3, pc, #152	@ (adr r3, 80027d0 <_ZN5Power6readB3Ev+0xd8>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fd fecd 	bl	80004d8 <__aeabi_dmul>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	a324      	add	r3, pc, #144	@ (adr r3, 80027d8 <_ZN5Power6readB3Ev+0xe0>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fd ffee 	bl	800072c <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	a321      	add	r3, pc, #132	@ (adr r3, 80027e0 <_ZN5Power6readB3Ev+0xe8>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd febb 	bl	80004d8 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	a31f      	add	r3, pc, #124	@ (adr r3, 80027e8 <_ZN5Power6readB3Ev+0xf0>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd ffdc 	bl	800072c <__aeabi_ddiv>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	a31c      	add	r3, pc, #112	@ (adr r3, 80027f0 <_ZN5Power6readB3Ev+0xf8>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f7fd fea9 	bl	80004d8 <__aeabi_dmul>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	a31a      	add	r3, pc, #104	@ (adr r3, 80027f8 <_ZN5Power6readB3Ev+0x100>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd ffca 	bl	800072c <__aeabi_ddiv>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	f7fe f972 	bl	8000a88 <__aeabi_d2f>
 80027a4:	4602      	mov	r2, r0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60da      	str	r2, [r3, #12]
		b3 = v12 - v8;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	4619      	mov	r1, r3
 80027b4:	4610      	mov	r0, r2
 80027b6:	f7fe f9bb 	bl	8000b30 <__aeabi_fsub>
 80027ba:	4603      	mov	r3, r0
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	609a      	str	r2, [r3, #8]
	}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	f3af 8000 	nop.w
 80027d0:	0624dd2f 	.word	0x0624dd2f
 80027d4:	40289581 	.word	0x40289581
 80027d8:	c432ca58 	.word	0xc432ca58
 80027dc:	40012eb1 	.word	0x40012eb1
 80027e0:	4bc6a7f0 	.word	0x4bc6a7f0
 80027e4:	40284937 	.word	0x40284937
 80027e8:	83126e98 	.word	0x83126e98
 80027ec:	40284ac0 	.word	0x40284ac0
 80027f0:	cccccccd 	.word	0xcccccccd
 80027f4:	40284ccc 	.word	0x40284ccc
 80027f8:	95810625 	.word	0x95810625
 80027fc:	40284b43 	.word	0x40284b43
 8002800:	40200000 	.word	0x40200000
 8002804:	00000000 	.word	0x00000000

08002808 <_ZN5Power7readOutEv>:

//Чтение выходного напряжения 2-7
	void readOut(void) {
 8002808:	b5b0      	push	{r4, r5, r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
		uint32_t v = adc.readADC(2, 0);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	331c      	adds	r3, #28
 8002814:	2200      	movs	r2, #0
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f8d2 	bl	80019c2 <_ZN7ADS12437readADCEhh>
 800281e:	60f8      	str	r0, [r7, #12]
		vOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.0 / 2.1269
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7fe fa37 	bl	8000c94 <__aeabi_ui2f>
 8002826:	4603      	mov	r3, r0
 8002828:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fb3d 	bl	8000eac <__aeabi_fdiv>
 8002832:	4603      	mov	r3, r0
 8002834:	4964      	ldr	r1, [pc, #400]	@ (80029c8 <_ZN5Power7readOutEv+0x1c0>)
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fa84 	bl	8000d44 <__aeabi_fmul>
 800283c:	4603      	mov	r3, r0
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fdf2 	bl	8000428 <__aeabi_f2d>
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	4b60      	ldr	r3, [pc, #384]	@ (80029cc <_ZN5Power7readOutEv+0x1c4>)
 800284a:	f7fd fe45 	bl	80004d8 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	a34a      	add	r3, pc, #296	@ (adr r3, 8002980 <_ZN5Power7readOutEv+0x178>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f7fd ff66 	bl	800072c <__aeabi_ddiv>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
				* 3.000 / 3.004 * 5.0 / 4.997 * 22.00 / 9.57 * 5.768/5.770 * 4.992/4.994;
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	4b58      	ldr	r3, [pc, #352]	@ (80029d0 <_ZN5Power7readOutEv+0x1c8>)
 800286e:	f7fd fe33 	bl	80004d8 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	a343      	add	r3, pc, #268	@ (adr r3, 8002988 <_ZN5Power7readOutEv+0x180>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	f7fd ff54 	bl	800072c <__aeabi_ddiv>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	4b50      	ldr	r3, [pc, #320]	@ (80029d4 <_ZN5Power7readOutEv+0x1cc>)
 8002892:	f7fd fe21 	bl	80004d8 <__aeabi_dmul>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002990 <_ZN5Power7readOutEv+0x188>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd ff42 	bl	800072c <__aeabi_ddiv>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	4b48      	ldr	r3, [pc, #288]	@ (80029d8 <_ZN5Power7readOutEv+0x1d0>)
 80028b6:	f7fd fe0f 	bl	80004d8 <__aeabi_dmul>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	a335      	add	r3, pc, #212	@ (adr r3, 8002998 <_ZN5Power7readOutEv+0x190>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd ff30 	bl	800072c <__aeabi_ddiv>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	a332      	add	r3, pc, #200	@ (adr r3, 80029a0 <_ZN5Power7readOutEv+0x198>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f7fd fdfd 	bl	80004d8 <__aeabi_dmul>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	a330      	add	r3, pc, #192	@ (adr r3, 80029a8 <_ZN5Power7readOutEv+0x1a0>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	f7fd ff1e 	bl	800072c <__aeabi_ddiv>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	a32d      	add	r3, pc, #180	@ (adr r3, 80029b0 <_ZN5Power7readOutEv+0x1a8>)
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fd fdeb 	bl	80004d8 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	a32b      	add	r3, pc, #172	@ (adr r3, 80029b8 <_ZN5Power7readOutEv+0x1b0>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd ff0c 	bl	800072c <__aeabi_ddiv>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f7fe f8b4 	bl	8000a88 <__aeabi_d2f>
 8002920:	4602      	mov	r2, r0
		vOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.0 / 2.1269
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]

		//vOut = map(vOut, 1.2532, 11.004 , 1.2530, 11.015);

		vOut = vOut - iOut/1000.0 * 0.02;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fd7c 	bl	8000428 <__aeabi_f2d>
 8002930:	4604      	mov	r4, r0
 8002932:	460d      	mov	r5, r1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fd75 	bl	8000428 <__aeabi_f2d>
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	4b26      	ldr	r3, [pc, #152]	@ (80029dc <_ZN5Power7readOutEv+0x1d4>)
 8002944:	f7fd fef2 	bl	800072c <__aeabi_ddiv>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	a31b      	add	r3, pc, #108	@ (adr r3, 80029c0 <_ZN5Power7readOutEv+0x1b8>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fd fdbf 	bl	80004d8 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f7fd fc01 	bl	8000168 <__aeabi_dsub>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	f7fe f88b 	bl	8000a88 <__aeabi_d2f>
 8002972:	4602      	mov	r2, r0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]

	}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bdb0      	pop	{r4, r5, r7, pc}
 8002980:	25aee632 	.word	0x25aee632
 8002984:	400103e4 	.word	0x400103e4
 8002988:	26e978d5 	.word	0x26e978d5
 800298c:	40080831 	.word	0x40080831
 8002990:	916872b0 	.word	0x916872b0
 8002994:	4013fced 	.word	0x4013fced
 8002998:	0a3d70a4 	.word	0x0a3d70a4
 800299c:	402323d7 	.word	0x402323d7
 80029a0:	978d4fdf 	.word	0x978d4fdf
 80029a4:	4017126e 	.word	0x4017126e
 80029a8:	e147ae14 	.word	0xe147ae14
 80029ac:	4017147a 	.word	0x4017147a
 80029b0:	d916872b 	.word	0xd916872b
 80029b4:	4013f7ce 	.word	0x4013f7ce
 80029b8:	22d0e560 	.word	0x22d0e560
 80029bc:	4013f9db 	.word	0x4013f9db
 80029c0:	47ae147b 	.word	0x47ae147b
 80029c4:	3f947ae1 	.word	0x3f947ae1
 80029c8:	40200000 	.word	0x40200000
 80029cc:	40280000 	.word	0x40280000
 80029d0:	40080000 	.word	0x40080000
 80029d4:	40140000 	.word	0x40140000
 80029d8:	40360000 	.word	0x40360000
 80029dc:	408f4000 	.word	0x408f4000

080029e0 <_ZN5Power5readIEv>:

//Чтение тока 7-6
	void readI(void) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
		uint32_t v = adc.readADC(7, 6);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	331c      	adds	r3, #28
 80029ec:	2206      	movs	r2, #6
 80029ee:	2107      	movs	r1, #7
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe ffe6 	bl	80019c2 <_ZN7ADS12437readADCEhh>
 80029f6:	60f8      	str	r0, [r7, #12]
		iOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 20000.0F - 0.001 ;
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7fe f94b 	bl	8000c94 <__aeabi_ui2f>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fa51 	bl	8000eac <__aeabi_fdiv>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4924      	ldr	r1, [pc, #144]	@ (8002aa0 <_ZN5Power5readIEv+0xc0>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe f998 	bl	8000d44 <__aeabi_fmul>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4923      	ldr	r1, [pc, #140]	@ (8002aa4 <_ZN5Power5readIEv+0xc4>)
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe f993 	bl	8000d44 <__aeabi_fmul>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fd01 	bl	8000428 <__aeabi_f2d>
 8002a26:	a31a      	add	r3, pc, #104	@ (adr r3, 8002a90 <_ZN5Power5readIEv+0xb0>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fb9c 	bl	8000168 <__aeabi_dsub>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f7fe f826 	bl	8000a88 <__aeabi_d2f>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	615a      	str	r2, [r3, #20]
		iOut *= 2.080/0.820;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fcee 	bl	8000428 <__aeabi_f2d>
 8002a4c:	a312      	add	r3, pc, #72	@ (adr r3, 8002a98 <_ZN5Power5readIEv+0xb8>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fd41 	bl	80004d8 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7fe f813 	bl	8000a88 <__aeabi_d2f>
 8002a62:	4602      	mov	r2, r0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	615a      	str	r2, [r3, #20]
		if (iOut < 0)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f04f 0100 	mov.w	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe fb05 	bl	8001080 <__aeabi_fcmplt>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d100      	bne.n	8002a7e <_ZN5Power5readIEv+0x9e>
			iOut = 0;

		//iOut = map(iOut, 3.5F, 996.0f, 0.0f, 996.00f); // - 3.5F;

	}
 8002a7c:	e003      	b.n	8002a86 <_ZN5Power5readIEv+0xa6>
			iOut = 0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]
	}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a94:	3f50624d 	.word	0x3f50624d
 8002a98:	44aed44b 	.word	0x44aed44b
 8002a9c:	40044aed 	.word	0x40044aed
 8002aa0:	40200000 	.word	0x40200000
 8002aa4:	469c4000 	.word	0x469c4000

08002aa8 <TIM1_UP_IRQHandler>:
Power power;
classLog Log;


extern "C" void TIM1_UP_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	power.tickKey();
 8002aac:	4803      	ldr	r0, [pc, #12]	@ (8002abc <TIM1_UP_IRQHandler+0x14>)
 8002aae:	f7ff fa01 	bl	8001eb4 <_ZN5Power7tickKeyEv>


  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ab2:	4803      	ldr	r0, [pc, #12]	@ (8002ac0 <TIM1_UP_IRQHandler+0x18>)
 8002ab4:	f002 fb22 	bl	80050fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000764 	.word	0x20000764
 8002ac0:	200008fc 	.word	0x200008fc

08002ac4 <setup>:


extern "C" void setup() {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8002ac8:	2064      	movs	r0, #100	@ 0x64
 8002aca:	f000 fc09 	bl	80032e0 <HAL_Delay>
	DWT_Init();
 8002ace:	f003 f9f7 	bl	8005ec0 <_Z8DWT_Initv>

	tft.init(&LCD_0);
 8002ad2:	491e      	ldr	r1, [pc, #120]	@ (8002b4c <setup+0x88>)
 8002ad4:	481e      	ldr	r0, [pc, #120]	@ (8002b50 <setup+0x8c>)
 8002ad6:	f7fe fc1b 	bl	8001310 <_ZN3TFT4initEP9TFT_LCD_t>
	tft.Fill1(0);
 8002ada:	2100      	movs	r1, #0
 8002adc:	481c      	ldr	r0, [pc, #112]	@ (8002b50 <setup+0x8c>)
 8002ade:	f003 fbaf 	bl	8006240 <_ZN3TFT5Fill1Et>
	tft.driver.Update();
 8002ae2:	481c      	ldr	r0, [pc, #112]	@ (8002b54 <setup+0x90>)
 8002ae4:	f7fe fc02 	bl	80012ec <_ZN10TFT_Driver6UpdateEv>
	tft.SetFontColor(1, 0);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2101      	movs	r1, #1
 8002aec:	4818      	ldr	r0, [pc, #96]	@ (8002b50 <setup+0x8c>)
 8002aee:	f7fe fc21 	bl	8001334 <_ZN3TFT12SetFontColorEtt>
	//tft.GotoXY(20, 20);
	//FontClassicPuts(&tft, (char*) "1111", &Font_7x10, 0);
	//tft.LineH(10, 10, 50, 1);
	//tft.driver.Update();

	Log.init(&huart1);
 8002af2:	4919      	ldr	r1, [pc, #100]	@ (8002b58 <setup+0x94>)
 8002af4:	4819      	ldr	r0, [pc, #100]	@ (8002b5c <setup+0x98>)
 8002af6:	f7ff f85a 	bl	8001bae <_ZN8classLog4initEP20__UART_HandleTypeDef>
	Log.i("Start");
 8002afa:	4919      	ldr	r1, [pc, #100]	@ (8002b60 <setup+0x9c>)
 8002afc:	4817      	ldr	r0, [pc, #92]	@ (8002b5c <setup+0x98>)
 8002afe:	f7ff f864 	bl	8001bca <_ZN8classLog1iEPKc>
//	Log.println("FSR2  0Ch %d", adc.readRegister(12));
//	Log.println("DOR2  0Dh %d", adc.readRegister(13));
//	Log.println("DOR1  0Eh %d", adc.readRegister(14));
//	Log.println("DOR0  0Fh %d", adc.readRegister(15));

	power.tft = &tft;
 8002b02:	4b18      	ldr	r3, [pc, #96]	@ (8002b64 <setup+0xa0>)
 8002b04:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <setup+0x8c>)
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30
    power.init();
 8002b08:	4816      	ldr	r0, [pc, #88]	@ (8002b64 <setup+0xa0>)
 8002b0a:	f7ff f9c3 	bl	8001e94 <_ZN5Power4initEv>

	power.adc.sendCommand(RESET);
 8002b0e:	21fe      	movs	r1, #254	@ 0xfe
 8002b10:	4815      	ldr	r0, [pc, #84]	@ (8002b68 <setup+0xa4>)
 8002b12:	f7fe fe83 	bl	800181c <_ZN7ADS124311sendCommandEh>
	power.adc.sendCommand(STOPC);
 8002b16:	210f      	movs	r1, #15
 8002b18:	4813      	ldr	r0, [pc, #76]	@ (8002b68 <setup+0xa4>)
 8002b1a:	f7fe fe7f 	bl	800181c <_ZN7ADS124311sendCommandEh>
	//adc.sendCommand(DSYNC);

	power.adc.sendCommand(SELFCAL);
 8002b1e:	21f0      	movs	r1, #240	@ 0xf0
 8002b20:	4811      	ldr	r0, [pc, #68]	@ (8002b68 <setup+0xa4>)
 8002b22:	f7fe fe7b 	bl	800181c <_ZN7ADS124311sendCommandEh>
	power.adc.sendCommand(DSYNC);
 8002b26:	21fc      	movs	r1, #252	@ 0xfc
 8002b28:	480f      	ldr	r0, [pc, #60]	@ (8002b68 <setup+0xa4>)
 8002b2a:	f7fe fe77 	bl	800181c <_ZN7ADS124311sendCommandEh>
	HAL_Delay(100);
 8002b2e:	2064      	movs	r0, #100	@ 0x64
 8002b30:	f000 fbd6 	bl	80032e0 <HAL_Delay>

	power.adc.writeRegister(2, 0x40);
 8002b34:	2240      	movs	r2, #64	@ 0x40
 8002b36:	2102      	movs	r1, #2
 8002b38:	480b      	ldr	r0, [pc, #44]	@ (8002b68 <setup+0xa4>)
 8002b3a:	f7fe fd27 	bl	800158c <_ZN7ADS124313writeRegisterEhh>


	HAL_TIM_Base_Start_IT(&htim1);
 8002b3e:	480b      	ldr	r0, [pc, #44]	@ (8002b6c <setup+0xa8>)
 8002b40:	f002 fa8a 	bl	8005058 <HAL_TIM_Base_Start_IT>

	loop();
 8002b44:	f000 f814 	bl	8002b70 <_Z4loopv>
}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	2000073c 	.word	0x2000073c
 8002b54:	20000740 	.word	0x20000740
 8002b58:	20000944 	.word	0x20000944
 8002b5c:	2000079c 	.word	0x2000079c
 8002b60:	080096a8 	.word	0x080096a8
 8002b64:	20000764 	.word	0x20000764
 8002b68:	20000780 	.word	0x20000780
 8002b6c:	200008fc 	.word	0x200008fc

08002b70 <_Z4loopv>:





void loop() {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
	while (1) {

		power.tick();
 8002b74:	4801      	ldr	r0, [pc, #4]	@ (8002b7c <_Z4loopv+0xc>)
 8002b76:	f7ff f9bf 	bl	8001ef8 <_ZN5Power4tickEv>
 8002b7a:	e7fb      	b.n	8002b74 <_Z4loopv+0x4>
 8002b7c:	20000764 	.word	0x20000764

08002b80 <_Z41__static_initialization_and_destruction_0ii>:
//		tft.driver.Update();


	}

}
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d118      	bne.n	8002bc2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d113      	bne.n	8002bc2 <_Z41__static_initialization_and_destruction_0ii+0x42>
GButton key(KEY_GPIO_Port, GPIO_PIN_6);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2240      	movs	r2, #64	@ 0x40
 8002ba2:	490a      	ldr	r1, [pc, #40]	@ (8002bcc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002ba4:	480a      	ldr	r0, [pc, #40]	@ (8002bd0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002ba6:	f002 ffdd 	bl	8005b64 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>
GButton keyC(GPIOB, GPIO_PIN_15);
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002bb4:	4905      	ldr	r1, [pc, #20]	@ (8002bcc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002bb6:	4807      	ldr	r0, [pc, #28]	@ (8002bd4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002bb8:	f002 ffd4 	bl	8005b64 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>
GFXFONT gfxfont;
 8002bbc:	4806      	ldr	r0, [pc, #24]	@ (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002bbe:	f7ff f953 	bl	8001e68 <_ZN7GFXFONTC1Ev>
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40010c00 	.word	0x40010c00
 8002bd0:	200002b0 	.word	0x200002b0
 8002bd4:	200002d0 	.word	0x200002d0
 8002bd8:	200002f0 	.word	0x200002f0

08002bdc <_GLOBAL__sub_I_key>:
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002be4:	2001      	movs	r0, #1
 8002be6:	f7ff ffcb 	bl	8002b80 <_Z41__static_initialization_and_destruction_0ii>
 8002bea:	bd80      	pop	{r7, pc}

08002bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bf0:	f000 fb14 	bl	800321c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bf4:	f000 f80e 	bl	8002c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bf8:	f7fe fa90 	bl	800111c <MX_GPIO_Init>
  MX_I2C2_Init();
 8002bfc:	f7fe faf2 	bl	80011e4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002c00:	f000 f854 	bl	8002cac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002c04:	f000 fa6e 	bl	80030e4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002c08:	f000 f9f6 	bl	8002ff8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8002c0c:	f7ff ff5a 	bl	8002ac4 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <main+0x24>

08002c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b090      	sub	sp, #64	@ 0x40
 8002c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c1a:	f107 0318 	add.w	r3, r7, #24
 8002c1e:	2228      	movs	r2, #40	@ 0x28
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fc2f 	bl	8007486 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	60da      	str	r2, [r3, #12]
 8002c34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c40:	2300      	movs	r3, #0
 8002c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c44:	2301      	movs	r3, #1
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c52:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c58:	f107 0318 	add.w	r3, r7, #24
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 fac1 	bl	80041e4 <HAL_RCC_OscConfig>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002c68:	f000 f819 	bl	8002c9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c6c:	230f      	movs	r3, #15
 8002c6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c70:	2302      	movs	r3, #2
 8002c72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2102      	movs	r1, #2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 fd2e 	bl	80046e8 <HAL_RCC_ClockConfig>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002c92:	f000 f804 	bl	8002c9e <Error_Handler>
  }
}
 8002c96:	bf00      	nop
 8002c98:	3740      	adds	r7, #64	@ 0x40
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca2:	b672      	cpsid	i
}
 8002ca4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca6:	bf00      	nop
 8002ca8:	e7fd      	b.n	8002ca6 <Error_Handler+0x8>
	...

08002cac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cb0:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002cb2:	4a18      	ldr	r2, [pc, #96]	@ (8002d14 <MX_SPI1_Init+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cb6:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002cb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cbe:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cc4:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cca:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002cde:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cea:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf0:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002cf8:	220a      	movs	r2, #10
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cfc:	4804      	ldr	r0, [pc, #16]	@ (8002d10 <MX_SPI1_Init+0x64>)
 8002cfe:	f001 fe81 	bl	8004a04 <HAL_SPI_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d08:	f7ff ffc9 	bl	8002c9e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200008a0 	.word	0x200008a0
 8002d14:	40013000 	.word	0x40013000

08002d18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 0310 	add.w	r3, r7, #16
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1b      	ldr	r2, [pc, #108]	@ (8002da0 <HAL_SPI_MspInit+0x88>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d12f      	bne.n	8002d98 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d38:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <HAL_SPI_MspInit+0x8c>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	@ (8002da4 <HAL_SPI_MspInit+0x8c>)
 8002d3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d42:	6193      	str	r3, [r2, #24]
 8002d44:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <HAL_SPI_MspInit+0x8c>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d50:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <HAL_SPI_MspInit+0x8c>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	4a13      	ldr	r2, [pc, #76]	@ (8002da4 <HAL_SPI_MspInit+0x8c>)
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	6193      	str	r3, [r2, #24]
 8002d5c:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_SPI_MspInit+0x8c>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d68:	23a0      	movs	r3, #160	@ 0xa0
 8002d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 0310 	add.w	r3, r7, #16
 8002d78:	4619      	mov	r1, r3
 8002d7a:	480b      	ldr	r0, [pc, #44]	@ (8002da8 <HAL_SPI_MspInit+0x90>)
 8002d7c:	f000 fbe2 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d80:	2340      	movs	r3, #64	@ 0x40
 8002d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	4619      	mov	r1, r3
 8002d92:	4805      	ldr	r0, [pc, #20]	@ (8002da8 <HAL_SPI_MspInit+0x90>)
 8002d94:	f000 fbd6 	bl	8003544 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40013000 	.word	0x40013000
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40010800 	.word	0x40010800

08002dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <HAL_MspInit+0x5c>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <HAL_MspInit+0x5c>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6193      	str	r3, [r2, #24]
 8002dbe:	4b12      	ldr	r3, [pc, #72]	@ (8002e08 <HAL_MspInit+0x5c>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <HAL_MspInit+0x5c>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4a0e      	ldr	r2, [pc, #56]	@ (8002e08 <HAL_MspInit+0x5c>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	61d3      	str	r3, [r2, #28]
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <HAL_MspInit+0x5c>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002de2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <HAL_MspInit+0x60>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	4a04      	ldr	r2, [pc, #16]	@ (8002e0c <HAL_MspInit+0x60>)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40010000 	.word	0x40010000

08002e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e14:	bf00      	nop
 8002e16:	e7fd      	b.n	8002e14 <NMI_Handler+0x4>

08002e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1c:	bf00      	nop
 8002e1e:	e7fd      	b.n	8002e1c <HardFault_Handler+0x4>

08002e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <MemManage_Handler+0x4>

08002e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <BusFault_Handler+0x4>

08002e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <UsageFault_Handler+0x4>

08002e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e60:	f000 fa22 	bl	80032a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return 1;
 8002e6c:	2301      	movs	r3, #1
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <_kill>:

int _kill(int pid, int sig)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e80:	f004 fb54 	bl	800752c <__errno>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2216      	movs	r2, #22
 8002e88:	601a      	str	r2, [r3, #0]
  return -1;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <_exit>:

void _exit (int status)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffe7 	bl	8002e76 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <_exit+0x12>

08002eac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e00a      	b.n	8002ed4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ebe:	f3af 8000 	nop.w
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	60ba      	str	r2, [r7, #8]
 8002eca:	b2ca      	uxtb	r2, r1
 8002ecc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	dbf0      	blt.n	8002ebe <_read+0x12>
  }

  return len;
 8002edc:	687b      	ldr	r3, [r7, #4]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e009      	b.n	8002f0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	60ba      	str	r2, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	dbf1      	blt.n	8002ef8 <_write+0x12>
  }
  return len;
 8002f14:	687b      	ldr	r3, [r7, #4]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <_close>:

int _close(int file)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f44:	605a      	str	r2, [r3, #4]
  return 0;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <_isatty>:

int _isatty(int file)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
	...

08002f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f88:	4a14      	ldr	r2, [pc, #80]	@ (8002fdc <_sbrk+0x5c>)
 8002f8a:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <_sbrk+0x60>)
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f94:	4b13      	ldr	r3, [pc, #76]	@ (8002fe4 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <_sbrk+0x64>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <_sbrk+0x68>)
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d207      	bcs.n	8002fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb0:	f004 fabc 	bl	800752c <__errno>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	e009      	b.n	8002fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a05      	ldr	r2, [pc, #20]	@ (8002fe4 <_sbrk+0x64>)
 8002fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20005000 	.word	0x20005000
 8002fe0:	00000400 	.word	0x00000400
 8002fe4:	200008f8 	.word	0x200008f8
 8002fe8:	20000ae8 	.word	0x20000ae8

08002fec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300c:	463b      	mov	r3, r7
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003014:	4b1e      	ldr	r3, [pc, #120]	@ (8003090 <MX_TIM1_Init+0x98>)
 8003016:	4a1f      	ldr	r2, [pc, #124]	@ (8003094 <MX_TIM1_Init+0x9c>)
 8003018:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <MX_TIM1_Init+0x98>)
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <MX_TIM1_Init+0x98>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003026:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <MX_TIM1_Init+0x98>)
 8003028:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800302c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800302e:	4b18      	ldr	r3, [pc, #96]	@ (8003090 <MX_TIM1_Init+0x98>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003034:	4b16      	ldr	r3, [pc, #88]	@ (8003090 <MX_TIM1_Init+0x98>)
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800303a:	4b15      	ldr	r3, [pc, #84]	@ (8003090 <MX_TIM1_Init+0x98>)
 800303c:	2280      	movs	r2, #128	@ 0x80
 800303e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003040:	4813      	ldr	r0, [pc, #76]	@ (8003090 <MX_TIM1_Init+0x98>)
 8003042:	f001 ffb9 	bl	8004fb8 <HAL_TIM_Base_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800304c:	f7ff fe27 	bl	8002c9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	4619      	mov	r1, r3
 800305c:	480c      	ldr	r0, [pc, #48]	@ (8003090 <MX_TIM1_Init+0x98>)
 800305e:	f002 f955 	bl	800530c <HAL_TIM_ConfigClockSource>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003068:	f7ff fe19 	bl	8002c9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800306c:	2310      	movs	r3, #16
 800306e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003074:	463b      	mov	r3, r7
 8003076:	4619      	mov	r1, r3
 8003078:	4805      	ldr	r0, [pc, #20]	@ (8003090 <MX_TIM1_Init+0x98>)
 800307a:	f002 fb33 	bl	80056e4 <HAL_TIMEx_MasterConfigSynchronization>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003084:	f7ff fe0b 	bl	8002c9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	200008fc 	.word	0x200008fc
 8003094:	40012c00 	.word	0x40012c00

08003098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0d      	ldr	r2, [pc, #52]	@ (80030dc <HAL_TIM_Base_MspInit+0x44>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d113      	bne.n	80030d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030aa:	4b0d      	ldr	r3, [pc, #52]	@ (80030e0 <HAL_TIM_Base_MspInit+0x48>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	4a0c      	ldr	r2, [pc, #48]	@ (80030e0 <HAL_TIM_Base_MspInit+0x48>)
 80030b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030b4:	6193      	str	r3, [r2, #24]
 80030b6:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <HAL_TIM_Base_MspInit+0x48>)
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	2019      	movs	r0, #25
 80030c8:	f000 fa05 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80030cc:	2019      	movs	r0, #25
 80030ce:	f000 fa1e 	bl	800350e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40021000 	.word	0x40021000

080030e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030e8:	4b10      	ldr	r3, [pc, #64]	@ (800312c <MX_USART1_UART_Init+0x48>)
 80030ea:	4a11      	ldr	r2, [pc, #68]	@ (8003130 <MX_USART1_UART_Init+0x4c>)
 80030ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80030ee:	4b0f      	ldr	r3, [pc, #60]	@ (800312c <MX_USART1_UART_Init+0x48>)
 80030f0:	4a10      	ldr	r2, [pc, #64]	@ (8003134 <MX_USART1_UART_Init+0x50>)
 80030f2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030f4:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <MX_USART1_UART_Init+0x48>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030fa:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <MX_USART1_UART_Init+0x48>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003100:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <MX_USART1_UART_Init+0x48>)
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <MX_USART1_UART_Init+0x48>)
 8003108:	220c      	movs	r2, #12
 800310a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800310c:	4b07      	ldr	r3, [pc, #28]	@ (800312c <MX_USART1_UART_Init+0x48>)
 800310e:	2200      	movs	r2, #0
 8003110:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <MX_USART1_UART_Init+0x48>)
 8003114:	2200      	movs	r2, #0
 8003116:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003118:	4804      	ldr	r0, [pc, #16]	@ (800312c <MX_USART1_UART_Init+0x48>)
 800311a:	f002 fb53 	bl	80057c4 <HAL_UART_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8003124:	f7ff fdbb 	bl	8002c9e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000944 	.word	0x20000944
 8003130:	40013800 	.word	0x40013800
 8003134:	001e8480 	.word	0x001e8480

08003138 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 0310 	add.w	r3, r7, #16
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1c      	ldr	r2, [pc, #112]	@ (80031c4 <HAL_UART_MspInit+0x8c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d131      	bne.n	80031bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003158:	4b1b      	ldr	r3, [pc, #108]	@ (80031c8 <HAL_UART_MspInit+0x90>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	4a1a      	ldr	r2, [pc, #104]	@ (80031c8 <HAL_UART_MspInit+0x90>)
 800315e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003162:	6193      	str	r3, [r2, #24]
 8003164:	4b18      	ldr	r3, [pc, #96]	@ (80031c8 <HAL_UART_MspInit+0x90>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003170:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <HAL_UART_MspInit+0x90>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	4a14      	ldr	r2, [pc, #80]	@ (80031c8 <HAL_UART_MspInit+0x90>)
 8003176:	f043 0304 	orr.w	r3, r3, #4
 800317a:	6193      	str	r3, [r2, #24]
 800317c:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <HAL_UART_MspInit+0x90>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800318c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003192:	2303      	movs	r3, #3
 8003194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003196:	f107 0310 	add.w	r3, r7, #16
 800319a:	4619      	mov	r1, r3
 800319c:	480b      	ldr	r0, [pc, #44]	@ (80031cc <HAL_UART_MspInit+0x94>)
 800319e:	f000 f9d1 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	4619      	mov	r1, r3
 80031b6:	4805      	ldr	r0, [pc, #20]	@ (80031cc <HAL_UART_MspInit+0x94>)
 80031b8:	f000 f9c4 	bl	8003544 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80031bc:	bf00      	nop
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40010800 	.word	0x40010800

080031d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031d0:	f7ff ff0c 	bl	8002fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031d4:	480b      	ldr	r0, [pc, #44]	@ (8003204 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80031d6:	490c      	ldr	r1, [pc, #48]	@ (8003208 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80031d8:	4a0c      	ldr	r2, [pc, #48]	@ (800320c <LoopFillZerobss+0x16>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031dc:	e002      	b.n	80031e4 <LoopCopyDataInit>

080031de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e2:	3304      	adds	r3, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e8:	d3f9      	bcc.n	80031de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ea:	4a09      	ldr	r2, [pc, #36]	@ (8003210 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80031ec:	4c09      	ldr	r4, [pc, #36]	@ (8003214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f0:	e001      	b.n	80031f6 <LoopFillZerobss>

080031f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f4:	3204      	adds	r2, #4

080031f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f8:	d3fb      	bcc.n	80031f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031fa:	f004 f99d 	bl	8007538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031fe:	f7ff fcf5 	bl	8002bec <main>
  bx lr
 8003202:	4770      	bx	lr
  ldr r0, =_sdata
 8003204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003208:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800320c:	0800c4bc 	.word	0x0800c4bc
  ldr r2, =_sbss
 8003210:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003214:	20000ae4 	.word	0x20000ae4

08003218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003218:	e7fe      	b.n	8003218 <ADC1_2_IRQHandler>
	...

0800321c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003220:	4b08      	ldr	r3, [pc, #32]	@ (8003244 <HAL_Init+0x28>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a07      	ldr	r2, [pc, #28]	@ (8003244 <HAL_Init+0x28>)
 8003226:	f043 0310 	orr.w	r3, r3, #16
 800322a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800322c:	2003      	movs	r0, #3
 800322e:	f000 f947 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003232:	200f      	movs	r0, #15
 8003234:	f000 f808 	bl	8003248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003238:	f7ff fdb8 	bl	8002dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40022000 	.word	0x40022000

08003248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003250:	4b12      	ldr	r3, [pc, #72]	@ (800329c <HAL_InitTick+0x54>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <HAL_InitTick+0x58>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	4619      	mov	r1, r3
 800325a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800325e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f95f 	bl	800352a <HAL_SYSTICK_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e00e      	b.n	8003294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b0f      	cmp	r3, #15
 800327a:	d80a      	bhi.n	8003292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800327c:	2200      	movs	r2, #0
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	f000 f927 	bl	80034d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003288:	4a06      	ldr	r2, [pc, #24]	@ (80032a4 <HAL_InitTick+0x5c>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	2000005c 	.word	0x2000005c
 80032a0:	20000064 	.word	0x20000064
 80032a4:	20000060 	.word	0x20000060

080032a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_IncTick+0x1c>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <HAL_IncTick+0x20>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	4a03      	ldr	r2, [pc, #12]	@ (80032c8 <HAL_IncTick+0x20>)
 80032ba:	6013      	str	r3, [r2, #0]
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	20000064 	.word	0x20000064
 80032c8:	2000098c 	.word	0x2000098c

080032cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return uwTick;
 80032d0:	4b02      	ldr	r3, [pc, #8]	@ (80032dc <HAL_GetTick+0x10>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	2000098c 	.word	0x2000098c

080032e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e8:	f7ff fff0 	bl	80032cc <HAL_GetTick>
 80032ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d005      	beq.n	8003306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <HAL_Delay+0x44>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003306:	bf00      	nop
 8003308:	f7ff ffe0 	bl	80032cc <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	429a      	cmp	r2, r3
 8003316:	d8f7      	bhi.n	8003308 <HAL_Delay+0x28>
  {
  }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000064 	.word	0x20000064

08003328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003344:	4013      	ands	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003350:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335a:	4a04      	ldr	r2, [pc, #16]	@ (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	60d3      	str	r3, [r2, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <__NVIC_GetPriorityGrouping+0x18>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	f003 0307 	and.w	r3, r3, #7
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	2b00      	cmp	r3, #0
 800339c:	db0b      	blt.n	80033b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	f003 021f 	and.w	r2, r3, #31
 80033a4:	4906      	ldr	r1, [pc, #24]	@ (80033c0 <__NVIC_EnableIRQ+0x34>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	2001      	movs	r0, #1
 80033ae:	fa00 f202 	lsl.w	r2, r0, r2
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	@ (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	@ (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	@ 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	@ 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800348c:	d301      	bcc.n	8003492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348e:	2301      	movs	r3, #1
 8003490:	e00f      	b.n	80034b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003492:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <SysTick_Config+0x40>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349a:	210f      	movs	r1, #15
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f7ff ff90 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a4:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <SysTick_Config+0x40>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034aa:	4b04      	ldr	r3, [pc, #16]	@ (80034bc <SysTick_Config+0x40>)
 80034ac:	2207      	movs	r2, #7
 80034ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff2d 	bl	8003328 <__NVIC_SetPriorityGrouping>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e8:	f7ff ff42 	bl	8003370 <__NVIC_GetPriorityGrouping>
 80034ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff ff90 	bl	8003418 <NVIC_EncodePriority>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff5f 	bl	80033c4 <__NVIC_SetPriority>
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff35 	bl	800338c <__NVIC_EnableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffa2 	bl	800347c <SysTick_Config>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b08b      	sub	sp, #44	@ 0x2c
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003556:	e169      	b.n	800382c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003558:	2201      	movs	r2, #1
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	429a      	cmp	r2, r3
 8003572:	f040 8158 	bne.w	8003826 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a9a      	ldr	r2, [pc, #616]	@ (80037e4 <HAL_GPIO_Init+0x2a0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d05e      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 8003580:	4a98      	ldr	r2, [pc, #608]	@ (80037e4 <HAL_GPIO_Init+0x2a0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d875      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 8003586:	4a98      	ldr	r2, [pc, #608]	@ (80037e8 <HAL_GPIO_Init+0x2a4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d058      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 800358c:	4a96      	ldr	r2, [pc, #600]	@ (80037e8 <HAL_GPIO_Init+0x2a4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d86f      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 8003592:	4a96      	ldr	r2, [pc, #600]	@ (80037ec <HAL_GPIO_Init+0x2a8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d052      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 8003598:	4a94      	ldr	r2, [pc, #592]	@ (80037ec <HAL_GPIO_Init+0x2a8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d869      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 800359e:	4a94      	ldr	r2, [pc, #592]	@ (80037f0 <HAL_GPIO_Init+0x2ac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d04c      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 80035a4:	4a92      	ldr	r2, [pc, #584]	@ (80037f0 <HAL_GPIO_Init+0x2ac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d863      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035aa:	4a92      	ldr	r2, [pc, #584]	@ (80037f4 <HAL_GPIO_Init+0x2b0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d046      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 80035b0:	4a90      	ldr	r2, [pc, #576]	@ (80037f4 <HAL_GPIO_Init+0x2b0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d85d      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035b6:	2b12      	cmp	r3, #18
 80035b8:	d82a      	bhi.n	8003610 <HAL_GPIO_Init+0xcc>
 80035ba:	2b12      	cmp	r3, #18
 80035bc:	d859      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035be:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <HAL_GPIO_Init+0x80>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	0800363f 	.word	0x0800363f
 80035c8:	08003619 	.word	0x08003619
 80035cc:	0800362b 	.word	0x0800362b
 80035d0:	0800366d 	.word	0x0800366d
 80035d4:	08003673 	.word	0x08003673
 80035d8:	08003673 	.word	0x08003673
 80035dc:	08003673 	.word	0x08003673
 80035e0:	08003673 	.word	0x08003673
 80035e4:	08003673 	.word	0x08003673
 80035e8:	08003673 	.word	0x08003673
 80035ec:	08003673 	.word	0x08003673
 80035f0:	08003673 	.word	0x08003673
 80035f4:	08003673 	.word	0x08003673
 80035f8:	08003673 	.word	0x08003673
 80035fc:	08003673 	.word	0x08003673
 8003600:	08003673 	.word	0x08003673
 8003604:	08003673 	.word	0x08003673
 8003608:	08003621 	.word	0x08003621
 800360c:	08003635 	.word	0x08003635
 8003610:	4a79      	ldr	r2, [pc, #484]	@ (80037f8 <HAL_GPIO_Init+0x2b4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003616:	e02c      	b.n	8003672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	623b      	str	r3, [r7, #32]
          break;
 800361e:	e029      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	3304      	adds	r3, #4
 8003626:	623b      	str	r3, [r7, #32]
          break;
 8003628:	e024      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	3308      	adds	r3, #8
 8003630:	623b      	str	r3, [r7, #32]
          break;
 8003632:	e01f      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	330c      	adds	r3, #12
 800363a:	623b      	str	r3, [r7, #32]
          break;
 800363c:	e01a      	b.n	8003674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003646:	2304      	movs	r3, #4
 8003648:	623b      	str	r3, [r7, #32]
          break;
 800364a:	e013      	b.n	8003674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d105      	bne.n	8003660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003654:	2308      	movs	r3, #8
 8003656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	611a      	str	r2, [r3, #16]
          break;
 800365e:	e009      	b.n	8003674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003660:	2308      	movs	r3, #8
 8003662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	615a      	str	r2, [r3, #20]
          break;
 800366a:	e003      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800366c:	2300      	movs	r3, #0
 800366e:	623b      	str	r3, [r7, #32]
          break;
 8003670:	e000      	b.n	8003674 <HAL_GPIO_Init+0x130>
          break;
 8003672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2bff      	cmp	r3, #255	@ 0xff
 8003678:	d801      	bhi.n	800367e <HAL_GPIO_Init+0x13a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	e001      	b.n	8003682 <HAL_GPIO_Init+0x13e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2bff      	cmp	r3, #255	@ 0xff
 8003688:	d802      	bhi.n	8003690 <HAL_GPIO_Init+0x14c>
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	e002      	b.n	8003696 <HAL_GPIO_Init+0x152>
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	3b08      	subs	r3, #8
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	210f      	movs	r1, #15
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	401a      	ands	r2, r3
 80036a8:	6a39      	ldr	r1, [r7, #32]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	431a      	orrs	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80b1 	beq.w	8003826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036c4:	4b4d      	ldr	r3, [pc, #308]	@ (80037fc <HAL_GPIO_Init+0x2b8>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	4a4c      	ldr	r2, [pc, #304]	@ (80037fc <HAL_GPIO_Init+0x2b8>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6193      	str	r3, [r2, #24]
 80036d0:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <HAL_GPIO_Init+0x2b8>)
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036dc:	4a48      	ldr	r2, [pc, #288]	@ (8003800 <HAL_GPIO_Init+0x2bc>)
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	3302      	adds	r3, #2
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a40      	ldr	r2, [pc, #256]	@ (8003804 <HAL_GPIO_Init+0x2c0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_GPIO_Init+0x1ec>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3f      	ldr	r2, [pc, #252]	@ (8003808 <HAL_GPIO_Init+0x2c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00d      	beq.n	800372c <HAL_GPIO_Init+0x1e8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3e      	ldr	r2, [pc, #248]	@ (800380c <HAL_GPIO_Init+0x2c8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <HAL_GPIO_Init+0x1e4>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	@ (8003810 <HAL_GPIO_Init+0x2cc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_GPIO_Init+0x1e0>
 8003720:	2303      	movs	r3, #3
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003724:	2304      	movs	r3, #4
 8003726:	e004      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003728:	2302      	movs	r3, #2
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003730:	2300      	movs	r3, #0
 8003732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003742:	492f      	ldr	r1, [pc, #188]	@ (8003800 <HAL_GPIO_Init+0x2bc>)
 8003744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800375c:	4b2d      	ldr	r3, [pc, #180]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	492c      	ldr	r1, [pc, #176]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
 8003768:	e006      	b.n	8003778 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800376a:	4b2a      	ldr	r3, [pc, #168]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	43db      	mvns	r3, r3
 8003772:	4928      	ldr	r1, [pc, #160]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 8003774:	4013      	ands	r3, r2
 8003776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003784:	4b23      	ldr	r3, [pc, #140]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4922      	ldr	r1, [pc, #136]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
 8003790:	e006      	b.n	80037a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003792:	4b20      	ldr	r3, [pc, #128]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	43db      	mvns	r3, r3
 800379a:	491e      	ldr	r1, [pc, #120]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 800379c:	4013      	ands	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037ac:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	4918      	ldr	r1, [pc, #96]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
 80037b8:	e006      	b.n	80037c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037ba:	4b16      	ldr	r3, [pc, #88]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	4914      	ldr	r1, [pc, #80]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d021      	beq.n	8003818 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	490e      	ldr	r1, [pc, #56]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]
 80037e0:	e021      	b.n	8003826 <HAL_GPIO_Init+0x2e2>
 80037e2:	bf00      	nop
 80037e4:	10320000 	.word	0x10320000
 80037e8:	10310000 	.word	0x10310000
 80037ec:	10220000 	.word	0x10220000
 80037f0:	10210000 	.word	0x10210000
 80037f4:	10120000 	.word	0x10120000
 80037f8:	10110000 	.word	0x10110000
 80037fc:	40021000 	.word	0x40021000
 8003800:	40010000 	.word	0x40010000
 8003804:	40010800 	.word	0x40010800
 8003808:	40010c00 	.word	0x40010c00
 800380c:	40011000 	.word	0x40011000
 8003810:	40011400 	.word	0x40011400
 8003814:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_GPIO_Init+0x304>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	43db      	mvns	r3, r3
 8003820:	4909      	ldr	r1, [pc, #36]	@ (8003848 <HAL_GPIO_Init+0x304>)
 8003822:	4013      	ands	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	3301      	adds	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	f47f ae8e 	bne.w	8003558 <HAL_GPIO_Init+0x14>
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	372c      	adds	r7, #44	@ 0x2c
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40010400 	.word	0x40010400

0800384c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e001      	b.n	800386e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	807b      	strh	r3, [r7, #2]
 8003886:	4613      	mov	r3, r2
 8003888:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800388a:	787b      	ldrb	r3, [r7, #1]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003890:	887a      	ldrh	r2, [r7, #2]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003896:	e003      	b.n	80038a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	041a      	lsls	r2, r3, #16
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	611a      	str	r2, [r3, #16]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e12b      	b.n	8003b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd fcb4 	bl	8001240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2224      	movs	r2, #36	@ 0x24
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800390e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003910:	f001 f832 	bl	8004978 <HAL_RCC_GetPCLK1Freq>
 8003914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a81      	ldr	r2, [pc, #516]	@ (8003b20 <HAL_I2C_Init+0x274>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d807      	bhi.n	8003930 <HAL_I2C_Init+0x84>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a80      	ldr	r2, [pc, #512]	@ (8003b24 <HAL_I2C_Init+0x278>)
 8003924:	4293      	cmp	r3, r2
 8003926:	bf94      	ite	ls
 8003928:	2301      	movls	r3, #1
 800392a:	2300      	movhi	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e006      	b.n	800393e <HAL_I2C_Init+0x92>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a7d      	ldr	r2, [pc, #500]	@ (8003b28 <HAL_I2C_Init+0x27c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	bf94      	ite	ls
 8003938:	2301      	movls	r3, #1
 800393a:	2300      	movhi	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0e7      	b.n	8003b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a78      	ldr	r2, [pc, #480]	@ (8003b2c <HAL_I2C_Init+0x280>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	0c9b      	lsrs	r3, r3, #18
 8003950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a6a      	ldr	r2, [pc, #424]	@ (8003b20 <HAL_I2C_Init+0x274>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d802      	bhi.n	8003980 <HAL_I2C_Init+0xd4>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3301      	adds	r3, #1
 800397e:	e009      	b.n	8003994 <HAL_I2C_Init+0xe8>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	4a69      	ldr	r2, [pc, #420]	@ (8003b30 <HAL_I2C_Init+0x284>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	3301      	adds	r3, #1
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	430b      	orrs	r3, r1
 800399a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	495c      	ldr	r1, [pc, #368]	@ (8003b20 <HAL_I2C_Init+0x274>)
 80039b0:	428b      	cmp	r3, r1
 80039b2:	d819      	bhi.n	80039e8 <HAL_I2C_Init+0x13c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e59      	subs	r1, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c2:	1c59      	adds	r1, r3, #1
 80039c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039c8:	400b      	ands	r3, r1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_I2C_Init+0x138>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1e59      	subs	r1, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e2:	e051      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 80039e4:	2304      	movs	r3, #4
 80039e6:	e04f      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d111      	bne.n	8003a14 <HAL_I2C_Init+0x168>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e58      	subs	r0, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	440b      	add	r3, r1
 80039fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e012      	b.n	8003a3a <HAL_I2C_Init+0x18e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1e58      	subs	r0, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	0099      	lsls	r1, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Init+0x196>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e022      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10e      	bne.n	8003a68 <HAL_I2C_Init+0x1bc>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1e58      	subs	r0, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	440b      	add	r3, r1
 8003a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a66:	e00f      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	6809      	ldr	r1, [r1, #0]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ab6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6911      	ldr	r1, [r2, #16]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	4311      	orrs	r1, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	000186a0 	.word	0x000186a0
 8003b24:	001e847f 	.word	0x001e847f
 8003b28:	003d08ff 	.word	0x003d08ff
 8003b2c:	431bde83 	.word	0x431bde83
 8003b30:	10624dd3 	.word	0x10624dd3

08003b34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	460b      	mov	r3, r1
 8003b42:	817b      	strh	r3, [r7, #10]
 8003b44:	4613      	mov	r3, r2
 8003b46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b48:	f7ff fbc0 	bl	80032cc <HAL_GetTick>
 8003b4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	f040 80e0 	bne.w	8003d1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	2319      	movs	r3, #25
 8003b62:	2201      	movs	r2, #1
 8003b64:	4970      	ldr	r1, [pc, #448]	@ (8003d28 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f964 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
 8003b74:	e0d3      	b.n	8003d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_I2C_Master_Transmit+0x50>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e0cc      	b.n	8003d1e <HAL_I2C_Master_Transmit+0x1ea>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d007      	beq.n	8003baa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2221      	movs	r2, #33	@ 0x21
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	893a      	ldrh	r2, [r7, #8]
 8003bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a50      	ldr	r2, [pc, #320]	@ (8003d2c <HAL_I2C_Master_Transmit+0x1f8>)
 8003bea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bec:	8979      	ldrh	r1, [r7, #10]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f89c 	bl	8003d30 <I2C_MasterRequestWrite>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e08d      	b.n	8003d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c18:	e066      	b.n	8003ce8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	6a39      	ldr	r1, [r7, #32]
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fa22 	bl	8004068 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d107      	bne.n	8003c42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e06b      	b.n	8003d1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d11b      	bne.n	8003cbc <HAL_I2C_Master_Transmit+0x188>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d017      	beq.n	8003cbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	6a39      	ldr	r1, [r7, #32]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fa19 	bl	80040f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d107      	bne.n	8003ce4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e01a      	b.n	8003d1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d194      	bne.n	8003c1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	00100002 	.word	0x00100002
 8003d2c:	ffff0000 	.word	0xffff0000

08003d30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d006      	beq.n	8003d5a <I2C_MasterRequestWrite+0x2a>
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d003      	beq.n	8003d5a <I2C_MasterRequestWrite+0x2a>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d58:	d108      	bne.n	8003d6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e00b      	b.n	8003d84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d70:	2b12      	cmp	r3, #18
 8003d72:	d107      	bne.n	8003d84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f84f 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003daa:	d103      	bne.n	8003db4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e035      	b.n	8003e24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dc0:	d108      	bne.n	8003dd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dc2:	897b      	ldrh	r3, [r7, #10]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dd0:	611a      	str	r2, [r3, #16]
 8003dd2:	e01b      	b.n	8003e0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003dd4:	897b      	ldrh	r3, [r7, #10]
 8003dd6:	11db      	asrs	r3, r3, #7
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f003 0306 	and.w	r3, r3, #6
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f063 030f 	orn	r3, r3, #15
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	490e      	ldr	r1, [pc, #56]	@ (8003e2c <I2C_MasterRequestWrite+0xfc>)
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f898 	bl	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e010      	b.n	8003e24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e02:	897b      	ldrh	r3, [r7, #10]
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4907      	ldr	r1, [pc, #28]	@ (8003e30 <I2C_MasterRequestWrite+0x100>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f888 	bl	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	00010008 	.word	0x00010008
 8003e30:	00010002 	.word	0x00010002

08003e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e44:	e048      	b.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d044      	beq.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7ff fa3d 	bl	80032cc <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d139      	bne.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	0c1b      	lsrs	r3, r3, #16
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d10d      	bne.n	8003e8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	43da      	mvns	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	e00c      	b.n	8003ea4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	43da      	mvns	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d116      	bne.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e023      	b.n	8003f20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d10d      	bne.n	8003efe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	43da      	mvns	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4013      	ands	r3, r2
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	e00c      	b.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	43da      	mvns	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d093      	beq.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f36:	e071      	b.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f46:	d123      	bne.n	8003f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	f043 0204 	orr.w	r2, r3, #4
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e067      	b.n	8004060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d041      	beq.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f98:	f7ff f998 	bl	80032cc <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d302      	bcc.n	8003fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d136      	bne.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d10c      	bne.n	8003fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	bf14      	ite	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	2300      	moveq	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e00b      	b.n	8003fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	43da      	mvns	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e021      	b.n	8004060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	0c1b      	lsrs	r3, r3, #16
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d10c      	bne.n	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	43da      	mvns	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e00b      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	43da      	mvns	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	f47f af6d 	bne.w	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004074:	e034      	b.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f886 	bl	8004188 <I2C_IsAcknowledgeFailed>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e034      	b.n	80040f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d028      	beq.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7ff f91d 	bl	80032cc <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11d      	bne.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	2b80      	cmp	r3, #128	@ 0x80
 80040b0:	d016      	beq.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e007      	b.n	80040f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	2b80      	cmp	r3, #128	@ 0x80
 80040ec:	d1c3      	bne.n	8004076 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004104:	e034      	b.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f83e 	bl	8004188 <I2C_IsAcknowledgeFailed>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e034      	b.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d028      	beq.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411e:	f7ff f8d5 	bl	80032cc <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	d302      	bcc.n	8004134 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d11d      	bne.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b04      	cmp	r3, #4
 8004140:	d016      	beq.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e007      	b.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b04      	cmp	r3, #4
 800417c:	d1c3      	bne.n	8004106 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419e:	d11b      	bne.n	80041d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	f043 0204 	orr.w	r2, r3, #4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e272      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8087 	beq.w	8004312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004204:	4b92      	ldr	r3, [pc, #584]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b04      	cmp	r3, #4
 800420e:	d00c      	beq.n	800422a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004210:	4b8f      	ldr	r3, [pc, #572]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d112      	bne.n	8004242 <HAL_RCC_OscConfig+0x5e>
 800421c:	4b8c      	ldr	r3, [pc, #560]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004228:	d10b      	bne.n	8004242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422a:	4b89      	ldr	r3, [pc, #548]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d06c      	beq.n	8004310 <HAL_RCC_OscConfig+0x12c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d168      	bne.n	8004310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e24c      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424a:	d106      	bne.n	800425a <HAL_RCC_OscConfig+0x76>
 800424c:	4b80      	ldr	r3, [pc, #512]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a7f      	ldr	r2, [pc, #508]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	e02e      	b.n	80042b8 <HAL_RCC_OscConfig+0xd4>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x98>
 8004262:	4b7b      	ldr	r3, [pc, #492]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7a      	ldr	r2, [pc, #488]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b78      	ldr	r3, [pc, #480]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a77      	ldr	r2, [pc, #476]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004274:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e01d      	b.n	80042b8 <HAL_RCC_OscConfig+0xd4>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0xbc>
 8004286:	4b72      	ldr	r3, [pc, #456]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a71      	ldr	r2, [pc, #452]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800428c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b6f      	ldr	r3, [pc, #444]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6e      	ldr	r2, [pc, #440]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0xd4>
 80042a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b68      	ldr	r3, [pc, #416]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a67      	ldr	r2, [pc, #412]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7ff f804 	bl	80032cc <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7ff f800 	bl	80032cc <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e200      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b5d      	ldr	r3, [pc, #372]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0xe4>
 80042e6:	e014      	b.n	8004312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe fff0 	bl	80032cc <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe ffec 	bl	80032cc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	@ 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1ec      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	4b53      	ldr	r3, [pc, #332]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x10c>
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800431e:	4b4c      	ldr	r3, [pc, #304]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800432a:	4b49      	ldr	r3, [pc, #292]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b08      	cmp	r3, #8
 8004334:	d11c      	bne.n	8004370 <HAL_RCC_OscConfig+0x18c>
 8004336:	4b46      	ldr	r3, [pc, #280]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	4b43      	ldr	r3, [pc, #268]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_RCC_OscConfig+0x176>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e1c0      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	4b3d      	ldr	r3, [pc, #244]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4939      	ldr	r1, [pc, #228]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	e03a      	b.n	80043e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004378:	4b36      	ldr	r3, [pc, #216]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fe ffa5 	bl	80032cc <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004386:	f7fe ffa1 	bl	80032cc <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1a1      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	4b2d      	ldr	r3, [pc, #180]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4927      	ldr	r1, [pc, #156]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	e015      	b.n	80043e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b26      	ldr	r3, [pc, #152]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fe ff84 	bl	80032cc <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fe ff80 	bl	80032cc <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e180      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1d      	ldr	r3, [pc, #116]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d03a      	beq.n	8004468 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d019      	beq.n	800442e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b17      	ldr	r3, [pc, #92]	@ (8004458 <HAL_RCC_OscConfig+0x274>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004400:	f7fe ff64 	bl	80032cc <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004408:	f7fe ff60 	bl	80032cc <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e160      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004426:	2001      	movs	r0, #1
 8004428:	f000 face 	bl	80049c8 <RCC_Delay>
 800442c:	e01c      	b.n	8004468 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442e:	4b0a      	ldr	r3, [pc, #40]	@ (8004458 <HAL_RCC_OscConfig+0x274>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004434:	f7fe ff4a 	bl	80032cc <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800443a:	e00f      	b.n	800445c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443c:	f7fe ff46 	bl	80032cc <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d908      	bls.n	800445c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e146      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	42420000 	.word	0x42420000
 8004458:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	4b92      	ldr	r3, [pc, #584]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e9      	bne.n	800443c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a6 	beq.w	80045c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800447a:	4b8b      	ldr	r3, [pc, #556]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10d      	bne.n	80044a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004486:	4b88      	ldr	r3, [pc, #544]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4a87      	ldr	r2, [pc, #540]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004490:	61d3      	str	r3, [r2, #28]
 8004492:	4b85      	ldr	r3, [pc, #532]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b82      	ldr	r3, [pc, #520]	@ (80046ac <HAL_RCC_OscConfig+0x4c8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b7f      	ldr	r3, [pc, #508]	@ (80046ac <HAL_RCC_OscConfig+0x4c8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a7e      	ldr	r2, [pc, #504]	@ (80046ac <HAL_RCC_OscConfig+0x4c8>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fe ff07 	bl	80032cc <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fe ff03 	bl	80032cc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	@ 0x64
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e103      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b75      	ldr	r3, [pc, #468]	@ (80046ac <HAL_RCC_OscConfig+0x4c8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d106      	bne.n	80044f6 <HAL_RCC_OscConfig+0x312>
 80044e8:	4b6f      	ldr	r3, [pc, #444]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	4a6e      	ldr	r2, [pc, #440]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6213      	str	r3, [r2, #32]
 80044f4:	e02d      	b.n	8004552 <HAL_RCC_OscConfig+0x36e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x334>
 80044fe:	4b6a      	ldr	r3, [pc, #424]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a69      	ldr	r2, [pc, #420]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	6213      	str	r3, [r2, #32]
 800450a:	4b67      	ldr	r3, [pc, #412]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	4a66      	ldr	r2, [pc, #408]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	6213      	str	r3, [r2, #32]
 8004516:	e01c      	b.n	8004552 <HAL_RCC_OscConfig+0x36e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b05      	cmp	r3, #5
 800451e:	d10c      	bne.n	800453a <HAL_RCC_OscConfig+0x356>
 8004520:	4b61      	ldr	r3, [pc, #388]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4a60      	ldr	r2, [pc, #384]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004526:	f043 0304 	orr.w	r3, r3, #4
 800452a:	6213      	str	r3, [r2, #32]
 800452c:	4b5e      	ldr	r3, [pc, #376]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	4a5d      	ldr	r2, [pc, #372]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	6213      	str	r3, [r2, #32]
 8004538:	e00b      	b.n	8004552 <HAL_RCC_OscConfig+0x36e>
 800453a:	4b5b      	ldr	r3, [pc, #364]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a5a      	ldr	r2, [pc, #360]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	4b58      	ldr	r3, [pc, #352]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a57      	ldr	r2, [pc, #348]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d015      	beq.n	8004586 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7fe feb7 	bl	80032cc <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fe feb3 	bl	80032cc <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0b1      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004578:	4b4b      	ldr	r3, [pc, #300]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ee      	beq.n	8004562 <HAL_RCC_OscConfig+0x37e>
 8004584:	e014      	b.n	80045b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004586:	f7fe fea1 	bl	80032cc <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458c:	e00a      	b.n	80045a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458e:	f7fe fe9d 	bl	80032cc <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459c:	4293      	cmp	r3, r2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e09b      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a4:	4b40      	ldr	r3, [pc, #256]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ee      	bne.n	800458e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b6:	4b3c      	ldr	r3, [pc, #240]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	4a3b      	ldr	r2, [pc, #236]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8087 	beq.w	80046da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045cc:	4b36      	ldr	r3, [pc, #216]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d061      	beq.n	800469c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d146      	bne.n	800466e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e0:	4b33      	ldr	r3, [pc, #204]	@ (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fe fe71 	bl	80032cc <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fe fe6d 	bl	80032cc <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e06d      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004600:	4b29      	ldr	r3, [pc, #164]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004614:	d108      	bne.n	8004628 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004616:	4b24      	ldr	r3, [pc, #144]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	4921      	ldr	r1, [pc, #132]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004628:	4b1f      	ldr	r3, [pc, #124]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a19      	ldr	r1, [r3, #32]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	430b      	orrs	r3, r1
 800463a:	491b      	ldr	r1, [pc, #108]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004640:	4b1b      	ldr	r3, [pc, #108]	@ (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fe fe41 	bl	80032cc <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464e:	f7fe fe3d 	bl	80032cc <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e03d      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004660:	4b11      	ldr	r3, [pc, #68]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x46a>
 800466c:	e035      	b.n	80046da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b10      	ldr	r3, [pc, #64]	@ (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fe fe2a 	bl	80032cc <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fe fe26 	bl	80032cc <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e026      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468e:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x498>
 800469a:	e01e      	b.n	80046da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e019      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40007000 	.word	0x40007000
 80046b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_RCC_OscConfig+0x500>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d106      	bne.n	80046d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d001      	beq.n	80046da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000

080046e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0d0      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046fc:	4b6a      	ldr	r3, [pc, #424]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d910      	bls.n	800472c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470a:	4b67      	ldr	r3, [pc, #412]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 0207 	bic.w	r2, r3, #7
 8004712:	4965      	ldr	r1, [pc, #404]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b63      	ldr	r3, [pc, #396]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0b8      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d020      	beq.n	800477a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004744:	4b59      	ldr	r3, [pc, #356]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4a58      	ldr	r2, [pc, #352]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 800474a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800474e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800475c:	4b53      	ldr	r3, [pc, #332]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4a52      	ldr	r2, [pc, #328]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004766:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004768:	4b50      	ldr	r3, [pc, #320]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	494d      	ldr	r1, [pc, #308]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004776:	4313      	orrs	r3, r2
 8004778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d040      	beq.n	8004808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478e:	4b47      	ldr	r3, [pc, #284]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d115      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e07f      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d107      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a6:	4b41      	ldr	r3, [pc, #260]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e073      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b6:	4b3d      	ldr	r3, [pc, #244]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e06b      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c6:	4b39      	ldr	r3, [pc, #228]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f023 0203 	bic.w	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4936      	ldr	r1, [pc, #216]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d8:	f7fe fd78 	bl	80032cc <HAL_GetTick>
 80047dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	e00a      	b.n	80047f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e0:	f7fe fd74 	bl	80032cc <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e053      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f6:	4b2d      	ldr	r3, [pc, #180]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 020c 	and.w	r2, r3, #12
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	429a      	cmp	r2, r3
 8004806:	d1eb      	bne.n	80047e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004808:	4b27      	ldr	r3, [pc, #156]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d210      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004816:	4b24      	ldr	r3, [pc, #144]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 0207 	bic.w	r2, r3, #7
 800481e:	4922      	ldr	r1, [pc, #136]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b20      	ldr	r3, [pc, #128]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e032      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004844:	4b19      	ldr	r3, [pc, #100]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4916      	ldr	r1, [pc, #88]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	4313      	orrs	r3, r2
 8004854:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004862:	4b12      	ldr	r3, [pc, #72]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	490e      	ldr	r1, [pc, #56]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004876:	f000 f821 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 800487a:	4602      	mov	r2, r0
 800487c:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	490a      	ldr	r1, [pc, #40]	@ (80048b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004888:	5ccb      	ldrb	r3, [r1, r3]
 800488a:	fa22 f303 	lsr.w	r3, r2, r3
 800488e:	4a09      	ldr	r2, [pc, #36]	@ (80048b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004892:	4b09      	ldr	r3, [pc, #36]	@ (80048b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe fcd6 	bl	8003248 <HAL_InitTick>

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40022000 	.word	0x40022000
 80048ac:	40021000 	.word	0x40021000
 80048b0:	0800ac40 	.word	0x0800ac40
 80048b4:	2000005c 	.word	0x2000005c
 80048b8:	20000060 	.word	0x20000060

080048bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	2300      	movs	r3, #0
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	2300      	movs	r3, #0
 80048d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x94>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x30>
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x36>
 80048ea:	e027      	b.n	800493c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048ec:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ee:	613b      	str	r3, [r7, #16]
      break;
 80048f0:	e027      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	0c9b      	lsrs	r3, r3, #18
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	4a17      	ldr	r2, [pc, #92]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048fc:	5cd3      	ldrb	r3, [r2, r3]
 80048fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800490a:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x94>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	0c5b      	lsrs	r3, r3, #17
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	4a11      	ldr	r2, [pc, #68]	@ (800495c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004916:	5cd3      	ldrb	r3, [r2, r3]
 8004918:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a0d      	ldr	r2, [pc, #52]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x98>)
 800491e:	fb03 f202 	mul.w	r2, r3, r2
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	e004      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0c      	ldr	r2, [pc, #48]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004930:	fb02 f303 	mul.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	613b      	str	r3, [r7, #16]
      break;
 800493a:	e002      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800493c:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x98>)
 800493e:	613b      	str	r3, [r7, #16]
      break;
 8004940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004942:	693b      	ldr	r3, [r7, #16]
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000
 8004954:	007a1200 	.word	0x007a1200
 8004958:	0800ac58 	.word	0x0800ac58
 800495c:	0800ac68 	.word	0x0800ac68
 8004960:	003d0900 	.word	0x003d0900

08004964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004968:	4b02      	ldr	r3, [pc, #8]	@ (8004974 <HAL_RCC_GetHCLKFreq+0x10>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr
 8004974:	2000005c 	.word	0x2000005c

08004978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800497c:	f7ff fff2 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4903      	ldr	r1, [pc, #12]	@ (800499c <HAL_RCC_GetPCLK1Freq+0x24>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40021000 	.word	0x40021000
 800499c:	0800ac50 	.word	0x0800ac50

080049a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049a4:	f7ff ffde 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	0adb      	lsrs	r3, r3, #11
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4903      	ldr	r1, [pc, #12]	@ (80049c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b6:	5ccb      	ldrb	r3, [r1, r3]
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049bc:	4618      	mov	r0, r3
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000
 80049c4:	0800ac50 	.word	0x0800ac50

080049c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049d0:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <RCC_Delay+0x34>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004a00 <RCC_Delay+0x38>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	0a5b      	lsrs	r3, r3, #9
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049e4:	bf00      	nop
  }
  while (Delay --);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1e5a      	subs	r2, r3, #1
 80049ea:	60fa      	str	r2, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1f9      	bne.n	80049e4 <RCC_Delay+0x1c>
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	2000005c 	.word	0x2000005c
 8004a00:	10624dd3 	.word	0x10624dd3

08004a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e076      	b.n	8004b04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d108      	bne.n	8004a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a26:	d009      	beq.n	8004a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	61da      	str	r2, [r3, #28]
 8004a2e:	e005      	b.n	8004a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fe f95e 	bl	8002d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac0:	ea42 0103 	orr.w	r1, r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	0c1a      	lsrs	r2, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f002 0204 	and.w	r2, r2, #4
 8004ae2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004af2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08c      	sub	sp, #48	@ 0x30
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_SPI_TransmitReceive+0x26>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e198      	b.n	8004e64 <HAL_SPI_TransmitReceive+0x358>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b3a:	f7fe fbc7 	bl	80032cc <HAL_GetTick>
 8004b3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d00f      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x70>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b62:	d107      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d103      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x68>
 8004b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d003      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b74:	2302      	movs	r3, #2
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004b7a:	e16d      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_SPI_TransmitReceive+0x82>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_SPI_TransmitReceive+0x82>
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004b94:	e160      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d003      	beq.n	8004baa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2205      	movs	r2, #5
 8004ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	887a      	ldrh	r2, [r7, #2]
 8004bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	887a      	ldrh	r2, [r7, #2]
 8004bc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	887a      	ldrh	r2, [r7, #2]
 8004bd2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bea:	2b40      	cmp	r3, #64	@ 0x40
 8004bec:	d007      	beq.n	8004bfe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c06:	d17c      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <HAL_SPI_TransmitReceive+0x10a>
 8004c10:	8b7b      	ldrh	r3, [r7, #26]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d16a      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	881a      	ldrh	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c26:	1c9a      	adds	r2, r3, #2
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c3a:	e057      	b.n	8004cec <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d11b      	bne.n	8004c82 <HAL_SPI_TransmitReceive+0x176>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d016      	beq.n	8004c82 <HAL_SPI_TransmitReceive+0x176>
 8004c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d113      	bne.n	8004c82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	881a      	ldrh	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6a:	1c9a      	adds	r2, r3, #2
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d119      	bne.n	8004cc4 <HAL_SPI_TransmitReceive+0x1b8>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d014      	beq.n	8004cc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca4:	b292      	uxth	r2, r2
 8004ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cac:	1c9a      	adds	r2, r3, #2
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cc4:	f7fe fb02 	bl	80032cc <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d80b      	bhi.n	8004cec <HAL_SPI_TransmitReceive+0x1e0>
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d007      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004cea:	e0b5      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1a2      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x130>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d19d      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x130>
 8004d00:	e080      	b.n	8004e04 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_SPI_TransmitReceive+0x204>
 8004d0a:	8b7b      	ldrh	r3, [r7, #26]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d16f      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	7812      	ldrb	r2, [r2, #0]
 8004d1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d36:	e05b      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d11c      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x274>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d017      	beq.n	8004d80 <HAL_SPI_TransmitReceive+0x274>
 8004d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d114      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	7812      	ldrb	r2, [r2, #0]
 8004d62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d119      	bne.n	8004dc2 <HAL_SPI_TransmitReceive+0x2b6>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d014      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004dc2:	f7fe fa83 	bl	80032cc <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d803      	bhi.n	8004dda <HAL_SPI_TransmitReceive+0x2ce>
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d102      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x2d4>
 8004dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d107      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004dee:	e033      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d19e      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x22c>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d199      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f8b7 	bl	8004f7c <SPI_EndRxTxTransaction>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d006      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004e20:	e01a      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e4e:	e003      	b.n	8004e58 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004e60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3730      	adds	r7, #48	@ 0x30
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e7c:	f7fe fa26 	bl	80032cc <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4413      	add	r3, r2
 8004e8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e8c:	f7fe fa1e 	bl	80032cc <HAL_GetTick>
 8004e90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e92:	4b39      	ldr	r3, [pc, #228]	@ (8004f78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	015b      	lsls	r3, r3, #5
 8004e98:	0d1b      	lsrs	r3, r3, #20
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea2:	e054      	b.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d050      	beq.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eac:	f7fe fa0e 	bl	80032cc <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d902      	bls.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d13d      	bne.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ed0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eda:	d111      	bne.n	8004f00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee4:	d004      	beq.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eee:	d107      	bne.n	8004f00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f08:	d10f      	bne.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e017      	b.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4013      	ands	r3, r2
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d19b      	bne.n	8004ea4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	2000005c 	.word	0x2000005c

08004f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2180      	movs	r1, #128	@ 0x80
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f7ff ff6a 	bl	8004e6c <SPI_WaitFlagStateUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa2:	f043 0220 	orr.w	r2, r3, #32
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e000      	b.n	8004fb0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e041      	b.n	800504e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fe f85a 	bl	8003098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 fa7c 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	d001      	beq.n	8005070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e03a      	b.n	80050e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <HAL_TIM_Base_Start_IT+0x98>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x58>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509a:	d009      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x58>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a14      	ldr	r2, [pc, #80]	@ (80050f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x58>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a13      	ldr	r2, [pc, #76]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d111      	bne.n	80050d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b06      	cmp	r3, #6
 80050c0:	d010      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d2:	e007      	b.n	80050e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40000400 	.word	0x40000400
 80050f8:	40000800 	.word	0x40000800

080050fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b02      	cmp	r3, #2
 8005110:	d122      	bne.n	8005158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b02      	cmp	r3, #2
 800511e:	d11b      	bne.n	8005158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0202 	mvn.w	r2, #2
 8005128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f9bd 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f9b0 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f9bf 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b04      	cmp	r3, #4
 8005164:	d122      	bne.n	80051ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b04      	cmp	r3, #4
 8005172:	d11b      	bne.n	80051ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0204 	mvn.w	r2, #4
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f993 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f986 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f995 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d122      	bne.n	8005200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d11b      	bne.n	8005200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0208 	mvn.w	r2, #8
 80051d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2204      	movs	r2, #4
 80051d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f969 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 80051ec:	e005      	b.n	80051fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f95c 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f96b 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b10      	cmp	r3, #16
 800520c:	d122      	bne.n	8005254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b10      	cmp	r3, #16
 800521a:	d11b      	bne.n	8005254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0210 	mvn.w	r2, #16
 8005224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2208      	movs	r2, #8
 800522a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f93f 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8005240:	e005      	b.n	800524e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f932 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f941 	bl	80054d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0201 	mvn.w	r2, #1
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f90d 	bl	800549a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528a:	2b80      	cmp	r3, #128	@ 0x80
 800528c:	d10e      	bne.n	80052ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005298:	2b80      	cmp	r3, #128	@ 0x80
 800529a:	d107      	bne.n	80052ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa83 	bl	80057b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b6:	2b40      	cmp	r3, #64	@ 0x40
 80052b8:	d10e      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b40      	cmp	r3, #64	@ 0x40
 80052c6:	d107      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f905 	bl	80054e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d10e      	bne.n	8005304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d107      	bne.n	8005304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0220 	mvn.w	r2, #32
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fa4e 	bl	80057a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIM_ConfigClockSource+0x1c>
 8005324:	2302      	movs	r3, #2
 8005326:	e0b4      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x186>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800534e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005360:	d03e      	beq.n	80053e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005366:	f200 8087 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536e:	f000 8086 	beq.w	800547e <HAL_TIM_ConfigClockSource+0x172>
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005376:	d87f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b70      	cmp	r3, #112	@ 0x70
 800537a:	d01a      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0xa6>
 800537c:	2b70      	cmp	r3, #112	@ 0x70
 800537e:	d87b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b60      	cmp	r3, #96	@ 0x60
 8005382:	d050      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x11a>
 8005384:	2b60      	cmp	r3, #96	@ 0x60
 8005386:	d877      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b50      	cmp	r3, #80	@ 0x50
 800538a:	d03c      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0xfa>
 800538c:	2b50      	cmp	r3, #80	@ 0x50
 800538e:	d873      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b40      	cmp	r3, #64	@ 0x40
 8005392:	d058      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x13a>
 8005394:	2b40      	cmp	r3, #64	@ 0x40
 8005396:	d86f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b30      	cmp	r3, #48	@ 0x30
 800539a:	d064      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 800539c:	2b30      	cmp	r3, #48	@ 0x30
 800539e:	d86b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d060      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d867      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d05c      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d05a      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 80053b0:	e062      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c2:	f000 f970 	bl	80056a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	609a      	str	r2, [r3, #8]
      break;
 80053de:	e04f      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053f0:	f000 f959 	bl	80056a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005402:	609a      	str	r2, [r3, #8]
      break;
 8005404:	e03c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005412:	461a      	mov	r2, r3
 8005414:	f000 f8d0 	bl	80055b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2150      	movs	r1, #80	@ 0x50
 800541e:	4618      	mov	r0, r3
 8005420:	f000 f927 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8005424:	e02c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005432:	461a      	mov	r2, r3
 8005434:	f000 f8ee 	bl	8005614 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2160      	movs	r1, #96	@ 0x60
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f917 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8005444:	e01c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	461a      	mov	r2, r3
 8005454:	f000 f8b0 	bl	80055b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2140      	movs	r1, #64	@ 0x40
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f907 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8005464:	e00c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f000 f8fe 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8005476:	e003      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e000      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800547e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr

080054be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr

080054e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a29      	ldr	r2, [pc, #164]	@ (80055ac <TIM_Base_SetConfig+0xb8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_Base_SetConfig+0x30>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005512:	d007      	beq.n	8005524 <TIM_Base_SetConfig+0x30>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a26      	ldr	r2, [pc, #152]	@ (80055b0 <TIM_Base_SetConfig+0xbc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_Base_SetConfig+0x30>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a25      	ldr	r2, [pc, #148]	@ (80055b4 <TIM_Base_SetConfig+0xc0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d108      	bne.n	8005536 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1c      	ldr	r2, [pc, #112]	@ (80055ac <TIM_Base_SetConfig+0xb8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00b      	beq.n	8005556 <TIM_Base_SetConfig+0x62>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005544:	d007      	beq.n	8005556 <TIM_Base_SetConfig+0x62>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <TIM_Base_SetConfig+0xbc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <TIM_Base_SetConfig+0x62>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a18      	ldr	r2, [pc, #96]	@ (80055b4 <TIM_Base_SetConfig+0xc0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d108      	bne.n	8005568 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a07      	ldr	r2, [pc, #28]	@ (80055ac <TIM_Base_SetConfig+0xb8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d103      	bne.n	800559c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	615a      	str	r2, [r3, #20]
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800

080055b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f023 0201 	bic.w	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 030a 	bic.w	r3, r3, #10
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr

08005614 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f023 0210 	bic.w	r2, r3, #16
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800563e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	031b      	lsls	r3, r3, #12
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005650:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	621a      	str	r2, [r3, #32]
}
 8005668:	bf00      	nop
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr

08005672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	f043 0307 	orr.w	r3, r3, #7
 8005694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	609a      	str	r2, [r3, #8]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b087      	sub	sp, #28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	021a      	lsls	r2, r3, #8
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	431a      	orrs	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	609a      	str	r2, [r3, #8]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e046      	b.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a16      	ldr	r2, [pc, #88]	@ (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005748:	d009      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a12      	ldr	r2, [pc, #72]	@ (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a10      	ldr	r2, [pc, #64]	@ (800579c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d10c      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4313      	orrs	r3, r2
 800576e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800

080057a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e042      	b.n	800585c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fd fca4 	bl	8003138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2224      	movs	r2, #36	@ 0x24
 80057f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f91d 	bl	8005a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800581c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800582c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800583c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	@ 0x28
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	4613      	mov	r3, r2
 8005872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b20      	cmp	r3, #32
 8005882:	d16d      	bne.n	8005960 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_UART_Transmit+0x2c>
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e066      	b.n	8005962 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2221      	movs	r2, #33	@ 0x21
 800589e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a2:	f7fd fd13 	bl	80032cc <HAL_GetTick>
 80058a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	88fa      	ldrh	r2, [r7, #6]
 80058b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058bc:	d108      	bne.n	80058d0 <HAL_UART_Transmit+0x6c>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	e003      	b.n	80058d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058d8:	e02a      	b.n	8005930 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	2180      	movs	r1, #128	@ 0x80
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f840 	bl	800596a <UART_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e036      	b.n	8005962 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	3302      	adds	r3, #2
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e007      	b.n	8005922 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1cf      	bne.n	80058da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	2140      	movs	r1, #64	@ 0x40
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f810 	bl	800596a <UART_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e006      	b.n	8005962 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b090      	sub	sp, #64	@ 0x40
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	603b      	str	r3, [r7, #0]
 8005976:	4613      	mov	r3, r2
 8005978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597a:	e050      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d04c      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <UART_WaitOnFlagUntilTimeout+0x30>
 800598a:	f7fd fc9f 	bl	80032cc <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005996:	429a      	cmp	r2, r3
 8005998:	d241      	bcs.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80059b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	330c      	adds	r3, #12
 80059b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059ba:	637a      	str	r2, [r7, #52]	@ 0x34
 80059bc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80059c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e5      	bne.n	800599a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	613b      	str	r3, [r7, #16]
   return(result);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3314      	adds	r3, #20
 80059ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059ee:	623a      	str	r2, [r7, #32]
 80059f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	69f9      	ldr	r1, [r7, #28]
 80059f4:	6a3a      	ldr	r2, [r7, #32]
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e5      	bne.n	80059ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e00f      	b.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	bf0c      	ite	eq
 8005a2e:	2301      	moveq	r3, #1
 8005a30:	2300      	movne	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d09f      	beq.n	800597c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3740      	adds	r7, #64	@ 0x40
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005a82:	f023 030c 	bic.w	r3, r3, #12
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8005b5c <UART_SetConfig+0x114>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d103      	bne.n	8005ab8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ab0:	f7fe ff76 	bl	80049a0 <HAL_RCC_GetPCLK2Freq>
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	e002      	b.n	8005abe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ab8:	f7fe ff5e 	bl	8004978 <HAL_RCC_GetPCLK1Freq>
 8005abc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009a      	lsls	r2, r3, #2
 8005ac8:	441a      	add	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	4a22      	ldr	r2, [pc, #136]	@ (8005b60 <UART_SetConfig+0x118>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	0119      	lsls	r1, r3, #4
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009a      	lsls	r2, r3, #2
 8005ae8:	441a      	add	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005af4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b60 <UART_SetConfig+0x118>)
 8005af6:	fba3 0302 	umull	r0, r3, r3, r2
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	2064      	movs	r0, #100	@ 0x64
 8005afe:	fb00 f303 	mul.w	r3, r0, r3
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	3332      	adds	r3, #50	@ 0x32
 8005b08:	4a15      	ldr	r2, [pc, #84]	@ (8005b60 <UART_SetConfig+0x118>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b14:	4419      	add	r1, r3
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009a      	lsls	r2, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <UART_SetConfig+0x118>)
 8005b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2064      	movs	r0, #100	@ 0x64
 8005b36:	fb00 f303 	mul.w	r3, r0, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	3332      	adds	r3, #50	@ 0x32
 8005b40:	4a07      	ldr	r2, [pc, #28]	@ (8005b60 <UART_SetConfig+0x118>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	f003 020f 	and.w	r2, r3, #15
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	440a      	add	r2, r1
 8005b52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40013800 	.word	0x40013800
 8005b60:	51eb851f 	.word	0x51eb851f

08005b64 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>:
//value++;                                            // увеличивать/уменьшать переменную value с шагом и интервалом
//Serial.println(value);                              // для примера выведем в порт
//}

// ==================== CONSTRUCTOR ====================
GButton::GButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool type, bool dir) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	4611      	mov	r1, r2
 8005b70:	461a      	mov	r2, r3
 8005b72:	460b      	mov	r3, r1
 8005b74:	80fb      	strh	r3, [r7, #6]
 8005b76:	4613      	mov	r3, r2
 8005b78:	717b      	strb	r3, [r7, #5]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	721a      	strb	r2, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	220a      	movs	r2, #10
 8005b84:	815a      	strh	r2, [r3, #10]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005b8c:	819a      	strh	r2, [r3, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005b94:	81da      	strh	r2, [r3, #14]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005b9c:	821a      	strh	r2, [r3, #16]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	749a      	strb	r2, [r3, #18]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	74da      	strb	r2, [r3, #19]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	751a      	strb	r2, [r3, #20]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	619a      	str	r2, [r3, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	775a      	strb	r2, [r3, #29]

	flags.GPIOx = GPIOx;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	f8c3 2002 	str.w	r2, [r3, #2]
	flags.GPIO_Pin = GPIO_Pin;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	88fa      	ldrh	r2, [r7, #6]
 8005bce:	80da      	strh	r2, [r3, #6]

	setType(type);
 8005bd0:	797b      	ldrb	r3, [r7, #5]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f815 	bl	8005c04 <_ZN7GButton7setTypeEb>
	flags.mode = false;
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	7853      	ldrb	r3, [r2, #1]
 8005bde:	f36f 0382 	bfc	r3, #2, #1
 8005be2:	7053      	strb	r3, [r2, #1]
	flags.tickMode = false;
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	7853      	ldrb	r3, [r2, #1]
 8005be8:	f36f 1304 	bfc	r3, #4, #1
 8005bec:	7053      	strb	r3, [r2, #1]
	flags.inv_state = dir;
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	7853      	ldrb	r3, [r2, #1]
 8005bf2:	7e39      	ldrb	r1, [r7, #24]
 8005bf4:	f361 0341 	bfi	r3, r1, #1, #1
 8005bf8:	7053      	strb	r3, [r2, #1]
}
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <_ZN7GButton7setTypeEb>:
	_click_timeout = new_timeout;
}
void GButton::setStepTimeout(uint16_t step_timeout) {
	_step_timeout = step_timeout;
}
void GButton::setType(bool type) {
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
	flags.type = type;
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	7853      	ldrb	r3, [r2, #1]
 8005c14:	78f9      	ldrb	r1, [r7, #3]
 8005c16:	f361 03c3 	bfi	r3, r1, #3, #1
 8005c1a:	7053      	strb	r3, [r2, #1]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr

08005c26 <_ZN7GButton7isPressEv>:
void GButton::setTickMode(bool tickMode) {
	flags.tickMode = tickMode;
}

// ==================== IS ====================
bool GButton::isPress() {
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
	if (flags.tickMode)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <_ZN7GButton7isPressEv+0x1c>
		GButton::tick();
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f813 	bl	8005c68 <_ZN7GButton4tickEv>
	if (flags.isPress_f) {
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d006      	beq.n	8005c5e <_ZN7GButton7isPressEv+0x38>
		flags.isPress_f = false;
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	7813      	ldrb	r3, [r2, #0]
 8005c54:	f36f 1345 	bfc	r3, #5, #1
 8005c58:	7013      	strb	r3, [r2, #0]
		return true;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <_ZN7GButton7isPressEv+0x3a>
	} else
		return false;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <_ZN7GButton4tickEv>:
	btn_state = state ^ flags.inv_state;
	GButton::tick();
	flags.mode = false;
}

void GButton::tick() {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	// читаем пин
	//if (!flags.mode && !flags.noPin) btn_state = !_buttonRead() ^ (flags.inv_state ^ flags.type);

	if (!flags.mode)	// && !flags.noPin)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	f083 0301 	eor.w	r3, r3, #1
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d022      	beq.n	8005cca <_ZN7GButton4tickEv+0x62>
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	88db      	ldrh	r3, [r3, #6]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f7fd fddb 	bl	800384c <HAL_GPIO_ReadPin>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	4619      	mov	r1, r3
				^ (flags.inv_state ^ flags.type);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	4053      	eors	r3, r2
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	4299      	cmp	r1, r3
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2da      	uxtb	r2, r3
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	771a      	strb	r2, [r3, #28]

	uint32_t thisMls = uwTick;
 8005cca:	4b7c      	ldr	r3, [pc, #496]	@ (8005ebc <_ZN7GButton4tickEv+0x254>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60fb      	str	r3, [r7, #12]
	//uint32_t thisMls = millis();

	// нажатие
	if (btn_state && !btn_flag) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	7f1b      	ldrb	r3, [r3, #28]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d02f      	beq.n	8005d38 <_ZN7GButton4tickEv+0xd0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	7f5b      	ldrb	r3, [r3, #29]
 8005cdc:	f083 0301 	eor.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d028      	beq.n	8005d38 <_ZN7GButton4tickEv+0xd0>
		if (!flags.btn_deb) {
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f083 0301 	eor.w	r3, r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d008      	beq.n	8005d0c <_ZN7GButton4tickEv+0xa4>
			flags.btn_deb = true;
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	7813      	ldrb	r3, [r2, #0]
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	7013      	strb	r3, [r2, #0]
			btn_timer = thisMls;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	619a      	str	r2, [r3, #24]
		if (!flags.btn_deb) {
 8005d0a:	e01b      	b.n	8005d44 <_ZN7GButton4tickEv+0xdc>
		} else {
			if (thisMls - btn_timer >= _debounce) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	8952      	ldrh	r2, [r2, #10]
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d313      	bcc.n	8005d44 <_ZN7GButton4tickEv+0xdc>
				btn_flag = true;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	775a      	strb	r2, [r3, #29]
				flags.isPress_f = true;
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	7813      	ldrb	r3, [r2, #0]
 8005d26:	f043 0320 	orr.w	r3, r3, #32
 8005d2a:	7013      	strb	r3, [r2, #0]
				flags.oneClick_f = true;
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	7813      	ldrb	r3, [r2, #0]
 8005d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d34:	7013      	strb	r3, [r2, #0]
		if (!flags.btn_deb) {
 8005d36:	e005      	b.n	8005d44 <_ZN7GButton4tickEv+0xdc>
			}
		}
	} else {
		flags.btn_deb = false;
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	7813      	ldrb	r3, [r2, #0]
 8005d3c:	f36f 0300 	bfc	r3, #0, #1
 8005d40:	7013      	strb	r3, [r2, #0]
 8005d42:	e000      	b.n	8005d46 <_ZN7GButton4tickEv+0xde>
		if (!flags.btn_deb) {
 8005d44:	bf00      	nop
	}

	// отпускание
	if (!btn_state && btn_flag) {
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	7f1b      	ldrb	r3, [r3, #28]
 8005d4a:	f083 0301 	eor.w	r3, r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d046      	beq.n	8005de2 <_ZN7GButton4tickEv+0x17a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	7f5b      	ldrb	r3, [r3, #29]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d042      	beq.n	8005de2 <_ZN7GButton4tickEv+0x17a>
		btn_flag = false;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	775a      	strb	r2, [r3, #29]
		if (!flags.hold_flag)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f083 0301 	eor.w	r3, r3, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <_ZN7GButton4tickEv+0x11a>
			btn_counter++;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	7c9b      	ldrb	r3, [r3, #18]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	749a      	strb	r2, [r3, #18]
		flags.hold_flag = false;
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	7813      	ldrb	r3, [r2, #0]
 8005d86:	f36f 0341 	bfc	r3, #1, #1
 8005d8a:	7013      	strb	r3, [r2, #0]
		flags.isRelease_f = true;
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	7813      	ldrb	r3, [r2, #0]
 8005d90:	f043 0310 	orr.w	r3, r3, #16
 8005d94:	7013      	strb	r3, [r2, #0]
		btn_timer = thisMls;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	619a      	str	r2, [r3, #24]
		if (flags.step_flag) {
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <_ZN7GButton4tickEv+0x158>
			last_counter = 0;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	74da      	strb	r2, [r3, #19]
			btn_counter = 0;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	749a      	strb	r2, [r3, #18]
			flags.step_flag = false;
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	7813      	ldrb	r3, [r2, #0]
 8005dba:	f36f 1386 	bfc	r3, #6, #1
 8005dbe:	7013      	strb	r3, [r2, #0]
		}
		if (flags.oneClick_f) {
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <_ZN7GButton4tickEv+0x17a>
			flags.oneClick_f = false;
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	7813      	ldrb	r3, [r2, #0]
 8005dd2:	f36f 13c7 	bfc	r3, #7, #1
 8005dd6:	7013      	strb	r3, [r2, #0]
			flags.isOne_f = true;
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	7853      	ldrb	r3, [r2, #1]
 8005ddc:	f043 0301 	orr.w	r3, r3, #1
 8005de0:	7053      	strb	r3, [r2, #1]
		}
	}

	// кнопка удерживается
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7f5b      	ldrb	r3, [r3, #29]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d030      	beq.n	8005e4c <_ZN7GButton4tickEv+0x1e4>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7f1b      	ldrb	r3, [r3, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02c      	beq.n	8005e4c <_ZN7GButton4tickEv+0x1e4>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	8992      	ldrh	r2, [r2, #12]
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d324      	bcc.n	8005e4c <_ZN7GButton4tickEv+0x1e4>
			&& !flags.hold_flag) {
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	f083 0301 	eor.w	r3, r3, #1
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01a      	beq.n	8005e4c <_ZN7GButton4tickEv+0x1e4>
		flags.hold_flag = true;
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	7813      	ldrb	r3, [r2, #0]
 8005e1a:	f043 0302 	orr.w	r3, r3, #2
 8005e1e:	7013      	strb	r3, [r2, #0]
		last_hold_counter = btn_counter;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	7c9a      	ldrb	r2, [r3, #18]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	751a      	strb	r2, [r3, #20]
		//btn_counter = 0;
		//last_counter = 0;
		flags.isHolded_f = true;
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	7813      	ldrb	r3, [r2, #0]
 8005e2c:	f043 0308 	orr.w	r3, r3, #8
 8005e30:	7013      	strb	r3, [r2, #0]
		flags.step_flag = true;
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	7813      	ldrb	r3, [r2, #0]
 8005e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e3a:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = false;
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	7813      	ldrb	r3, [r2, #0]
 8005e40:	f36f 13c7 	bfc	r3, #7, #1
 8005e44:	7013      	strb	r3, [r2, #0]
		btn_timer = thisMls;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	619a      	str	r2, [r3, #24]
	}

	// обработка накликивания
	if ((thisMls - btn_timer >= _click_timeout) && (btn_counter != 0)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	89d2      	ldrh	r2, [r2, #14]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d316      	bcc.n	8005e8a <_ZN7GButton4tickEv+0x222>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	7c9b      	ldrb	r3, [r3, #18]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d012      	beq.n	8005e8a <_ZN7GButton4tickEv+0x222>
			&& !btn_state) {    //И здесь еще добавлен !btn_state
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	7f1b      	ldrb	r3, [r3, #28]
 8005e68:	f083 0301 	eor.w	r3, r3, #1
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <_ZN7GButton4tickEv+0x222>
		last_counter = btn_counter;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7c9a      	ldrb	r2, [r3, #18]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	74da      	strb	r2, [r3, #19]
		btn_counter = 0;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	749a      	strb	r2, [r3, #18]
		flags.counter_flag = true;
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	7813      	ldrb	r3, [r2, #0]
 8005e84:	f043 0304 	orr.w	r3, r3, #4
 8005e88:	7013      	strb	r3, [r2, #0]
	}

	// сброс накликивания						//Добавлено
	if (flags.counter_reset) {
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00c      	beq.n	8005eb2 <_ZN7GButton4tickEv+0x24a>
		last_counter = 0;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	74da      	strb	r2, [r3, #19]
		flags.counter_flag = false;
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	7813      	ldrb	r3, [r2, #0]
 8005ea2:	f36f 0382 	bfc	r3, #2, #1
 8005ea6:	7013      	strb	r3, [r2, #0]
		flags.counter_reset = false;
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	7853      	ldrb	r3, [r2, #1]
 8005eac:	f36f 1386 	bfc	r3, #6, #1
 8005eb0:	7053      	strb	r3, [r2, #1]
	}
}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	2000098c 	.word	0x2000098c

08005ec0 <_Z8DWT_Initv>:
static volatile uint32_t * temp;

uint32_t us_count_tic;

void DWT_Init(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
    SCB_DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8005ec4:	4b07      	ldr	r3, [pc, #28]	@ (8005ee4 <_Z8DWT_Initv+0x24>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a06      	ldr	r2, [pc, #24]	@ (8005ee4 <_Z8DWT_Initv+0x24>)
 8005eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ece:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;     // запускаем счётчик
 8005ed0:	4b05      	ldr	r3, [pc, #20]	@ (8005ee8 <_Z8DWT_Initv+0x28>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a04      	ldr	r2, [pc, #16]	@ (8005ee8 <_Z8DWT_Initv+0x28>)
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	6013      	str	r3, [r2, #0]
}
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr
 8005ee4:	e000edfc 	.word	0xe000edfc
 8005ee8:	e0001000 	.word	0xe0001000

08005eec <_ZN8classLog5printEPKc>:
	void print(char const *format) {
 8005eec:	b590      	push	{r4, r7, lr}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
			HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
 8005efc:	6838      	ldr	r0, [r7, #0]
 8005efe:	f7fa f927 	bl	8000150 <strlen>
 8005f02:	4603      	mov	r3, r0
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f7ff fca9 	bl	8005864 <HAL_UART_Transmit>
	}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd90      	pop	{r4, r7, pc}
	...

08005f1c <_ZN8classLog5colorEi>:
	char s[16];
	sprintf(s, "\33[08m");
	print(s);
}
void classLog::color(int color)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
	char s[16];
	sprintf(s, "\33[38;05;%dm",color);
 8005f26:	f107 0308 	add.w	r3, r7, #8
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	4906      	ldr	r1, [pc, #24]	@ (8005f48 <_ZN8classLog5colorEi+0x2c>)
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 fa46 	bl	80073c0 <siprintf>
	print(s);
 8005f34:	f107 0308 	add.w	r3, r7, #8
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff ffd6 	bl	8005eec <_ZN8classLog5printEPKc>
}
 8005f40:	bf00      	nop
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	080096d8 	.word	0x080096d8

08005f4c <_ZN8classLog13colorStringlnEiPKc>:
	print(s);
	print(format);
	print("\33[0m");
}
void classLog::colorStringln(int c, char const *const format)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
	color(c);
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7ff ffde 	bl	8005f1c <_ZN8classLog5colorEi>
	print(format);
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff ffc2 	bl	8005eec <_ZN8classLog5printEPKc>
	print("\33[0m\n");
 8005f68:	4903      	ldr	r1, [pc, #12]	@ (8005f78 <_ZN8classLog13colorStringlnEiPKc+0x2c>)
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff ffbe 	bl	8005eec <_ZN8classLog5printEPKc>
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	08009710 	.word	0x08009710

08005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>:
//* Write command */
//#define SSD1306_WRITECOMMAND(command)      ssd1306_I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0x00, (command))
///* Write data */
//#define SSD1306_WRITEDATA(data)            ssd1306_I2C_Write(SSD1306_I2C, SSD1306_I2C_ADDR, 0x40, (data))

void TFT_Driver::SSD1306_WRITECOMMAND(uint8_t data) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
	if (LCD->hi2c)  //I2C
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d012      	beq.n	8005fb8 <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh+0x3c>
	{
		uint8_t dt[2];
		dt[0] = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	733b      	strb	r3, [r7, #12]
		dt[1] = data;
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6918      	ldr	r0, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	7d1b      	ldrb	r3, [r3, #20]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	f107 020c 	add.w	r2, r7, #12
 8005fac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	f7fd fdbe 	bl	8003b34 <HAL_I2C_Master_Transmit>
#if defined(TFT_USE_SPI)
		SPI.SendCmd(data);
#endif
	}

}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <_ZN10TFT_Driver12SSD1306_InitEv>:
	}

}

//Инициализация первого экрана
void TFT_Driver::SSD1306_Init(void) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	if (LCD->GPIO_CS != NULL)	
		CS_0;
#endif

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8005fc8:	21ae      	movs	r1, #174	@ 0xae
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff ffd6 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8005fd0:	2120      	movs	r1, #32
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff ffd2 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8005fd8:	2110      	movs	r1, #16
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff ffce 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005fe0:	21b0      	movs	r1, #176	@ 0xb0
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff ffca 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8005fe8:	21c8      	movs	r1, #200	@ 0xc8
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff ffc6 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff ffc2 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8005ff8:	2110      	movs	r1, #16
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ffbe 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006000:	2140      	movs	r1, #64	@ 0x40
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff ffba 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006008:	2181      	movs	r1, #129	@ 0x81
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff ffb6 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xFF);
 8006010:	21ff      	movs	r1, #255	@ 0xff
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ffb2 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006018:	21a1      	movs	r1, #161	@ 0xa1
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff ffae 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006020:	21a6      	movs	r1, #166	@ 0xa6
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff ffaa 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8006028:	21a8      	movs	r1, #168	@ 0xa8
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ffa6 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	if (LCD->TFT_HEIGHT == 64)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b40      	cmp	r3, #64	@ 0x40
 8006038:	d104      	bne.n	8006044 <_ZN10TFT_Driver12SSD1306_InitEv+0x84>
		SSD1306_WRITECOMMAND(0x3F); //64
 800603a:	213f      	movs	r1, #63	@ 0x3f
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff ff9d 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
 8006042:	e003      	b.n	800604c <_ZN10TFT_Driver12SSD1306_InitEv+0x8c>
	else
		SSD1306_WRITECOMMAND(0x1F); //32
 8006044:	211f      	movs	r1, #31
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ff98 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800604c:	21a4      	movs	r1, #164	@ 0xa4
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ff94 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8006054:	21d3      	movs	r1, #211	@ 0xd3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ff90 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800605c:	2100      	movs	r1, #0
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ff8c 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8006064:	21d5      	movs	r1, #213	@ 0xd5
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff ff88 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800606c:	21f0      	movs	r1, #240	@ 0xf0
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff ff84 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8006074:	21d9      	movs	r1, #217	@ 0xd9
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff ff80 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x22); //
 800607c:	2122      	movs	r1, #34	@ 0x22
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff ff7c 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8006084:	21da      	movs	r1, #218	@ 0xda
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff ff78 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	if (LCD->TFT_HEIGHT == 64)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b40      	cmp	r3, #64	@ 0x40
 8006094:	d104      	bne.n	80060a0 <_ZN10TFT_Driver12SSD1306_InitEv+0xe0>
		SSD1306_WRITECOMMAND(0x12); //64
 8006096:	2112      	movs	r1, #18
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ff6f 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
 800609e:	e003      	b.n	80060a8 <_ZN10TFT_Driver12SSD1306_InitEv+0xe8>
	else
		SSD1306_WRITECOMMAND(0x02); //32
 80060a0:	2102      	movs	r1, #2
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff ff6a 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80060a8:	21db      	movs	r1, #219	@ 0xdb
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff ff66 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80060b0:	2120      	movs	r1, #32
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff ff62 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80060b8:	218d      	movs	r1, #141	@ 0x8d
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff ff5e 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0x14); //
 80060c0:	2114      	movs	r1, #20
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff ff5a 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80060c8:	21af      	movs	r1, #175	@ 0xaf
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff ff56 	bl	8005f7c <_ZN10TFT_Driver20SSD1306_WRITECOMMANDEh>
		CS_1;
    #endif
	/* Set default values */
	//uTFT.CurrentX = 0;
	//uTFT.CurrentY = 0;
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>:

volatile HAL_StatusTypeDef res;

//490uS-72MHz
void TFT_Driver::SSD1306_UpdateScreen(void) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af02      	add	r7, sp, #8
 80060de:	6078      	str	r0, [r7, #4]
	uint8_t *p;

	if (LCD->hi2c)  //I2C
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d02a      	beq.n	8006140 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x68>
			osDelay(2);
		#else
		//HAL_Delay(10);
#endif

		p = &LCD->buffer8[0];
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	60fb      	str	r3, [r7, #12]
		p--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]
		*p = 0x40;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2240      	movs	r2, #64	@ 0x40
 80060fc:	701a      	strb	r2, [r3, #0]

		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6918      	ldr	r0, [r3, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	7d1b      	ldrb	r3, [r3, #20]
 800610a:	4619      	mov	r1, r3
				(LCD->TFT_HEIGHT * LCD->TFT_WIDTH) / 8 + 1, 1000);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6812      	ldr	r2, [r2, #0]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	fb02 f303 	mul.w	r3, r2, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	da00      	bge.n	8006122 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x4a>
 8006120:	3307      	adds	r3, #7
 8006122:	10db      	asrs	r3, r3, #3
		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8006124:	b29b      	uxth	r3, r3
 8006126:	3301      	adds	r3, #1
 8006128:	b29b      	uxth	r3, r3
 800612a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800612e:	9200      	str	r2, [sp, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	f7fd fcff 	bl	8003b34 <HAL_I2C_Master_Transmit>
 8006136:	4603      	mov	r3, r0
 8006138:	461a      	mov	r2, r3
 800613a:	4b03      	ldr	r3, [pc, #12]	@ (8006148 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x70>)
 800613c:	701a      	strb	r2, [r3, #0]


		return;
 800613e:	bf00      	nop

#endif

	}

}
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20000994 	.word	0x20000994

0800614c <_ZN3TFT8SetPixelEllt>:
#include "TFT_config.h"

#include <math.h>
#include <stdio.h>

void TFT::SetPixel(int32_t x, int32_t y, uint16_t color) {
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	807b      	strh	r3, [r7, #2]

	if ((x < 0) || (y < 0) || (x >= LCD->TFT_WIDTH) || (y >= LCD->TFT_HEIGHT))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	db6a      	blt.n	8006236 <_ZN3TFT8SetPixelEllt+0xea>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	db67      	blt.n	8006236 <_ZN3TFT8SetPixelEllt+0xea>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	da61      	bge.n	8006236 <_ZN3TFT8SetPixelEllt+0xea>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	429a      	cmp	r2, r3
 800617c:	da5b      	bge.n	8006236 <_ZN3TFT8SetPixelEllt+0xea>
		return;

#if defined(TFT_USE_1BIT)
#if !defined (TFT_USE_ONLY_ONE_BIT_COLOR)
  if (LCD->Bit == 1)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	7a5b      	ldrb	r3, [r3, #9]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d157      	bne.n	8006238 <_ZN3TFT8SetPixelEllt+0xec>
#endif
	{
		if (color != 0)
 8006188:	887b      	ldrh	r3, [r7, #2]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d028      	beq.n	80061e0 <_ZN3TFT8SetPixelEllt+0x94>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] |= 1 << (y % 8);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	da00      	bge.n	800619c <_ZN3TFT8SetPixelEllt+0x50>
 800619a:	3307      	adds	r3, #7
 800619c:	10db      	asrs	r3, r3, #3
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	6809      	ldr	r1, [r1, #0]
 80061a2:	6809      	ldr	r1, [r1, #0]
 80061a4:	fb01 f003 	mul.w	r0, r1, r3
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	4401      	add	r1, r0
 80061ac:	440a      	add	r2, r1
 80061ae:	7812      	ldrb	r2, [r2, #0]
 80061b0:	b251      	sxtb	r1, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	f002 0207 	and.w	r2, r2, #7
 80061b8:	2001      	movs	r0, #1
 80061ba:	fa00 f202 	lsl.w	r2, r0, r2
 80061be:	b252      	sxtb	r2, r2
 80061c0:	430a      	orrs	r2, r1
 80061c2:	b250      	sxtb	r0, r2
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	69d2      	ldr	r2, [r2, #28]
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	6809      	ldr	r1, [r1, #0]
 80061ce:	6809      	ldr	r1, [r1, #0]
 80061d0:	fb03 f101 	mul.w	r1, r3, r1
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	440b      	add	r3, r1
 80061d8:	4413      	add	r3, r2
 80061da:	b2c2      	uxtb	r2, r0
 80061dc:	701a      	strb	r2, [r3, #0]
		else
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] &= ~(1 << (y % 8));
		return;
 80061de:	e02b      	b.n	8006238 <_ZN3TFT8SetPixelEllt+0xec>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] &= ~(1 << (y % 8));
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69da      	ldr	r2, [r3, #28]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	da00      	bge.n	80061ee <_ZN3TFT8SetPixelEllt+0xa2>
 80061ec:	3307      	adds	r3, #7
 80061ee:	10db      	asrs	r3, r3, #3
 80061f0:	68f9      	ldr	r1, [r7, #12]
 80061f2:	6809      	ldr	r1, [r1, #0]
 80061f4:	6809      	ldr	r1, [r1, #0]
 80061f6:	fb01 f003 	mul.w	r0, r1, r3
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	4401      	add	r1, r0
 80061fe:	440a      	add	r2, r1
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	b251      	sxtb	r1, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	f002 0207 	and.w	r2, r2, #7
 800620a:	2001      	movs	r0, #1
 800620c:	fa00 f202 	lsl.w	r2, r0, r2
 8006210:	b252      	sxtb	r2, r2
 8006212:	43d2      	mvns	r2, r2
 8006214:	b252      	sxtb	r2, r2
 8006216:	400a      	ands	r2, r1
 8006218:	b250      	sxtb	r0, r2
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	6812      	ldr	r2, [r2, #0]
 800621e:	69d2      	ldr	r2, [r2, #28]
 8006220:	68f9      	ldr	r1, [r7, #12]
 8006222:	6809      	ldr	r1, [r1, #0]
 8006224:	6809      	ldr	r1, [r1, #0]
 8006226:	fb03 f101 	mul.w	r1, r3, r1
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	440b      	add	r3, r1
 800622e:	4413      	add	r3, r2
 8006230:	b2c2      	uxtb	r2, r0
 8006232:	701a      	strb	r2, [r3, #0]
		return;
 8006234:	e000      	b.n	8006238 <_ZN3TFT8SetPixelEllt+0xec>
		return;
 8006236:	bf00      	nop
		LCD->buffer16[x + y * LCD->TFT_WIDTH] = color;
		return;
	}
#endif

}
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <_ZN3TFT5Fill1Et>:

	}

}

void TFT::Fill1(uint16_t color) {
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	807b      	strh	r3, [r7, #2]

	uint8_t c;
	if (color)
 800624c:	887b      	ldrh	r3, [r7, #2]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <_ZN3TFT5Fill1Et+0x18>
		c = 0xFF;
 8006252:	23ff      	movs	r3, #255	@ 0xff
 8006254:	73fb      	strb	r3, [r7, #15]
 8006256:	e001      	b.n	800625c <_ZN3TFT5Fill1Et+0x1c>
	else
		c = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]

	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 800625c:	2300      	movs	r3, #0
 800625e:	60bb      	str	r3, [r7, #8]
 8006260:	e009      	b.n	8006276 <_ZN3TFT5Fill1Et+0x36>
		LCD->buffer8[i] = c;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4413      	add	r3, r2
 800626c:	7bfa      	ldrb	r2, [r7, #15]
 800626e:	701a      	strb	r2, [r3, #0]
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	3301      	adds	r3, #1
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	fb02 f303 	mul.w	r3, r2, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	da00      	bge.n	800628c <_ZN3TFT5Fill1Et+0x4c>
 800628a:	3307      	adds	r3, #7
 800628c:	10db      	asrs	r3, r3, #3
 800628e:	461a      	mov	r2, r3
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4293      	cmp	r3, r2
 8006294:	dbe5      	blt.n	8006262 <_ZN3TFT5Fill1Et+0x22>
	return;
 8006296:	bf00      	nop
}
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <_ZN3TFT5LineVElllt>:
			y0 += sy;
		}
	}
}

void TFT::LineV(int32_t X, int32_t Y1, int32_t Y2, uint16_t color) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]

	if ((LCD->Bit) == 1) {
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	7a5b      	ldrb	r3, [r3, #9]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d169      	bne.n	800638c <_ZN3TFT5LineVElllt+0xec>
		int32_t i;

		if (color == 1) {
 80062b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d132      	bne.n	8006324 <_ZN3TFT5LineVElllt+0x84>
			for (i = Y1; i <= Y2; i++)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e02a      	b.n	800631a <_ZN3TFT5LineVElllt+0x7a>
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] |= 1 << (i % 8);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69da      	ldr	r2, [r3, #28]
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	da00      	bge.n	80062d2 <_ZN3TFT5LineVElllt+0x32>
 80062d0:	3307      	adds	r3, #7
 80062d2:	10db      	asrs	r3, r3, #3
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	6809      	ldr	r1, [r1, #0]
 80062d8:	6809      	ldr	r1, [r1, #0]
 80062da:	fb01 f003 	mul.w	r0, r1, r3
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4401      	add	r1, r0
 80062e2:	440a      	add	r2, r1
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	b251      	sxtb	r1, r2
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	f002 0207 	and.w	r2, r2, #7
 80062ee:	2001      	movs	r0, #1
 80062f0:	fa00 f202 	lsl.w	r2, r0, r2
 80062f4:	b252      	sxtb	r2, r2
 80062f6:	430a      	orrs	r2, r1
 80062f8:	b250      	sxtb	r0, r2
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	6812      	ldr	r2, [r2, #0]
 80062fe:	69d2      	ldr	r2, [r2, #28]
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	6809      	ldr	r1, [r1, #0]
 8006304:	6809      	ldr	r1, [r1, #0]
 8006306:	fb03 f101 	mul.w	r1, r3, r1
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	440b      	add	r3, r1
 800630e:	4413      	add	r3, r2
 8006310:	b2c2      	uxtb	r2, r0
 8006312:	701a      	strb	r2, [r3, #0]
			for (i = Y1; i <= Y2; i++)
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	3301      	adds	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	429a      	cmp	r2, r3
 8006320:	ddd0      	ble.n	80062c4 <_ZN3TFT5LineVElllt+0x24>
 8006322:	e033      	b.n	800638c <_ZN3TFT5LineVElllt+0xec>
		} else {
			for (i = Y1; i <= Y2; i++)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	e02c      	b.n	8006384 <_ZN3TFT5LineVElllt+0xe4>
				LCD->buffer8[X + (i / 8) * LCD->TFT_WIDTH] &= ~(1 << (i % 8));
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69da      	ldr	r2, [r3, #28]
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	da00      	bge.n	8006338 <_ZN3TFT5LineVElllt+0x98>
 8006336:	3307      	adds	r3, #7
 8006338:	10db      	asrs	r3, r3, #3
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	6809      	ldr	r1, [r1, #0]
 800633e:	6809      	ldr	r1, [r1, #0]
 8006340:	fb01 f003 	mul.w	r0, r1, r3
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	4401      	add	r1, r0
 8006348:	440a      	add	r2, r1
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	b251      	sxtb	r1, r2
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	f002 0207 	and.w	r2, r2, #7
 8006354:	2001      	movs	r0, #1
 8006356:	fa00 f202 	lsl.w	r2, r0, r2
 800635a:	b252      	sxtb	r2, r2
 800635c:	43d2      	mvns	r2, r2
 800635e:	b252      	sxtb	r2, r2
 8006360:	400a      	ands	r2, r1
 8006362:	b250      	sxtb	r0, r2
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	69d2      	ldr	r2, [r2, #28]
 800636a:	68f9      	ldr	r1, [r7, #12]
 800636c:	6809      	ldr	r1, [r1, #0]
 800636e:	6809      	ldr	r1, [r1, #0]
 8006370:	fb03 f101 	mul.w	r1, r3, r1
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	440b      	add	r3, r1
 8006378:	4413      	add	r3, r2
 800637a:	b2c2      	uxtb	r2, r0
 800637c:	701a      	strb	r2, [r3, #0]
			for (i = Y1; i <= Y2; i++)
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	3301      	adds	r3, #1
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	ddce      	ble.n	800632a <_ZN3TFT5LineVElllt+0x8a>
		}
	}

	if ((LCD->Bit) == 4) {
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	7a5b      	ldrb	r3, [r3, #9]
 8006392:	2b04      	cmp	r3, #4
 8006394:	d10f      	bne.n	80063b6 <_ZN3TFT5LineVElllt+0x116>
		int32_t i;
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	e008      	b.n	80063ae <_ZN3TFT5LineVElllt+0x10e>
				{
			SetPixel(X, i, color);
 800639c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff fed2 	bl	800614c <_ZN3TFT8SetPixelEllt>
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	3301      	adds	r3, #1
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	ddf2      	ble.n	800639c <_ZN3TFT5LineVElllt+0xfc>
		}
	}

	if (LCD->Bit == 16) {
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	7a5b      	ldrb	r3, [r3, #9]
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d12a      	bne.n	8006416 <_ZN3TFT5LineVElllt+0x176>
		if (Y2 >= LCD->TFT_HEIGHT)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	db04      	blt.n	80063d6 <_ZN3TFT5LineVElllt+0x136>
			Y2 = LCD->TFT_HEIGHT - 1;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	603b      	str	r3, [r7, #0]
		if (X >= LCD->TFT_WIDTH)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	429a      	cmp	r2, r3
 80063e0:	da49      	bge.n	8006476 <_ZN3TFT5LineVElllt+0x1d6>
			return;

		int32_t i;
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	e011      	b.n	800640c <_ZN3TFT5LineVElllt+0x16c>
				{
			LCD->buffer16[X + i * LCD->TFT_WIDTH] = color;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6979      	ldr	r1, [r7, #20]
 80063f6:	fb03 f101 	mul.w	r1, r3, r1
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	440b      	add	r3, r1
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	4413      	add	r3, r2
 8006402:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006404:	801a      	strh	r2, [r3, #0]
		for (i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	3301      	adds	r3, #1
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	dde9      	ble.n	80063e8 <_ZN3TFT5LineVElllt+0x148>
		}
		return;
 8006414:	e032      	b.n	800647c <_ZN3TFT5LineVElllt+0x1dc>
	}

	if (LCD->Bit == 8) {
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	7a5b      	ldrb	r3, [r3, #9]
 800641c:	2b08      	cmp	r3, #8
 800641e:	d12d      	bne.n	800647c <_ZN3TFT5LineVElllt+0x1dc>

		if (Y2 >= LCD->TFT_HEIGHT)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	db04      	blt.n	8006436 <_ZN3TFT5LineVElllt+0x196>
			Y2 = LCD->TFT_HEIGHT - 1;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	3b01      	subs	r3, #1
 8006434:	603b      	str	r3, [r7, #0]

		if (X >= LCD->TFT_WIDTH)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	429a      	cmp	r2, r3
 8006440:	da1b      	bge.n	800647a <_ZN3TFT5LineVElllt+0x1da>
			return;

		for (int32_t i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	e011      	b.n	800646c <_ZN3TFT5LineVElllt+0x1cc>
				{
			LCD->buffer8[X + i * LCD->TFT_WIDTH] = color;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	6812      	ldr	r2, [r2, #0]
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	6939      	ldr	r1, [r7, #16]
 8006456:	fb02 f101 	mul.w	r1, r2, r1
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	440a      	add	r2, r1
 800645e:	4413      	add	r3, r2
 8006460:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]
		for (int32_t i = Y1; i <= Y2; i++) //uTFT_SetPixel(X, i, color);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	3301      	adds	r3, #1
 800646a:	613b      	str	r3, [r7, #16]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	dde9      	ble.n	8006448 <_ZN3TFT5LineVElllt+0x1a8>
 8006474:	e002      	b.n	800647c <_ZN3TFT5LineVElllt+0x1dc>
			return;
 8006476:	bf00      	nop
 8006478:	e000      	b.n	800647c <_ZN3TFT5LineVElllt+0x1dc>
			return;
 800647a:	bf00      	nop
		}
	}

}
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <_ZN3TFT5LineHElllt>:

void TFT::LineH(int32_t Y, int32_t X1, int32_t X2, uint16_t color) {
 8006482:	b490      	push	{r4, r7}
 8006484:	b088      	sub	sp, #32
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
 800648e:	603b      	str	r3, [r7, #0]

	int32_t i;

	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	db04      	blt.n	80064a6 <_ZN3TFT5LineHElllt+0x24>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	603b      	str	r3, [r7, #0]
	if (Y >= LCD->TFT_HEIGHT) return;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	f280 812d 	bge.w	800670e <_ZN3TFT5LineHElllt+0x28c>

	if ((LCD->Bit) == 1) {
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	7a5b      	ldrb	r3, [r3, #9]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d16a      	bne.n	8006594 <_ZN3TFT5LineHElllt+0x112>
		if (color == 1) {
 80064be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d132      	bne.n	800652a <_ZN3TFT5LineHElllt+0xa8>
			for (i = X1; i <= X2; i++)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	e02a      	b.n	8006520 <_ZN3TFT5LineHElllt+0x9e>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	da00      	bge.n	80064d8 <_ZN3TFT5LineHElllt+0x56>
 80064d6:	3307      	adds	r3, #7
 80064d8:	10db      	asrs	r3, r3, #3
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	6809      	ldr	r1, [r1, #0]
 80064de:	6809      	ldr	r1, [r1, #0]
 80064e0:	fb01 f003 	mul.w	r0, r1, r3
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	4401      	add	r1, r0
 80064e8:	440a      	add	r2, r1
 80064ea:	7812      	ldrb	r2, [r2, #0]
 80064ec:	b251      	sxtb	r1, r2
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	f002 0207 	and.w	r2, r2, #7
 80064f4:	2001      	movs	r0, #1
 80064f6:	fa00 f202 	lsl.w	r2, r0, r2
 80064fa:	b252      	sxtb	r2, r2
 80064fc:	430a      	orrs	r2, r1
 80064fe:	b250      	sxtb	r0, r2
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	69d2      	ldr	r2, [r2, #28]
 8006506:	68f9      	ldr	r1, [r7, #12]
 8006508:	6809      	ldr	r1, [r1, #0]
 800650a:	6809      	ldr	r1, [r1, #0]
 800650c:	fb03 f101 	mul.w	r1, r3, r1
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	440b      	add	r3, r1
 8006514:	4413      	add	r3, r2
 8006516:	b2c2      	uxtb	r2, r0
 8006518:	701a      	strb	r2, [r3, #0]
			for (i = X1; i <= X2; i++)
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	3301      	adds	r3, #1
 800651e:	61fb      	str	r3, [r7, #28]
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	ddd0      	ble.n	80064ca <_ZN3TFT5LineHElllt+0x48>
		} else {
			for (i = X1; i <= X2; i++)
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
		}
		return;
 8006528:	e0f2      	b.n	8006710 <_ZN3TFT5LineHElllt+0x28e>
			for (i = X1; i <= X2; i++)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	e02c      	b.n	800658a <_ZN3TFT5LineHElllt+0x108>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69da      	ldr	r2, [r3, #28]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	da00      	bge.n	800653e <_ZN3TFT5LineHElllt+0xbc>
 800653c:	3307      	adds	r3, #7
 800653e:	10db      	asrs	r3, r3, #3
 8006540:	68f9      	ldr	r1, [r7, #12]
 8006542:	6809      	ldr	r1, [r1, #0]
 8006544:	6809      	ldr	r1, [r1, #0]
 8006546:	fb01 f003 	mul.w	r0, r1, r3
 800654a:	69f9      	ldr	r1, [r7, #28]
 800654c:	4401      	add	r1, r0
 800654e:	440a      	add	r2, r1
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	b251      	sxtb	r1, r2
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	f002 0207 	and.w	r2, r2, #7
 800655a:	2001      	movs	r0, #1
 800655c:	fa00 f202 	lsl.w	r2, r0, r2
 8006560:	b252      	sxtb	r2, r2
 8006562:	43d2      	mvns	r2, r2
 8006564:	b252      	sxtb	r2, r2
 8006566:	400a      	ands	r2, r1
 8006568:	b250      	sxtb	r0, r2
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	69d2      	ldr	r2, [r2, #28]
 8006570:	68f9      	ldr	r1, [r7, #12]
 8006572:	6809      	ldr	r1, [r1, #0]
 8006574:	6809      	ldr	r1, [r1, #0]
 8006576:	fb03 f101 	mul.w	r1, r3, r1
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	440b      	add	r3, r1
 800657e:	4413      	add	r3, r2
 8006580:	b2c2      	uxtb	r2, r0
 8006582:	701a      	strb	r2, [r3, #0]
			for (i = X1; i <= X2; i++)
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	3301      	adds	r3, #1
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	ddce      	ble.n	8006530 <_ZN3TFT5LineHElllt+0xae>
		return;
 8006592:	e0bd      	b.n	8006710 <_ZN3TFT5LineHElllt+0x28e>
	}

	if ((LCD->Bit) == 16) {
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	7a5b      	ldrb	r3, [r3, #9]
 800659a:	2b10      	cmp	r3, #16
 800659c:	d119      	bne.n	80065d2 <_ZN3TFT5LineHElllt+0x150>
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	e011      	b.n	80065c8 <_ZN3TFT5LineHElllt+0x146>
		{
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	fb03 f101 	mul.w	r1, r3, r1
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	440b      	add	r3, r1
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	4413      	add	r3, r2
 80065be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80065c0:	801a      	strh	r2, [r3, #0]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	3301      	adds	r3, #1
 80065c6:	61fb      	str	r3, [r7, #28]
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	dde9      	ble.n	80065a4 <_ZN3TFT5LineHElllt+0x122>
		}
		return;
 80065d0:	e09e      	b.n	8006710 <_ZN3TFT5LineHElllt+0x28e>
	}

	if ((LCD->Bit) == 4) {
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	7a5b      	ldrb	r3, [r3, #9]
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d177      	bne.n	80066cc <_ZN3TFT5LineHElllt+0x24a>
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	e06f      	b.n	80066c2 <_ZN3TFT5LineHElllt+0x240>
				{
			if (i % 2 == 0) {
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d134      	bne.n	8006656 <_ZN3TFT5LineHElllt+0x1d4>
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	69da      	ldr	r2, [r3, #28]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	0fd9      	lsrs	r1, r3, #31
 80065f6:	440b      	add	r3, r1
 80065f8:	105b      	asrs	r3, r3, #1
 80065fa:	4618      	mov	r0, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	0fd9      	lsrs	r1, r3, #31
 8006604:	440b      	add	r3, r1
 8006606:	105b      	asrs	r3, r3, #1
 8006608:	4619      	mov	r1, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	4403      	add	r3, r0
 8006612:	4413      	add	r3, r2
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	b25b      	sxtb	r3, r3
								& (0x0F)) | (color << 4);
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	b25a      	sxtb	r2, r3
 800661e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	b25b      	sxtb	r3, r3
 8006624:	4313      	orrs	r3, r2
 8006626:	b258      	sxtb	r0, r3
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69da      	ldr	r2, [r3, #28]
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	0fd9      	lsrs	r1, r3, #31
 8006632:	440b      	add	r3, r1
 8006634:	105b      	asrs	r3, r3, #1
 8006636:	461c      	mov	r4, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	0fd9      	lsrs	r1, r3, #31
 8006640:	440b      	add	r3, r1
 8006642:	105b      	asrs	r3, r3, #1
 8006644:	4619      	mov	r1, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4423      	add	r3, r4
 800664e:	4413      	add	r3, r2
								& (0x0F)) | (color << 4);
 8006650:	b2c2      	uxtb	r2, r0
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	e032      	b.n	80066bc <_ZN3TFT5LineHElllt+0x23a>
			} else {
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	0fd9      	lsrs	r1, r3, #31
 8006660:	440b      	add	r3, r1
 8006662:	105b      	asrs	r3, r3, #1
 8006664:	4618      	mov	r0, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	0fd9      	lsrs	r1, r3, #31
 800666e:	440b      	add	r3, r1
 8006670:	105b      	asrs	r3, r3, #1
 8006672:	4619      	mov	r1, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	4403      	add	r3, r0
 800667c:	4413      	add	r3, r2
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	b25b      	sxtb	r3, r3
								& (0xF0)) | color;
 8006682:	f023 030f 	bic.w	r3, r3, #15
 8006686:	b25a      	sxtb	r2, r3
 8006688:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800668a:	b25b      	sxtb	r3, r3
 800668c:	4313      	orrs	r3, r2
 800668e:	b258      	sxtb	r0, r3
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69da      	ldr	r2, [r3, #28]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	0fd9      	lsrs	r1, r3, #31
 800669a:	440b      	add	r3, r1
 800669c:	105b      	asrs	r3, r3, #1
 800669e:	461c      	mov	r4, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	0fd9      	lsrs	r1, r3, #31
 80066a8:	440b      	add	r3, r1
 80066aa:	105b      	asrs	r3, r3, #1
 80066ac:	4619      	mov	r1, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	fb01 f303 	mul.w	r3, r1, r3
 80066b4:	4423      	add	r3, r4
 80066b6:	4413      	add	r3, r2
								& (0xF0)) | color;
 80066b8:	b2c2      	uxtb	r2, r0
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 80066ba:	701a      	strb	r2, [r3, #0]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	3301      	adds	r3, #1
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	dd8b      	ble.n	80065e2 <_ZN3TFT5LineHElllt+0x160>
			}
		}
		return;
 80066ca:	e021      	b.n	8006710 <_ZN3TFT5LineHElllt+0x28e>
	}

	if ((LCD->Bit) == 8) {
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	7a5b      	ldrb	r3, [r3, #9]
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d11c      	bne.n	8006710 <_ZN3TFT5LineHElllt+0x28e>
		int YY = Y * LCD->TFT_WIDTH;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	617b      	str	r3, [r7, #20]
		for (int32_t i = X1; i <= X2; i++)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	e00c      	b.n	8006704 <_ZN3TFT5LineHElllt+0x282>
			LCD->buffer8[i + YY] = color;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	69b9      	ldr	r1, [r7, #24]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	440a      	add	r2, r1
 80066f6:	4413      	add	r3, r2
 80066f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
		for (int32_t i = X1; i <= X2; i++)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	3301      	adds	r3, #1
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	ddee      	ble.n	80066ea <_ZN3TFT5LineHElllt+0x268>
		return;
 800670c:	e000      	b.n	8006710 <_ZN3TFT5LineHElllt+0x28e>
	if (Y >= LCD->TFT_HEIGHT) return;
 800670e:	bf00      	nop
	}

}
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bc90      	pop	{r4, r7}
 8006716:	4770      	bx	lr

08006718 <_ZN3TFT6LineHWElllt>:
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
		}

}

void TFT::LineHW(int32_t x, int32_t y, int32_t w, uint16_t color) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
	LineH(y, x, x + w - 1, color);
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	4413      	add	r3, r2
 800672c:	1e5a      	subs	r2, r3, #1
 800672e:	8b3b      	ldrh	r3, [r7, #24]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	4613      	mov	r3, r2
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff fea2 	bl	8006482 <_ZN3TFT5LineHElllt>
}
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <_ZN3TFT9RectangleEllttt>:
	LineMoveX = x;
	LineMoveY = y;
}

// ----- Rectagle ----
void TFT::Rectangle(int32_t x, int32_t y, uint16_t w, uint16_t h, uint16_t c) {
 8006746:	b580      	push	{r7, lr}
 8006748:	b086      	sub	sp, #24
 800674a:	af02      	add	r7, sp, #8
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	807b      	strh	r3, [r7, #2]
	/* Check input parameters */
	if (x >= LCD->TFT_WIDTH || y >= LCD->TFT_HEIGHT) return;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	429a      	cmp	r2, r3
 800675e:	da36      	bge.n	80067ce <_ZN3TFT9RectangleEllttt+0x88>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	da30      	bge.n	80067ce <_ZN3TFT9RectangleEllttt+0x88>
//	if ((y + h) >= LCD->TFT_HEIGHT) {
//		h = LCD->TFT_HEIGHT - y;
//	}

	/* Draw 4 lines */
	LineH(y, x, x + w, c);
 800676c:	887a      	ldrh	r2, [r7, #2]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	441a      	add	r2, r3
 8006772:	8bbb      	ldrh	r3, [r7, #28]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	4613      	mov	r3, r2
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7ff fe80 	bl	8006482 <_ZN3TFT5LineHElllt>
	LineH(y + h, x, x + w, c);
 8006782:	8b3a      	ldrh	r2, [r7, #24]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	18d1      	adds	r1, r2, r3
 8006788:	887a      	ldrh	r2, [r7, #2]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	441a      	add	r2, r3
 800678e:	8bbb      	ldrh	r3, [r7, #28]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	4613      	mov	r3, r2
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff fe73 	bl	8006482 <_ZN3TFT5LineHElllt>

	LineV(x, y, y + h, c);
 800679c:	8b3a      	ldrh	r2, [r7, #24]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	8bbb      	ldrh	r3, [r7, #28]
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	4613      	mov	r3, r2
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fd77 	bl	80062a0 <_ZN3TFT5LineVElllt>
	LineV(x + w, y, y + h, c);
 80067b2:	887a      	ldrh	r2, [r7, #2]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	18d1      	adds	r1, r2, r3
 80067b8:	8b3a      	ldrh	r2, [r7, #24]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	441a      	add	r2, r3
 80067be:	8bbb      	ldrh	r3, [r7, #28]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	4613      	mov	r3, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff fd6a 	bl	80062a0 <_ZN3TFT5LineVElllt>
 80067cc:	e000      	b.n	80067d0 <_ZN3TFT9RectangleEllttt+0x8a>
	if (x >= LCD->TFT_WIDTH || y >= LCD->TFT_HEIGHT) return;
 80067ce:	bf00      	nop
}
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <_ZN3TFT15RectangleFilledEttttt>:

void TFT::RectangleFilled(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t c) {
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b08c      	sub	sp, #48	@ 0x30
 80067da:	af02      	add	r7, sp, #8
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	461a      	mov	r2, r3
 80067e4:	4603      	mov	r3, r0
 80067e6:	817b      	strh	r3, [r7, #10]
 80067e8:	460b      	mov	r3, r1
 80067ea:	813b      	strh	r3, [r7, #8]
 80067ec:	4613      	mov	r3, r2
 80067ee:	80fb      	strh	r3, [r7, #6]
	uint32_t i;

	/* Check input parameters */
	if (x >= LCD->TFT_WIDTH || y >= LCD->TFT_HEIGHT || w==0 || h==0 ) {
 80067f0:	897a      	ldrh	r2, [r7, #10]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	da77      	bge.n	80068ec <_ZN3TFT15RectangleFilledEttttt+0x116>
 80067fc:	893a      	ldrh	r2, [r7, #8]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	429a      	cmp	r2, r3
 8006806:	da71      	bge.n	80068ec <_ZN3TFT15RectangleFilledEttttt+0x116>
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d06e      	beq.n	80068ec <_ZN3TFT15RectangleFilledEttttt+0x116>
 800680e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006810:	2b00      	cmp	r3, #0
 8006812:	d06b      	beq.n	80068ec <_ZN3TFT15RectangleFilledEttttt+0x116>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= LCD->TFT_WIDTH) {
 8006814:	897a      	ldrh	r2, [r7, #10]
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	441a      	add	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	db06      	blt.n	8006832 <_ZN3TFT15RectangleFilledEttttt+0x5c>
		w = LCD->TFT_WIDTH - x;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	b29a      	uxth	r2, r3
 800682c:	897b      	ldrh	r3, [r7, #10]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	80fb      	strh	r3, [r7, #6]
	}
	if ((y + h) >= LCD->TFT_HEIGHT) {
 8006832:	893a      	ldrh	r2, [r7, #8]
 8006834:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006836:	441a      	add	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	429a      	cmp	r2, r3
 8006840:	db06      	blt.n	8006850 <_ZN3TFT15RectangleFilledEttttt+0x7a>
		h = LCD->TFT_HEIGHT - y;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	b29a      	uxth	r2, r3
 800684a:	893b      	ldrh	r3, [r7, #8]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	863b      	strh	r3, [r7, #48]	@ 0x30
	}

	if ((LCD->Bit) == 8) {
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	7a5b      	ldrb	r3, [r3, #9]
 8006856:	2b08      	cmp	r3, #8
 8006858:	d12d      	bne.n	80068b6 <_ZN3TFT15RectangleFilledEttttt+0xe0>
		int X2 = x + w;
 800685a:	897a      	ldrh	r2, [r7, #10]
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	4413      	add	r3, r2
 8006860:	61fb      	str	r3, [r7, #28]
		for (i = 0; i <= h; i++) {
 8006862:	2300      	movs	r3, #0
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
 8006866:	e021      	b.n	80068ac <_ZN3TFT15RectangleFilledEttttt+0xd6>
			int Y = y + i;
 8006868:	893a      	ldrh	r2, [r7, #8]
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	4413      	add	r3, r2
 800686e:	61bb      	str	r3, [r7, #24]
			int YY = Y * LCD->TFT_WIDTH;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	fb02 f303 	mul.w	r3, r2, r3
 800687c:	617b      	str	r3, [r7, #20]
			for (int32_t i = x; i <= X2; i++)
 800687e:	897b      	ldrh	r3, [r7, #10]
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	e00c      	b.n	800689e <_ZN3TFT15RectangleFilledEttttt+0xc8>
				LCD->buffer8[i + YY] = c;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	6a39      	ldr	r1, [r7, #32]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	440a      	add	r2, r1
 8006890:	4413      	add	r3, r2
 8006892:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
			for (int32_t i = x; i <= X2; i++)
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	3301      	adds	r3, #1
 800689c:	623b      	str	r3, [r7, #32]
 800689e:	6a3a      	ldr	r2, [r7, #32]
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	ddee      	ble.n	8006884 <_ZN3TFT15RectangleFilledEttttt+0xae>
		for (i = 0; i <= h; i++) {
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	3301      	adds	r3, #1
 80068aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80068ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d9d9      	bls.n	8006868 <_ZN3TFT15RectangleFilledEttttt+0x92>
		}
		return;
 80068b4:	e01b      	b.n	80068ee <_ZN3TFT15RectangleFilledEttttt+0x118>
	}

	for (i = 0; i < h; i++) {
 80068b6:	2300      	movs	r3, #0
 80068b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ba:	e012      	b.n	80068e2 <_ZN3TFT15RectangleFilledEttttt+0x10c>
		LineH(y + i, x, x + w, c); //124us
 80068bc:	893a      	ldrh	r2, [r7, #8]
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	4413      	add	r3, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	8979      	ldrh	r1, [r7, #10]
 80068c6:	897a      	ldrh	r2, [r7, #10]
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	441a      	add	r2, r3
 80068cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	460a      	mov	r2, r1
 80068d4:	4601      	mov	r1, r0
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff fdd3 	bl	8006482 <_ZN3TFT5LineHElllt>
	for (i = 0; i < h; i++) {
 80068dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068de:	3301      	adds	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80068e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d3e8      	bcc.n	80068bc <_ZN3TFT15RectangleFilledEttttt+0xe6>
 80068ea:	e000      	b.n	80068ee <_ZN3TFT15RectangleFilledEttttt+0x118>
		return;
 80068ec:	bf00      	nop

	/* Draw lines */
////for (i = 0; i <= h; i++) {
//	LineH(y + i, x, x + w, c); //124us
//}
}
 80068ee:	3728      	adds	r7, #40	@ 0x28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <modff>:
 80068f4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80068f8:	3b7f      	subs	r3, #127	@ 0x7f
 80068fa:	2b16      	cmp	r3, #22
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	4604      	mov	r4, r0
 8006900:	460e      	mov	r6, r1
 8006902:	4605      	mov	r5, r0
 8006904:	dc16      	bgt.n	8006934 <modff+0x40>
 8006906:	2b00      	cmp	r3, #0
 8006908:	da04      	bge.n	8006914 <modff+0x20>
 800690a:	f000 4500 	and.w	r5, r0, #2147483648	@ 0x80000000
 800690e:	600d      	str	r5, [r1, #0]
 8006910:	4620      	mov	r0, r4
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	4a0d      	ldr	r2, [pc, #52]	@ (800694c <modff+0x58>)
 8006916:	fa42 f303 	asr.w	r3, r2, r3
 800691a:	4218      	tst	r0, r3
 800691c:	d103      	bne.n	8006926 <modff+0x32>
 800691e:	6030      	str	r0, [r6, #0]
 8006920:	f005 4400 	and.w	r4, r5, #2147483648	@ 0x80000000
 8006924:	e7f4      	b.n	8006910 <modff+0x1c>
 8006926:	ea20 0103 	bic.w	r1, r0, r3
 800692a:	6031      	str	r1, [r6, #0]
 800692c:	f7fa f900 	bl	8000b30 <__aeabi_fsub>
 8006930:	4604      	mov	r4, r0
 8006932:	e7ed      	b.n	8006910 <modff+0x1c>
 8006934:	6008      	str	r0, [r1, #0]
 8006936:	f000 f80b 	bl	8006950 <__fpclassifyf>
 800693a:	2800      	cmp	r0, #0
 800693c:	d1f0      	bne.n	8006920 <modff+0x2c>
 800693e:	4621      	mov	r1, r4
 8006940:	4620      	mov	r0, r4
 8006942:	f7fa f8f7 	bl	8000b34 <__addsf3>
 8006946:	4604      	mov	r4, r0
 8006948:	6030      	str	r0, [r6, #0]
 800694a:	e7e1      	b.n	8006910 <modff+0x1c>
 800694c:	007fffff 	.word	0x007fffff

08006950 <__fpclassifyf>:
 8006950:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8006954:	d00d      	beq.n	8006972 <__fpclassifyf+0x22>
 8006956:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800695a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800695e:	d30a      	bcc.n	8006976 <__fpclassifyf+0x26>
 8006960:	4b07      	ldr	r3, [pc, #28]	@ (8006980 <__fpclassifyf+0x30>)
 8006962:	1e42      	subs	r2, r0, #1
 8006964:	429a      	cmp	r2, r3
 8006966:	d908      	bls.n	800697a <__fpclassifyf+0x2a>
 8006968:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800696c:	4258      	negs	r0, r3
 800696e:	4158      	adcs	r0, r3
 8006970:	4770      	bx	lr
 8006972:	2002      	movs	r0, #2
 8006974:	4770      	bx	lr
 8006976:	2004      	movs	r0, #4
 8006978:	4770      	bx	lr
 800697a:	2003      	movs	r0, #3
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	007ffffe 	.word	0x007ffffe

08006984 <__cvt>:
 8006984:	2b00      	cmp	r3, #0
 8006986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800698a:	461d      	mov	r5, r3
 800698c:	bfbb      	ittet	lt
 800698e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006992:	461d      	movlt	r5, r3
 8006994:	2300      	movge	r3, #0
 8006996:	232d      	movlt	r3, #45	@ 0x2d
 8006998:	b088      	sub	sp, #32
 800699a:	4614      	mov	r4, r2
 800699c:	bfb8      	it	lt
 800699e:	4614      	movlt	r4, r2
 80069a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80069a2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80069a4:	7013      	strb	r3, [r2, #0]
 80069a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80069ac:	f023 0820 	bic.w	r8, r3, #32
 80069b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069b4:	d005      	beq.n	80069c2 <__cvt+0x3e>
 80069b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80069ba:	d100      	bne.n	80069be <__cvt+0x3a>
 80069bc:	3601      	adds	r6, #1
 80069be:	2302      	movs	r3, #2
 80069c0:	e000      	b.n	80069c4 <__cvt+0x40>
 80069c2:	2303      	movs	r3, #3
 80069c4:	aa07      	add	r2, sp, #28
 80069c6:	9204      	str	r2, [sp, #16]
 80069c8:	aa06      	add	r2, sp, #24
 80069ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 80069ce:	e9cd 3600 	strd	r3, r6, [sp]
 80069d2:	4622      	mov	r2, r4
 80069d4:	462b      	mov	r3, r5
 80069d6:	f000 fe6f 	bl	80076b8 <_dtoa_r>
 80069da:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069de:	4607      	mov	r7, r0
 80069e0:	d119      	bne.n	8006a16 <__cvt+0x92>
 80069e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80069e4:	07db      	lsls	r3, r3, #31
 80069e6:	d50e      	bpl.n	8006a06 <__cvt+0x82>
 80069e8:	eb00 0906 	add.w	r9, r0, r6
 80069ec:	2200      	movs	r2, #0
 80069ee:	2300      	movs	r3, #0
 80069f0:	4620      	mov	r0, r4
 80069f2:	4629      	mov	r1, r5
 80069f4:	f7f9 ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 80069f8:	b108      	cbz	r0, 80069fe <__cvt+0x7a>
 80069fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80069fe:	2230      	movs	r2, #48	@ 0x30
 8006a00:	9b07      	ldr	r3, [sp, #28]
 8006a02:	454b      	cmp	r3, r9
 8006a04:	d31e      	bcc.n	8006a44 <__cvt+0xc0>
 8006a06:	4638      	mov	r0, r7
 8006a08:	9b07      	ldr	r3, [sp, #28]
 8006a0a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006a0c:	1bdb      	subs	r3, r3, r7
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	b008      	add	sp, #32
 8006a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a16:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a1a:	eb00 0906 	add.w	r9, r0, r6
 8006a1e:	d1e5      	bne.n	80069ec <__cvt+0x68>
 8006a20:	7803      	ldrb	r3, [r0, #0]
 8006a22:	2b30      	cmp	r3, #48	@ 0x30
 8006a24:	d10a      	bne.n	8006a3c <__cvt+0xb8>
 8006a26:	2200      	movs	r2, #0
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	f7f9 ffbb 	bl	80009a8 <__aeabi_dcmpeq>
 8006a32:	b918      	cbnz	r0, 8006a3c <__cvt+0xb8>
 8006a34:	f1c6 0601 	rsb	r6, r6, #1
 8006a38:	f8ca 6000 	str.w	r6, [sl]
 8006a3c:	f8da 3000 	ldr.w	r3, [sl]
 8006a40:	4499      	add	r9, r3
 8006a42:	e7d3      	b.n	80069ec <__cvt+0x68>
 8006a44:	1c59      	adds	r1, r3, #1
 8006a46:	9107      	str	r1, [sp, #28]
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e7d9      	b.n	8006a00 <__cvt+0x7c>

08006a4c <__exponent>:
 8006a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a4e:	2900      	cmp	r1, #0
 8006a50:	bfb6      	itet	lt
 8006a52:	232d      	movlt	r3, #45	@ 0x2d
 8006a54:	232b      	movge	r3, #43	@ 0x2b
 8006a56:	4249      	neglt	r1, r1
 8006a58:	2909      	cmp	r1, #9
 8006a5a:	7002      	strb	r2, [r0, #0]
 8006a5c:	7043      	strb	r3, [r0, #1]
 8006a5e:	dd29      	ble.n	8006ab4 <__exponent+0x68>
 8006a60:	f10d 0307 	add.w	r3, sp, #7
 8006a64:	461d      	mov	r5, r3
 8006a66:	270a      	movs	r7, #10
 8006a68:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	fb07 1416 	mls	r4, r7, r6, r1
 8006a72:	3430      	adds	r4, #48	@ 0x30
 8006a74:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a78:	460c      	mov	r4, r1
 8006a7a:	2c63      	cmp	r4, #99	@ 0x63
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a82:	dcf1      	bgt.n	8006a68 <__exponent+0x1c>
 8006a84:	3130      	adds	r1, #48	@ 0x30
 8006a86:	1e94      	subs	r4, r2, #2
 8006a88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a8c:	4623      	mov	r3, r4
 8006a8e:	1c41      	adds	r1, r0, #1
 8006a90:	42ab      	cmp	r3, r5
 8006a92:	d30a      	bcc.n	8006aaa <__exponent+0x5e>
 8006a94:	f10d 0309 	add.w	r3, sp, #9
 8006a98:	1a9b      	subs	r3, r3, r2
 8006a9a:	42ac      	cmp	r4, r5
 8006a9c:	bf88      	it	hi
 8006a9e:	2300      	movhi	r3, #0
 8006aa0:	3302      	adds	r3, #2
 8006aa2:	4403      	add	r3, r0
 8006aa4:	1a18      	subs	r0, r3, r0
 8006aa6:	b003      	add	sp, #12
 8006aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aaa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006aae:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ab2:	e7ed      	b.n	8006a90 <__exponent+0x44>
 8006ab4:	2330      	movs	r3, #48	@ 0x30
 8006ab6:	3130      	adds	r1, #48	@ 0x30
 8006ab8:	7083      	strb	r3, [r0, #2]
 8006aba:	70c1      	strb	r1, [r0, #3]
 8006abc:	1d03      	adds	r3, r0, #4
 8006abe:	e7f1      	b.n	8006aa4 <__exponent+0x58>

08006ac0 <_printf_float>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	b091      	sub	sp, #68	@ 0x44
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006acc:	4616      	mov	r6, r2
 8006ace:	461f      	mov	r7, r3
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	f000 fce1 	bl	8007498 <_localeconv_r>
 8006ad6:	6803      	ldr	r3, [r0, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	9308      	str	r3, [sp, #32]
 8006adc:	f7f9 fb38 	bl	8000150 <strlen>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ae8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006aea:	3307      	adds	r3, #7
 8006aec:	f023 0307 	bic.w	r3, r3, #7
 8006af0:	f103 0208 	add.w	r2, r3, #8
 8006af4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006af8:	f8d4 b000 	ldr.w	fp, [r4]
 8006afc:	f8c8 2000 	str.w	r2, [r8]
 8006b00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b0a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b1a:	4b9c      	ldr	r3, [pc, #624]	@ (8006d8c <_printf_float+0x2cc>)
 8006b1c:	f7f9 ff76 	bl	8000a0c <__aeabi_dcmpun>
 8006b20:	bb70      	cbnz	r0, 8006b80 <_printf_float+0xc0>
 8006b22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b26:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2a:	4b98      	ldr	r3, [pc, #608]	@ (8006d8c <_printf_float+0x2cc>)
 8006b2c:	f7f9 ff50 	bl	80009d0 <__aeabi_dcmple>
 8006b30:	bb30      	cbnz	r0, 8006b80 <_printf_float+0xc0>
 8006b32:	2200      	movs	r2, #0
 8006b34:	2300      	movs	r3, #0
 8006b36:	4640      	mov	r0, r8
 8006b38:	4649      	mov	r1, r9
 8006b3a:	f7f9 ff3f 	bl	80009bc <__aeabi_dcmplt>
 8006b3e:	b110      	cbz	r0, 8006b46 <_printf_float+0x86>
 8006b40:	232d      	movs	r3, #45	@ 0x2d
 8006b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b46:	4a92      	ldr	r2, [pc, #584]	@ (8006d90 <_printf_float+0x2d0>)
 8006b48:	4b92      	ldr	r3, [pc, #584]	@ (8006d94 <_printf_float+0x2d4>)
 8006b4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b4e:	bf94      	ite	ls
 8006b50:	4690      	movls	r8, r2
 8006b52:	4698      	movhi	r8, r3
 8006b54:	2303      	movs	r3, #3
 8006b56:	f04f 0900 	mov.w	r9, #0
 8006b5a:	6123      	str	r3, [r4, #16]
 8006b5c:	f02b 0304 	bic.w	r3, fp, #4
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	4633      	mov	r3, r6
 8006b64:	4621      	mov	r1, r4
 8006b66:	4628      	mov	r0, r5
 8006b68:	9700      	str	r7, [sp, #0]
 8006b6a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006b6c:	f000 f9d4 	bl	8006f18 <_printf_common>
 8006b70:	3001      	adds	r0, #1
 8006b72:	f040 8090 	bne.w	8006c96 <_printf_float+0x1d6>
 8006b76:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7a:	b011      	add	sp, #68	@ 0x44
 8006b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b80:	4642      	mov	r2, r8
 8006b82:	464b      	mov	r3, r9
 8006b84:	4640      	mov	r0, r8
 8006b86:	4649      	mov	r1, r9
 8006b88:	f7f9 ff40 	bl	8000a0c <__aeabi_dcmpun>
 8006b8c:	b148      	cbz	r0, 8006ba2 <_printf_float+0xe2>
 8006b8e:	464b      	mov	r3, r9
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bfb8      	it	lt
 8006b94:	232d      	movlt	r3, #45	@ 0x2d
 8006b96:	4a80      	ldr	r2, [pc, #512]	@ (8006d98 <_printf_float+0x2d8>)
 8006b98:	bfb8      	it	lt
 8006b9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8006d9c <_printf_float+0x2dc>)
 8006ba0:	e7d3      	b.n	8006b4a <_printf_float+0x8a>
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	d13f      	bne.n	8006c2c <_printf_float+0x16c>
 8006bac:	2306      	movs	r3, #6
 8006bae:	6063      	str	r3, [r4, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006bb6:	6023      	str	r3, [r4, #0]
 8006bb8:	9206      	str	r2, [sp, #24]
 8006bba:	aa0e      	add	r2, sp, #56	@ 0x38
 8006bbc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006bc0:	aa0d      	add	r2, sp, #52	@ 0x34
 8006bc2:	9203      	str	r2, [sp, #12]
 8006bc4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006bc8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	4642      	mov	r2, r8
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	910a      	str	r1, [sp, #40]	@ 0x28
 8006bd8:	f7ff fed4 	bl	8006984 <__cvt>
 8006bdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bde:	4680      	mov	r8, r0
 8006be0:	2947      	cmp	r1, #71	@ 0x47
 8006be2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006be4:	d128      	bne.n	8006c38 <_printf_float+0x178>
 8006be6:	1cc8      	adds	r0, r1, #3
 8006be8:	db02      	blt.n	8006bf0 <_printf_float+0x130>
 8006bea:	6863      	ldr	r3, [r4, #4]
 8006bec:	4299      	cmp	r1, r3
 8006bee:	dd40      	ble.n	8006c72 <_printf_float+0x1b2>
 8006bf0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006bf4:	fa5f fa8a 	uxtb.w	sl, sl
 8006bf8:	4652      	mov	r2, sl
 8006bfa:	3901      	subs	r1, #1
 8006bfc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c00:	910d      	str	r1, [sp, #52]	@ 0x34
 8006c02:	f7ff ff23 	bl	8006a4c <__exponent>
 8006c06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c08:	4681      	mov	r9, r0
 8006c0a:	1813      	adds	r3, r2, r0
 8006c0c:	2a01      	cmp	r2, #1
 8006c0e:	6123      	str	r3, [r4, #16]
 8006c10:	dc02      	bgt.n	8006c18 <_printf_float+0x158>
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	07d2      	lsls	r2, r2, #31
 8006c16:	d501      	bpl.n	8006c1c <_printf_float+0x15c>
 8006c18:	3301      	adds	r3, #1
 8006c1a:	6123      	str	r3, [r4, #16]
 8006c1c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d09e      	beq.n	8006b62 <_printf_float+0xa2>
 8006c24:	232d      	movs	r3, #45	@ 0x2d
 8006c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c2a:	e79a      	b.n	8006b62 <_printf_float+0xa2>
 8006c2c:	2947      	cmp	r1, #71	@ 0x47
 8006c2e:	d1bf      	bne.n	8006bb0 <_printf_float+0xf0>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1bd      	bne.n	8006bb0 <_printf_float+0xf0>
 8006c34:	2301      	movs	r3, #1
 8006c36:	e7ba      	b.n	8006bae <_printf_float+0xee>
 8006c38:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c3c:	d9dc      	bls.n	8006bf8 <_printf_float+0x138>
 8006c3e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c42:	d118      	bne.n	8006c76 <_printf_float+0x1b6>
 8006c44:	2900      	cmp	r1, #0
 8006c46:	6863      	ldr	r3, [r4, #4]
 8006c48:	dd0b      	ble.n	8006c62 <_printf_float+0x1a2>
 8006c4a:	6121      	str	r1, [r4, #16]
 8006c4c:	b913      	cbnz	r3, 8006c54 <_printf_float+0x194>
 8006c4e:	6822      	ldr	r2, [r4, #0]
 8006c50:	07d0      	lsls	r0, r2, #31
 8006c52:	d502      	bpl.n	8006c5a <_printf_float+0x19a>
 8006c54:	3301      	adds	r3, #1
 8006c56:	440b      	add	r3, r1
 8006c58:	6123      	str	r3, [r4, #16]
 8006c5a:	f04f 0900 	mov.w	r9, #0
 8006c5e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c60:	e7dc      	b.n	8006c1c <_printf_float+0x15c>
 8006c62:	b913      	cbnz	r3, 8006c6a <_printf_float+0x1aa>
 8006c64:	6822      	ldr	r2, [r4, #0]
 8006c66:	07d2      	lsls	r2, r2, #31
 8006c68:	d501      	bpl.n	8006c6e <_printf_float+0x1ae>
 8006c6a:	3302      	adds	r3, #2
 8006c6c:	e7f4      	b.n	8006c58 <_printf_float+0x198>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e7f2      	b.n	8006c58 <_printf_float+0x198>
 8006c72:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c78:	4299      	cmp	r1, r3
 8006c7a:	db05      	blt.n	8006c88 <_printf_float+0x1c8>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	6121      	str	r1, [r4, #16]
 8006c80:	07d8      	lsls	r0, r3, #31
 8006c82:	d5ea      	bpl.n	8006c5a <_printf_float+0x19a>
 8006c84:	1c4b      	adds	r3, r1, #1
 8006c86:	e7e7      	b.n	8006c58 <_printf_float+0x198>
 8006c88:	2900      	cmp	r1, #0
 8006c8a:	bfcc      	ite	gt
 8006c8c:	2201      	movgt	r2, #1
 8006c8e:	f1c1 0202 	rsble	r2, r1, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	e7e0      	b.n	8006c58 <_printf_float+0x198>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	055a      	lsls	r2, r3, #21
 8006c9a:	d407      	bmi.n	8006cac <_printf_float+0x1ec>
 8006c9c:	6923      	ldr	r3, [r4, #16]
 8006c9e:	4642      	mov	r2, r8
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	47b8      	blx	r7
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d12b      	bne.n	8006d02 <_printf_float+0x242>
 8006caa:	e764      	b.n	8006b76 <_printf_float+0xb6>
 8006cac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cb0:	f240 80dc 	bls.w	8006e6c <_printf_float+0x3ac>
 8006cb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f7f9 fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d033      	beq.n	8006d2c <_printf_float+0x26c>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	4a35      	ldr	r2, [pc, #212]	@ (8006da0 <_printf_float+0x2e0>)
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f af51 	beq.w	8006b76 <_printf_float+0xb6>
 8006cd4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006cd8:	4543      	cmp	r3, r8
 8006cda:	db02      	blt.n	8006ce2 <_printf_float+0x222>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	07d8      	lsls	r0, r3, #31
 8006ce0:	d50f      	bpl.n	8006d02 <_printf_float+0x242>
 8006ce2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	f43f af42 	beq.w	8006b76 <_printf_float+0xb6>
 8006cf2:	f04f 0900 	mov.w	r9, #0
 8006cf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cfa:	f104 0a1a 	add.w	sl, r4, #26
 8006cfe:	45c8      	cmp	r8, r9
 8006d00:	dc09      	bgt.n	8006d16 <_printf_float+0x256>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	079b      	lsls	r3, r3, #30
 8006d06:	f100 8102 	bmi.w	8006f0e <_printf_float+0x44e>
 8006d0a:	68e0      	ldr	r0, [r4, #12]
 8006d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d0e:	4298      	cmp	r0, r3
 8006d10:	bfb8      	it	lt
 8006d12:	4618      	movlt	r0, r3
 8006d14:	e731      	b.n	8006b7a <_printf_float+0xba>
 8006d16:	2301      	movs	r3, #1
 8006d18:	4652      	mov	r2, sl
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	f43f af28 	beq.w	8006b76 <_printf_float+0xb6>
 8006d26:	f109 0901 	add.w	r9, r9, #1
 8006d2a:	e7e8      	b.n	8006cfe <_printf_float+0x23e>
 8006d2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dc38      	bgt.n	8006da4 <_printf_float+0x2e4>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	4a19      	ldr	r2, [pc, #100]	@ (8006da0 <_printf_float+0x2e0>)
 8006d3a:	47b8      	blx	r7
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	f43f af1a 	beq.w	8006b76 <_printf_float+0xb6>
 8006d42:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006d46:	ea59 0303 	orrs.w	r3, r9, r3
 8006d4a:	d102      	bne.n	8006d52 <_printf_float+0x292>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	07d9      	lsls	r1, r3, #31
 8006d50:	d5d7      	bpl.n	8006d02 <_printf_float+0x242>
 8006d52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d56:	4631      	mov	r1, r6
 8006d58:	4628      	mov	r0, r5
 8006d5a:	47b8      	blx	r7
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	f43f af0a 	beq.w	8006b76 <_printf_float+0xb6>
 8006d62:	f04f 0a00 	mov.w	sl, #0
 8006d66:	f104 0b1a 	add.w	fp, r4, #26
 8006d6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d6c:	425b      	negs	r3, r3
 8006d6e:	4553      	cmp	r3, sl
 8006d70:	dc01      	bgt.n	8006d76 <_printf_float+0x2b6>
 8006d72:	464b      	mov	r3, r9
 8006d74:	e793      	b.n	8006c9e <_printf_float+0x1de>
 8006d76:	2301      	movs	r3, #1
 8006d78:	465a      	mov	r2, fp
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	47b8      	blx	r7
 8006d80:	3001      	adds	r0, #1
 8006d82:	f43f aef8 	beq.w	8006b76 <_printf_float+0xb6>
 8006d86:	f10a 0a01 	add.w	sl, sl, #1
 8006d8a:	e7ee      	b.n	8006d6a <_printf_float+0x2aa>
 8006d8c:	7fefffff 	.word	0x7fefffff
 8006d90:	0800c134 	.word	0x0800c134
 8006d94:	0800c138 	.word	0x0800c138
 8006d98:	0800c13c 	.word	0x0800c13c
 8006d9c:	0800c140 	.word	0x0800c140
 8006da0:	0800c144 	.word	0x0800c144
 8006da4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006da6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006daa:	4553      	cmp	r3, sl
 8006dac:	bfa8      	it	ge
 8006dae:	4653      	movge	r3, sl
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	4699      	mov	r9, r3
 8006db4:	dc36      	bgt.n	8006e24 <_printf_float+0x364>
 8006db6:	f04f 0b00 	mov.w	fp, #0
 8006dba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dbe:	f104 021a 	add.w	r2, r4, #26
 8006dc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dc6:	eba3 0309 	sub.w	r3, r3, r9
 8006dca:	455b      	cmp	r3, fp
 8006dcc:	dc31      	bgt.n	8006e32 <_printf_float+0x372>
 8006dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dd0:	459a      	cmp	sl, r3
 8006dd2:	dc3a      	bgt.n	8006e4a <_printf_float+0x38a>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	07da      	lsls	r2, r3, #31
 8006dd8:	d437      	bmi.n	8006e4a <_printf_float+0x38a>
 8006dda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ddc:	ebaa 0903 	sub.w	r9, sl, r3
 8006de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006de2:	ebaa 0303 	sub.w	r3, sl, r3
 8006de6:	4599      	cmp	r9, r3
 8006de8:	bfa8      	it	ge
 8006dea:	4699      	movge	r9, r3
 8006dec:	f1b9 0f00 	cmp.w	r9, #0
 8006df0:	dc33      	bgt.n	8006e5a <_printf_float+0x39a>
 8006df2:	f04f 0800 	mov.w	r8, #0
 8006df6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dfa:	f104 0b1a 	add.w	fp, r4, #26
 8006dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e00:	ebaa 0303 	sub.w	r3, sl, r3
 8006e04:	eba3 0309 	sub.w	r3, r3, r9
 8006e08:	4543      	cmp	r3, r8
 8006e0a:	f77f af7a 	ble.w	8006d02 <_printf_float+0x242>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	465a      	mov	r2, fp
 8006e12:	4631      	mov	r1, r6
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	f43f aeac 	beq.w	8006b76 <_printf_float+0xb6>
 8006e1e:	f108 0801 	add.w	r8, r8, #1
 8006e22:	e7ec      	b.n	8006dfe <_printf_float+0x33e>
 8006e24:	4642      	mov	r2, r8
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d1c2      	bne.n	8006db6 <_printf_float+0x2f6>
 8006e30:	e6a1      	b.n	8006b76 <_printf_float+0xb6>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4631      	mov	r1, r6
 8006e36:	4628      	mov	r0, r5
 8006e38:	920a      	str	r2, [sp, #40]	@ 0x28
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	f43f ae9a 	beq.w	8006b76 <_printf_float+0xb6>
 8006e42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e44:	f10b 0b01 	add.w	fp, fp, #1
 8006e48:	e7bb      	b.n	8006dc2 <_printf_float+0x302>
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	d1c0      	bne.n	8006dda <_printf_float+0x31a>
 8006e58:	e68d      	b.n	8006b76 <_printf_float+0xb6>
 8006e5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e5c:	464b      	mov	r3, r9
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4628      	mov	r0, r5
 8006e62:	4442      	add	r2, r8
 8006e64:	47b8      	blx	r7
 8006e66:	3001      	adds	r0, #1
 8006e68:	d1c3      	bne.n	8006df2 <_printf_float+0x332>
 8006e6a:	e684      	b.n	8006b76 <_printf_float+0xb6>
 8006e6c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006e70:	f1ba 0f01 	cmp.w	sl, #1
 8006e74:	dc01      	bgt.n	8006e7a <_printf_float+0x3ba>
 8006e76:	07db      	lsls	r3, r3, #31
 8006e78:	d536      	bpl.n	8006ee8 <_printf_float+0x428>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	f43f ae76 	beq.w	8006b76 <_printf_float+0xb6>
 8006e8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	f43f ae6e 	beq.w	8006b76 <_printf_float+0xb6>
 8006e9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ea6:	f7f9 fd7f 	bl	80009a8 <__aeabi_dcmpeq>
 8006eaa:	b9c0      	cbnz	r0, 8006ede <_printf_float+0x41e>
 8006eac:	4653      	mov	r3, sl
 8006eae:	f108 0201 	add.w	r2, r8, #1
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d10c      	bne.n	8006ed6 <_printf_float+0x416>
 8006ebc:	e65b      	b.n	8006b76 <_printf_float+0xb6>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	465a      	mov	r2, fp
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	47b8      	blx	r7
 8006ec8:	3001      	adds	r0, #1
 8006eca:	f43f ae54 	beq.w	8006b76 <_printf_float+0xb6>
 8006ece:	f108 0801 	add.w	r8, r8, #1
 8006ed2:	45d0      	cmp	r8, sl
 8006ed4:	dbf3      	blt.n	8006ebe <_printf_float+0x3fe>
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006edc:	e6e0      	b.n	8006ca0 <_printf_float+0x1e0>
 8006ede:	f04f 0800 	mov.w	r8, #0
 8006ee2:	f104 0b1a 	add.w	fp, r4, #26
 8006ee6:	e7f4      	b.n	8006ed2 <_printf_float+0x412>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	4642      	mov	r2, r8
 8006eec:	e7e1      	b.n	8006eb2 <_printf_float+0x3f2>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	464a      	mov	r2, r9
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f43f ae3c 	beq.w	8006b76 <_printf_float+0xb6>
 8006efe:	f108 0801 	add.w	r8, r8, #1
 8006f02:	68e3      	ldr	r3, [r4, #12]
 8006f04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006f06:	1a5b      	subs	r3, r3, r1
 8006f08:	4543      	cmp	r3, r8
 8006f0a:	dcf0      	bgt.n	8006eee <_printf_float+0x42e>
 8006f0c:	e6fd      	b.n	8006d0a <_printf_float+0x24a>
 8006f0e:	f04f 0800 	mov.w	r8, #0
 8006f12:	f104 0919 	add.w	r9, r4, #25
 8006f16:	e7f4      	b.n	8006f02 <_printf_float+0x442>

08006f18 <_printf_common>:
 8006f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f1c:	4616      	mov	r6, r2
 8006f1e:	4698      	mov	r8, r3
 8006f20:	688a      	ldr	r2, [r1, #8]
 8006f22:	690b      	ldr	r3, [r1, #16]
 8006f24:	4607      	mov	r7, r0
 8006f26:	4293      	cmp	r3, r2
 8006f28:	bfb8      	it	lt
 8006f2a:	4613      	movlt	r3, r2
 8006f2c:	6033      	str	r3, [r6, #0]
 8006f2e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f32:	460c      	mov	r4, r1
 8006f34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f38:	b10a      	cbz	r2, 8006f3e <_printf_common+0x26>
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	6033      	str	r3, [r6, #0]
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	0699      	lsls	r1, r3, #26
 8006f42:	bf42      	ittt	mi
 8006f44:	6833      	ldrmi	r3, [r6, #0]
 8006f46:	3302      	addmi	r3, #2
 8006f48:	6033      	strmi	r3, [r6, #0]
 8006f4a:	6825      	ldr	r5, [r4, #0]
 8006f4c:	f015 0506 	ands.w	r5, r5, #6
 8006f50:	d106      	bne.n	8006f60 <_printf_common+0x48>
 8006f52:	f104 0a19 	add.w	sl, r4, #25
 8006f56:	68e3      	ldr	r3, [r4, #12]
 8006f58:	6832      	ldr	r2, [r6, #0]
 8006f5a:	1a9b      	subs	r3, r3, r2
 8006f5c:	42ab      	cmp	r3, r5
 8006f5e:	dc2b      	bgt.n	8006fb8 <_printf_common+0xa0>
 8006f60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f64:	6822      	ldr	r2, [r4, #0]
 8006f66:	3b00      	subs	r3, #0
 8006f68:	bf18      	it	ne
 8006f6a:	2301      	movne	r3, #1
 8006f6c:	0692      	lsls	r2, r2, #26
 8006f6e:	d430      	bmi.n	8006fd2 <_printf_common+0xba>
 8006f70:	4641      	mov	r1, r8
 8006f72:	4638      	mov	r0, r7
 8006f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f78:	47c8      	blx	r9
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d023      	beq.n	8006fc6 <_printf_common+0xae>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	6922      	ldr	r2, [r4, #16]
 8006f82:	f003 0306 	and.w	r3, r3, #6
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	bf14      	ite	ne
 8006f8a:	2500      	movne	r5, #0
 8006f8c:	6833      	ldreq	r3, [r6, #0]
 8006f8e:	f04f 0600 	mov.w	r6, #0
 8006f92:	bf08      	it	eq
 8006f94:	68e5      	ldreq	r5, [r4, #12]
 8006f96:	f104 041a 	add.w	r4, r4, #26
 8006f9a:	bf08      	it	eq
 8006f9c:	1aed      	subeq	r5, r5, r3
 8006f9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006fa2:	bf08      	it	eq
 8006fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	bfc4      	itt	gt
 8006fac:	1a9b      	subgt	r3, r3, r2
 8006fae:	18ed      	addgt	r5, r5, r3
 8006fb0:	42b5      	cmp	r5, r6
 8006fb2:	d11a      	bne.n	8006fea <_printf_common+0xd2>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e008      	b.n	8006fca <_printf_common+0xb2>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	4652      	mov	r2, sl
 8006fbc:	4641      	mov	r1, r8
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	47c8      	blx	r9
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d103      	bne.n	8006fce <_printf_common+0xb6>
 8006fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fce:	3501      	adds	r5, #1
 8006fd0:	e7c1      	b.n	8006f56 <_printf_common+0x3e>
 8006fd2:	2030      	movs	r0, #48	@ 0x30
 8006fd4:	18e1      	adds	r1, r4, r3
 8006fd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fe0:	4422      	add	r2, r4
 8006fe2:	3302      	adds	r3, #2
 8006fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fe8:	e7c2      	b.n	8006f70 <_printf_common+0x58>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4622      	mov	r2, r4
 8006fee:	4641      	mov	r1, r8
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	47c8      	blx	r9
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d0e6      	beq.n	8006fc6 <_printf_common+0xae>
 8006ff8:	3601      	adds	r6, #1
 8006ffa:	e7d9      	b.n	8006fb0 <_printf_common+0x98>

08006ffc <_printf_i>:
 8006ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007000:	7e0f      	ldrb	r7, [r1, #24]
 8007002:	4691      	mov	r9, r2
 8007004:	2f78      	cmp	r7, #120	@ 0x78
 8007006:	4680      	mov	r8, r0
 8007008:	460c      	mov	r4, r1
 800700a:	469a      	mov	sl, r3
 800700c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800700e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007012:	d807      	bhi.n	8007024 <_printf_i+0x28>
 8007014:	2f62      	cmp	r7, #98	@ 0x62
 8007016:	d80a      	bhi.n	800702e <_printf_i+0x32>
 8007018:	2f00      	cmp	r7, #0
 800701a:	f000 80d3 	beq.w	80071c4 <_printf_i+0x1c8>
 800701e:	2f58      	cmp	r7, #88	@ 0x58
 8007020:	f000 80ba 	beq.w	8007198 <_printf_i+0x19c>
 8007024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800702c:	e03a      	b.n	80070a4 <_printf_i+0xa8>
 800702e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007032:	2b15      	cmp	r3, #21
 8007034:	d8f6      	bhi.n	8007024 <_printf_i+0x28>
 8007036:	a101      	add	r1, pc, #4	@ (adr r1, 800703c <_printf_i+0x40>)
 8007038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800703c:	08007095 	.word	0x08007095
 8007040:	080070a9 	.word	0x080070a9
 8007044:	08007025 	.word	0x08007025
 8007048:	08007025 	.word	0x08007025
 800704c:	08007025 	.word	0x08007025
 8007050:	08007025 	.word	0x08007025
 8007054:	080070a9 	.word	0x080070a9
 8007058:	08007025 	.word	0x08007025
 800705c:	08007025 	.word	0x08007025
 8007060:	08007025 	.word	0x08007025
 8007064:	08007025 	.word	0x08007025
 8007068:	080071ab 	.word	0x080071ab
 800706c:	080070d3 	.word	0x080070d3
 8007070:	08007165 	.word	0x08007165
 8007074:	08007025 	.word	0x08007025
 8007078:	08007025 	.word	0x08007025
 800707c:	080071cd 	.word	0x080071cd
 8007080:	08007025 	.word	0x08007025
 8007084:	080070d3 	.word	0x080070d3
 8007088:	08007025 	.word	0x08007025
 800708c:	08007025 	.word	0x08007025
 8007090:	0800716d 	.word	0x0800716d
 8007094:	6833      	ldr	r3, [r6, #0]
 8007096:	1d1a      	adds	r2, r3, #4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6032      	str	r2, [r6, #0]
 800709c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070a4:	2301      	movs	r3, #1
 80070a6:	e09e      	b.n	80071e6 <_printf_i+0x1ea>
 80070a8:	6833      	ldr	r3, [r6, #0]
 80070aa:	6820      	ldr	r0, [r4, #0]
 80070ac:	1d19      	adds	r1, r3, #4
 80070ae:	6031      	str	r1, [r6, #0]
 80070b0:	0606      	lsls	r6, r0, #24
 80070b2:	d501      	bpl.n	80070b8 <_printf_i+0xbc>
 80070b4:	681d      	ldr	r5, [r3, #0]
 80070b6:	e003      	b.n	80070c0 <_printf_i+0xc4>
 80070b8:	0645      	lsls	r5, r0, #25
 80070ba:	d5fb      	bpl.n	80070b4 <_printf_i+0xb8>
 80070bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070c0:	2d00      	cmp	r5, #0
 80070c2:	da03      	bge.n	80070cc <_printf_i+0xd0>
 80070c4:	232d      	movs	r3, #45	@ 0x2d
 80070c6:	426d      	negs	r5, r5
 80070c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070cc:	230a      	movs	r3, #10
 80070ce:	4859      	ldr	r0, [pc, #356]	@ (8007234 <_printf_i+0x238>)
 80070d0:	e011      	b.n	80070f6 <_printf_i+0xfa>
 80070d2:	6821      	ldr	r1, [r4, #0]
 80070d4:	6833      	ldr	r3, [r6, #0]
 80070d6:	0608      	lsls	r0, r1, #24
 80070d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80070dc:	d402      	bmi.n	80070e4 <_printf_i+0xe8>
 80070de:	0649      	lsls	r1, r1, #25
 80070e0:	bf48      	it	mi
 80070e2:	b2ad      	uxthmi	r5, r5
 80070e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80070e6:	6033      	str	r3, [r6, #0]
 80070e8:	bf14      	ite	ne
 80070ea:	230a      	movne	r3, #10
 80070ec:	2308      	moveq	r3, #8
 80070ee:	4851      	ldr	r0, [pc, #324]	@ (8007234 <_printf_i+0x238>)
 80070f0:	2100      	movs	r1, #0
 80070f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070f6:	6866      	ldr	r6, [r4, #4]
 80070f8:	2e00      	cmp	r6, #0
 80070fa:	bfa8      	it	ge
 80070fc:	6821      	ldrge	r1, [r4, #0]
 80070fe:	60a6      	str	r6, [r4, #8]
 8007100:	bfa4      	itt	ge
 8007102:	f021 0104 	bicge.w	r1, r1, #4
 8007106:	6021      	strge	r1, [r4, #0]
 8007108:	b90d      	cbnz	r5, 800710e <_printf_i+0x112>
 800710a:	2e00      	cmp	r6, #0
 800710c:	d04b      	beq.n	80071a6 <_printf_i+0x1aa>
 800710e:	4616      	mov	r6, r2
 8007110:	fbb5 f1f3 	udiv	r1, r5, r3
 8007114:	fb03 5711 	mls	r7, r3, r1, r5
 8007118:	5dc7      	ldrb	r7, [r0, r7]
 800711a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800711e:	462f      	mov	r7, r5
 8007120:	42bb      	cmp	r3, r7
 8007122:	460d      	mov	r5, r1
 8007124:	d9f4      	bls.n	8007110 <_printf_i+0x114>
 8007126:	2b08      	cmp	r3, #8
 8007128:	d10b      	bne.n	8007142 <_printf_i+0x146>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	07df      	lsls	r7, r3, #31
 800712e:	d508      	bpl.n	8007142 <_printf_i+0x146>
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	6861      	ldr	r1, [r4, #4]
 8007134:	4299      	cmp	r1, r3
 8007136:	bfde      	ittt	le
 8007138:	2330      	movle	r3, #48	@ 0x30
 800713a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800713e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007142:	1b92      	subs	r2, r2, r6
 8007144:	6122      	str	r2, [r4, #16]
 8007146:	464b      	mov	r3, r9
 8007148:	4621      	mov	r1, r4
 800714a:	4640      	mov	r0, r8
 800714c:	f8cd a000 	str.w	sl, [sp]
 8007150:	aa03      	add	r2, sp, #12
 8007152:	f7ff fee1 	bl	8006f18 <_printf_common>
 8007156:	3001      	adds	r0, #1
 8007158:	d14a      	bne.n	80071f0 <_printf_i+0x1f4>
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	b004      	add	sp, #16
 8007160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	f043 0320 	orr.w	r3, r3, #32
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	2778      	movs	r7, #120	@ 0x78
 800716e:	4832      	ldr	r0, [pc, #200]	@ (8007238 <_printf_i+0x23c>)
 8007170:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	6831      	ldr	r1, [r6, #0]
 8007178:	061f      	lsls	r7, r3, #24
 800717a:	f851 5b04 	ldr.w	r5, [r1], #4
 800717e:	d402      	bmi.n	8007186 <_printf_i+0x18a>
 8007180:	065f      	lsls	r7, r3, #25
 8007182:	bf48      	it	mi
 8007184:	b2ad      	uxthmi	r5, r5
 8007186:	6031      	str	r1, [r6, #0]
 8007188:	07d9      	lsls	r1, r3, #31
 800718a:	bf44      	itt	mi
 800718c:	f043 0320 	orrmi.w	r3, r3, #32
 8007190:	6023      	strmi	r3, [r4, #0]
 8007192:	b11d      	cbz	r5, 800719c <_printf_i+0x1a0>
 8007194:	2310      	movs	r3, #16
 8007196:	e7ab      	b.n	80070f0 <_printf_i+0xf4>
 8007198:	4826      	ldr	r0, [pc, #152]	@ (8007234 <_printf_i+0x238>)
 800719a:	e7e9      	b.n	8007170 <_printf_i+0x174>
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	f023 0320 	bic.w	r3, r3, #32
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	e7f6      	b.n	8007194 <_printf_i+0x198>
 80071a6:	4616      	mov	r6, r2
 80071a8:	e7bd      	b.n	8007126 <_printf_i+0x12a>
 80071aa:	6833      	ldr	r3, [r6, #0]
 80071ac:	6825      	ldr	r5, [r4, #0]
 80071ae:	1d18      	adds	r0, r3, #4
 80071b0:	6961      	ldr	r1, [r4, #20]
 80071b2:	6030      	str	r0, [r6, #0]
 80071b4:	062e      	lsls	r6, r5, #24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	d501      	bpl.n	80071be <_printf_i+0x1c2>
 80071ba:	6019      	str	r1, [r3, #0]
 80071bc:	e002      	b.n	80071c4 <_printf_i+0x1c8>
 80071be:	0668      	lsls	r0, r5, #25
 80071c0:	d5fb      	bpl.n	80071ba <_printf_i+0x1be>
 80071c2:	8019      	strh	r1, [r3, #0]
 80071c4:	2300      	movs	r3, #0
 80071c6:	4616      	mov	r6, r2
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	e7bc      	b.n	8007146 <_printf_i+0x14a>
 80071cc:	6833      	ldr	r3, [r6, #0]
 80071ce:	2100      	movs	r1, #0
 80071d0:	1d1a      	adds	r2, r3, #4
 80071d2:	6032      	str	r2, [r6, #0]
 80071d4:	681e      	ldr	r6, [r3, #0]
 80071d6:	6862      	ldr	r2, [r4, #4]
 80071d8:	4630      	mov	r0, r6
 80071da:	f000 f9d4 	bl	8007586 <memchr>
 80071de:	b108      	cbz	r0, 80071e4 <_printf_i+0x1e8>
 80071e0:	1b80      	subs	r0, r0, r6
 80071e2:	6060      	str	r0, [r4, #4]
 80071e4:	6863      	ldr	r3, [r4, #4]
 80071e6:	6123      	str	r3, [r4, #16]
 80071e8:	2300      	movs	r3, #0
 80071ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ee:	e7aa      	b.n	8007146 <_printf_i+0x14a>
 80071f0:	4632      	mov	r2, r6
 80071f2:	4649      	mov	r1, r9
 80071f4:	4640      	mov	r0, r8
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	47d0      	blx	sl
 80071fa:	3001      	adds	r0, #1
 80071fc:	d0ad      	beq.n	800715a <_printf_i+0x15e>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	079b      	lsls	r3, r3, #30
 8007202:	d413      	bmi.n	800722c <_printf_i+0x230>
 8007204:	68e0      	ldr	r0, [r4, #12]
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	4298      	cmp	r0, r3
 800720a:	bfb8      	it	lt
 800720c:	4618      	movlt	r0, r3
 800720e:	e7a6      	b.n	800715e <_printf_i+0x162>
 8007210:	2301      	movs	r3, #1
 8007212:	4632      	mov	r2, r6
 8007214:	4649      	mov	r1, r9
 8007216:	4640      	mov	r0, r8
 8007218:	47d0      	blx	sl
 800721a:	3001      	adds	r0, #1
 800721c:	d09d      	beq.n	800715a <_printf_i+0x15e>
 800721e:	3501      	adds	r5, #1
 8007220:	68e3      	ldr	r3, [r4, #12]
 8007222:	9903      	ldr	r1, [sp, #12]
 8007224:	1a5b      	subs	r3, r3, r1
 8007226:	42ab      	cmp	r3, r5
 8007228:	dcf2      	bgt.n	8007210 <_printf_i+0x214>
 800722a:	e7eb      	b.n	8007204 <_printf_i+0x208>
 800722c:	2500      	movs	r5, #0
 800722e:	f104 0619 	add.w	r6, r4, #25
 8007232:	e7f5      	b.n	8007220 <_printf_i+0x224>
 8007234:	0800c146 	.word	0x0800c146
 8007238:	0800c157 	.word	0x0800c157

0800723c <std>:
 800723c:	2300      	movs	r3, #0
 800723e:	b510      	push	{r4, lr}
 8007240:	4604      	mov	r4, r0
 8007242:	e9c0 3300 	strd	r3, r3, [r0]
 8007246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800724a:	6083      	str	r3, [r0, #8]
 800724c:	8181      	strh	r1, [r0, #12]
 800724e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007250:	81c2      	strh	r2, [r0, #14]
 8007252:	6183      	str	r3, [r0, #24]
 8007254:	4619      	mov	r1, r3
 8007256:	2208      	movs	r2, #8
 8007258:	305c      	adds	r0, #92	@ 0x5c
 800725a:	f000 f914 	bl	8007486 <memset>
 800725e:	4b0d      	ldr	r3, [pc, #52]	@ (8007294 <std+0x58>)
 8007260:	6224      	str	r4, [r4, #32]
 8007262:	6263      	str	r3, [r4, #36]	@ 0x24
 8007264:	4b0c      	ldr	r3, [pc, #48]	@ (8007298 <std+0x5c>)
 8007266:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007268:	4b0c      	ldr	r3, [pc, #48]	@ (800729c <std+0x60>)
 800726a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800726c:	4b0c      	ldr	r3, [pc, #48]	@ (80072a0 <std+0x64>)
 800726e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <std+0x68>)
 8007272:	429c      	cmp	r4, r3
 8007274:	d006      	beq.n	8007284 <std+0x48>
 8007276:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800727a:	4294      	cmp	r4, r2
 800727c:	d002      	beq.n	8007284 <std+0x48>
 800727e:	33d0      	adds	r3, #208	@ 0xd0
 8007280:	429c      	cmp	r4, r3
 8007282:	d105      	bne.n	8007290 <std+0x54>
 8007284:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800728c:	f000 b978 	b.w	8007580 <__retarget_lock_init_recursive>
 8007290:	bd10      	pop	{r4, pc}
 8007292:	bf00      	nop
 8007294:	08007401 	.word	0x08007401
 8007298:	08007423 	.word	0x08007423
 800729c:	0800745b 	.word	0x0800745b
 80072a0:	0800747f 	.word	0x0800747f
 80072a4:	20000998 	.word	0x20000998

080072a8 <stdio_exit_handler>:
 80072a8:	4a02      	ldr	r2, [pc, #8]	@ (80072b4 <stdio_exit_handler+0xc>)
 80072aa:	4903      	ldr	r1, [pc, #12]	@ (80072b8 <stdio_exit_handler+0x10>)
 80072ac:	4803      	ldr	r0, [pc, #12]	@ (80072bc <stdio_exit_handler+0x14>)
 80072ae:	f000 b869 	b.w	8007384 <_fwalk_sglue>
 80072b2:	bf00      	nop
 80072b4:	20000078 	.word	0x20000078
 80072b8:	08008ef5 	.word	0x08008ef5
 80072bc:	20000088 	.word	0x20000088

080072c0 <cleanup_stdio>:
 80072c0:	6841      	ldr	r1, [r0, #4]
 80072c2:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <cleanup_stdio+0x34>)
 80072c4:	b510      	push	{r4, lr}
 80072c6:	4299      	cmp	r1, r3
 80072c8:	4604      	mov	r4, r0
 80072ca:	d001      	beq.n	80072d0 <cleanup_stdio+0x10>
 80072cc:	f001 fe12 	bl	8008ef4 <_fflush_r>
 80072d0:	68a1      	ldr	r1, [r4, #8]
 80072d2:	4b09      	ldr	r3, [pc, #36]	@ (80072f8 <cleanup_stdio+0x38>)
 80072d4:	4299      	cmp	r1, r3
 80072d6:	d002      	beq.n	80072de <cleanup_stdio+0x1e>
 80072d8:	4620      	mov	r0, r4
 80072da:	f001 fe0b 	bl	8008ef4 <_fflush_r>
 80072de:	68e1      	ldr	r1, [r4, #12]
 80072e0:	4b06      	ldr	r3, [pc, #24]	@ (80072fc <cleanup_stdio+0x3c>)
 80072e2:	4299      	cmp	r1, r3
 80072e4:	d004      	beq.n	80072f0 <cleanup_stdio+0x30>
 80072e6:	4620      	mov	r0, r4
 80072e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ec:	f001 be02 	b.w	8008ef4 <_fflush_r>
 80072f0:	bd10      	pop	{r4, pc}
 80072f2:	bf00      	nop
 80072f4:	20000998 	.word	0x20000998
 80072f8:	20000a00 	.word	0x20000a00
 80072fc:	20000a68 	.word	0x20000a68

08007300 <global_stdio_init.part.0>:
 8007300:	b510      	push	{r4, lr}
 8007302:	4b0b      	ldr	r3, [pc, #44]	@ (8007330 <global_stdio_init.part.0+0x30>)
 8007304:	4c0b      	ldr	r4, [pc, #44]	@ (8007334 <global_stdio_init.part.0+0x34>)
 8007306:	4a0c      	ldr	r2, [pc, #48]	@ (8007338 <global_stdio_init.part.0+0x38>)
 8007308:	4620      	mov	r0, r4
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	2104      	movs	r1, #4
 800730e:	2200      	movs	r2, #0
 8007310:	f7ff ff94 	bl	800723c <std>
 8007314:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007318:	2201      	movs	r2, #1
 800731a:	2109      	movs	r1, #9
 800731c:	f7ff ff8e 	bl	800723c <std>
 8007320:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007324:	2202      	movs	r2, #2
 8007326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800732a:	2112      	movs	r1, #18
 800732c:	f7ff bf86 	b.w	800723c <std>
 8007330:	20000ad0 	.word	0x20000ad0
 8007334:	20000998 	.word	0x20000998
 8007338:	080072a9 	.word	0x080072a9

0800733c <__sfp_lock_acquire>:
 800733c:	4801      	ldr	r0, [pc, #4]	@ (8007344 <__sfp_lock_acquire+0x8>)
 800733e:	f000 b920 	b.w	8007582 <__retarget_lock_acquire_recursive>
 8007342:	bf00      	nop
 8007344:	20000ad9 	.word	0x20000ad9

08007348 <__sfp_lock_release>:
 8007348:	4801      	ldr	r0, [pc, #4]	@ (8007350 <__sfp_lock_release+0x8>)
 800734a:	f000 b91b 	b.w	8007584 <__retarget_lock_release_recursive>
 800734e:	bf00      	nop
 8007350:	20000ad9 	.word	0x20000ad9

08007354 <__sinit>:
 8007354:	b510      	push	{r4, lr}
 8007356:	4604      	mov	r4, r0
 8007358:	f7ff fff0 	bl	800733c <__sfp_lock_acquire>
 800735c:	6a23      	ldr	r3, [r4, #32]
 800735e:	b11b      	cbz	r3, 8007368 <__sinit+0x14>
 8007360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007364:	f7ff bff0 	b.w	8007348 <__sfp_lock_release>
 8007368:	4b04      	ldr	r3, [pc, #16]	@ (800737c <__sinit+0x28>)
 800736a:	6223      	str	r3, [r4, #32]
 800736c:	4b04      	ldr	r3, [pc, #16]	@ (8007380 <__sinit+0x2c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1f5      	bne.n	8007360 <__sinit+0xc>
 8007374:	f7ff ffc4 	bl	8007300 <global_stdio_init.part.0>
 8007378:	e7f2      	b.n	8007360 <__sinit+0xc>
 800737a:	bf00      	nop
 800737c:	080072c1 	.word	0x080072c1
 8007380:	20000ad0 	.word	0x20000ad0

08007384 <_fwalk_sglue>:
 8007384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007388:	4607      	mov	r7, r0
 800738a:	4688      	mov	r8, r1
 800738c:	4614      	mov	r4, r2
 800738e:	2600      	movs	r6, #0
 8007390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007394:	f1b9 0901 	subs.w	r9, r9, #1
 8007398:	d505      	bpl.n	80073a6 <_fwalk_sglue+0x22>
 800739a:	6824      	ldr	r4, [r4, #0]
 800739c:	2c00      	cmp	r4, #0
 800739e:	d1f7      	bne.n	8007390 <_fwalk_sglue+0xc>
 80073a0:	4630      	mov	r0, r6
 80073a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a6:	89ab      	ldrh	r3, [r5, #12]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d907      	bls.n	80073bc <_fwalk_sglue+0x38>
 80073ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073b0:	3301      	adds	r3, #1
 80073b2:	d003      	beq.n	80073bc <_fwalk_sglue+0x38>
 80073b4:	4629      	mov	r1, r5
 80073b6:	4638      	mov	r0, r7
 80073b8:	47c0      	blx	r8
 80073ba:	4306      	orrs	r6, r0
 80073bc:	3568      	adds	r5, #104	@ 0x68
 80073be:	e7e9      	b.n	8007394 <_fwalk_sglue+0x10>

080073c0 <siprintf>:
 80073c0:	b40e      	push	{r1, r2, r3}
 80073c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80073c6:	b500      	push	{lr}
 80073c8:	b09c      	sub	sp, #112	@ 0x70
 80073ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80073cc:	9002      	str	r0, [sp, #8]
 80073ce:	9006      	str	r0, [sp, #24]
 80073d0:	9107      	str	r1, [sp, #28]
 80073d2:	9104      	str	r1, [sp, #16]
 80073d4:	4808      	ldr	r0, [pc, #32]	@ (80073f8 <siprintf+0x38>)
 80073d6:	4909      	ldr	r1, [pc, #36]	@ (80073fc <siprintf+0x3c>)
 80073d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073dc:	9105      	str	r1, [sp, #20]
 80073de:	6800      	ldr	r0, [r0, #0]
 80073e0:	a902      	add	r1, sp, #8
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	f001 fc0a 	bl	8008bfc <_svfiprintf_r>
 80073e8:	2200      	movs	r2, #0
 80073ea:	9b02      	ldr	r3, [sp, #8]
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	b01c      	add	sp, #112	@ 0x70
 80073f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073f4:	b003      	add	sp, #12
 80073f6:	4770      	bx	lr
 80073f8:	20000084 	.word	0x20000084
 80073fc:	ffff0208 	.word	0xffff0208

08007400 <__sread>:
 8007400:	b510      	push	{r4, lr}
 8007402:	460c      	mov	r4, r1
 8007404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007408:	f000 f86c 	bl	80074e4 <_read_r>
 800740c:	2800      	cmp	r0, #0
 800740e:	bfab      	itete	ge
 8007410:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007412:	89a3      	ldrhlt	r3, [r4, #12]
 8007414:	181b      	addge	r3, r3, r0
 8007416:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800741a:	bfac      	ite	ge
 800741c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800741e:	81a3      	strhlt	r3, [r4, #12]
 8007420:	bd10      	pop	{r4, pc}

08007422 <__swrite>:
 8007422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007426:	461f      	mov	r7, r3
 8007428:	898b      	ldrh	r3, [r1, #12]
 800742a:	4605      	mov	r5, r0
 800742c:	05db      	lsls	r3, r3, #23
 800742e:	460c      	mov	r4, r1
 8007430:	4616      	mov	r6, r2
 8007432:	d505      	bpl.n	8007440 <__swrite+0x1e>
 8007434:	2302      	movs	r3, #2
 8007436:	2200      	movs	r2, #0
 8007438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743c:	f000 f840 	bl	80074c0 <_lseek_r>
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	4632      	mov	r2, r6
 8007444:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007448:	81a3      	strh	r3, [r4, #12]
 800744a:	4628      	mov	r0, r5
 800744c:	463b      	mov	r3, r7
 800744e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007456:	f000 b857 	b.w	8007508 <_write_r>

0800745a <__sseek>:
 800745a:	b510      	push	{r4, lr}
 800745c:	460c      	mov	r4, r1
 800745e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007462:	f000 f82d 	bl	80074c0 <_lseek_r>
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	bf15      	itete	ne
 800746c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800746e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007472:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007476:	81a3      	strheq	r3, [r4, #12]
 8007478:	bf18      	it	ne
 800747a:	81a3      	strhne	r3, [r4, #12]
 800747c:	bd10      	pop	{r4, pc}

0800747e <__sclose>:
 800747e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007482:	f000 b80d 	b.w	80074a0 <_close_r>

08007486 <memset>:
 8007486:	4603      	mov	r3, r0
 8007488:	4402      	add	r2, r0
 800748a:	4293      	cmp	r3, r2
 800748c:	d100      	bne.n	8007490 <memset+0xa>
 800748e:	4770      	bx	lr
 8007490:	f803 1b01 	strb.w	r1, [r3], #1
 8007494:	e7f9      	b.n	800748a <memset+0x4>
	...

08007498 <_localeconv_r>:
 8007498:	4800      	ldr	r0, [pc, #0]	@ (800749c <_localeconv_r+0x4>)
 800749a:	4770      	bx	lr
 800749c:	200001c4 	.word	0x200001c4

080074a0 <_close_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	2300      	movs	r3, #0
 80074a4:	4d05      	ldr	r5, [pc, #20]	@ (80074bc <_close_r+0x1c>)
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	f7fb fd37 	bl	8002f1e <_close>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_close_r+0x1a>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_close_r+0x1a>
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	20000ad4 	.word	0x20000ad4

080074c0 <_lseek_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4604      	mov	r4, r0
 80074c4:	4608      	mov	r0, r1
 80074c6:	4611      	mov	r1, r2
 80074c8:	2200      	movs	r2, #0
 80074ca:	4d05      	ldr	r5, [pc, #20]	@ (80074e0 <_lseek_r+0x20>)
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f7fb fd49 	bl	8002f66 <_lseek>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_lseek_r+0x1e>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_lseek_r+0x1e>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20000ad4 	.word	0x20000ad4

080074e4 <_read_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	4611      	mov	r1, r2
 80074ec:	2200      	movs	r2, #0
 80074ee:	4d05      	ldr	r5, [pc, #20]	@ (8007504 <_read_r+0x20>)
 80074f0:	602a      	str	r2, [r5, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f7fb fcda 	bl	8002eac <_read>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_read_r+0x1e>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_read_r+0x1e>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	20000ad4 	.word	0x20000ad4

08007508 <_write_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	4611      	mov	r1, r2
 8007510:	2200      	movs	r2, #0
 8007512:	4d05      	ldr	r5, [pc, #20]	@ (8007528 <_write_r+0x20>)
 8007514:	602a      	str	r2, [r5, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	f7fb fce5 	bl	8002ee6 <_write>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <_write_r+0x1e>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	b103      	cbz	r3, 8007526 <_write_r+0x1e>
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	20000ad4 	.word	0x20000ad4

0800752c <__errno>:
 800752c:	4b01      	ldr	r3, [pc, #4]	@ (8007534 <__errno+0x8>)
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20000084 	.word	0x20000084

08007538 <__libc_init_array>:
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	2600      	movs	r6, #0
 800753c:	4d0c      	ldr	r5, [pc, #48]	@ (8007570 <__libc_init_array+0x38>)
 800753e:	4c0d      	ldr	r4, [pc, #52]	@ (8007574 <__libc_init_array+0x3c>)
 8007540:	1b64      	subs	r4, r4, r5
 8007542:	10a4      	asrs	r4, r4, #2
 8007544:	42a6      	cmp	r6, r4
 8007546:	d109      	bne.n	800755c <__libc_init_array+0x24>
 8007548:	f002 f870 	bl	800962c <_init>
 800754c:	2600      	movs	r6, #0
 800754e:	4d0a      	ldr	r5, [pc, #40]	@ (8007578 <__libc_init_array+0x40>)
 8007550:	4c0a      	ldr	r4, [pc, #40]	@ (800757c <__libc_init_array+0x44>)
 8007552:	1b64      	subs	r4, r4, r5
 8007554:	10a4      	asrs	r4, r4, #2
 8007556:	42a6      	cmp	r6, r4
 8007558:	d105      	bne.n	8007566 <__libc_init_array+0x2e>
 800755a:	bd70      	pop	{r4, r5, r6, pc}
 800755c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007560:	4798      	blx	r3
 8007562:	3601      	adds	r6, #1
 8007564:	e7ee      	b.n	8007544 <__libc_init_array+0xc>
 8007566:	f855 3b04 	ldr.w	r3, [r5], #4
 800756a:	4798      	blx	r3
 800756c:	3601      	adds	r6, #1
 800756e:	e7f2      	b.n	8007556 <__libc_init_array+0x1e>
 8007570:	0800c4b0 	.word	0x0800c4b0
 8007574:	0800c4b0 	.word	0x0800c4b0
 8007578:	0800c4b0 	.word	0x0800c4b0
 800757c:	0800c4b8 	.word	0x0800c4b8

08007580 <__retarget_lock_init_recursive>:
 8007580:	4770      	bx	lr

08007582 <__retarget_lock_acquire_recursive>:
 8007582:	4770      	bx	lr

08007584 <__retarget_lock_release_recursive>:
 8007584:	4770      	bx	lr

08007586 <memchr>:
 8007586:	4603      	mov	r3, r0
 8007588:	b510      	push	{r4, lr}
 800758a:	b2c9      	uxtb	r1, r1
 800758c:	4402      	add	r2, r0
 800758e:	4293      	cmp	r3, r2
 8007590:	4618      	mov	r0, r3
 8007592:	d101      	bne.n	8007598 <memchr+0x12>
 8007594:	2000      	movs	r0, #0
 8007596:	e003      	b.n	80075a0 <memchr+0x1a>
 8007598:	7804      	ldrb	r4, [r0, #0]
 800759a:	3301      	adds	r3, #1
 800759c:	428c      	cmp	r4, r1
 800759e:	d1f6      	bne.n	800758e <memchr+0x8>
 80075a0:	bd10      	pop	{r4, pc}

080075a2 <quorem>:
 80075a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a6:	6903      	ldr	r3, [r0, #16]
 80075a8:	690c      	ldr	r4, [r1, #16]
 80075aa:	4607      	mov	r7, r0
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	db7e      	blt.n	80076ae <quorem+0x10c>
 80075b0:	3c01      	subs	r4, #1
 80075b2:	00a3      	lsls	r3, r4, #2
 80075b4:	f100 0514 	add.w	r5, r0, #20
 80075b8:	f101 0814 	add.w	r8, r1, #20
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075cc:	3301      	adds	r3, #1
 80075ce:	429a      	cmp	r2, r3
 80075d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80075d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075d8:	d32e      	bcc.n	8007638 <quorem+0x96>
 80075da:	f04f 0a00 	mov.w	sl, #0
 80075de:	46c4      	mov	ip, r8
 80075e0:	46ae      	mov	lr, r5
 80075e2:	46d3      	mov	fp, sl
 80075e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075e8:	b298      	uxth	r0, r3
 80075ea:	fb06 a000 	mla	r0, r6, r0, sl
 80075ee:	0c1b      	lsrs	r3, r3, #16
 80075f0:	0c02      	lsrs	r2, r0, #16
 80075f2:	fb06 2303 	mla	r3, r6, r3, r2
 80075f6:	f8de 2000 	ldr.w	r2, [lr]
 80075fa:	b280      	uxth	r0, r0
 80075fc:	b292      	uxth	r2, r2
 80075fe:	1a12      	subs	r2, r2, r0
 8007600:	445a      	add	r2, fp
 8007602:	f8de 0000 	ldr.w	r0, [lr]
 8007606:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800760a:	b29b      	uxth	r3, r3
 800760c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007610:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007614:	b292      	uxth	r2, r2
 8007616:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800761a:	45e1      	cmp	r9, ip
 800761c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007620:	f84e 2b04 	str.w	r2, [lr], #4
 8007624:	d2de      	bcs.n	80075e4 <quorem+0x42>
 8007626:	9b00      	ldr	r3, [sp, #0]
 8007628:	58eb      	ldr	r3, [r5, r3]
 800762a:	b92b      	cbnz	r3, 8007638 <quorem+0x96>
 800762c:	9b01      	ldr	r3, [sp, #4]
 800762e:	3b04      	subs	r3, #4
 8007630:	429d      	cmp	r5, r3
 8007632:	461a      	mov	r2, r3
 8007634:	d32f      	bcc.n	8007696 <quorem+0xf4>
 8007636:	613c      	str	r4, [r7, #16]
 8007638:	4638      	mov	r0, r7
 800763a:	f001 f97b 	bl	8008934 <__mcmp>
 800763e:	2800      	cmp	r0, #0
 8007640:	db25      	blt.n	800768e <quorem+0xec>
 8007642:	4629      	mov	r1, r5
 8007644:	2000      	movs	r0, #0
 8007646:	f858 2b04 	ldr.w	r2, [r8], #4
 800764a:	f8d1 c000 	ldr.w	ip, [r1]
 800764e:	fa1f fe82 	uxth.w	lr, r2
 8007652:	fa1f f38c 	uxth.w	r3, ip
 8007656:	eba3 030e 	sub.w	r3, r3, lr
 800765a:	4403      	add	r3, r0
 800765c:	0c12      	lsrs	r2, r2, #16
 800765e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007662:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007666:	b29b      	uxth	r3, r3
 8007668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800766c:	45c1      	cmp	r9, r8
 800766e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007672:	f841 3b04 	str.w	r3, [r1], #4
 8007676:	d2e6      	bcs.n	8007646 <quorem+0xa4>
 8007678:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800767c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007680:	b922      	cbnz	r2, 800768c <quorem+0xea>
 8007682:	3b04      	subs	r3, #4
 8007684:	429d      	cmp	r5, r3
 8007686:	461a      	mov	r2, r3
 8007688:	d30b      	bcc.n	80076a2 <quorem+0x100>
 800768a:	613c      	str	r4, [r7, #16]
 800768c:	3601      	adds	r6, #1
 800768e:	4630      	mov	r0, r6
 8007690:	b003      	add	sp, #12
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	6812      	ldr	r2, [r2, #0]
 8007698:	3b04      	subs	r3, #4
 800769a:	2a00      	cmp	r2, #0
 800769c:	d1cb      	bne.n	8007636 <quorem+0x94>
 800769e:	3c01      	subs	r4, #1
 80076a0:	e7c6      	b.n	8007630 <quorem+0x8e>
 80076a2:	6812      	ldr	r2, [r2, #0]
 80076a4:	3b04      	subs	r3, #4
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	d1ef      	bne.n	800768a <quorem+0xe8>
 80076aa:	3c01      	subs	r4, #1
 80076ac:	e7ea      	b.n	8007684 <quorem+0xe2>
 80076ae:	2000      	movs	r0, #0
 80076b0:	e7ee      	b.n	8007690 <quorem+0xee>
 80076b2:	0000      	movs	r0, r0
 80076b4:	0000      	movs	r0, r0
	...

080076b8 <_dtoa_r>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	4614      	mov	r4, r2
 80076be:	461d      	mov	r5, r3
 80076c0:	69c7      	ldr	r7, [r0, #28]
 80076c2:	b097      	sub	sp, #92	@ 0x5c
 80076c4:	4683      	mov	fp, r0
 80076c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80076ca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80076cc:	b97f      	cbnz	r7, 80076ee <_dtoa_r+0x36>
 80076ce:	2010      	movs	r0, #16
 80076d0:	f000 fe02 	bl	80082d8 <malloc>
 80076d4:	4602      	mov	r2, r0
 80076d6:	f8cb 001c 	str.w	r0, [fp, #28]
 80076da:	b920      	cbnz	r0, 80076e6 <_dtoa_r+0x2e>
 80076dc:	21ef      	movs	r1, #239	@ 0xef
 80076de:	4ba8      	ldr	r3, [pc, #672]	@ (8007980 <_dtoa_r+0x2c8>)
 80076e0:	48a8      	ldr	r0, [pc, #672]	@ (8007984 <_dtoa_r+0x2cc>)
 80076e2:	f001 fc67 	bl	8008fb4 <__assert_func>
 80076e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80076ea:	6007      	str	r7, [r0, #0]
 80076ec:	60c7      	str	r7, [r0, #12]
 80076ee:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076f2:	6819      	ldr	r1, [r3, #0]
 80076f4:	b159      	cbz	r1, 800770e <_dtoa_r+0x56>
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	2301      	movs	r3, #1
 80076fa:	4093      	lsls	r3, r2
 80076fc:	604a      	str	r2, [r1, #4]
 80076fe:	608b      	str	r3, [r1, #8]
 8007700:	4658      	mov	r0, fp
 8007702:	f000 fedf 	bl	80084c4 <_Bfree>
 8007706:	2200      	movs	r2, #0
 8007708:	f8db 301c 	ldr.w	r3, [fp, #28]
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	1e2b      	subs	r3, r5, #0
 8007710:	bfaf      	iteee	ge
 8007712:	2300      	movge	r3, #0
 8007714:	2201      	movlt	r2, #1
 8007716:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800771a:	9303      	strlt	r3, [sp, #12]
 800771c:	bfa8      	it	ge
 800771e:	6033      	strge	r3, [r6, #0]
 8007720:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007724:	4b98      	ldr	r3, [pc, #608]	@ (8007988 <_dtoa_r+0x2d0>)
 8007726:	bfb8      	it	lt
 8007728:	6032      	strlt	r2, [r6, #0]
 800772a:	ea33 0308 	bics.w	r3, r3, r8
 800772e:	d112      	bne.n	8007756 <_dtoa_r+0x9e>
 8007730:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007734:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800773c:	4323      	orrs	r3, r4
 800773e:	f000 8550 	beq.w	80081e2 <_dtoa_r+0xb2a>
 8007742:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007744:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800798c <_dtoa_r+0x2d4>
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 8552 	beq.w	80081f2 <_dtoa_r+0xb3a>
 800774e:	f10a 0303 	add.w	r3, sl, #3
 8007752:	f000 bd4c 	b.w	80081ee <_dtoa_r+0xb36>
 8007756:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800775a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800775e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007762:	2200      	movs	r2, #0
 8007764:	2300      	movs	r3, #0
 8007766:	f7f9 f91f 	bl	80009a8 <__aeabi_dcmpeq>
 800776a:	4607      	mov	r7, r0
 800776c:	b158      	cbz	r0, 8007786 <_dtoa_r+0xce>
 800776e:	2301      	movs	r3, #1
 8007770:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007776:	b113      	cbz	r3, 800777e <_dtoa_r+0xc6>
 8007778:	4b85      	ldr	r3, [pc, #532]	@ (8007990 <_dtoa_r+0x2d8>)
 800777a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007994 <_dtoa_r+0x2dc>
 8007782:	f000 bd36 	b.w	80081f2 <_dtoa_r+0xb3a>
 8007786:	ab14      	add	r3, sp, #80	@ 0x50
 8007788:	9301      	str	r3, [sp, #4]
 800778a:	ab15      	add	r3, sp, #84	@ 0x54
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	4658      	mov	r0, fp
 8007790:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007794:	f001 f97e 	bl	8008a94 <__d2b>
 8007798:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800779c:	4681      	mov	r9, r0
 800779e:	2e00      	cmp	r6, #0
 80077a0:	d077      	beq.n	8007892 <_dtoa_r+0x1da>
 80077a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077a8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80077ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077b0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80077b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80077b8:	9712      	str	r7, [sp, #72]	@ 0x48
 80077ba:	4619      	mov	r1, r3
 80077bc:	2200      	movs	r2, #0
 80077be:	4b76      	ldr	r3, [pc, #472]	@ (8007998 <_dtoa_r+0x2e0>)
 80077c0:	f7f8 fcd2 	bl	8000168 <__aeabi_dsub>
 80077c4:	a368      	add	r3, pc, #416	@ (adr r3, 8007968 <_dtoa_r+0x2b0>)
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	f7f8 fe85 	bl	80004d8 <__aeabi_dmul>
 80077ce:	a368      	add	r3, pc, #416	@ (adr r3, 8007970 <_dtoa_r+0x2b8>)
 80077d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d4:	f7f8 fcca 	bl	800016c <__adddf3>
 80077d8:	4604      	mov	r4, r0
 80077da:	4630      	mov	r0, r6
 80077dc:	460d      	mov	r5, r1
 80077de:	f7f8 fe11 	bl	8000404 <__aeabi_i2d>
 80077e2:	a365      	add	r3, pc, #404	@ (adr r3, 8007978 <_dtoa_r+0x2c0>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	f7f8 fe76 	bl	80004d8 <__aeabi_dmul>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4620      	mov	r0, r4
 80077f2:	4629      	mov	r1, r5
 80077f4:	f7f8 fcba 	bl	800016c <__adddf3>
 80077f8:	4604      	mov	r4, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	f7f9 f91c 	bl	8000a38 <__aeabi_d2iz>
 8007800:	2200      	movs	r2, #0
 8007802:	4607      	mov	r7, r0
 8007804:	2300      	movs	r3, #0
 8007806:	4620      	mov	r0, r4
 8007808:	4629      	mov	r1, r5
 800780a:	f7f9 f8d7 	bl	80009bc <__aeabi_dcmplt>
 800780e:	b140      	cbz	r0, 8007822 <_dtoa_r+0x16a>
 8007810:	4638      	mov	r0, r7
 8007812:	f7f8 fdf7 	bl	8000404 <__aeabi_i2d>
 8007816:	4622      	mov	r2, r4
 8007818:	462b      	mov	r3, r5
 800781a:	f7f9 f8c5 	bl	80009a8 <__aeabi_dcmpeq>
 800781e:	b900      	cbnz	r0, 8007822 <_dtoa_r+0x16a>
 8007820:	3f01      	subs	r7, #1
 8007822:	2f16      	cmp	r7, #22
 8007824:	d853      	bhi.n	80078ce <_dtoa_r+0x216>
 8007826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800782a:	4b5c      	ldr	r3, [pc, #368]	@ (800799c <_dtoa_r+0x2e4>)
 800782c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f7f9 f8c2 	bl	80009bc <__aeabi_dcmplt>
 8007838:	2800      	cmp	r0, #0
 800783a:	d04a      	beq.n	80078d2 <_dtoa_r+0x21a>
 800783c:	2300      	movs	r3, #0
 800783e:	3f01      	subs	r7, #1
 8007840:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007842:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007844:	1b9b      	subs	r3, r3, r6
 8007846:	1e5a      	subs	r2, r3, #1
 8007848:	bf46      	itte	mi
 800784a:	f1c3 0801 	rsbmi	r8, r3, #1
 800784e:	2300      	movmi	r3, #0
 8007850:	f04f 0800 	movpl.w	r8, #0
 8007854:	9209      	str	r2, [sp, #36]	@ 0x24
 8007856:	bf48      	it	mi
 8007858:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800785a:	2f00      	cmp	r7, #0
 800785c:	db3b      	blt.n	80078d6 <_dtoa_r+0x21e>
 800785e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007860:	970e      	str	r7, [sp, #56]	@ 0x38
 8007862:	443b      	add	r3, r7
 8007864:	9309      	str	r3, [sp, #36]	@ 0x24
 8007866:	2300      	movs	r3, #0
 8007868:	930a      	str	r3, [sp, #40]	@ 0x28
 800786a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800786c:	2b09      	cmp	r3, #9
 800786e:	d866      	bhi.n	800793e <_dtoa_r+0x286>
 8007870:	2b05      	cmp	r3, #5
 8007872:	bfc4      	itt	gt
 8007874:	3b04      	subgt	r3, #4
 8007876:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007878:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800787a:	bfc8      	it	gt
 800787c:	2400      	movgt	r4, #0
 800787e:	f1a3 0302 	sub.w	r3, r3, #2
 8007882:	bfd8      	it	le
 8007884:	2401      	movle	r4, #1
 8007886:	2b03      	cmp	r3, #3
 8007888:	d864      	bhi.n	8007954 <_dtoa_r+0x29c>
 800788a:	e8df f003 	tbb	[pc, r3]
 800788e:	382b      	.short	0x382b
 8007890:	5636      	.short	0x5636
 8007892:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007896:	441e      	add	r6, r3
 8007898:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800789c:	2b20      	cmp	r3, #32
 800789e:	bfc1      	itttt	gt
 80078a0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80078a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80078a8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80078ac:	fa24 f303 	lsrgt.w	r3, r4, r3
 80078b0:	bfd6      	itet	le
 80078b2:	f1c3 0320 	rsble	r3, r3, #32
 80078b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80078ba:	fa04 f003 	lslle.w	r0, r4, r3
 80078be:	f7f8 fd91 	bl	80003e4 <__aeabi_ui2d>
 80078c2:	2201      	movs	r2, #1
 80078c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80078c8:	3e01      	subs	r6, #1
 80078ca:	9212      	str	r2, [sp, #72]	@ 0x48
 80078cc:	e775      	b.n	80077ba <_dtoa_r+0x102>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e7b6      	b.n	8007840 <_dtoa_r+0x188>
 80078d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80078d4:	e7b5      	b.n	8007842 <_dtoa_r+0x18a>
 80078d6:	427b      	negs	r3, r7
 80078d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80078da:	2300      	movs	r3, #0
 80078dc:	eba8 0807 	sub.w	r8, r8, r7
 80078e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80078e2:	e7c2      	b.n	800786a <_dtoa_r+0x1b2>
 80078e4:	2300      	movs	r3, #0
 80078e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dc35      	bgt.n	800795a <_dtoa_r+0x2a2>
 80078ee:	2301      	movs	r3, #1
 80078f0:	461a      	mov	r2, r3
 80078f2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80078f6:	9221      	str	r2, [sp, #132]	@ 0x84
 80078f8:	e00b      	b.n	8007912 <_dtoa_r+0x25a>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e7f3      	b.n	80078e6 <_dtoa_r+0x22e>
 80078fe:	2300      	movs	r3, #0
 8007900:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007902:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007904:	18fb      	adds	r3, r7, r3
 8007906:	9308      	str	r3, [sp, #32]
 8007908:	3301      	adds	r3, #1
 800790a:	2b01      	cmp	r3, #1
 800790c:	9307      	str	r3, [sp, #28]
 800790e:	bfb8      	it	lt
 8007910:	2301      	movlt	r3, #1
 8007912:	2100      	movs	r1, #0
 8007914:	2204      	movs	r2, #4
 8007916:	f8db 001c 	ldr.w	r0, [fp, #28]
 800791a:	f102 0514 	add.w	r5, r2, #20
 800791e:	429d      	cmp	r5, r3
 8007920:	d91f      	bls.n	8007962 <_dtoa_r+0x2aa>
 8007922:	6041      	str	r1, [r0, #4]
 8007924:	4658      	mov	r0, fp
 8007926:	f000 fd8d 	bl	8008444 <_Balloc>
 800792a:	4682      	mov	sl, r0
 800792c:	2800      	cmp	r0, #0
 800792e:	d139      	bne.n	80079a4 <_dtoa_r+0x2ec>
 8007930:	4602      	mov	r2, r0
 8007932:	f240 11af 	movw	r1, #431	@ 0x1af
 8007936:	4b1a      	ldr	r3, [pc, #104]	@ (80079a0 <_dtoa_r+0x2e8>)
 8007938:	e6d2      	b.n	80076e0 <_dtoa_r+0x28>
 800793a:	2301      	movs	r3, #1
 800793c:	e7e0      	b.n	8007900 <_dtoa_r+0x248>
 800793e:	2401      	movs	r4, #1
 8007940:	2300      	movs	r3, #0
 8007942:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007944:	9320      	str	r3, [sp, #128]	@ 0x80
 8007946:	f04f 33ff 	mov.w	r3, #4294967295
 800794a:	2200      	movs	r2, #0
 800794c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007950:	2312      	movs	r3, #18
 8007952:	e7d0      	b.n	80078f6 <_dtoa_r+0x23e>
 8007954:	2301      	movs	r3, #1
 8007956:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007958:	e7f5      	b.n	8007946 <_dtoa_r+0x28e>
 800795a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800795c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007960:	e7d7      	b.n	8007912 <_dtoa_r+0x25a>
 8007962:	3101      	adds	r1, #1
 8007964:	0052      	lsls	r2, r2, #1
 8007966:	e7d8      	b.n	800791a <_dtoa_r+0x262>
 8007968:	636f4361 	.word	0x636f4361
 800796c:	3fd287a7 	.word	0x3fd287a7
 8007970:	8b60c8b3 	.word	0x8b60c8b3
 8007974:	3fc68a28 	.word	0x3fc68a28
 8007978:	509f79fb 	.word	0x509f79fb
 800797c:	3fd34413 	.word	0x3fd34413
 8007980:	0800c175 	.word	0x0800c175
 8007984:	0800c18c 	.word	0x0800c18c
 8007988:	7ff00000 	.word	0x7ff00000
 800798c:	0800c171 	.word	0x0800c171
 8007990:	0800c145 	.word	0x0800c145
 8007994:	0800c144 	.word	0x0800c144
 8007998:	3ff80000 	.word	0x3ff80000
 800799c:	0800c288 	.word	0x0800c288
 80079a0:	0800c1e4 	.word	0x0800c1e4
 80079a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079a8:	6018      	str	r0, [r3, #0]
 80079aa:	9b07      	ldr	r3, [sp, #28]
 80079ac:	2b0e      	cmp	r3, #14
 80079ae:	f200 80a4 	bhi.w	8007afa <_dtoa_r+0x442>
 80079b2:	2c00      	cmp	r4, #0
 80079b4:	f000 80a1 	beq.w	8007afa <_dtoa_r+0x442>
 80079b8:	2f00      	cmp	r7, #0
 80079ba:	dd33      	ble.n	8007a24 <_dtoa_r+0x36c>
 80079bc:	4b86      	ldr	r3, [pc, #536]	@ (8007bd8 <_dtoa_r+0x520>)
 80079be:	f007 020f 	and.w	r2, r7, #15
 80079c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079c6:	05f8      	lsls	r0, r7, #23
 80079c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80079d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80079d4:	d516      	bpl.n	8007a04 <_dtoa_r+0x34c>
 80079d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079da:	4b80      	ldr	r3, [pc, #512]	@ (8007bdc <_dtoa_r+0x524>)
 80079dc:	2603      	movs	r6, #3
 80079de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079e2:	f7f8 fea3 	bl	800072c <__aeabi_ddiv>
 80079e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079ea:	f004 040f 	and.w	r4, r4, #15
 80079ee:	4d7b      	ldr	r5, [pc, #492]	@ (8007bdc <_dtoa_r+0x524>)
 80079f0:	b954      	cbnz	r4, 8007a08 <_dtoa_r+0x350>
 80079f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079fa:	f7f8 fe97 	bl	800072c <__aeabi_ddiv>
 80079fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a02:	e028      	b.n	8007a56 <_dtoa_r+0x39e>
 8007a04:	2602      	movs	r6, #2
 8007a06:	e7f2      	b.n	80079ee <_dtoa_r+0x336>
 8007a08:	07e1      	lsls	r1, r4, #31
 8007a0a:	d508      	bpl.n	8007a1e <_dtoa_r+0x366>
 8007a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a14:	f7f8 fd60 	bl	80004d8 <__aeabi_dmul>
 8007a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a1c:	3601      	adds	r6, #1
 8007a1e:	1064      	asrs	r4, r4, #1
 8007a20:	3508      	adds	r5, #8
 8007a22:	e7e5      	b.n	80079f0 <_dtoa_r+0x338>
 8007a24:	f000 80d2 	beq.w	8007bcc <_dtoa_r+0x514>
 8007a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a2c:	427c      	negs	r4, r7
 8007a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8007bd8 <_dtoa_r+0x520>)
 8007a30:	f004 020f 	and.w	r2, r4, #15
 8007a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f7f8 fd4c 	bl	80004d8 <__aeabi_dmul>
 8007a40:	2602      	movs	r6, #2
 8007a42:	2300      	movs	r3, #0
 8007a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a48:	4d64      	ldr	r5, [pc, #400]	@ (8007bdc <_dtoa_r+0x524>)
 8007a4a:	1124      	asrs	r4, r4, #4
 8007a4c:	2c00      	cmp	r4, #0
 8007a4e:	f040 80b2 	bne.w	8007bb6 <_dtoa_r+0x4fe>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1d3      	bne.n	80079fe <_dtoa_r+0x346>
 8007a56:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 80b7 	beq.w	8007bd0 <_dtoa_r+0x518>
 8007a62:	2200      	movs	r2, #0
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	4b5d      	ldr	r3, [pc, #372]	@ (8007be0 <_dtoa_r+0x528>)
 8007a6a:	f7f8 ffa7 	bl	80009bc <__aeabi_dcmplt>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	f000 80ae 	beq.w	8007bd0 <_dtoa_r+0x518>
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 80aa 	beq.w	8007bd0 <_dtoa_r+0x518>
 8007a7c:	9b08      	ldr	r3, [sp, #32]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	dd37      	ble.n	8007af2 <_dtoa_r+0x43a>
 8007a82:	1e7b      	subs	r3, r7, #1
 8007a84:	4620      	mov	r0, r4
 8007a86:	9304      	str	r3, [sp, #16]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	4b55      	ldr	r3, [pc, #340]	@ (8007be4 <_dtoa_r+0x52c>)
 8007a8e:	f7f8 fd23 	bl	80004d8 <__aeabi_dmul>
 8007a92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a96:	9c08      	ldr	r4, [sp, #32]
 8007a98:	3601      	adds	r6, #1
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7f8 fcb2 	bl	8000404 <__aeabi_i2d>
 8007aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007aa4:	f7f8 fd18 	bl	80004d8 <__aeabi_dmul>
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4b4f      	ldr	r3, [pc, #316]	@ (8007be8 <_dtoa_r+0x530>)
 8007aac:	f7f8 fb5e 	bl	800016c <__adddf3>
 8007ab0:	4605      	mov	r5, r0
 8007ab2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ab6:	2c00      	cmp	r4, #0
 8007ab8:	f040 809a 	bne.w	8007bf0 <_dtoa_r+0x538>
 8007abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8007bec <_dtoa_r+0x534>)
 8007ac4:	f7f8 fb50 	bl	8000168 <__aeabi_dsub>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ad0:	462a      	mov	r2, r5
 8007ad2:	4633      	mov	r3, r6
 8007ad4:	f7f8 ff90 	bl	80009f8 <__aeabi_dcmpgt>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	f040 828e 	bne.w	8007ffa <_dtoa_r+0x942>
 8007ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ae8:	f7f8 ff68 	bl	80009bc <__aeabi_dcmplt>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f040 8127 	bne.w	8007d40 <_dtoa_r+0x688>
 8007af2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007af6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007afa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f2c0 8163 	blt.w	8007dc8 <_dtoa_r+0x710>
 8007b02:	2f0e      	cmp	r7, #14
 8007b04:	f300 8160 	bgt.w	8007dc8 <_dtoa_r+0x710>
 8007b08:	4b33      	ldr	r3, [pc, #204]	@ (8007bd8 <_dtoa_r+0x520>)
 8007b0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	da03      	bge.n	8007b24 <_dtoa_r+0x46c>
 8007b1c:	9b07      	ldr	r3, [sp, #28]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f340 8100 	ble.w	8007d24 <_dtoa_r+0x66c>
 8007b24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b28:	4656      	mov	r6, sl
 8007b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b2e:	4620      	mov	r0, r4
 8007b30:	4629      	mov	r1, r5
 8007b32:	f7f8 fdfb 	bl	800072c <__aeabi_ddiv>
 8007b36:	f7f8 ff7f 	bl	8000a38 <__aeabi_d2iz>
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	f7f8 fc62 	bl	8000404 <__aeabi_i2d>
 8007b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b44:	f7f8 fcc8 	bl	80004d8 <__aeabi_dmul>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	4629      	mov	r1, r5
 8007b50:	f7f8 fb0a 	bl	8000168 <__aeabi_dsub>
 8007b54:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007b58:	9d07      	ldr	r5, [sp, #28]
 8007b5a:	f806 4b01 	strb.w	r4, [r6], #1
 8007b5e:	eba6 040a 	sub.w	r4, r6, sl
 8007b62:	42a5      	cmp	r5, r4
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	f040 8116 	bne.w	8007d98 <_dtoa_r+0x6e0>
 8007b6c:	f7f8 fafe 	bl	800016c <__adddf3>
 8007b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b74:	4604      	mov	r4, r0
 8007b76:	460d      	mov	r5, r1
 8007b78:	f7f8 ff3e 	bl	80009f8 <__aeabi_dcmpgt>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	f040 80f8 	bne.w	8007d72 <_dtoa_r+0x6ba>
 8007b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b86:	4620      	mov	r0, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7f8 ff0d 	bl	80009a8 <__aeabi_dcmpeq>
 8007b8e:	b118      	cbz	r0, 8007b98 <_dtoa_r+0x4e0>
 8007b90:	f018 0f01 	tst.w	r8, #1
 8007b94:	f040 80ed 	bne.w	8007d72 <_dtoa_r+0x6ba>
 8007b98:	4649      	mov	r1, r9
 8007b9a:	4658      	mov	r0, fp
 8007b9c:	f000 fc92 	bl	80084c4 <_Bfree>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	7033      	strb	r3, [r6, #0]
 8007ba4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007ba6:	3701      	adds	r7, #1
 8007ba8:	601f      	str	r7, [r3, #0]
 8007baa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 8320 	beq.w	80081f2 <_dtoa_r+0xb3a>
 8007bb2:	601e      	str	r6, [r3, #0]
 8007bb4:	e31d      	b.n	80081f2 <_dtoa_r+0xb3a>
 8007bb6:	07e2      	lsls	r2, r4, #31
 8007bb8:	d505      	bpl.n	8007bc6 <_dtoa_r+0x50e>
 8007bba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bbe:	f7f8 fc8b 	bl	80004d8 <__aeabi_dmul>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	1064      	asrs	r4, r4, #1
 8007bc8:	3508      	adds	r5, #8
 8007bca:	e73f      	b.n	8007a4c <_dtoa_r+0x394>
 8007bcc:	2602      	movs	r6, #2
 8007bce:	e742      	b.n	8007a56 <_dtoa_r+0x39e>
 8007bd0:	9c07      	ldr	r4, [sp, #28]
 8007bd2:	9704      	str	r7, [sp, #16]
 8007bd4:	e761      	b.n	8007a9a <_dtoa_r+0x3e2>
 8007bd6:	bf00      	nop
 8007bd8:	0800c288 	.word	0x0800c288
 8007bdc:	0800c260 	.word	0x0800c260
 8007be0:	3ff00000 	.word	0x3ff00000
 8007be4:	40240000 	.word	0x40240000
 8007be8:	401c0000 	.word	0x401c0000
 8007bec:	40140000 	.word	0x40140000
 8007bf0:	4b70      	ldr	r3, [pc, #448]	@ (8007db4 <_dtoa_r+0x6fc>)
 8007bf2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bfc:	4454      	add	r4, sl
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	d045      	beq.n	8007c8e <_dtoa_r+0x5d6>
 8007c02:	2000      	movs	r0, #0
 8007c04:	496c      	ldr	r1, [pc, #432]	@ (8007db8 <_dtoa_r+0x700>)
 8007c06:	f7f8 fd91 	bl	800072c <__aeabi_ddiv>
 8007c0a:	4633      	mov	r3, r6
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	f7f8 faab 	bl	8000168 <__aeabi_dsub>
 8007c12:	4656      	mov	r6, sl
 8007c14:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c1c:	f7f8 ff0c 	bl	8000a38 <__aeabi_d2iz>
 8007c20:	4605      	mov	r5, r0
 8007c22:	f7f8 fbef 	bl	8000404 <__aeabi_i2d>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2e:	f7f8 fa9b 	bl	8000168 <__aeabi_dsub>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	3530      	adds	r5, #48	@ 0x30
 8007c38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c40:	f806 5b01 	strb.w	r5, [r6], #1
 8007c44:	f7f8 feba 	bl	80009bc <__aeabi_dcmplt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d163      	bne.n	8007d14 <_dtoa_r+0x65c>
 8007c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c50:	2000      	movs	r0, #0
 8007c52:	495a      	ldr	r1, [pc, #360]	@ (8007dbc <_dtoa_r+0x704>)
 8007c54:	f7f8 fa88 	bl	8000168 <__aeabi_dsub>
 8007c58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c5c:	f7f8 feae 	bl	80009bc <__aeabi_dcmplt>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	f040 8087 	bne.w	8007d74 <_dtoa_r+0x6bc>
 8007c66:	42a6      	cmp	r6, r4
 8007c68:	f43f af43 	beq.w	8007af2 <_dtoa_r+0x43a>
 8007c6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c70:	2200      	movs	r2, #0
 8007c72:	4b53      	ldr	r3, [pc, #332]	@ (8007dc0 <_dtoa_r+0x708>)
 8007c74:	f7f8 fc30 	bl	80004d8 <__aeabi_dmul>
 8007c78:	2200      	movs	r2, #0
 8007c7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c82:	4b4f      	ldr	r3, [pc, #316]	@ (8007dc0 <_dtoa_r+0x708>)
 8007c84:	f7f8 fc28 	bl	80004d8 <__aeabi_dmul>
 8007c88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c8c:	e7c4      	b.n	8007c18 <_dtoa_r+0x560>
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	f7f8 fc21 	bl	80004d8 <__aeabi_dmul>
 8007c96:	4656      	mov	r6, sl
 8007c98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c9c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca2:	f7f8 fec9 	bl	8000a38 <__aeabi_d2iz>
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	f7f8 fbac 	bl	8000404 <__aeabi_i2d>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cb4:	f7f8 fa58 	bl	8000168 <__aeabi_dsub>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	3530      	adds	r5, #48	@ 0x30
 8007cbe:	f806 5b01 	strb.w	r5, [r6], #1
 8007cc2:	42a6      	cmp	r6, r4
 8007cc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cc8:	f04f 0200 	mov.w	r2, #0
 8007ccc:	d124      	bne.n	8007d18 <_dtoa_r+0x660>
 8007cce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cd2:	4b39      	ldr	r3, [pc, #228]	@ (8007db8 <_dtoa_r+0x700>)
 8007cd4:	f7f8 fa4a 	bl	800016c <__adddf3>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce0:	f7f8 fe8a 	bl	80009f8 <__aeabi_dcmpgt>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d145      	bne.n	8007d74 <_dtoa_r+0x6bc>
 8007ce8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cec:	2000      	movs	r0, #0
 8007cee:	4932      	ldr	r1, [pc, #200]	@ (8007db8 <_dtoa_r+0x700>)
 8007cf0:	f7f8 fa3a 	bl	8000168 <__aeabi_dsub>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfc:	f7f8 fe5e 	bl	80009bc <__aeabi_dcmplt>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f43f aef6 	beq.w	8007af2 <_dtoa_r+0x43a>
 8007d06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d08:	1e73      	subs	r3, r6, #1
 8007d0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d10:	2b30      	cmp	r3, #48	@ 0x30
 8007d12:	d0f8      	beq.n	8007d06 <_dtoa_r+0x64e>
 8007d14:	9f04      	ldr	r7, [sp, #16]
 8007d16:	e73f      	b.n	8007b98 <_dtoa_r+0x4e0>
 8007d18:	4b29      	ldr	r3, [pc, #164]	@ (8007dc0 <_dtoa_r+0x708>)
 8007d1a:	f7f8 fbdd 	bl	80004d8 <__aeabi_dmul>
 8007d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d22:	e7bc      	b.n	8007c9e <_dtoa_r+0x5e6>
 8007d24:	d10c      	bne.n	8007d40 <_dtoa_r+0x688>
 8007d26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	4b25      	ldr	r3, [pc, #148]	@ (8007dc4 <_dtoa_r+0x70c>)
 8007d2e:	f7f8 fbd3 	bl	80004d8 <__aeabi_dmul>
 8007d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d36:	f7f8 fe55 	bl	80009e4 <__aeabi_dcmpge>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f000 815b 	beq.w	8007ff6 <_dtoa_r+0x93e>
 8007d40:	2400      	movs	r4, #0
 8007d42:	4625      	mov	r5, r4
 8007d44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d46:	4656      	mov	r6, sl
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	9304      	str	r3, [sp, #16]
 8007d4c:	2700      	movs	r7, #0
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4658      	mov	r0, fp
 8007d52:	f000 fbb7 	bl	80084c4 <_Bfree>
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	d0dc      	beq.n	8007d14 <_dtoa_r+0x65c>
 8007d5a:	b12f      	cbz	r7, 8007d68 <_dtoa_r+0x6b0>
 8007d5c:	42af      	cmp	r7, r5
 8007d5e:	d003      	beq.n	8007d68 <_dtoa_r+0x6b0>
 8007d60:	4639      	mov	r1, r7
 8007d62:	4658      	mov	r0, fp
 8007d64:	f000 fbae 	bl	80084c4 <_Bfree>
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4658      	mov	r0, fp
 8007d6c:	f000 fbaa 	bl	80084c4 <_Bfree>
 8007d70:	e7d0      	b.n	8007d14 <_dtoa_r+0x65c>
 8007d72:	9704      	str	r7, [sp, #16]
 8007d74:	4633      	mov	r3, r6
 8007d76:	461e      	mov	r6, r3
 8007d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d7c:	2a39      	cmp	r2, #57	@ 0x39
 8007d7e:	d107      	bne.n	8007d90 <_dtoa_r+0x6d8>
 8007d80:	459a      	cmp	sl, r3
 8007d82:	d1f8      	bne.n	8007d76 <_dtoa_r+0x6be>
 8007d84:	9a04      	ldr	r2, [sp, #16]
 8007d86:	3201      	adds	r2, #1
 8007d88:	9204      	str	r2, [sp, #16]
 8007d8a:	2230      	movs	r2, #48	@ 0x30
 8007d8c:	f88a 2000 	strb.w	r2, [sl]
 8007d90:	781a      	ldrb	r2, [r3, #0]
 8007d92:	3201      	adds	r2, #1
 8007d94:	701a      	strb	r2, [r3, #0]
 8007d96:	e7bd      	b.n	8007d14 <_dtoa_r+0x65c>
 8007d98:	2200      	movs	r2, #0
 8007d9a:	4b09      	ldr	r3, [pc, #36]	@ (8007dc0 <_dtoa_r+0x708>)
 8007d9c:	f7f8 fb9c 	bl	80004d8 <__aeabi_dmul>
 8007da0:	2200      	movs	r2, #0
 8007da2:	2300      	movs	r3, #0
 8007da4:	4604      	mov	r4, r0
 8007da6:	460d      	mov	r5, r1
 8007da8:	f7f8 fdfe 	bl	80009a8 <__aeabi_dcmpeq>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f43f aebc 	beq.w	8007b2a <_dtoa_r+0x472>
 8007db2:	e6f1      	b.n	8007b98 <_dtoa_r+0x4e0>
 8007db4:	0800c288 	.word	0x0800c288
 8007db8:	3fe00000 	.word	0x3fe00000
 8007dbc:	3ff00000 	.word	0x3ff00000
 8007dc0:	40240000 	.word	0x40240000
 8007dc4:	40140000 	.word	0x40140000
 8007dc8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	f000 80db 	beq.w	8007f86 <_dtoa_r+0x8ce>
 8007dd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007dd2:	2a01      	cmp	r2, #1
 8007dd4:	f300 80bf 	bgt.w	8007f56 <_dtoa_r+0x89e>
 8007dd8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007dda:	2a00      	cmp	r2, #0
 8007ddc:	f000 80b7 	beq.w	8007f4e <_dtoa_r+0x896>
 8007de0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007de4:	4646      	mov	r6, r8
 8007de6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007de8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dea:	2101      	movs	r1, #1
 8007dec:	441a      	add	r2, r3
 8007dee:	4658      	mov	r0, fp
 8007df0:	4498      	add	r8, r3
 8007df2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007df4:	f000 fc1a 	bl	800862c <__i2b>
 8007df8:	4605      	mov	r5, r0
 8007dfa:	b15e      	cbz	r6, 8007e14 <_dtoa_r+0x75c>
 8007dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	dd08      	ble.n	8007e14 <_dtoa_r+0x75c>
 8007e02:	42b3      	cmp	r3, r6
 8007e04:	bfa8      	it	ge
 8007e06:	4633      	movge	r3, r6
 8007e08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e0a:	eba8 0803 	sub.w	r8, r8, r3
 8007e0e:	1af6      	subs	r6, r6, r3
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e16:	b1f3      	cbz	r3, 8007e56 <_dtoa_r+0x79e>
 8007e18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80b7 	beq.w	8007f8e <_dtoa_r+0x8d6>
 8007e20:	b18c      	cbz	r4, 8007e46 <_dtoa_r+0x78e>
 8007e22:	4629      	mov	r1, r5
 8007e24:	4622      	mov	r2, r4
 8007e26:	4658      	mov	r0, fp
 8007e28:	f000 fcbe 	bl	80087a8 <__pow5mult>
 8007e2c:	464a      	mov	r2, r9
 8007e2e:	4601      	mov	r1, r0
 8007e30:	4605      	mov	r5, r0
 8007e32:	4658      	mov	r0, fp
 8007e34:	f000 fc10 	bl	8008658 <__multiply>
 8007e38:	4649      	mov	r1, r9
 8007e3a:	9004      	str	r0, [sp, #16]
 8007e3c:	4658      	mov	r0, fp
 8007e3e:	f000 fb41 	bl	80084c4 <_Bfree>
 8007e42:	9b04      	ldr	r3, [sp, #16]
 8007e44:	4699      	mov	r9, r3
 8007e46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e48:	1b1a      	subs	r2, r3, r4
 8007e4a:	d004      	beq.n	8007e56 <_dtoa_r+0x79e>
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	4658      	mov	r0, fp
 8007e50:	f000 fcaa 	bl	80087a8 <__pow5mult>
 8007e54:	4681      	mov	r9, r0
 8007e56:	2101      	movs	r1, #1
 8007e58:	4658      	mov	r0, fp
 8007e5a:	f000 fbe7 	bl	800862c <__i2b>
 8007e5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e60:	4604      	mov	r4, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 81c9 	beq.w	80081fa <_dtoa_r+0xb42>
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	4658      	mov	r0, fp
 8007e6e:	f000 fc9b 	bl	80087a8 <__pow5mult>
 8007e72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e74:	4604      	mov	r4, r0
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	f300 808f 	bgt.w	8007f9a <_dtoa_r+0x8e2>
 8007e7c:	9b02      	ldr	r3, [sp, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f040 8087 	bne.w	8007f92 <_dtoa_r+0x8da>
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f040 8083 	bne.w	8007f96 <_dtoa_r+0x8de>
 8007e90:	9b03      	ldr	r3, [sp, #12]
 8007e92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e96:	0d1b      	lsrs	r3, r3, #20
 8007e98:	051b      	lsls	r3, r3, #20
 8007e9a:	b12b      	cbz	r3, 8007ea8 <_dtoa_r+0x7f0>
 8007e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9e:	f108 0801 	add.w	r8, r8, #1
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 81aa 	beq.w	8008206 <_dtoa_r+0xb4e>
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007eb8:	6918      	ldr	r0, [r3, #16]
 8007eba:	f000 fb6b 	bl	8008594 <__hi0bits>
 8007ebe:	f1c0 0020 	rsb	r0, r0, #32
 8007ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec4:	4418      	add	r0, r3
 8007ec6:	f010 001f 	ands.w	r0, r0, #31
 8007eca:	d071      	beq.n	8007fb0 <_dtoa_r+0x8f8>
 8007ecc:	f1c0 0320 	rsb	r3, r0, #32
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	dd65      	ble.n	8007fa0 <_dtoa_r+0x8e8>
 8007ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed6:	f1c0 001c 	rsb	r0, r0, #28
 8007eda:	4403      	add	r3, r0
 8007edc:	4480      	add	r8, r0
 8007ede:	4406      	add	r6, r0
 8007ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ee2:	f1b8 0f00 	cmp.w	r8, #0
 8007ee6:	dd05      	ble.n	8007ef4 <_dtoa_r+0x83c>
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4642      	mov	r2, r8
 8007eec:	4658      	mov	r0, fp
 8007eee:	f000 fcb5 	bl	800885c <__lshift>
 8007ef2:	4681      	mov	r9, r0
 8007ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	dd05      	ble.n	8007f06 <_dtoa_r+0x84e>
 8007efa:	4621      	mov	r1, r4
 8007efc:	461a      	mov	r2, r3
 8007efe:	4658      	mov	r0, fp
 8007f00:	f000 fcac 	bl	800885c <__lshift>
 8007f04:	4604      	mov	r4, r0
 8007f06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d053      	beq.n	8007fb4 <_dtoa_r+0x8fc>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4648      	mov	r0, r9
 8007f10:	f000 fd10 	bl	8008934 <__mcmp>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	da4d      	bge.n	8007fb4 <_dtoa_r+0x8fc>
 8007f18:	1e7b      	subs	r3, r7, #1
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	220a      	movs	r2, #10
 8007f20:	2300      	movs	r3, #0
 8007f22:	4658      	mov	r0, fp
 8007f24:	f000 faf0 	bl	8008508 <__multadd>
 8007f28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f2a:	4681      	mov	r9, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 816c 	beq.w	800820a <_dtoa_r+0xb52>
 8007f32:	2300      	movs	r3, #0
 8007f34:	4629      	mov	r1, r5
 8007f36:	220a      	movs	r2, #10
 8007f38:	4658      	mov	r0, fp
 8007f3a:	f000 fae5 	bl	8008508 <__multadd>
 8007f3e:	9b08      	ldr	r3, [sp, #32]
 8007f40:	4605      	mov	r5, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dc61      	bgt.n	800800a <_dtoa_r+0x952>
 8007f46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	dc3b      	bgt.n	8007fc4 <_dtoa_r+0x90c>
 8007f4c:	e05d      	b.n	800800a <_dtoa_r+0x952>
 8007f4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f50:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f54:	e746      	b.n	8007de4 <_dtoa_r+0x72c>
 8007f56:	9b07      	ldr	r3, [sp, #28]
 8007f58:	1e5c      	subs	r4, r3, #1
 8007f5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	bfbf      	itttt	lt
 8007f60:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007f62:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007f64:	1ae3      	sublt	r3, r4, r3
 8007f66:	18d2      	addlt	r2, r2, r3
 8007f68:	bfa8      	it	ge
 8007f6a:	1b1c      	subge	r4, r3, r4
 8007f6c:	9b07      	ldr	r3, [sp, #28]
 8007f6e:	bfbe      	ittt	lt
 8007f70:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007f72:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007f74:	2400      	movlt	r4, #0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfb5      	itete	lt
 8007f7a:	eba8 0603 	sublt.w	r6, r8, r3
 8007f7e:	4646      	movge	r6, r8
 8007f80:	2300      	movlt	r3, #0
 8007f82:	9b07      	ldrge	r3, [sp, #28]
 8007f84:	e730      	b.n	8007de8 <_dtoa_r+0x730>
 8007f86:	4646      	mov	r6, r8
 8007f88:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f8a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007f8c:	e735      	b.n	8007dfa <_dtoa_r+0x742>
 8007f8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f90:	e75c      	b.n	8007e4c <_dtoa_r+0x794>
 8007f92:	2300      	movs	r3, #0
 8007f94:	e788      	b.n	8007ea8 <_dtoa_r+0x7f0>
 8007f96:	9b02      	ldr	r3, [sp, #8]
 8007f98:	e786      	b.n	8007ea8 <_dtoa_r+0x7f0>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f9e:	e788      	b.n	8007eb2 <_dtoa_r+0x7fa>
 8007fa0:	d09f      	beq.n	8007ee2 <_dtoa_r+0x82a>
 8007fa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fa4:	331c      	adds	r3, #28
 8007fa6:	441a      	add	r2, r3
 8007fa8:	4498      	add	r8, r3
 8007faa:	441e      	add	r6, r3
 8007fac:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fae:	e798      	b.n	8007ee2 <_dtoa_r+0x82a>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	e7f6      	b.n	8007fa2 <_dtoa_r+0x8ea>
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	9704      	str	r7, [sp, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc20      	bgt.n	8007ffe <_dtoa_r+0x946>
 8007fbc:	9308      	str	r3, [sp, #32]
 8007fbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	dd1e      	ble.n	8008002 <_dtoa_r+0x94a>
 8007fc4:	9b08      	ldr	r3, [sp, #32]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f47f aebc 	bne.w	8007d44 <_dtoa_r+0x68c>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	2205      	movs	r2, #5
 8007fd0:	4658      	mov	r0, fp
 8007fd2:	f000 fa99 	bl	8008508 <__multadd>
 8007fd6:	4601      	mov	r1, r0
 8007fd8:	4604      	mov	r4, r0
 8007fda:	4648      	mov	r0, r9
 8007fdc:	f000 fcaa 	bl	8008934 <__mcmp>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	f77f aeaf 	ble.w	8007d44 <_dtoa_r+0x68c>
 8007fe6:	2331      	movs	r3, #49	@ 0x31
 8007fe8:	4656      	mov	r6, sl
 8007fea:	f806 3b01 	strb.w	r3, [r6], #1
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	e6aa      	b.n	8007d4c <_dtoa_r+0x694>
 8007ff6:	9c07      	ldr	r4, [sp, #28]
 8007ff8:	9704      	str	r7, [sp, #16]
 8007ffa:	4625      	mov	r5, r4
 8007ffc:	e7f3      	b.n	8007fe6 <_dtoa_r+0x92e>
 8007ffe:	9b07      	ldr	r3, [sp, #28]
 8008000:	9308      	str	r3, [sp, #32]
 8008002:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8104 	beq.w	8008212 <_dtoa_r+0xb5a>
 800800a:	2e00      	cmp	r6, #0
 800800c:	dd05      	ble.n	800801a <_dtoa_r+0x962>
 800800e:	4629      	mov	r1, r5
 8008010:	4632      	mov	r2, r6
 8008012:	4658      	mov	r0, fp
 8008014:	f000 fc22 	bl	800885c <__lshift>
 8008018:	4605      	mov	r5, r0
 800801a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800801c:	2b00      	cmp	r3, #0
 800801e:	d05a      	beq.n	80080d6 <_dtoa_r+0xa1e>
 8008020:	4658      	mov	r0, fp
 8008022:	6869      	ldr	r1, [r5, #4]
 8008024:	f000 fa0e 	bl	8008444 <_Balloc>
 8008028:	4606      	mov	r6, r0
 800802a:	b928      	cbnz	r0, 8008038 <_dtoa_r+0x980>
 800802c:	4602      	mov	r2, r0
 800802e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008032:	4b83      	ldr	r3, [pc, #524]	@ (8008240 <_dtoa_r+0xb88>)
 8008034:	f7ff bb54 	b.w	80076e0 <_dtoa_r+0x28>
 8008038:	692a      	ldr	r2, [r5, #16]
 800803a:	f105 010c 	add.w	r1, r5, #12
 800803e:	3202      	adds	r2, #2
 8008040:	0092      	lsls	r2, r2, #2
 8008042:	300c      	adds	r0, #12
 8008044:	f000 ffa8 	bl	8008f98 <memcpy>
 8008048:	2201      	movs	r2, #1
 800804a:	4631      	mov	r1, r6
 800804c:	4658      	mov	r0, fp
 800804e:	f000 fc05 	bl	800885c <__lshift>
 8008052:	462f      	mov	r7, r5
 8008054:	4605      	mov	r5, r0
 8008056:	f10a 0301 	add.w	r3, sl, #1
 800805a:	9307      	str	r3, [sp, #28]
 800805c:	9b08      	ldr	r3, [sp, #32]
 800805e:	4453      	add	r3, sl
 8008060:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008062:	9b02      	ldr	r3, [sp, #8]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	930a      	str	r3, [sp, #40]	@ 0x28
 800806a:	9b07      	ldr	r3, [sp, #28]
 800806c:	4621      	mov	r1, r4
 800806e:	3b01      	subs	r3, #1
 8008070:	4648      	mov	r0, r9
 8008072:	9302      	str	r3, [sp, #8]
 8008074:	f7ff fa95 	bl	80075a2 <quorem>
 8008078:	4639      	mov	r1, r7
 800807a:	9008      	str	r0, [sp, #32]
 800807c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008080:	4648      	mov	r0, r9
 8008082:	f000 fc57 	bl	8008934 <__mcmp>
 8008086:	462a      	mov	r2, r5
 8008088:	9009      	str	r0, [sp, #36]	@ 0x24
 800808a:	4621      	mov	r1, r4
 800808c:	4658      	mov	r0, fp
 800808e:	f000 fc6d 	bl	800896c <__mdiff>
 8008092:	68c2      	ldr	r2, [r0, #12]
 8008094:	4606      	mov	r6, r0
 8008096:	bb02      	cbnz	r2, 80080da <_dtoa_r+0xa22>
 8008098:	4601      	mov	r1, r0
 800809a:	4648      	mov	r0, r9
 800809c:	f000 fc4a 	bl	8008934 <__mcmp>
 80080a0:	4602      	mov	r2, r0
 80080a2:	4631      	mov	r1, r6
 80080a4:	4658      	mov	r0, fp
 80080a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80080a8:	f000 fa0c 	bl	80084c4 <_Bfree>
 80080ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80080b0:	9e07      	ldr	r6, [sp, #28]
 80080b2:	ea43 0102 	orr.w	r1, r3, r2
 80080b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080b8:	4319      	orrs	r1, r3
 80080ba:	d110      	bne.n	80080de <_dtoa_r+0xa26>
 80080bc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080c0:	d029      	beq.n	8008116 <_dtoa_r+0xa5e>
 80080c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd02      	ble.n	80080ce <_dtoa_r+0xa16>
 80080c8:	9b08      	ldr	r3, [sp, #32]
 80080ca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80080ce:	9b02      	ldr	r3, [sp, #8]
 80080d0:	f883 8000 	strb.w	r8, [r3]
 80080d4:	e63b      	b.n	8007d4e <_dtoa_r+0x696>
 80080d6:	4628      	mov	r0, r5
 80080d8:	e7bb      	b.n	8008052 <_dtoa_r+0x99a>
 80080da:	2201      	movs	r2, #1
 80080dc:	e7e1      	b.n	80080a2 <_dtoa_r+0x9ea>
 80080de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	db04      	blt.n	80080ee <_dtoa_r+0xa36>
 80080e4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80080e6:	430b      	orrs	r3, r1
 80080e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80080ea:	430b      	orrs	r3, r1
 80080ec:	d120      	bne.n	8008130 <_dtoa_r+0xa78>
 80080ee:	2a00      	cmp	r2, #0
 80080f0:	dded      	ble.n	80080ce <_dtoa_r+0xa16>
 80080f2:	4649      	mov	r1, r9
 80080f4:	2201      	movs	r2, #1
 80080f6:	4658      	mov	r0, fp
 80080f8:	f000 fbb0 	bl	800885c <__lshift>
 80080fc:	4621      	mov	r1, r4
 80080fe:	4681      	mov	r9, r0
 8008100:	f000 fc18 	bl	8008934 <__mcmp>
 8008104:	2800      	cmp	r0, #0
 8008106:	dc03      	bgt.n	8008110 <_dtoa_r+0xa58>
 8008108:	d1e1      	bne.n	80080ce <_dtoa_r+0xa16>
 800810a:	f018 0f01 	tst.w	r8, #1
 800810e:	d0de      	beq.n	80080ce <_dtoa_r+0xa16>
 8008110:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008114:	d1d8      	bne.n	80080c8 <_dtoa_r+0xa10>
 8008116:	2339      	movs	r3, #57	@ 0x39
 8008118:	9a02      	ldr	r2, [sp, #8]
 800811a:	7013      	strb	r3, [r2, #0]
 800811c:	4633      	mov	r3, r6
 800811e:	461e      	mov	r6, r3
 8008120:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008124:	3b01      	subs	r3, #1
 8008126:	2a39      	cmp	r2, #57	@ 0x39
 8008128:	d052      	beq.n	80081d0 <_dtoa_r+0xb18>
 800812a:	3201      	adds	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e60e      	b.n	8007d4e <_dtoa_r+0x696>
 8008130:	2a00      	cmp	r2, #0
 8008132:	dd07      	ble.n	8008144 <_dtoa_r+0xa8c>
 8008134:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008138:	d0ed      	beq.n	8008116 <_dtoa_r+0xa5e>
 800813a:	9a02      	ldr	r2, [sp, #8]
 800813c:	f108 0301 	add.w	r3, r8, #1
 8008140:	7013      	strb	r3, [r2, #0]
 8008142:	e604      	b.n	8007d4e <_dtoa_r+0x696>
 8008144:	9b07      	ldr	r3, [sp, #28]
 8008146:	9a07      	ldr	r2, [sp, #28]
 8008148:	f803 8c01 	strb.w	r8, [r3, #-1]
 800814c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800814e:	4293      	cmp	r3, r2
 8008150:	d028      	beq.n	80081a4 <_dtoa_r+0xaec>
 8008152:	4649      	mov	r1, r9
 8008154:	2300      	movs	r3, #0
 8008156:	220a      	movs	r2, #10
 8008158:	4658      	mov	r0, fp
 800815a:	f000 f9d5 	bl	8008508 <__multadd>
 800815e:	42af      	cmp	r7, r5
 8008160:	4681      	mov	r9, r0
 8008162:	f04f 0300 	mov.w	r3, #0
 8008166:	f04f 020a 	mov.w	r2, #10
 800816a:	4639      	mov	r1, r7
 800816c:	4658      	mov	r0, fp
 800816e:	d107      	bne.n	8008180 <_dtoa_r+0xac8>
 8008170:	f000 f9ca 	bl	8008508 <__multadd>
 8008174:	4607      	mov	r7, r0
 8008176:	4605      	mov	r5, r0
 8008178:	9b07      	ldr	r3, [sp, #28]
 800817a:	3301      	adds	r3, #1
 800817c:	9307      	str	r3, [sp, #28]
 800817e:	e774      	b.n	800806a <_dtoa_r+0x9b2>
 8008180:	f000 f9c2 	bl	8008508 <__multadd>
 8008184:	4629      	mov	r1, r5
 8008186:	4607      	mov	r7, r0
 8008188:	2300      	movs	r3, #0
 800818a:	220a      	movs	r2, #10
 800818c:	4658      	mov	r0, fp
 800818e:	f000 f9bb 	bl	8008508 <__multadd>
 8008192:	4605      	mov	r5, r0
 8008194:	e7f0      	b.n	8008178 <_dtoa_r+0xac0>
 8008196:	9b08      	ldr	r3, [sp, #32]
 8008198:	2700      	movs	r7, #0
 800819a:	2b00      	cmp	r3, #0
 800819c:	bfcc      	ite	gt
 800819e:	461e      	movgt	r6, r3
 80081a0:	2601      	movle	r6, #1
 80081a2:	4456      	add	r6, sl
 80081a4:	4649      	mov	r1, r9
 80081a6:	2201      	movs	r2, #1
 80081a8:	4658      	mov	r0, fp
 80081aa:	f000 fb57 	bl	800885c <__lshift>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4681      	mov	r9, r0
 80081b2:	f000 fbbf 	bl	8008934 <__mcmp>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	dcb0      	bgt.n	800811c <_dtoa_r+0xa64>
 80081ba:	d102      	bne.n	80081c2 <_dtoa_r+0xb0a>
 80081bc:	f018 0f01 	tst.w	r8, #1
 80081c0:	d1ac      	bne.n	800811c <_dtoa_r+0xa64>
 80081c2:	4633      	mov	r3, r6
 80081c4:	461e      	mov	r6, r3
 80081c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081ca:	2a30      	cmp	r2, #48	@ 0x30
 80081cc:	d0fa      	beq.n	80081c4 <_dtoa_r+0xb0c>
 80081ce:	e5be      	b.n	8007d4e <_dtoa_r+0x696>
 80081d0:	459a      	cmp	sl, r3
 80081d2:	d1a4      	bne.n	800811e <_dtoa_r+0xa66>
 80081d4:	9b04      	ldr	r3, [sp, #16]
 80081d6:	3301      	adds	r3, #1
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	2331      	movs	r3, #49	@ 0x31
 80081dc:	f88a 3000 	strb.w	r3, [sl]
 80081e0:	e5b5      	b.n	8007d4e <_dtoa_r+0x696>
 80081e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081e4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008244 <_dtoa_r+0xb8c>
 80081e8:	b11b      	cbz	r3, 80081f2 <_dtoa_r+0xb3a>
 80081ea:	f10a 0308 	add.w	r3, sl, #8
 80081ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	4650      	mov	r0, sl
 80081f4:	b017      	add	sp, #92	@ 0x5c
 80081f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	f77f ae3d 	ble.w	8007e7c <_dtoa_r+0x7c4>
 8008202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008204:	930a      	str	r3, [sp, #40]	@ 0x28
 8008206:	2001      	movs	r0, #1
 8008208:	e65b      	b.n	8007ec2 <_dtoa_r+0x80a>
 800820a:	9b08      	ldr	r3, [sp, #32]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f77f aed6 	ble.w	8007fbe <_dtoa_r+0x906>
 8008212:	4656      	mov	r6, sl
 8008214:	4621      	mov	r1, r4
 8008216:	4648      	mov	r0, r9
 8008218:	f7ff f9c3 	bl	80075a2 <quorem>
 800821c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008220:	9b08      	ldr	r3, [sp, #32]
 8008222:	f806 8b01 	strb.w	r8, [r6], #1
 8008226:	eba6 020a 	sub.w	r2, r6, sl
 800822a:	4293      	cmp	r3, r2
 800822c:	ddb3      	ble.n	8008196 <_dtoa_r+0xade>
 800822e:	4649      	mov	r1, r9
 8008230:	2300      	movs	r3, #0
 8008232:	220a      	movs	r2, #10
 8008234:	4658      	mov	r0, fp
 8008236:	f000 f967 	bl	8008508 <__multadd>
 800823a:	4681      	mov	r9, r0
 800823c:	e7ea      	b.n	8008214 <_dtoa_r+0xb5c>
 800823e:	bf00      	nop
 8008240:	0800c1e4 	.word	0x0800c1e4
 8008244:	0800c168 	.word	0x0800c168

08008248 <_free_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4605      	mov	r5, r0
 800824c:	2900      	cmp	r1, #0
 800824e:	d040      	beq.n	80082d2 <_free_r+0x8a>
 8008250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008254:	1f0c      	subs	r4, r1, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	bfb8      	it	lt
 800825a:	18e4      	addlt	r4, r4, r3
 800825c:	f000 f8e6 	bl	800842c <__malloc_lock>
 8008260:	4a1c      	ldr	r2, [pc, #112]	@ (80082d4 <_free_r+0x8c>)
 8008262:	6813      	ldr	r3, [r2, #0]
 8008264:	b933      	cbnz	r3, 8008274 <_free_r+0x2c>
 8008266:	6063      	str	r3, [r4, #4]
 8008268:	6014      	str	r4, [r2, #0]
 800826a:	4628      	mov	r0, r5
 800826c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008270:	f000 b8e2 	b.w	8008438 <__malloc_unlock>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d908      	bls.n	800828a <_free_r+0x42>
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	1821      	adds	r1, r4, r0
 800827c:	428b      	cmp	r3, r1
 800827e:	bf01      	itttt	eq
 8008280:	6819      	ldreq	r1, [r3, #0]
 8008282:	685b      	ldreq	r3, [r3, #4]
 8008284:	1809      	addeq	r1, r1, r0
 8008286:	6021      	streq	r1, [r4, #0]
 8008288:	e7ed      	b.n	8008266 <_free_r+0x1e>
 800828a:	461a      	mov	r2, r3
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	b10b      	cbz	r3, 8008294 <_free_r+0x4c>
 8008290:	42a3      	cmp	r3, r4
 8008292:	d9fa      	bls.n	800828a <_free_r+0x42>
 8008294:	6811      	ldr	r1, [r2, #0]
 8008296:	1850      	adds	r0, r2, r1
 8008298:	42a0      	cmp	r0, r4
 800829a:	d10b      	bne.n	80082b4 <_free_r+0x6c>
 800829c:	6820      	ldr	r0, [r4, #0]
 800829e:	4401      	add	r1, r0
 80082a0:	1850      	adds	r0, r2, r1
 80082a2:	4283      	cmp	r3, r0
 80082a4:	6011      	str	r1, [r2, #0]
 80082a6:	d1e0      	bne.n	800826a <_free_r+0x22>
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	4408      	add	r0, r1
 80082ae:	6010      	str	r0, [r2, #0]
 80082b0:	6053      	str	r3, [r2, #4]
 80082b2:	e7da      	b.n	800826a <_free_r+0x22>
 80082b4:	d902      	bls.n	80082bc <_free_r+0x74>
 80082b6:	230c      	movs	r3, #12
 80082b8:	602b      	str	r3, [r5, #0]
 80082ba:	e7d6      	b.n	800826a <_free_r+0x22>
 80082bc:	6820      	ldr	r0, [r4, #0]
 80082be:	1821      	adds	r1, r4, r0
 80082c0:	428b      	cmp	r3, r1
 80082c2:	bf01      	itttt	eq
 80082c4:	6819      	ldreq	r1, [r3, #0]
 80082c6:	685b      	ldreq	r3, [r3, #4]
 80082c8:	1809      	addeq	r1, r1, r0
 80082ca:	6021      	streq	r1, [r4, #0]
 80082cc:	6063      	str	r3, [r4, #4]
 80082ce:	6054      	str	r4, [r2, #4]
 80082d0:	e7cb      	b.n	800826a <_free_r+0x22>
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	20000ae0 	.word	0x20000ae0

080082d8 <malloc>:
 80082d8:	4b02      	ldr	r3, [pc, #8]	@ (80082e4 <malloc+0xc>)
 80082da:	4601      	mov	r1, r0
 80082dc:	6818      	ldr	r0, [r3, #0]
 80082de:	f000 b825 	b.w	800832c <_malloc_r>
 80082e2:	bf00      	nop
 80082e4:	20000084 	.word	0x20000084

080082e8 <sbrk_aligned>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008328 <sbrk_aligned+0x40>)
 80082ec:	460c      	mov	r4, r1
 80082ee:	6831      	ldr	r1, [r6, #0]
 80082f0:	4605      	mov	r5, r0
 80082f2:	b911      	cbnz	r1, 80082fa <sbrk_aligned+0x12>
 80082f4:	f000 fe40 	bl	8008f78 <_sbrk_r>
 80082f8:	6030      	str	r0, [r6, #0]
 80082fa:	4621      	mov	r1, r4
 80082fc:	4628      	mov	r0, r5
 80082fe:	f000 fe3b 	bl	8008f78 <_sbrk_r>
 8008302:	1c43      	adds	r3, r0, #1
 8008304:	d103      	bne.n	800830e <sbrk_aligned+0x26>
 8008306:	f04f 34ff 	mov.w	r4, #4294967295
 800830a:	4620      	mov	r0, r4
 800830c:	bd70      	pop	{r4, r5, r6, pc}
 800830e:	1cc4      	adds	r4, r0, #3
 8008310:	f024 0403 	bic.w	r4, r4, #3
 8008314:	42a0      	cmp	r0, r4
 8008316:	d0f8      	beq.n	800830a <sbrk_aligned+0x22>
 8008318:	1a21      	subs	r1, r4, r0
 800831a:	4628      	mov	r0, r5
 800831c:	f000 fe2c 	bl	8008f78 <_sbrk_r>
 8008320:	3001      	adds	r0, #1
 8008322:	d1f2      	bne.n	800830a <sbrk_aligned+0x22>
 8008324:	e7ef      	b.n	8008306 <sbrk_aligned+0x1e>
 8008326:	bf00      	nop
 8008328:	20000adc 	.word	0x20000adc

0800832c <_malloc_r>:
 800832c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008330:	1ccd      	adds	r5, r1, #3
 8008332:	f025 0503 	bic.w	r5, r5, #3
 8008336:	3508      	adds	r5, #8
 8008338:	2d0c      	cmp	r5, #12
 800833a:	bf38      	it	cc
 800833c:	250c      	movcc	r5, #12
 800833e:	2d00      	cmp	r5, #0
 8008340:	4606      	mov	r6, r0
 8008342:	db01      	blt.n	8008348 <_malloc_r+0x1c>
 8008344:	42a9      	cmp	r1, r5
 8008346:	d904      	bls.n	8008352 <_malloc_r+0x26>
 8008348:	230c      	movs	r3, #12
 800834a:	6033      	str	r3, [r6, #0]
 800834c:	2000      	movs	r0, #0
 800834e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008352:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008428 <_malloc_r+0xfc>
 8008356:	f000 f869 	bl	800842c <__malloc_lock>
 800835a:	f8d8 3000 	ldr.w	r3, [r8]
 800835e:	461c      	mov	r4, r3
 8008360:	bb44      	cbnz	r4, 80083b4 <_malloc_r+0x88>
 8008362:	4629      	mov	r1, r5
 8008364:	4630      	mov	r0, r6
 8008366:	f7ff ffbf 	bl	80082e8 <sbrk_aligned>
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	4604      	mov	r4, r0
 800836e:	d158      	bne.n	8008422 <_malloc_r+0xf6>
 8008370:	f8d8 4000 	ldr.w	r4, [r8]
 8008374:	4627      	mov	r7, r4
 8008376:	2f00      	cmp	r7, #0
 8008378:	d143      	bne.n	8008402 <_malloc_r+0xd6>
 800837a:	2c00      	cmp	r4, #0
 800837c:	d04b      	beq.n	8008416 <_malloc_r+0xea>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	4639      	mov	r1, r7
 8008382:	4630      	mov	r0, r6
 8008384:	eb04 0903 	add.w	r9, r4, r3
 8008388:	f000 fdf6 	bl	8008f78 <_sbrk_r>
 800838c:	4581      	cmp	r9, r0
 800838e:	d142      	bne.n	8008416 <_malloc_r+0xea>
 8008390:	6821      	ldr	r1, [r4, #0]
 8008392:	4630      	mov	r0, r6
 8008394:	1a6d      	subs	r5, r5, r1
 8008396:	4629      	mov	r1, r5
 8008398:	f7ff ffa6 	bl	80082e8 <sbrk_aligned>
 800839c:	3001      	adds	r0, #1
 800839e:	d03a      	beq.n	8008416 <_malloc_r+0xea>
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	442b      	add	r3, r5
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	f8d8 3000 	ldr.w	r3, [r8]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	bb62      	cbnz	r2, 8008408 <_malloc_r+0xdc>
 80083ae:	f8c8 7000 	str.w	r7, [r8]
 80083b2:	e00f      	b.n	80083d4 <_malloc_r+0xa8>
 80083b4:	6822      	ldr	r2, [r4, #0]
 80083b6:	1b52      	subs	r2, r2, r5
 80083b8:	d420      	bmi.n	80083fc <_malloc_r+0xd0>
 80083ba:	2a0b      	cmp	r2, #11
 80083bc:	d917      	bls.n	80083ee <_malloc_r+0xc2>
 80083be:	1961      	adds	r1, r4, r5
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	6025      	str	r5, [r4, #0]
 80083c4:	bf18      	it	ne
 80083c6:	6059      	strne	r1, [r3, #4]
 80083c8:	6863      	ldr	r3, [r4, #4]
 80083ca:	bf08      	it	eq
 80083cc:	f8c8 1000 	streq.w	r1, [r8]
 80083d0:	5162      	str	r2, [r4, r5]
 80083d2:	604b      	str	r3, [r1, #4]
 80083d4:	4630      	mov	r0, r6
 80083d6:	f000 f82f 	bl	8008438 <__malloc_unlock>
 80083da:	f104 000b 	add.w	r0, r4, #11
 80083de:	1d23      	adds	r3, r4, #4
 80083e0:	f020 0007 	bic.w	r0, r0, #7
 80083e4:	1ac2      	subs	r2, r0, r3
 80083e6:	bf1c      	itt	ne
 80083e8:	1a1b      	subne	r3, r3, r0
 80083ea:	50a3      	strne	r3, [r4, r2]
 80083ec:	e7af      	b.n	800834e <_malloc_r+0x22>
 80083ee:	6862      	ldr	r2, [r4, #4]
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	bf0c      	ite	eq
 80083f4:	f8c8 2000 	streq.w	r2, [r8]
 80083f8:	605a      	strne	r2, [r3, #4]
 80083fa:	e7eb      	b.n	80083d4 <_malloc_r+0xa8>
 80083fc:	4623      	mov	r3, r4
 80083fe:	6864      	ldr	r4, [r4, #4]
 8008400:	e7ae      	b.n	8008360 <_malloc_r+0x34>
 8008402:	463c      	mov	r4, r7
 8008404:	687f      	ldr	r7, [r7, #4]
 8008406:	e7b6      	b.n	8008376 <_malloc_r+0x4a>
 8008408:	461a      	mov	r2, r3
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	42a3      	cmp	r3, r4
 800840e:	d1fb      	bne.n	8008408 <_malloc_r+0xdc>
 8008410:	2300      	movs	r3, #0
 8008412:	6053      	str	r3, [r2, #4]
 8008414:	e7de      	b.n	80083d4 <_malloc_r+0xa8>
 8008416:	230c      	movs	r3, #12
 8008418:	4630      	mov	r0, r6
 800841a:	6033      	str	r3, [r6, #0]
 800841c:	f000 f80c 	bl	8008438 <__malloc_unlock>
 8008420:	e794      	b.n	800834c <_malloc_r+0x20>
 8008422:	6005      	str	r5, [r0, #0]
 8008424:	e7d6      	b.n	80083d4 <_malloc_r+0xa8>
 8008426:	bf00      	nop
 8008428:	20000ae0 	.word	0x20000ae0

0800842c <__malloc_lock>:
 800842c:	4801      	ldr	r0, [pc, #4]	@ (8008434 <__malloc_lock+0x8>)
 800842e:	f7ff b8a8 	b.w	8007582 <__retarget_lock_acquire_recursive>
 8008432:	bf00      	nop
 8008434:	20000ad8 	.word	0x20000ad8

08008438 <__malloc_unlock>:
 8008438:	4801      	ldr	r0, [pc, #4]	@ (8008440 <__malloc_unlock+0x8>)
 800843a:	f7ff b8a3 	b.w	8007584 <__retarget_lock_release_recursive>
 800843e:	bf00      	nop
 8008440:	20000ad8 	.word	0x20000ad8

08008444 <_Balloc>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	69c6      	ldr	r6, [r0, #28]
 8008448:	4604      	mov	r4, r0
 800844a:	460d      	mov	r5, r1
 800844c:	b976      	cbnz	r6, 800846c <_Balloc+0x28>
 800844e:	2010      	movs	r0, #16
 8008450:	f7ff ff42 	bl	80082d8 <malloc>
 8008454:	4602      	mov	r2, r0
 8008456:	61e0      	str	r0, [r4, #28]
 8008458:	b920      	cbnz	r0, 8008464 <_Balloc+0x20>
 800845a:	216b      	movs	r1, #107	@ 0x6b
 800845c:	4b17      	ldr	r3, [pc, #92]	@ (80084bc <_Balloc+0x78>)
 800845e:	4818      	ldr	r0, [pc, #96]	@ (80084c0 <_Balloc+0x7c>)
 8008460:	f000 fda8 	bl	8008fb4 <__assert_func>
 8008464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008468:	6006      	str	r6, [r0, #0]
 800846a:	60c6      	str	r6, [r0, #12]
 800846c:	69e6      	ldr	r6, [r4, #28]
 800846e:	68f3      	ldr	r3, [r6, #12]
 8008470:	b183      	cbz	r3, 8008494 <_Balloc+0x50>
 8008472:	69e3      	ldr	r3, [r4, #28]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800847a:	b9b8      	cbnz	r0, 80084ac <_Balloc+0x68>
 800847c:	2101      	movs	r1, #1
 800847e:	fa01 f605 	lsl.w	r6, r1, r5
 8008482:	1d72      	adds	r2, r6, #5
 8008484:	4620      	mov	r0, r4
 8008486:	0092      	lsls	r2, r2, #2
 8008488:	f000 fdb2 	bl	8008ff0 <_calloc_r>
 800848c:	b160      	cbz	r0, 80084a8 <_Balloc+0x64>
 800848e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008492:	e00e      	b.n	80084b2 <_Balloc+0x6e>
 8008494:	2221      	movs	r2, #33	@ 0x21
 8008496:	2104      	movs	r1, #4
 8008498:	4620      	mov	r0, r4
 800849a:	f000 fda9 	bl	8008ff0 <_calloc_r>
 800849e:	69e3      	ldr	r3, [r4, #28]
 80084a0:	60f0      	str	r0, [r6, #12]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e4      	bne.n	8008472 <_Balloc+0x2e>
 80084a8:	2000      	movs	r0, #0
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	6802      	ldr	r2, [r0, #0]
 80084ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084b2:	2300      	movs	r3, #0
 80084b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084b8:	e7f7      	b.n	80084aa <_Balloc+0x66>
 80084ba:	bf00      	nop
 80084bc:	0800c175 	.word	0x0800c175
 80084c0:	0800c1f5 	.word	0x0800c1f5

080084c4 <_Bfree>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	69c6      	ldr	r6, [r0, #28]
 80084c8:	4605      	mov	r5, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	b976      	cbnz	r6, 80084ec <_Bfree+0x28>
 80084ce:	2010      	movs	r0, #16
 80084d0:	f7ff ff02 	bl	80082d8 <malloc>
 80084d4:	4602      	mov	r2, r0
 80084d6:	61e8      	str	r0, [r5, #28]
 80084d8:	b920      	cbnz	r0, 80084e4 <_Bfree+0x20>
 80084da:	218f      	movs	r1, #143	@ 0x8f
 80084dc:	4b08      	ldr	r3, [pc, #32]	@ (8008500 <_Bfree+0x3c>)
 80084de:	4809      	ldr	r0, [pc, #36]	@ (8008504 <_Bfree+0x40>)
 80084e0:	f000 fd68 	bl	8008fb4 <__assert_func>
 80084e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e8:	6006      	str	r6, [r0, #0]
 80084ea:	60c6      	str	r6, [r0, #12]
 80084ec:	b13c      	cbz	r4, 80084fe <_Bfree+0x3a>
 80084ee:	69eb      	ldr	r3, [r5, #28]
 80084f0:	6862      	ldr	r2, [r4, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084f8:	6021      	str	r1, [r4, #0]
 80084fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	0800c175 	.word	0x0800c175
 8008504:	0800c1f5 	.word	0x0800c1f5

08008508 <__multadd>:
 8008508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850c:	4607      	mov	r7, r0
 800850e:	460c      	mov	r4, r1
 8008510:	461e      	mov	r6, r3
 8008512:	2000      	movs	r0, #0
 8008514:	690d      	ldr	r5, [r1, #16]
 8008516:	f101 0c14 	add.w	ip, r1, #20
 800851a:	f8dc 3000 	ldr.w	r3, [ip]
 800851e:	3001      	adds	r0, #1
 8008520:	b299      	uxth	r1, r3
 8008522:	fb02 6101 	mla	r1, r2, r1, r6
 8008526:	0c1e      	lsrs	r6, r3, #16
 8008528:	0c0b      	lsrs	r3, r1, #16
 800852a:	fb02 3306 	mla	r3, r2, r6, r3
 800852e:	b289      	uxth	r1, r1
 8008530:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008534:	4285      	cmp	r5, r0
 8008536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800853a:	f84c 1b04 	str.w	r1, [ip], #4
 800853e:	dcec      	bgt.n	800851a <__multadd+0x12>
 8008540:	b30e      	cbz	r6, 8008586 <__multadd+0x7e>
 8008542:	68a3      	ldr	r3, [r4, #8]
 8008544:	42ab      	cmp	r3, r5
 8008546:	dc19      	bgt.n	800857c <__multadd+0x74>
 8008548:	6861      	ldr	r1, [r4, #4]
 800854a:	4638      	mov	r0, r7
 800854c:	3101      	adds	r1, #1
 800854e:	f7ff ff79 	bl	8008444 <_Balloc>
 8008552:	4680      	mov	r8, r0
 8008554:	b928      	cbnz	r0, 8008562 <__multadd+0x5a>
 8008556:	4602      	mov	r2, r0
 8008558:	21ba      	movs	r1, #186	@ 0xba
 800855a:	4b0c      	ldr	r3, [pc, #48]	@ (800858c <__multadd+0x84>)
 800855c:	480c      	ldr	r0, [pc, #48]	@ (8008590 <__multadd+0x88>)
 800855e:	f000 fd29 	bl	8008fb4 <__assert_func>
 8008562:	6922      	ldr	r2, [r4, #16]
 8008564:	f104 010c 	add.w	r1, r4, #12
 8008568:	3202      	adds	r2, #2
 800856a:	0092      	lsls	r2, r2, #2
 800856c:	300c      	adds	r0, #12
 800856e:	f000 fd13 	bl	8008f98 <memcpy>
 8008572:	4621      	mov	r1, r4
 8008574:	4638      	mov	r0, r7
 8008576:	f7ff ffa5 	bl	80084c4 <_Bfree>
 800857a:	4644      	mov	r4, r8
 800857c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008580:	3501      	adds	r5, #1
 8008582:	615e      	str	r6, [r3, #20]
 8008584:	6125      	str	r5, [r4, #16]
 8008586:	4620      	mov	r0, r4
 8008588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800858c:	0800c1e4 	.word	0x0800c1e4
 8008590:	0800c1f5 	.word	0x0800c1f5

08008594 <__hi0bits>:
 8008594:	4603      	mov	r3, r0
 8008596:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800859a:	bf3a      	itte	cc
 800859c:	0403      	lslcc	r3, r0, #16
 800859e:	2010      	movcc	r0, #16
 80085a0:	2000      	movcs	r0, #0
 80085a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085a6:	bf3c      	itt	cc
 80085a8:	021b      	lslcc	r3, r3, #8
 80085aa:	3008      	addcc	r0, #8
 80085ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b0:	bf3c      	itt	cc
 80085b2:	011b      	lslcc	r3, r3, #4
 80085b4:	3004      	addcc	r0, #4
 80085b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ba:	bf3c      	itt	cc
 80085bc:	009b      	lslcc	r3, r3, #2
 80085be:	3002      	addcc	r0, #2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	db05      	blt.n	80085d0 <__hi0bits+0x3c>
 80085c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085c8:	f100 0001 	add.w	r0, r0, #1
 80085cc:	bf08      	it	eq
 80085ce:	2020      	moveq	r0, #32
 80085d0:	4770      	bx	lr

080085d2 <__lo0bits>:
 80085d2:	6803      	ldr	r3, [r0, #0]
 80085d4:	4602      	mov	r2, r0
 80085d6:	f013 0007 	ands.w	r0, r3, #7
 80085da:	d00b      	beq.n	80085f4 <__lo0bits+0x22>
 80085dc:	07d9      	lsls	r1, r3, #31
 80085de:	d421      	bmi.n	8008624 <__lo0bits+0x52>
 80085e0:	0798      	lsls	r0, r3, #30
 80085e2:	bf49      	itett	mi
 80085e4:	085b      	lsrmi	r3, r3, #1
 80085e6:	089b      	lsrpl	r3, r3, #2
 80085e8:	2001      	movmi	r0, #1
 80085ea:	6013      	strmi	r3, [r2, #0]
 80085ec:	bf5c      	itt	pl
 80085ee:	2002      	movpl	r0, #2
 80085f0:	6013      	strpl	r3, [r2, #0]
 80085f2:	4770      	bx	lr
 80085f4:	b299      	uxth	r1, r3
 80085f6:	b909      	cbnz	r1, 80085fc <__lo0bits+0x2a>
 80085f8:	2010      	movs	r0, #16
 80085fa:	0c1b      	lsrs	r3, r3, #16
 80085fc:	b2d9      	uxtb	r1, r3
 80085fe:	b909      	cbnz	r1, 8008604 <__lo0bits+0x32>
 8008600:	3008      	adds	r0, #8
 8008602:	0a1b      	lsrs	r3, r3, #8
 8008604:	0719      	lsls	r1, r3, #28
 8008606:	bf04      	itt	eq
 8008608:	091b      	lsreq	r3, r3, #4
 800860a:	3004      	addeq	r0, #4
 800860c:	0799      	lsls	r1, r3, #30
 800860e:	bf04      	itt	eq
 8008610:	089b      	lsreq	r3, r3, #2
 8008612:	3002      	addeq	r0, #2
 8008614:	07d9      	lsls	r1, r3, #31
 8008616:	d403      	bmi.n	8008620 <__lo0bits+0x4e>
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	f100 0001 	add.w	r0, r0, #1
 800861e:	d003      	beq.n	8008628 <__lo0bits+0x56>
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	4770      	bx	lr
 8008624:	2000      	movs	r0, #0
 8008626:	4770      	bx	lr
 8008628:	2020      	movs	r0, #32
 800862a:	4770      	bx	lr

0800862c <__i2b>:
 800862c:	b510      	push	{r4, lr}
 800862e:	460c      	mov	r4, r1
 8008630:	2101      	movs	r1, #1
 8008632:	f7ff ff07 	bl	8008444 <_Balloc>
 8008636:	4602      	mov	r2, r0
 8008638:	b928      	cbnz	r0, 8008646 <__i2b+0x1a>
 800863a:	f240 1145 	movw	r1, #325	@ 0x145
 800863e:	4b04      	ldr	r3, [pc, #16]	@ (8008650 <__i2b+0x24>)
 8008640:	4804      	ldr	r0, [pc, #16]	@ (8008654 <__i2b+0x28>)
 8008642:	f000 fcb7 	bl	8008fb4 <__assert_func>
 8008646:	2301      	movs	r3, #1
 8008648:	6144      	str	r4, [r0, #20]
 800864a:	6103      	str	r3, [r0, #16]
 800864c:	bd10      	pop	{r4, pc}
 800864e:	bf00      	nop
 8008650:	0800c1e4 	.word	0x0800c1e4
 8008654:	0800c1f5 	.word	0x0800c1f5

08008658 <__multiply>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	4614      	mov	r4, r2
 800865e:	690a      	ldr	r2, [r1, #16]
 8008660:	6923      	ldr	r3, [r4, #16]
 8008662:	460f      	mov	r7, r1
 8008664:	429a      	cmp	r2, r3
 8008666:	bfa2      	ittt	ge
 8008668:	4623      	movge	r3, r4
 800866a:	460c      	movge	r4, r1
 800866c:	461f      	movge	r7, r3
 800866e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008672:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008676:	68a3      	ldr	r3, [r4, #8]
 8008678:	6861      	ldr	r1, [r4, #4]
 800867a:	eb0a 0609 	add.w	r6, sl, r9
 800867e:	42b3      	cmp	r3, r6
 8008680:	b085      	sub	sp, #20
 8008682:	bfb8      	it	lt
 8008684:	3101      	addlt	r1, #1
 8008686:	f7ff fedd 	bl	8008444 <_Balloc>
 800868a:	b930      	cbnz	r0, 800869a <__multiply+0x42>
 800868c:	4602      	mov	r2, r0
 800868e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008692:	4b43      	ldr	r3, [pc, #268]	@ (80087a0 <__multiply+0x148>)
 8008694:	4843      	ldr	r0, [pc, #268]	@ (80087a4 <__multiply+0x14c>)
 8008696:	f000 fc8d 	bl	8008fb4 <__assert_func>
 800869a:	f100 0514 	add.w	r5, r0, #20
 800869e:	462b      	mov	r3, r5
 80086a0:	2200      	movs	r2, #0
 80086a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086a6:	4543      	cmp	r3, r8
 80086a8:	d321      	bcc.n	80086ee <__multiply+0x96>
 80086aa:	f107 0114 	add.w	r1, r7, #20
 80086ae:	f104 0214 	add.w	r2, r4, #20
 80086b2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80086b6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80086ba:	9302      	str	r3, [sp, #8]
 80086bc:	1b13      	subs	r3, r2, r4
 80086be:	3b15      	subs	r3, #21
 80086c0:	f023 0303 	bic.w	r3, r3, #3
 80086c4:	3304      	adds	r3, #4
 80086c6:	f104 0715 	add.w	r7, r4, #21
 80086ca:	42ba      	cmp	r2, r7
 80086cc:	bf38      	it	cc
 80086ce:	2304      	movcc	r3, #4
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	9b02      	ldr	r3, [sp, #8]
 80086d4:	9103      	str	r1, [sp, #12]
 80086d6:	428b      	cmp	r3, r1
 80086d8:	d80c      	bhi.n	80086f4 <__multiply+0x9c>
 80086da:	2e00      	cmp	r6, #0
 80086dc:	dd03      	ble.n	80086e6 <__multiply+0x8e>
 80086de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d05a      	beq.n	800879c <__multiply+0x144>
 80086e6:	6106      	str	r6, [r0, #16]
 80086e8:	b005      	add	sp, #20
 80086ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ee:	f843 2b04 	str.w	r2, [r3], #4
 80086f2:	e7d8      	b.n	80086a6 <__multiply+0x4e>
 80086f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80086f8:	f1ba 0f00 	cmp.w	sl, #0
 80086fc:	d023      	beq.n	8008746 <__multiply+0xee>
 80086fe:	46a9      	mov	r9, r5
 8008700:	f04f 0c00 	mov.w	ip, #0
 8008704:	f104 0e14 	add.w	lr, r4, #20
 8008708:	f85e 7b04 	ldr.w	r7, [lr], #4
 800870c:	f8d9 3000 	ldr.w	r3, [r9]
 8008710:	fa1f fb87 	uxth.w	fp, r7
 8008714:	b29b      	uxth	r3, r3
 8008716:	fb0a 330b 	mla	r3, sl, fp, r3
 800871a:	4463      	add	r3, ip
 800871c:	f8d9 c000 	ldr.w	ip, [r9]
 8008720:	0c3f      	lsrs	r7, r7, #16
 8008722:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008726:	fb0a c707 	mla	r7, sl, r7, ip
 800872a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800872e:	b29b      	uxth	r3, r3
 8008730:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008734:	4572      	cmp	r2, lr
 8008736:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800873a:	f849 3b04 	str.w	r3, [r9], #4
 800873e:	d8e3      	bhi.n	8008708 <__multiply+0xb0>
 8008740:	9b01      	ldr	r3, [sp, #4]
 8008742:	f845 c003 	str.w	ip, [r5, r3]
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	3104      	adds	r1, #4
 800874a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800874e:	f1b9 0f00 	cmp.w	r9, #0
 8008752:	d021      	beq.n	8008798 <__multiply+0x140>
 8008754:	46ae      	mov	lr, r5
 8008756:	f04f 0a00 	mov.w	sl, #0
 800875a:	682b      	ldr	r3, [r5, #0]
 800875c:	f104 0c14 	add.w	ip, r4, #20
 8008760:	f8bc b000 	ldrh.w	fp, [ip]
 8008764:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008768:	b29b      	uxth	r3, r3
 800876a:	fb09 770b 	mla	r7, r9, fp, r7
 800876e:	4457      	add	r7, sl
 8008770:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008774:	f84e 3b04 	str.w	r3, [lr], #4
 8008778:	f85c 3b04 	ldr.w	r3, [ip], #4
 800877c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008780:	f8be 3000 	ldrh.w	r3, [lr]
 8008784:	4562      	cmp	r2, ip
 8008786:	fb09 330a 	mla	r3, r9, sl, r3
 800878a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800878e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008792:	d8e5      	bhi.n	8008760 <__multiply+0x108>
 8008794:	9f01      	ldr	r7, [sp, #4]
 8008796:	51eb      	str	r3, [r5, r7]
 8008798:	3504      	adds	r5, #4
 800879a:	e79a      	b.n	80086d2 <__multiply+0x7a>
 800879c:	3e01      	subs	r6, #1
 800879e:	e79c      	b.n	80086da <__multiply+0x82>
 80087a0:	0800c1e4 	.word	0x0800c1e4
 80087a4:	0800c1f5 	.word	0x0800c1f5

080087a8 <__pow5mult>:
 80087a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ac:	4615      	mov	r5, r2
 80087ae:	f012 0203 	ands.w	r2, r2, #3
 80087b2:	4607      	mov	r7, r0
 80087b4:	460e      	mov	r6, r1
 80087b6:	d007      	beq.n	80087c8 <__pow5mult+0x20>
 80087b8:	4c25      	ldr	r4, [pc, #148]	@ (8008850 <__pow5mult+0xa8>)
 80087ba:	3a01      	subs	r2, #1
 80087bc:	2300      	movs	r3, #0
 80087be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087c2:	f7ff fea1 	bl	8008508 <__multadd>
 80087c6:	4606      	mov	r6, r0
 80087c8:	10ad      	asrs	r5, r5, #2
 80087ca:	d03d      	beq.n	8008848 <__pow5mult+0xa0>
 80087cc:	69fc      	ldr	r4, [r7, #28]
 80087ce:	b97c      	cbnz	r4, 80087f0 <__pow5mult+0x48>
 80087d0:	2010      	movs	r0, #16
 80087d2:	f7ff fd81 	bl	80082d8 <malloc>
 80087d6:	4602      	mov	r2, r0
 80087d8:	61f8      	str	r0, [r7, #28]
 80087da:	b928      	cbnz	r0, 80087e8 <__pow5mult+0x40>
 80087dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008854 <__pow5mult+0xac>)
 80087e2:	481d      	ldr	r0, [pc, #116]	@ (8008858 <__pow5mult+0xb0>)
 80087e4:	f000 fbe6 	bl	8008fb4 <__assert_func>
 80087e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087ec:	6004      	str	r4, [r0, #0]
 80087ee:	60c4      	str	r4, [r0, #12]
 80087f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087f8:	b94c      	cbnz	r4, 800880e <__pow5mult+0x66>
 80087fa:	f240 2171 	movw	r1, #625	@ 0x271
 80087fe:	4638      	mov	r0, r7
 8008800:	f7ff ff14 	bl	800862c <__i2b>
 8008804:	2300      	movs	r3, #0
 8008806:	4604      	mov	r4, r0
 8008808:	f8c8 0008 	str.w	r0, [r8, #8]
 800880c:	6003      	str	r3, [r0, #0]
 800880e:	f04f 0900 	mov.w	r9, #0
 8008812:	07eb      	lsls	r3, r5, #31
 8008814:	d50a      	bpl.n	800882c <__pow5mult+0x84>
 8008816:	4631      	mov	r1, r6
 8008818:	4622      	mov	r2, r4
 800881a:	4638      	mov	r0, r7
 800881c:	f7ff ff1c 	bl	8008658 <__multiply>
 8008820:	4680      	mov	r8, r0
 8008822:	4631      	mov	r1, r6
 8008824:	4638      	mov	r0, r7
 8008826:	f7ff fe4d 	bl	80084c4 <_Bfree>
 800882a:	4646      	mov	r6, r8
 800882c:	106d      	asrs	r5, r5, #1
 800882e:	d00b      	beq.n	8008848 <__pow5mult+0xa0>
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	b938      	cbnz	r0, 8008844 <__pow5mult+0x9c>
 8008834:	4622      	mov	r2, r4
 8008836:	4621      	mov	r1, r4
 8008838:	4638      	mov	r0, r7
 800883a:	f7ff ff0d 	bl	8008658 <__multiply>
 800883e:	6020      	str	r0, [r4, #0]
 8008840:	f8c0 9000 	str.w	r9, [r0]
 8008844:	4604      	mov	r4, r0
 8008846:	e7e4      	b.n	8008812 <__pow5mult+0x6a>
 8008848:	4630      	mov	r0, r6
 800884a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884e:	bf00      	nop
 8008850:	0800c250 	.word	0x0800c250
 8008854:	0800c175 	.word	0x0800c175
 8008858:	0800c1f5 	.word	0x0800c1f5

0800885c <__lshift>:
 800885c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008860:	460c      	mov	r4, r1
 8008862:	4607      	mov	r7, r0
 8008864:	4691      	mov	r9, r2
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	6849      	ldr	r1, [r1, #4]
 800886a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800886e:	68a3      	ldr	r3, [r4, #8]
 8008870:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008874:	f108 0601 	add.w	r6, r8, #1
 8008878:	42b3      	cmp	r3, r6
 800887a:	db0b      	blt.n	8008894 <__lshift+0x38>
 800887c:	4638      	mov	r0, r7
 800887e:	f7ff fde1 	bl	8008444 <_Balloc>
 8008882:	4605      	mov	r5, r0
 8008884:	b948      	cbnz	r0, 800889a <__lshift+0x3e>
 8008886:	4602      	mov	r2, r0
 8008888:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800888c:	4b27      	ldr	r3, [pc, #156]	@ (800892c <__lshift+0xd0>)
 800888e:	4828      	ldr	r0, [pc, #160]	@ (8008930 <__lshift+0xd4>)
 8008890:	f000 fb90 	bl	8008fb4 <__assert_func>
 8008894:	3101      	adds	r1, #1
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	e7ee      	b.n	8008878 <__lshift+0x1c>
 800889a:	2300      	movs	r3, #0
 800889c:	f100 0114 	add.w	r1, r0, #20
 80088a0:	f100 0210 	add.w	r2, r0, #16
 80088a4:	4618      	mov	r0, r3
 80088a6:	4553      	cmp	r3, sl
 80088a8:	db33      	blt.n	8008912 <__lshift+0xb6>
 80088aa:	6920      	ldr	r0, [r4, #16]
 80088ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088b0:	f104 0314 	add.w	r3, r4, #20
 80088b4:	f019 091f 	ands.w	r9, r9, #31
 80088b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088c0:	d02b      	beq.n	800891a <__lshift+0xbe>
 80088c2:	468a      	mov	sl, r1
 80088c4:	2200      	movs	r2, #0
 80088c6:	f1c9 0e20 	rsb	lr, r9, #32
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	fa00 f009 	lsl.w	r0, r0, r9
 80088d0:	4310      	orrs	r0, r2
 80088d2:	f84a 0b04 	str.w	r0, [sl], #4
 80088d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088da:	459c      	cmp	ip, r3
 80088dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80088e0:	d8f3      	bhi.n	80088ca <__lshift+0x6e>
 80088e2:	ebac 0304 	sub.w	r3, ip, r4
 80088e6:	3b15      	subs	r3, #21
 80088e8:	f023 0303 	bic.w	r3, r3, #3
 80088ec:	3304      	adds	r3, #4
 80088ee:	f104 0015 	add.w	r0, r4, #21
 80088f2:	4584      	cmp	ip, r0
 80088f4:	bf38      	it	cc
 80088f6:	2304      	movcc	r3, #4
 80088f8:	50ca      	str	r2, [r1, r3]
 80088fa:	b10a      	cbz	r2, 8008900 <__lshift+0xa4>
 80088fc:	f108 0602 	add.w	r6, r8, #2
 8008900:	3e01      	subs	r6, #1
 8008902:	4638      	mov	r0, r7
 8008904:	4621      	mov	r1, r4
 8008906:	612e      	str	r6, [r5, #16]
 8008908:	f7ff fddc 	bl	80084c4 <_Bfree>
 800890c:	4628      	mov	r0, r5
 800890e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008912:	f842 0f04 	str.w	r0, [r2, #4]!
 8008916:	3301      	adds	r3, #1
 8008918:	e7c5      	b.n	80088a6 <__lshift+0x4a>
 800891a:	3904      	subs	r1, #4
 800891c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008920:	459c      	cmp	ip, r3
 8008922:	f841 2f04 	str.w	r2, [r1, #4]!
 8008926:	d8f9      	bhi.n	800891c <__lshift+0xc0>
 8008928:	e7ea      	b.n	8008900 <__lshift+0xa4>
 800892a:	bf00      	nop
 800892c:	0800c1e4 	.word	0x0800c1e4
 8008930:	0800c1f5 	.word	0x0800c1f5

08008934 <__mcmp>:
 8008934:	4603      	mov	r3, r0
 8008936:	690a      	ldr	r2, [r1, #16]
 8008938:	6900      	ldr	r0, [r0, #16]
 800893a:	b530      	push	{r4, r5, lr}
 800893c:	1a80      	subs	r0, r0, r2
 800893e:	d10e      	bne.n	800895e <__mcmp+0x2a>
 8008940:	3314      	adds	r3, #20
 8008942:	3114      	adds	r1, #20
 8008944:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008948:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800894c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008950:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008954:	4295      	cmp	r5, r2
 8008956:	d003      	beq.n	8008960 <__mcmp+0x2c>
 8008958:	d205      	bcs.n	8008966 <__mcmp+0x32>
 800895a:	f04f 30ff 	mov.w	r0, #4294967295
 800895e:	bd30      	pop	{r4, r5, pc}
 8008960:	42a3      	cmp	r3, r4
 8008962:	d3f3      	bcc.n	800894c <__mcmp+0x18>
 8008964:	e7fb      	b.n	800895e <__mcmp+0x2a>
 8008966:	2001      	movs	r0, #1
 8008968:	e7f9      	b.n	800895e <__mcmp+0x2a>
	...

0800896c <__mdiff>:
 800896c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008970:	4689      	mov	r9, r1
 8008972:	4606      	mov	r6, r0
 8008974:	4611      	mov	r1, r2
 8008976:	4648      	mov	r0, r9
 8008978:	4614      	mov	r4, r2
 800897a:	f7ff ffdb 	bl	8008934 <__mcmp>
 800897e:	1e05      	subs	r5, r0, #0
 8008980:	d112      	bne.n	80089a8 <__mdiff+0x3c>
 8008982:	4629      	mov	r1, r5
 8008984:	4630      	mov	r0, r6
 8008986:	f7ff fd5d 	bl	8008444 <_Balloc>
 800898a:	4602      	mov	r2, r0
 800898c:	b928      	cbnz	r0, 800899a <__mdiff+0x2e>
 800898e:	f240 2137 	movw	r1, #567	@ 0x237
 8008992:	4b3e      	ldr	r3, [pc, #248]	@ (8008a8c <__mdiff+0x120>)
 8008994:	483e      	ldr	r0, [pc, #248]	@ (8008a90 <__mdiff+0x124>)
 8008996:	f000 fb0d 	bl	8008fb4 <__assert_func>
 800899a:	2301      	movs	r3, #1
 800899c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089a0:	4610      	mov	r0, r2
 80089a2:	b003      	add	sp, #12
 80089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a8:	bfbc      	itt	lt
 80089aa:	464b      	movlt	r3, r9
 80089ac:	46a1      	movlt	r9, r4
 80089ae:	4630      	mov	r0, r6
 80089b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089b4:	bfba      	itte	lt
 80089b6:	461c      	movlt	r4, r3
 80089b8:	2501      	movlt	r5, #1
 80089ba:	2500      	movge	r5, #0
 80089bc:	f7ff fd42 	bl	8008444 <_Balloc>
 80089c0:	4602      	mov	r2, r0
 80089c2:	b918      	cbnz	r0, 80089cc <__mdiff+0x60>
 80089c4:	f240 2145 	movw	r1, #581	@ 0x245
 80089c8:	4b30      	ldr	r3, [pc, #192]	@ (8008a8c <__mdiff+0x120>)
 80089ca:	e7e3      	b.n	8008994 <__mdiff+0x28>
 80089cc:	f100 0b14 	add.w	fp, r0, #20
 80089d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80089d4:	f109 0310 	add.w	r3, r9, #16
 80089d8:	60c5      	str	r5, [r0, #12]
 80089da:	f04f 0c00 	mov.w	ip, #0
 80089de:	f109 0514 	add.w	r5, r9, #20
 80089e2:	46d9      	mov	r9, fp
 80089e4:	6926      	ldr	r6, [r4, #16]
 80089e6:	f104 0e14 	add.w	lr, r4, #20
 80089ea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089ee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	9b01      	ldr	r3, [sp, #4]
 80089f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089fe:	b281      	uxth	r1, r0
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	fa1f f38a 	uxth.w	r3, sl
 8008a06:	1a5b      	subs	r3, r3, r1
 8008a08:	0c00      	lsrs	r0, r0, #16
 8008a0a:	4463      	add	r3, ip
 8008a0c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a10:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a1a:	4576      	cmp	r6, lr
 8008a1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a20:	f849 3b04 	str.w	r3, [r9], #4
 8008a24:	d8e6      	bhi.n	80089f4 <__mdiff+0x88>
 8008a26:	1b33      	subs	r3, r6, r4
 8008a28:	3b15      	subs	r3, #21
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	3415      	adds	r4, #21
 8008a30:	3304      	adds	r3, #4
 8008a32:	42a6      	cmp	r6, r4
 8008a34:	bf38      	it	cc
 8008a36:	2304      	movcc	r3, #4
 8008a38:	441d      	add	r5, r3
 8008a3a:	445b      	add	r3, fp
 8008a3c:	461e      	mov	r6, r3
 8008a3e:	462c      	mov	r4, r5
 8008a40:	4544      	cmp	r4, r8
 8008a42:	d30e      	bcc.n	8008a62 <__mdiff+0xf6>
 8008a44:	f108 0103 	add.w	r1, r8, #3
 8008a48:	1b49      	subs	r1, r1, r5
 8008a4a:	f021 0103 	bic.w	r1, r1, #3
 8008a4e:	3d03      	subs	r5, #3
 8008a50:	45a8      	cmp	r8, r5
 8008a52:	bf38      	it	cc
 8008a54:	2100      	movcc	r1, #0
 8008a56:	440b      	add	r3, r1
 8008a58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a5c:	b199      	cbz	r1, 8008a86 <__mdiff+0x11a>
 8008a5e:	6117      	str	r7, [r2, #16]
 8008a60:	e79e      	b.n	80089a0 <__mdiff+0x34>
 8008a62:	46e6      	mov	lr, ip
 8008a64:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a68:	fa1f fc81 	uxth.w	ip, r1
 8008a6c:	44f4      	add	ip, lr
 8008a6e:	0c08      	lsrs	r0, r1, #16
 8008a70:	4471      	add	r1, lr
 8008a72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a76:	b289      	uxth	r1, r1
 8008a78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a80:	f846 1b04 	str.w	r1, [r6], #4
 8008a84:	e7dc      	b.n	8008a40 <__mdiff+0xd4>
 8008a86:	3f01      	subs	r7, #1
 8008a88:	e7e6      	b.n	8008a58 <__mdiff+0xec>
 8008a8a:	bf00      	nop
 8008a8c:	0800c1e4 	.word	0x0800c1e4
 8008a90:	0800c1f5 	.word	0x0800c1f5

08008a94 <__d2b>:
 8008a94:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008a98:	2101      	movs	r1, #1
 8008a9a:	4690      	mov	r8, r2
 8008a9c:	4699      	mov	r9, r3
 8008a9e:	9e08      	ldr	r6, [sp, #32]
 8008aa0:	f7ff fcd0 	bl	8008444 <_Balloc>
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	b930      	cbnz	r0, 8008ab6 <__d2b+0x22>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	f240 310f 	movw	r1, #783	@ 0x30f
 8008aae:	4b23      	ldr	r3, [pc, #140]	@ (8008b3c <__d2b+0xa8>)
 8008ab0:	4823      	ldr	r0, [pc, #140]	@ (8008b40 <__d2b+0xac>)
 8008ab2:	f000 fa7f 	bl	8008fb4 <__assert_func>
 8008ab6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008aba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008abe:	b10d      	cbz	r5, 8008ac4 <__d2b+0x30>
 8008ac0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	f1b8 0300 	subs.w	r3, r8, #0
 8008aca:	d024      	beq.n	8008b16 <__d2b+0x82>
 8008acc:	4668      	mov	r0, sp
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	f7ff fd7f 	bl	80085d2 <__lo0bits>
 8008ad4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ad8:	b1d8      	cbz	r0, 8008b12 <__d2b+0x7e>
 8008ada:	f1c0 0320 	rsb	r3, r0, #32
 8008ade:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae2:	430b      	orrs	r3, r1
 8008ae4:	40c2      	lsrs	r2, r0
 8008ae6:	6163      	str	r3, [r4, #20]
 8008ae8:	9201      	str	r2, [sp, #4]
 8008aea:	9b01      	ldr	r3, [sp, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	bf0c      	ite	eq
 8008af0:	2201      	moveq	r2, #1
 8008af2:	2202      	movne	r2, #2
 8008af4:	61a3      	str	r3, [r4, #24]
 8008af6:	6122      	str	r2, [r4, #16]
 8008af8:	b1ad      	cbz	r5, 8008b26 <__d2b+0x92>
 8008afa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008afe:	4405      	add	r5, r0
 8008b00:	6035      	str	r5, [r6, #0]
 8008b02:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b08:	6018      	str	r0, [r3, #0]
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	b002      	add	sp, #8
 8008b0e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008b12:	6161      	str	r1, [r4, #20]
 8008b14:	e7e9      	b.n	8008aea <__d2b+0x56>
 8008b16:	a801      	add	r0, sp, #4
 8008b18:	f7ff fd5b 	bl	80085d2 <__lo0bits>
 8008b1c:	9b01      	ldr	r3, [sp, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	6163      	str	r3, [r4, #20]
 8008b22:	3020      	adds	r0, #32
 8008b24:	e7e7      	b.n	8008af6 <__d2b+0x62>
 8008b26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b2e:	6030      	str	r0, [r6, #0]
 8008b30:	6918      	ldr	r0, [r3, #16]
 8008b32:	f7ff fd2f 	bl	8008594 <__hi0bits>
 8008b36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b3a:	e7e4      	b.n	8008b06 <__d2b+0x72>
 8008b3c:	0800c1e4 	.word	0x0800c1e4
 8008b40:	0800c1f5 	.word	0x0800c1f5

08008b44 <__ssputs_r>:
 8008b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b48:	461f      	mov	r7, r3
 8008b4a:	688e      	ldr	r6, [r1, #8]
 8008b4c:	4682      	mov	sl, r0
 8008b4e:	42be      	cmp	r6, r7
 8008b50:	460c      	mov	r4, r1
 8008b52:	4690      	mov	r8, r2
 8008b54:	680b      	ldr	r3, [r1, #0]
 8008b56:	d82d      	bhi.n	8008bb4 <__ssputs_r+0x70>
 8008b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b60:	d026      	beq.n	8008bb0 <__ssputs_r+0x6c>
 8008b62:	6965      	ldr	r5, [r4, #20]
 8008b64:	6909      	ldr	r1, [r1, #16]
 8008b66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b6a:	eba3 0901 	sub.w	r9, r3, r1
 8008b6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b72:	1c7b      	adds	r3, r7, #1
 8008b74:	444b      	add	r3, r9
 8008b76:	106d      	asrs	r5, r5, #1
 8008b78:	429d      	cmp	r5, r3
 8008b7a:	bf38      	it	cc
 8008b7c:	461d      	movcc	r5, r3
 8008b7e:	0553      	lsls	r3, r2, #21
 8008b80:	d527      	bpl.n	8008bd2 <__ssputs_r+0x8e>
 8008b82:	4629      	mov	r1, r5
 8008b84:	f7ff fbd2 	bl	800832c <_malloc_r>
 8008b88:	4606      	mov	r6, r0
 8008b8a:	b360      	cbz	r0, 8008be6 <__ssputs_r+0xa2>
 8008b8c:	464a      	mov	r2, r9
 8008b8e:	6921      	ldr	r1, [r4, #16]
 8008b90:	f000 fa02 	bl	8008f98 <memcpy>
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	6126      	str	r6, [r4, #16]
 8008ba2:	444e      	add	r6, r9
 8008ba4:	6026      	str	r6, [r4, #0]
 8008ba6:	463e      	mov	r6, r7
 8008ba8:	6165      	str	r5, [r4, #20]
 8008baa:	eba5 0509 	sub.w	r5, r5, r9
 8008bae:	60a5      	str	r5, [r4, #8]
 8008bb0:	42be      	cmp	r6, r7
 8008bb2:	d900      	bls.n	8008bb6 <__ssputs_r+0x72>
 8008bb4:	463e      	mov	r6, r7
 8008bb6:	4632      	mov	r2, r6
 8008bb8:	4641      	mov	r1, r8
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	f000 f9c2 	bl	8008f44 <memmove>
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	68a3      	ldr	r3, [r4, #8]
 8008bc4:	1b9b      	subs	r3, r3, r6
 8008bc6:	60a3      	str	r3, [r4, #8]
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	4433      	add	r3, r6
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	f000 fa32 	bl	800903c <_realloc_r>
 8008bd8:	4606      	mov	r6, r0
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d1e0      	bne.n	8008ba0 <__ssputs_r+0x5c>
 8008bde:	4650      	mov	r0, sl
 8008be0:	6921      	ldr	r1, [r4, #16]
 8008be2:	f7ff fb31 	bl	8008248 <_free_r>
 8008be6:	230c      	movs	r3, #12
 8008be8:	f8ca 3000 	str.w	r3, [sl]
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	e7e9      	b.n	8008bce <__ssputs_r+0x8a>
	...

08008bfc <_svfiprintf_r>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	4698      	mov	r8, r3
 8008c02:	898b      	ldrh	r3, [r1, #12]
 8008c04:	4607      	mov	r7, r0
 8008c06:	061b      	lsls	r3, r3, #24
 8008c08:	460d      	mov	r5, r1
 8008c0a:	4614      	mov	r4, r2
 8008c0c:	b09d      	sub	sp, #116	@ 0x74
 8008c0e:	d510      	bpl.n	8008c32 <_svfiprintf_r+0x36>
 8008c10:	690b      	ldr	r3, [r1, #16]
 8008c12:	b973      	cbnz	r3, 8008c32 <_svfiprintf_r+0x36>
 8008c14:	2140      	movs	r1, #64	@ 0x40
 8008c16:	f7ff fb89 	bl	800832c <_malloc_r>
 8008c1a:	6028      	str	r0, [r5, #0]
 8008c1c:	6128      	str	r0, [r5, #16]
 8008c1e:	b930      	cbnz	r0, 8008c2e <_svfiprintf_r+0x32>
 8008c20:	230c      	movs	r3, #12
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	b01d      	add	sp, #116	@ 0x74
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	2340      	movs	r3, #64	@ 0x40
 8008c30:	616b      	str	r3, [r5, #20]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c36:	2320      	movs	r3, #32
 8008c38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c3c:	2330      	movs	r3, #48	@ 0x30
 8008c3e:	f04f 0901 	mov.w	r9, #1
 8008c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c46:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008de0 <_svfiprintf_r+0x1e4>
 8008c4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c4e:	4623      	mov	r3, r4
 8008c50:	469a      	mov	sl, r3
 8008c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c56:	b10a      	cbz	r2, 8008c5c <_svfiprintf_r+0x60>
 8008c58:	2a25      	cmp	r2, #37	@ 0x25
 8008c5a:	d1f9      	bne.n	8008c50 <_svfiprintf_r+0x54>
 8008c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c60:	d00b      	beq.n	8008c7a <_svfiprintf_r+0x7e>
 8008c62:	465b      	mov	r3, fp
 8008c64:	4622      	mov	r2, r4
 8008c66:	4629      	mov	r1, r5
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f7ff ff6b 	bl	8008b44 <__ssputs_r>
 8008c6e:	3001      	adds	r0, #1
 8008c70:	f000 80a7 	beq.w	8008dc2 <_svfiprintf_r+0x1c6>
 8008c74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c76:	445a      	add	r2, fp
 8008c78:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 809f 	beq.w	8008dc2 <_svfiprintf_r+0x1c6>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c8e:	f10a 0a01 	add.w	sl, sl, #1
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	9307      	str	r3, [sp, #28]
 8008c96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c9c:	4654      	mov	r4, sl
 8008c9e:	2205      	movs	r2, #5
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	484e      	ldr	r0, [pc, #312]	@ (8008de0 <_svfiprintf_r+0x1e4>)
 8008ca6:	f7fe fc6e 	bl	8007586 <memchr>
 8008caa:	9a04      	ldr	r2, [sp, #16]
 8008cac:	b9d8      	cbnz	r0, 8008ce6 <_svfiprintf_r+0xea>
 8008cae:	06d0      	lsls	r0, r2, #27
 8008cb0:	bf44      	itt	mi
 8008cb2:	2320      	movmi	r3, #32
 8008cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cb8:	0711      	lsls	r1, r2, #28
 8008cba:	bf44      	itt	mi
 8008cbc:	232b      	movmi	r3, #43	@ 0x2b
 8008cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cc8:	d015      	beq.n	8008cf6 <_svfiprintf_r+0xfa>
 8008cca:	4654      	mov	r4, sl
 8008ccc:	2000      	movs	r0, #0
 8008cce:	f04f 0c0a 	mov.w	ip, #10
 8008cd2:	9a07      	ldr	r2, [sp, #28]
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cda:	3b30      	subs	r3, #48	@ 0x30
 8008cdc:	2b09      	cmp	r3, #9
 8008cde:	d94b      	bls.n	8008d78 <_svfiprintf_r+0x17c>
 8008ce0:	b1b0      	cbz	r0, 8008d10 <_svfiprintf_r+0x114>
 8008ce2:	9207      	str	r2, [sp, #28]
 8008ce4:	e014      	b.n	8008d10 <_svfiprintf_r+0x114>
 8008ce6:	eba0 0308 	sub.w	r3, r0, r8
 8008cea:	fa09 f303 	lsl.w	r3, r9, r3
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	46a2      	mov	sl, r4
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	e7d2      	b.n	8008c9c <_svfiprintf_r+0xa0>
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	1d19      	adds	r1, r3, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	9103      	str	r1, [sp, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bfbb      	ittet	lt
 8008d02:	425b      	neglt	r3, r3
 8008d04:	f042 0202 	orrlt.w	r2, r2, #2
 8008d08:	9307      	strge	r3, [sp, #28]
 8008d0a:	9307      	strlt	r3, [sp, #28]
 8008d0c:	bfb8      	it	lt
 8008d0e:	9204      	strlt	r2, [sp, #16]
 8008d10:	7823      	ldrb	r3, [r4, #0]
 8008d12:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d14:	d10a      	bne.n	8008d2c <_svfiprintf_r+0x130>
 8008d16:	7863      	ldrb	r3, [r4, #1]
 8008d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d1a:	d132      	bne.n	8008d82 <_svfiprintf_r+0x186>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	3402      	adds	r4, #2
 8008d20:	1d1a      	adds	r2, r3, #4
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	9203      	str	r2, [sp, #12]
 8008d26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d2a:	9305      	str	r3, [sp, #20]
 8008d2c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008de4 <_svfiprintf_r+0x1e8>
 8008d30:	2203      	movs	r2, #3
 8008d32:	4650      	mov	r0, sl
 8008d34:	7821      	ldrb	r1, [r4, #0]
 8008d36:	f7fe fc26 	bl	8007586 <memchr>
 8008d3a:	b138      	cbz	r0, 8008d4c <_svfiprintf_r+0x150>
 8008d3c:	2240      	movs	r2, #64	@ 0x40
 8008d3e:	9b04      	ldr	r3, [sp, #16]
 8008d40:	eba0 000a 	sub.w	r0, r0, sl
 8008d44:	4082      	lsls	r2, r0
 8008d46:	4313      	orrs	r3, r2
 8008d48:	3401      	adds	r4, #1
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d50:	2206      	movs	r2, #6
 8008d52:	4825      	ldr	r0, [pc, #148]	@ (8008de8 <_svfiprintf_r+0x1ec>)
 8008d54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d58:	f7fe fc15 	bl	8007586 <memchr>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d036      	beq.n	8008dce <_svfiprintf_r+0x1d2>
 8008d60:	4b22      	ldr	r3, [pc, #136]	@ (8008dec <_svfiprintf_r+0x1f0>)
 8008d62:	bb1b      	cbnz	r3, 8008dac <_svfiprintf_r+0x1b0>
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	3307      	adds	r3, #7
 8008d68:	f023 0307 	bic.w	r3, r3, #7
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d72:	4433      	add	r3, r6
 8008d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d76:	e76a      	b.n	8008c4e <_svfiprintf_r+0x52>
 8008d78:	460c      	mov	r4, r1
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d80:	e7a8      	b.n	8008cd4 <_svfiprintf_r+0xd8>
 8008d82:	2300      	movs	r3, #0
 8008d84:	f04f 0c0a 	mov.w	ip, #10
 8008d88:	4619      	mov	r1, r3
 8008d8a:	3401      	adds	r4, #1
 8008d8c:	9305      	str	r3, [sp, #20]
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d94:	3a30      	subs	r2, #48	@ 0x30
 8008d96:	2a09      	cmp	r2, #9
 8008d98:	d903      	bls.n	8008da2 <_svfiprintf_r+0x1a6>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0c6      	beq.n	8008d2c <_svfiprintf_r+0x130>
 8008d9e:	9105      	str	r1, [sp, #20]
 8008da0:	e7c4      	b.n	8008d2c <_svfiprintf_r+0x130>
 8008da2:	4604      	mov	r4, r0
 8008da4:	2301      	movs	r3, #1
 8008da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008daa:	e7f0      	b.n	8008d8e <_svfiprintf_r+0x192>
 8008dac:	ab03      	add	r3, sp, #12
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	462a      	mov	r2, r5
 8008db2:	4638      	mov	r0, r7
 8008db4:	4b0e      	ldr	r3, [pc, #56]	@ (8008df0 <_svfiprintf_r+0x1f4>)
 8008db6:	a904      	add	r1, sp, #16
 8008db8:	f7fd fe82 	bl	8006ac0 <_printf_float>
 8008dbc:	1c42      	adds	r2, r0, #1
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	d1d6      	bne.n	8008d70 <_svfiprintf_r+0x174>
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	065b      	lsls	r3, r3, #25
 8008dc6:	f53f af2d 	bmi.w	8008c24 <_svfiprintf_r+0x28>
 8008dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dcc:	e72c      	b.n	8008c28 <_svfiprintf_r+0x2c>
 8008dce:	ab03      	add	r3, sp, #12
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	4b06      	ldr	r3, [pc, #24]	@ (8008df0 <_svfiprintf_r+0x1f4>)
 8008dd8:	a904      	add	r1, sp, #16
 8008dda:	f7fe f90f 	bl	8006ffc <_printf_i>
 8008dde:	e7ed      	b.n	8008dbc <_svfiprintf_r+0x1c0>
 8008de0:	0800c350 	.word	0x0800c350
 8008de4:	0800c356 	.word	0x0800c356
 8008de8:	0800c35a 	.word	0x0800c35a
 8008dec:	08006ac1 	.word	0x08006ac1
 8008df0:	08008b45 	.word	0x08008b45

08008df4 <__sflush_r>:
 8008df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	0716      	lsls	r6, r2, #28
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	d454      	bmi.n	8008eac <__sflush_r+0xb8>
 8008e02:	684b      	ldr	r3, [r1, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	dc02      	bgt.n	8008e0e <__sflush_r+0x1a>
 8008e08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dd48      	ble.n	8008ea0 <__sflush_r+0xac>
 8008e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e10:	2e00      	cmp	r6, #0
 8008e12:	d045      	beq.n	8008ea0 <__sflush_r+0xac>
 8008e14:	2300      	movs	r3, #0
 8008e16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e1a:	682f      	ldr	r7, [r5, #0]
 8008e1c:	6a21      	ldr	r1, [r4, #32]
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	d030      	beq.n	8008e84 <__sflush_r+0x90>
 8008e22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	0759      	lsls	r1, r3, #29
 8008e28:	d505      	bpl.n	8008e36 <__sflush_r+0x42>
 8008e2a:	6863      	ldr	r3, [r4, #4]
 8008e2c:	1ad2      	subs	r2, r2, r3
 8008e2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e30:	b10b      	cbz	r3, 8008e36 <__sflush_r+0x42>
 8008e32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e34:	1ad2      	subs	r2, r2, r3
 8008e36:	2300      	movs	r3, #0
 8008e38:	4628      	mov	r0, r5
 8008e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e3c:	6a21      	ldr	r1, [r4, #32]
 8008e3e:	47b0      	blx	r6
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	d106      	bne.n	8008e54 <__sflush_r+0x60>
 8008e46:	6829      	ldr	r1, [r5, #0]
 8008e48:	291d      	cmp	r1, #29
 8008e4a:	d82b      	bhi.n	8008ea4 <__sflush_r+0xb0>
 8008e4c:	4a28      	ldr	r2, [pc, #160]	@ (8008ef0 <__sflush_r+0xfc>)
 8008e4e:	410a      	asrs	r2, r1
 8008e50:	07d6      	lsls	r6, r2, #31
 8008e52:	d427      	bmi.n	8008ea4 <__sflush_r+0xb0>
 8008e54:	2200      	movs	r2, #0
 8008e56:	6062      	str	r2, [r4, #4]
 8008e58:	6922      	ldr	r2, [r4, #16]
 8008e5a:	04d9      	lsls	r1, r3, #19
 8008e5c:	6022      	str	r2, [r4, #0]
 8008e5e:	d504      	bpl.n	8008e6a <__sflush_r+0x76>
 8008e60:	1c42      	adds	r2, r0, #1
 8008e62:	d101      	bne.n	8008e68 <__sflush_r+0x74>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b903      	cbnz	r3, 8008e6a <__sflush_r+0x76>
 8008e68:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e6c:	602f      	str	r7, [r5, #0]
 8008e6e:	b1b9      	cbz	r1, 8008ea0 <__sflush_r+0xac>
 8008e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e74:	4299      	cmp	r1, r3
 8008e76:	d002      	beq.n	8008e7e <__sflush_r+0x8a>
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f7ff f9e5 	bl	8008248 <_free_r>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e82:	e00d      	b.n	8008ea0 <__sflush_r+0xac>
 8008e84:	2301      	movs	r3, #1
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b0      	blx	r6
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	1c50      	adds	r0, r2, #1
 8008e8e:	d1c9      	bne.n	8008e24 <__sflush_r+0x30>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0c6      	beq.n	8008e24 <__sflush_r+0x30>
 8008e96:	2b1d      	cmp	r3, #29
 8008e98:	d001      	beq.n	8008e9e <__sflush_r+0xaa>
 8008e9a:	2b16      	cmp	r3, #22
 8008e9c:	d11d      	bne.n	8008eda <__sflush_r+0xe6>
 8008e9e:	602f      	str	r7, [r5, #0]
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e021      	b.n	8008ee8 <__sflush_r+0xf4>
 8008ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ea8:	b21b      	sxth	r3, r3
 8008eaa:	e01a      	b.n	8008ee2 <__sflush_r+0xee>
 8008eac:	690f      	ldr	r7, [r1, #16]
 8008eae:	2f00      	cmp	r7, #0
 8008eb0:	d0f6      	beq.n	8008ea0 <__sflush_r+0xac>
 8008eb2:	0793      	lsls	r3, r2, #30
 8008eb4:	bf18      	it	ne
 8008eb6:	2300      	movne	r3, #0
 8008eb8:	680e      	ldr	r6, [r1, #0]
 8008eba:	bf08      	it	eq
 8008ebc:	694b      	ldreq	r3, [r1, #20]
 8008ebe:	1bf6      	subs	r6, r6, r7
 8008ec0:	600f      	str	r7, [r1, #0]
 8008ec2:	608b      	str	r3, [r1, #8]
 8008ec4:	2e00      	cmp	r6, #0
 8008ec6:	ddeb      	ble.n	8008ea0 <__sflush_r+0xac>
 8008ec8:	4633      	mov	r3, r6
 8008eca:	463a      	mov	r2, r7
 8008ecc:	4628      	mov	r0, r5
 8008ece:	6a21      	ldr	r1, [r4, #32]
 8008ed0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008ed4:	47e0      	blx	ip
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	dc07      	bgt.n	8008eea <__sflush_r+0xf6>
 8008eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eea:	4407      	add	r7, r0
 8008eec:	1a36      	subs	r6, r6, r0
 8008eee:	e7e9      	b.n	8008ec4 <__sflush_r+0xd0>
 8008ef0:	dfbffffe 	.word	0xdfbffffe

08008ef4 <_fflush_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	690b      	ldr	r3, [r1, #16]
 8008ef8:	4605      	mov	r5, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	b913      	cbnz	r3, 8008f04 <_fflush_r+0x10>
 8008efe:	2500      	movs	r5, #0
 8008f00:	4628      	mov	r0, r5
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	b118      	cbz	r0, 8008f0e <_fflush_r+0x1a>
 8008f06:	6a03      	ldr	r3, [r0, #32]
 8008f08:	b90b      	cbnz	r3, 8008f0e <_fflush_r+0x1a>
 8008f0a:	f7fe fa23 	bl	8007354 <__sinit>
 8008f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0f3      	beq.n	8008efe <_fflush_r+0xa>
 8008f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f18:	07d0      	lsls	r0, r2, #31
 8008f1a:	d404      	bmi.n	8008f26 <_fflush_r+0x32>
 8008f1c:	0599      	lsls	r1, r3, #22
 8008f1e:	d402      	bmi.n	8008f26 <_fflush_r+0x32>
 8008f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f22:	f7fe fb2e 	bl	8007582 <__retarget_lock_acquire_recursive>
 8008f26:	4628      	mov	r0, r5
 8008f28:	4621      	mov	r1, r4
 8008f2a:	f7ff ff63 	bl	8008df4 <__sflush_r>
 8008f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f30:	4605      	mov	r5, r0
 8008f32:	07da      	lsls	r2, r3, #31
 8008f34:	d4e4      	bmi.n	8008f00 <_fflush_r+0xc>
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	059b      	lsls	r3, r3, #22
 8008f3a:	d4e1      	bmi.n	8008f00 <_fflush_r+0xc>
 8008f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f3e:	f7fe fb21 	bl	8007584 <__retarget_lock_release_recursive>
 8008f42:	e7dd      	b.n	8008f00 <_fflush_r+0xc>

08008f44 <memmove>:
 8008f44:	4288      	cmp	r0, r1
 8008f46:	b510      	push	{r4, lr}
 8008f48:	eb01 0402 	add.w	r4, r1, r2
 8008f4c:	d902      	bls.n	8008f54 <memmove+0x10>
 8008f4e:	4284      	cmp	r4, r0
 8008f50:	4623      	mov	r3, r4
 8008f52:	d807      	bhi.n	8008f64 <memmove+0x20>
 8008f54:	1e43      	subs	r3, r0, #1
 8008f56:	42a1      	cmp	r1, r4
 8008f58:	d008      	beq.n	8008f6c <memmove+0x28>
 8008f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f62:	e7f8      	b.n	8008f56 <memmove+0x12>
 8008f64:	4601      	mov	r1, r0
 8008f66:	4402      	add	r2, r0
 8008f68:	428a      	cmp	r2, r1
 8008f6a:	d100      	bne.n	8008f6e <memmove+0x2a>
 8008f6c:	bd10      	pop	{r4, pc}
 8008f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f76:	e7f7      	b.n	8008f68 <memmove+0x24>

08008f78 <_sbrk_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	4d05      	ldr	r5, [pc, #20]	@ (8008f94 <_sbrk_r+0x1c>)
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	f7f9 fffc 	bl	8002f80 <_sbrk>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_sbrk_r+0x1a>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_sbrk_r+0x1a>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	20000ad4 	.word	0x20000ad4

08008f98 <memcpy>:
 8008f98:	440a      	add	r2, r1
 8008f9a:	4291      	cmp	r1, r2
 8008f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fa0:	d100      	bne.n	8008fa4 <memcpy+0xc>
 8008fa2:	4770      	bx	lr
 8008fa4:	b510      	push	{r4, lr}
 8008fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008faa:	4291      	cmp	r1, r2
 8008fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fb0:	d1f9      	bne.n	8008fa6 <memcpy+0xe>
 8008fb2:	bd10      	pop	{r4, pc}

08008fb4 <__assert_func>:
 8008fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fb6:	4614      	mov	r4, r2
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4b09      	ldr	r3, [pc, #36]	@ (8008fe0 <__assert_func+0x2c>)
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68d8      	ldr	r0, [r3, #12]
 8008fc2:	b954      	cbnz	r4, 8008fda <__assert_func+0x26>
 8008fc4:	4b07      	ldr	r3, [pc, #28]	@ (8008fe4 <__assert_func+0x30>)
 8008fc6:	461c      	mov	r4, r3
 8008fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fcc:	9100      	str	r1, [sp, #0]
 8008fce:	462b      	mov	r3, r5
 8008fd0:	4905      	ldr	r1, [pc, #20]	@ (8008fe8 <__assert_func+0x34>)
 8008fd2:	f000 f86f 	bl	80090b4 <fiprintf>
 8008fd6:	f000 f87f 	bl	80090d8 <abort>
 8008fda:	4b04      	ldr	r3, [pc, #16]	@ (8008fec <__assert_func+0x38>)
 8008fdc:	e7f4      	b.n	8008fc8 <__assert_func+0x14>
 8008fde:	bf00      	nop
 8008fe0:	20000084 	.word	0x20000084
 8008fe4:	0800c3a6 	.word	0x0800c3a6
 8008fe8:	0800c378 	.word	0x0800c378
 8008fec:	0800c36b 	.word	0x0800c36b

08008ff0 <_calloc_r>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	fba1 5402 	umull	r5, r4, r1, r2
 8008ff6:	b93c      	cbnz	r4, 8009008 <_calloc_r+0x18>
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7ff f997 	bl	800832c <_malloc_r>
 8008ffe:	4606      	mov	r6, r0
 8009000:	b928      	cbnz	r0, 800900e <_calloc_r+0x1e>
 8009002:	2600      	movs	r6, #0
 8009004:	4630      	mov	r0, r6
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	220c      	movs	r2, #12
 800900a:	6002      	str	r2, [r0, #0]
 800900c:	e7f9      	b.n	8009002 <_calloc_r+0x12>
 800900e:	462a      	mov	r2, r5
 8009010:	4621      	mov	r1, r4
 8009012:	f7fe fa38 	bl	8007486 <memset>
 8009016:	e7f5      	b.n	8009004 <_calloc_r+0x14>

08009018 <__ascii_mbtowc>:
 8009018:	b082      	sub	sp, #8
 800901a:	b901      	cbnz	r1, 800901e <__ascii_mbtowc+0x6>
 800901c:	a901      	add	r1, sp, #4
 800901e:	b142      	cbz	r2, 8009032 <__ascii_mbtowc+0x1a>
 8009020:	b14b      	cbz	r3, 8009036 <__ascii_mbtowc+0x1e>
 8009022:	7813      	ldrb	r3, [r2, #0]
 8009024:	600b      	str	r3, [r1, #0]
 8009026:	7812      	ldrb	r2, [r2, #0]
 8009028:	1e10      	subs	r0, r2, #0
 800902a:	bf18      	it	ne
 800902c:	2001      	movne	r0, #1
 800902e:	b002      	add	sp, #8
 8009030:	4770      	bx	lr
 8009032:	4610      	mov	r0, r2
 8009034:	e7fb      	b.n	800902e <__ascii_mbtowc+0x16>
 8009036:	f06f 0001 	mvn.w	r0, #1
 800903a:	e7f8      	b.n	800902e <__ascii_mbtowc+0x16>

0800903c <_realloc_r>:
 800903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009040:	4680      	mov	r8, r0
 8009042:	4615      	mov	r5, r2
 8009044:	460c      	mov	r4, r1
 8009046:	b921      	cbnz	r1, 8009052 <_realloc_r+0x16>
 8009048:	4611      	mov	r1, r2
 800904a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800904e:	f7ff b96d 	b.w	800832c <_malloc_r>
 8009052:	b92a      	cbnz	r2, 8009060 <_realloc_r+0x24>
 8009054:	f7ff f8f8 	bl	8008248 <_free_r>
 8009058:	2400      	movs	r4, #0
 800905a:	4620      	mov	r0, r4
 800905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009060:	f000 f841 	bl	80090e6 <_malloc_usable_size_r>
 8009064:	4285      	cmp	r5, r0
 8009066:	4606      	mov	r6, r0
 8009068:	d802      	bhi.n	8009070 <_realloc_r+0x34>
 800906a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800906e:	d8f4      	bhi.n	800905a <_realloc_r+0x1e>
 8009070:	4629      	mov	r1, r5
 8009072:	4640      	mov	r0, r8
 8009074:	f7ff f95a 	bl	800832c <_malloc_r>
 8009078:	4607      	mov	r7, r0
 800907a:	2800      	cmp	r0, #0
 800907c:	d0ec      	beq.n	8009058 <_realloc_r+0x1c>
 800907e:	42b5      	cmp	r5, r6
 8009080:	462a      	mov	r2, r5
 8009082:	4621      	mov	r1, r4
 8009084:	bf28      	it	cs
 8009086:	4632      	movcs	r2, r6
 8009088:	f7ff ff86 	bl	8008f98 <memcpy>
 800908c:	4621      	mov	r1, r4
 800908e:	4640      	mov	r0, r8
 8009090:	f7ff f8da 	bl	8008248 <_free_r>
 8009094:	463c      	mov	r4, r7
 8009096:	e7e0      	b.n	800905a <_realloc_r+0x1e>

08009098 <__ascii_wctomb>:
 8009098:	4603      	mov	r3, r0
 800909a:	4608      	mov	r0, r1
 800909c:	b141      	cbz	r1, 80090b0 <__ascii_wctomb+0x18>
 800909e:	2aff      	cmp	r2, #255	@ 0xff
 80090a0:	d904      	bls.n	80090ac <__ascii_wctomb+0x14>
 80090a2:	228a      	movs	r2, #138	@ 0x8a
 80090a4:	f04f 30ff 	mov.w	r0, #4294967295
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	4770      	bx	lr
 80090ac:	2001      	movs	r0, #1
 80090ae:	700a      	strb	r2, [r1, #0]
 80090b0:	4770      	bx	lr
	...

080090b4 <fiprintf>:
 80090b4:	b40e      	push	{r1, r2, r3}
 80090b6:	b503      	push	{r0, r1, lr}
 80090b8:	4601      	mov	r1, r0
 80090ba:	ab03      	add	r3, sp, #12
 80090bc:	4805      	ldr	r0, [pc, #20]	@ (80090d4 <fiprintf+0x20>)
 80090be:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c2:	6800      	ldr	r0, [r0, #0]
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	f000 f83d 	bl	8009144 <_vfiprintf_r>
 80090ca:	b002      	add	sp, #8
 80090cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80090d0:	b003      	add	sp, #12
 80090d2:	4770      	bx	lr
 80090d4:	20000084 	.word	0x20000084

080090d8 <abort>:
 80090d8:	2006      	movs	r0, #6
 80090da:	b508      	push	{r3, lr}
 80090dc:	f000 fa06 	bl	80094ec <raise>
 80090e0:	2001      	movs	r0, #1
 80090e2:	f7f9 fed8 	bl	8002e96 <_exit>

080090e6 <_malloc_usable_size_r>:
 80090e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ea:	1f18      	subs	r0, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	bfbc      	itt	lt
 80090f0:	580b      	ldrlt	r3, [r1, r0]
 80090f2:	18c0      	addlt	r0, r0, r3
 80090f4:	4770      	bx	lr

080090f6 <__sfputc_r>:
 80090f6:	6893      	ldr	r3, [r2, #8]
 80090f8:	b410      	push	{r4}
 80090fa:	3b01      	subs	r3, #1
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	6093      	str	r3, [r2, #8]
 8009100:	da07      	bge.n	8009112 <__sfputc_r+0x1c>
 8009102:	6994      	ldr	r4, [r2, #24]
 8009104:	42a3      	cmp	r3, r4
 8009106:	db01      	blt.n	800910c <__sfputc_r+0x16>
 8009108:	290a      	cmp	r1, #10
 800910a:	d102      	bne.n	8009112 <__sfputc_r+0x1c>
 800910c:	bc10      	pop	{r4}
 800910e:	f000 b931 	b.w	8009374 <__swbuf_r>
 8009112:	6813      	ldr	r3, [r2, #0]
 8009114:	1c58      	adds	r0, r3, #1
 8009116:	6010      	str	r0, [r2, #0]
 8009118:	7019      	strb	r1, [r3, #0]
 800911a:	4608      	mov	r0, r1
 800911c:	bc10      	pop	{r4}
 800911e:	4770      	bx	lr

08009120 <__sfputs_r>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	4614      	mov	r4, r2
 8009128:	18d5      	adds	r5, r2, r3
 800912a:	42ac      	cmp	r4, r5
 800912c:	d101      	bne.n	8009132 <__sfputs_r+0x12>
 800912e:	2000      	movs	r0, #0
 8009130:	e007      	b.n	8009142 <__sfputs_r+0x22>
 8009132:	463a      	mov	r2, r7
 8009134:	4630      	mov	r0, r6
 8009136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913a:	f7ff ffdc 	bl	80090f6 <__sfputc_r>
 800913e:	1c43      	adds	r3, r0, #1
 8009140:	d1f3      	bne.n	800912a <__sfputs_r+0xa>
 8009142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009144 <_vfiprintf_r>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	460d      	mov	r5, r1
 800914a:	4614      	mov	r4, r2
 800914c:	4698      	mov	r8, r3
 800914e:	4606      	mov	r6, r0
 8009150:	b09d      	sub	sp, #116	@ 0x74
 8009152:	b118      	cbz	r0, 800915c <_vfiprintf_r+0x18>
 8009154:	6a03      	ldr	r3, [r0, #32]
 8009156:	b90b      	cbnz	r3, 800915c <_vfiprintf_r+0x18>
 8009158:	f7fe f8fc 	bl	8007354 <__sinit>
 800915c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800915e:	07d9      	lsls	r1, r3, #31
 8009160:	d405      	bmi.n	800916e <_vfiprintf_r+0x2a>
 8009162:	89ab      	ldrh	r3, [r5, #12]
 8009164:	059a      	lsls	r2, r3, #22
 8009166:	d402      	bmi.n	800916e <_vfiprintf_r+0x2a>
 8009168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800916a:	f7fe fa0a 	bl	8007582 <__retarget_lock_acquire_recursive>
 800916e:	89ab      	ldrh	r3, [r5, #12]
 8009170:	071b      	lsls	r3, r3, #28
 8009172:	d501      	bpl.n	8009178 <_vfiprintf_r+0x34>
 8009174:	692b      	ldr	r3, [r5, #16]
 8009176:	b99b      	cbnz	r3, 80091a0 <_vfiprintf_r+0x5c>
 8009178:	4629      	mov	r1, r5
 800917a:	4630      	mov	r0, r6
 800917c:	f000 f938 	bl	80093f0 <__swsetup_r>
 8009180:	b170      	cbz	r0, 80091a0 <_vfiprintf_r+0x5c>
 8009182:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009184:	07dc      	lsls	r4, r3, #31
 8009186:	d504      	bpl.n	8009192 <_vfiprintf_r+0x4e>
 8009188:	f04f 30ff 	mov.w	r0, #4294967295
 800918c:	b01d      	add	sp, #116	@ 0x74
 800918e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	0598      	lsls	r0, r3, #22
 8009196:	d4f7      	bmi.n	8009188 <_vfiprintf_r+0x44>
 8009198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800919a:	f7fe f9f3 	bl	8007584 <__retarget_lock_release_recursive>
 800919e:	e7f3      	b.n	8009188 <_vfiprintf_r+0x44>
 80091a0:	2300      	movs	r3, #0
 80091a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091a4:	2320      	movs	r3, #32
 80091a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091aa:	2330      	movs	r3, #48	@ 0x30
 80091ac:	f04f 0901 	mov.w	r9, #1
 80091b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80091b4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009360 <_vfiprintf_r+0x21c>
 80091b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091bc:	4623      	mov	r3, r4
 80091be:	469a      	mov	sl, r3
 80091c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091c4:	b10a      	cbz	r2, 80091ca <_vfiprintf_r+0x86>
 80091c6:	2a25      	cmp	r2, #37	@ 0x25
 80091c8:	d1f9      	bne.n	80091be <_vfiprintf_r+0x7a>
 80091ca:	ebba 0b04 	subs.w	fp, sl, r4
 80091ce:	d00b      	beq.n	80091e8 <_vfiprintf_r+0xa4>
 80091d0:	465b      	mov	r3, fp
 80091d2:	4622      	mov	r2, r4
 80091d4:	4629      	mov	r1, r5
 80091d6:	4630      	mov	r0, r6
 80091d8:	f7ff ffa2 	bl	8009120 <__sfputs_r>
 80091dc:	3001      	adds	r0, #1
 80091de:	f000 80a7 	beq.w	8009330 <_vfiprintf_r+0x1ec>
 80091e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091e4:	445a      	add	r2, fp
 80091e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80091e8:	f89a 3000 	ldrb.w	r3, [sl]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 809f 	beq.w	8009330 <_vfiprintf_r+0x1ec>
 80091f2:	2300      	movs	r3, #0
 80091f4:	f04f 32ff 	mov.w	r2, #4294967295
 80091f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091fc:	f10a 0a01 	add.w	sl, sl, #1
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	9307      	str	r3, [sp, #28]
 8009204:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009208:	931a      	str	r3, [sp, #104]	@ 0x68
 800920a:	4654      	mov	r4, sl
 800920c:	2205      	movs	r2, #5
 800920e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009212:	4853      	ldr	r0, [pc, #332]	@ (8009360 <_vfiprintf_r+0x21c>)
 8009214:	f7fe f9b7 	bl	8007586 <memchr>
 8009218:	9a04      	ldr	r2, [sp, #16]
 800921a:	b9d8      	cbnz	r0, 8009254 <_vfiprintf_r+0x110>
 800921c:	06d1      	lsls	r1, r2, #27
 800921e:	bf44      	itt	mi
 8009220:	2320      	movmi	r3, #32
 8009222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009226:	0713      	lsls	r3, r2, #28
 8009228:	bf44      	itt	mi
 800922a:	232b      	movmi	r3, #43	@ 0x2b
 800922c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009230:	f89a 3000 	ldrb.w	r3, [sl]
 8009234:	2b2a      	cmp	r3, #42	@ 0x2a
 8009236:	d015      	beq.n	8009264 <_vfiprintf_r+0x120>
 8009238:	4654      	mov	r4, sl
 800923a:	2000      	movs	r0, #0
 800923c:	f04f 0c0a 	mov.w	ip, #10
 8009240:	9a07      	ldr	r2, [sp, #28]
 8009242:	4621      	mov	r1, r4
 8009244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009248:	3b30      	subs	r3, #48	@ 0x30
 800924a:	2b09      	cmp	r3, #9
 800924c:	d94b      	bls.n	80092e6 <_vfiprintf_r+0x1a2>
 800924e:	b1b0      	cbz	r0, 800927e <_vfiprintf_r+0x13a>
 8009250:	9207      	str	r2, [sp, #28]
 8009252:	e014      	b.n	800927e <_vfiprintf_r+0x13a>
 8009254:	eba0 0308 	sub.w	r3, r0, r8
 8009258:	fa09 f303 	lsl.w	r3, r9, r3
 800925c:	4313      	orrs	r3, r2
 800925e:	46a2      	mov	sl, r4
 8009260:	9304      	str	r3, [sp, #16]
 8009262:	e7d2      	b.n	800920a <_vfiprintf_r+0xc6>
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	1d19      	adds	r1, r3, #4
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	9103      	str	r1, [sp, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	bfbb      	ittet	lt
 8009270:	425b      	neglt	r3, r3
 8009272:	f042 0202 	orrlt.w	r2, r2, #2
 8009276:	9307      	strge	r3, [sp, #28]
 8009278:	9307      	strlt	r3, [sp, #28]
 800927a:	bfb8      	it	lt
 800927c:	9204      	strlt	r2, [sp, #16]
 800927e:	7823      	ldrb	r3, [r4, #0]
 8009280:	2b2e      	cmp	r3, #46	@ 0x2e
 8009282:	d10a      	bne.n	800929a <_vfiprintf_r+0x156>
 8009284:	7863      	ldrb	r3, [r4, #1]
 8009286:	2b2a      	cmp	r3, #42	@ 0x2a
 8009288:	d132      	bne.n	80092f0 <_vfiprintf_r+0x1ac>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	3402      	adds	r4, #2
 800928e:	1d1a      	adds	r2, r3, #4
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	9203      	str	r2, [sp, #12]
 8009294:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009298:	9305      	str	r3, [sp, #20]
 800929a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009364 <_vfiprintf_r+0x220>
 800929e:	2203      	movs	r2, #3
 80092a0:	4650      	mov	r0, sl
 80092a2:	7821      	ldrb	r1, [r4, #0]
 80092a4:	f7fe f96f 	bl	8007586 <memchr>
 80092a8:	b138      	cbz	r0, 80092ba <_vfiprintf_r+0x176>
 80092aa:	2240      	movs	r2, #64	@ 0x40
 80092ac:	9b04      	ldr	r3, [sp, #16]
 80092ae:	eba0 000a 	sub.w	r0, r0, sl
 80092b2:	4082      	lsls	r2, r0
 80092b4:	4313      	orrs	r3, r2
 80092b6:	3401      	adds	r4, #1
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092be:	2206      	movs	r2, #6
 80092c0:	4829      	ldr	r0, [pc, #164]	@ (8009368 <_vfiprintf_r+0x224>)
 80092c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092c6:	f7fe f95e 	bl	8007586 <memchr>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d03f      	beq.n	800934e <_vfiprintf_r+0x20a>
 80092ce:	4b27      	ldr	r3, [pc, #156]	@ (800936c <_vfiprintf_r+0x228>)
 80092d0:	bb1b      	cbnz	r3, 800931a <_vfiprintf_r+0x1d6>
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	3307      	adds	r3, #7
 80092d6:	f023 0307 	bic.w	r3, r3, #7
 80092da:	3308      	adds	r3, #8
 80092dc:	9303      	str	r3, [sp, #12]
 80092de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e0:	443b      	add	r3, r7
 80092e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092e4:	e76a      	b.n	80091bc <_vfiprintf_r+0x78>
 80092e6:	460c      	mov	r4, r1
 80092e8:	2001      	movs	r0, #1
 80092ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ee:	e7a8      	b.n	8009242 <_vfiprintf_r+0xfe>
 80092f0:	2300      	movs	r3, #0
 80092f2:	f04f 0c0a 	mov.w	ip, #10
 80092f6:	4619      	mov	r1, r3
 80092f8:	3401      	adds	r4, #1
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	4620      	mov	r0, r4
 80092fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009302:	3a30      	subs	r2, #48	@ 0x30
 8009304:	2a09      	cmp	r2, #9
 8009306:	d903      	bls.n	8009310 <_vfiprintf_r+0x1cc>
 8009308:	2b00      	cmp	r3, #0
 800930a:	d0c6      	beq.n	800929a <_vfiprintf_r+0x156>
 800930c:	9105      	str	r1, [sp, #20]
 800930e:	e7c4      	b.n	800929a <_vfiprintf_r+0x156>
 8009310:	4604      	mov	r4, r0
 8009312:	2301      	movs	r3, #1
 8009314:	fb0c 2101 	mla	r1, ip, r1, r2
 8009318:	e7f0      	b.n	80092fc <_vfiprintf_r+0x1b8>
 800931a:	ab03      	add	r3, sp, #12
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	462a      	mov	r2, r5
 8009320:	4630      	mov	r0, r6
 8009322:	4b13      	ldr	r3, [pc, #76]	@ (8009370 <_vfiprintf_r+0x22c>)
 8009324:	a904      	add	r1, sp, #16
 8009326:	f7fd fbcb 	bl	8006ac0 <_printf_float>
 800932a:	4607      	mov	r7, r0
 800932c:	1c78      	adds	r0, r7, #1
 800932e:	d1d6      	bne.n	80092de <_vfiprintf_r+0x19a>
 8009330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009332:	07d9      	lsls	r1, r3, #31
 8009334:	d405      	bmi.n	8009342 <_vfiprintf_r+0x1fe>
 8009336:	89ab      	ldrh	r3, [r5, #12]
 8009338:	059a      	lsls	r2, r3, #22
 800933a:	d402      	bmi.n	8009342 <_vfiprintf_r+0x1fe>
 800933c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800933e:	f7fe f921 	bl	8007584 <__retarget_lock_release_recursive>
 8009342:	89ab      	ldrh	r3, [r5, #12]
 8009344:	065b      	lsls	r3, r3, #25
 8009346:	f53f af1f 	bmi.w	8009188 <_vfiprintf_r+0x44>
 800934a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800934c:	e71e      	b.n	800918c <_vfiprintf_r+0x48>
 800934e:	ab03      	add	r3, sp, #12
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	462a      	mov	r2, r5
 8009354:	4630      	mov	r0, r6
 8009356:	4b06      	ldr	r3, [pc, #24]	@ (8009370 <_vfiprintf_r+0x22c>)
 8009358:	a904      	add	r1, sp, #16
 800935a:	f7fd fe4f 	bl	8006ffc <_printf_i>
 800935e:	e7e4      	b.n	800932a <_vfiprintf_r+0x1e6>
 8009360:	0800c350 	.word	0x0800c350
 8009364:	0800c356 	.word	0x0800c356
 8009368:	0800c35a 	.word	0x0800c35a
 800936c:	08006ac1 	.word	0x08006ac1
 8009370:	08009121 	.word	0x08009121

08009374 <__swbuf_r>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	460e      	mov	r6, r1
 8009378:	4614      	mov	r4, r2
 800937a:	4605      	mov	r5, r0
 800937c:	b118      	cbz	r0, 8009386 <__swbuf_r+0x12>
 800937e:	6a03      	ldr	r3, [r0, #32]
 8009380:	b90b      	cbnz	r3, 8009386 <__swbuf_r+0x12>
 8009382:	f7fd ffe7 	bl	8007354 <__sinit>
 8009386:	69a3      	ldr	r3, [r4, #24]
 8009388:	60a3      	str	r3, [r4, #8]
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	071a      	lsls	r2, r3, #28
 800938e:	d501      	bpl.n	8009394 <__swbuf_r+0x20>
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	b943      	cbnz	r3, 80093a6 <__swbuf_r+0x32>
 8009394:	4621      	mov	r1, r4
 8009396:	4628      	mov	r0, r5
 8009398:	f000 f82a 	bl	80093f0 <__swsetup_r>
 800939c:	b118      	cbz	r0, 80093a6 <__swbuf_r+0x32>
 800939e:	f04f 37ff 	mov.w	r7, #4294967295
 80093a2:	4638      	mov	r0, r7
 80093a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	6922      	ldr	r2, [r4, #16]
 80093aa:	b2f6      	uxtb	r6, r6
 80093ac:	1a98      	subs	r0, r3, r2
 80093ae:	6963      	ldr	r3, [r4, #20]
 80093b0:	4637      	mov	r7, r6
 80093b2:	4283      	cmp	r3, r0
 80093b4:	dc05      	bgt.n	80093c2 <__swbuf_r+0x4e>
 80093b6:	4621      	mov	r1, r4
 80093b8:	4628      	mov	r0, r5
 80093ba:	f7ff fd9b 	bl	8008ef4 <_fflush_r>
 80093be:	2800      	cmp	r0, #0
 80093c0:	d1ed      	bne.n	800939e <__swbuf_r+0x2a>
 80093c2:	68a3      	ldr	r3, [r4, #8]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	60a3      	str	r3, [r4, #8]
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	6022      	str	r2, [r4, #0]
 80093ce:	701e      	strb	r6, [r3, #0]
 80093d0:	6962      	ldr	r2, [r4, #20]
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d004      	beq.n	80093e2 <__swbuf_r+0x6e>
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	07db      	lsls	r3, r3, #31
 80093dc:	d5e1      	bpl.n	80093a2 <__swbuf_r+0x2e>
 80093de:	2e0a      	cmp	r6, #10
 80093e0:	d1df      	bne.n	80093a2 <__swbuf_r+0x2e>
 80093e2:	4621      	mov	r1, r4
 80093e4:	4628      	mov	r0, r5
 80093e6:	f7ff fd85 	bl	8008ef4 <_fflush_r>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d0d9      	beq.n	80093a2 <__swbuf_r+0x2e>
 80093ee:	e7d6      	b.n	800939e <__swbuf_r+0x2a>

080093f0 <__swsetup_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4b29      	ldr	r3, [pc, #164]	@ (8009498 <__swsetup_r+0xa8>)
 80093f4:	4605      	mov	r5, r0
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	460c      	mov	r4, r1
 80093fa:	b118      	cbz	r0, 8009404 <__swsetup_r+0x14>
 80093fc:	6a03      	ldr	r3, [r0, #32]
 80093fe:	b90b      	cbnz	r3, 8009404 <__swsetup_r+0x14>
 8009400:	f7fd ffa8 	bl	8007354 <__sinit>
 8009404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009408:	0719      	lsls	r1, r3, #28
 800940a:	d422      	bmi.n	8009452 <__swsetup_r+0x62>
 800940c:	06da      	lsls	r2, r3, #27
 800940e:	d407      	bmi.n	8009420 <__swsetup_r+0x30>
 8009410:	2209      	movs	r2, #9
 8009412:	602a      	str	r2, [r5, #0]
 8009414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	e033      	b.n	8009488 <__swsetup_r+0x98>
 8009420:	0758      	lsls	r0, r3, #29
 8009422:	d512      	bpl.n	800944a <__swsetup_r+0x5a>
 8009424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009426:	b141      	cbz	r1, 800943a <__swsetup_r+0x4a>
 8009428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800942c:	4299      	cmp	r1, r3
 800942e:	d002      	beq.n	8009436 <__swsetup_r+0x46>
 8009430:	4628      	mov	r0, r5
 8009432:	f7fe ff09 	bl	8008248 <_free_r>
 8009436:	2300      	movs	r3, #0
 8009438:	6363      	str	r3, [r4, #52]	@ 0x34
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	2300      	movs	r3, #0
 8009444:	6063      	str	r3, [r4, #4]
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f043 0308 	orr.w	r3, r3, #8
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	b94b      	cbnz	r3, 800946a <__swsetup_r+0x7a>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800945c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009460:	d003      	beq.n	800946a <__swsetup_r+0x7a>
 8009462:	4621      	mov	r1, r4
 8009464:	4628      	mov	r0, r5
 8009466:	f000 f882 	bl	800956e <__smakebuf_r>
 800946a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946e:	f013 0201 	ands.w	r2, r3, #1
 8009472:	d00a      	beq.n	800948a <__swsetup_r+0x9a>
 8009474:	2200      	movs	r2, #0
 8009476:	60a2      	str	r2, [r4, #8]
 8009478:	6962      	ldr	r2, [r4, #20]
 800947a:	4252      	negs	r2, r2
 800947c:	61a2      	str	r2, [r4, #24]
 800947e:	6922      	ldr	r2, [r4, #16]
 8009480:	b942      	cbnz	r2, 8009494 <__swsetup_r+0xa4>
 8009482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009486:	d1c5      	bne.n	8009414 <__swsetup_r+0x24>
 8009488:	bd38      	pop	{r3, r4, r5, pc}
 800948a:	0799      	lsls	r1, r3, #30
 800948c:	bf58      	it	pl
 800948e:	6962      	ldrpl	r2, [r4, #20]
 8009490:	60a2      	str	r2, [r4, #8]
 8009492:	e7f4      	b.n	800947e <__swsetup_r+0x8e>
 8009494:	2000      	movs	r0, #0
 8009496:	e7f7      	b.n	8009488 <__swsetup_r+0x98>
 8009498:	20000084 	.word	0x20000084

0800949c <_raise_r>:
 800949c:	291f      	cmp	r1, #31
 800949e:	b538      	push	{r3, r4, r5, lr}
 80094a0:	4605      	mov	r5, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	d904      	bls.n	80094b0 <_raise_r+0x14>
 80094a6:	2316      	movs	r3, #22
 80094a8:	6003      	str	r3, [r0, #0]
 80094aa:	f04f 30ff 	mov.w	r0, #4294967295
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094b2:	b112      	cbz	r2, 80094ba <_raise_r+0x1e>
 80094b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094b8:	b94b      	cbnz	r3, 80094ce <_raise_r+0x32>
 80094ba:	4628      	mov	r0, r5
 80094bc:	f000 f830 	bl	8009520 <_getpid_r>
 80094c0:	4622      	mov	r2, r4
 80094c2:	4601      	mov	r1, r0
 80094c4:	4628      	mov	r0, r5
 80094c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ca:	f000 b817 	b.w	80094fc <_kill_r>
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d00a      	beq.n	80094e8 <_raise_r+0x4c>
 80094d2:	1c59      	adds	r1, r3, #1
 80094d4:	d103      	bne.n	80094de <_raise_r+0x42>
 80094d6:	2316      	movs	r3, #22
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	2001      	movs	r0, #1
 80094dc:	e7e7      	b.n	80094ae <_raise_r+0x12>
 80094de:	2100      	movs	r1, #0
 80094e0:	4620      	mov	r0, r4
 80094e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80094e6:	4798      	blx	r3
 80094e8:	2000      	movs	r0, #0
 80094ea:	e7e0      	b.n	80094ae <_raise_r+0x12>

080094ec <raise>:
 80094ec:	4b02      	ldr	r3, [pc, #8]	@ (80094f8 <raise+0xc>)
 80094ee:	4601      	mov	r1, r0
 80094f0:	6818      	ldr	r0, [r3, #0]
 80094f2:	f7ff bfd3 	b.w	800949c <_raise_r>
 80094f6:	bf00      	nop
 80094f8:	20000084 	.word	0x20000084

080094fc <_kill_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	2300      	movs	r3, #0
 8009500:	4d06      	ldr	r5, [pc, #24]	@ (800951c <_kill_r+0x20>)
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	f7f9 fcb4 	bl	8002e76 <_kill>
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	d102      	bne.n	8009518 <_kill_r+0x1c>
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	b103      	cbz	r3, 8009518 <_kill_r+0x1c>
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	bd38      	pop	{r3, r4, r5, pc}
 800951a:	bf00      	nop
 800951c:	20000ad4 	.word	0x20000ad4

08009520 <_getpid_r>:
 8009520:	f7f9 bca2 	b.w	8002e68 <_getpid>

08009524 <__swhatbuf_r>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	460c      	mov	r4, r1
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	4615      	mov	r5, r2
 800952e:	2900      	cmp	r1, #0
 8009530:	461e      	mov	r6, r3
 8009532:	b096      	sub	sp, #88	@ 0x58
 8009534:	da0c      	bge.n	8009550 <__swhatbuf_r+0x2c>
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	2100      	movs	r1, #0
 800953a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800953e:	bf14      	ite	ne
 8009540:	2340      	movne	r3, #64	@ 0x40
 8009542:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009546:	2000      	movs	r0, #0
 8009548:	6031      	str	r1, [r6, #0]
 800954a:	602b      	str	r3, [r5, #0]
 800954c:	b016      	add	sp, #88	@ 0x58
 800954e:	bd70      	pop	{r4, r5, r6, pc}
 8009550:	466a      	mov	r2, sp
 8009552:	f000 f849 	bl	80095e8 <_fstat_r>
 8009556:	2800      	cmp	r0, #0
 8009558:	dbed      	blt.n	8009536 <__swhatbuf_r+0x12>
 800955a:	9901      	ldr	r1, [sp, #4]
 800955c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009560:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009564:	4259      	negs	r1, r3
 8009566:	4159      	adcs	r1, r3
 8009568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800956c:	e7eb      	b.n	8009546 <__swhatbuf_r+0x22>

0800956e <__smakebuf_r>:
 800956e:	898b      	ldrh	r3, [r1, #12]
 8009570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009572:	079d      	lsls	r5, r3, #30
 8009574:	4606      	mov	r6, r0
 8009576:	460c      	mov	r4, r1
 8009578:	d507      	bpl.n	800958a <__smakebuf_r+0x1c>
 800957a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	2301      	movs	r3, #1
 8009584:	6163      	str	r3, [r4, #20]
 8009586:	b003      	add	sp, #12
 8009588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800958a:	466a      	mov	r2, sp
 800958c:	ab01      	add	r3, sp, #4
 800958e:	f7ff ffc9 	bl	8009524 <__swhatbuf_r>
 8009592:	9f00      	ldr	r7, [sp, #0]
 8009594:	4605      	mov	r5, r0
 8009596:	4639      	mov	r1, r7
 8009598:	4630      	mov	r0, r6
 800959a:	f7fe fec7 	bl	800832c <_malloc_r>
 800959e:	b948      	cbnz	r0, 80095b4 <__smakebuf_r+0x46>
 80095a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095a4:	059a      	lsls	r2, r3, #22
 80095a6:	d4ee      	bmi.n	8009586 <__smakebuf_r+0x18>
 80095a8:	f023 0303 	bic.w	r3, r3, #3
 80095ac:	f043 0302 	orr.w	r3, r3, #2
 80095b0:	81a3      	strh	r3, [r4, #12]
 80095b2:	e7e2      	b.n	800957a <__smakebuf_r+0xc>
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	6020      	str	r0, [r4, #0]
 80095c4:	b15b      	cbz	r3, 80095de <__smakebuf_r+0x70>
 80095c6:	4630      	mov	r0, r6
 80095c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095cc:	f000 f81e 	bl	800960c <_isatty_r>
 80095d0:	b128      	cbz	r0, 80095de <__smakebuf_r+0x70>
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	f023 0303 	bic.w	r3, r3, #3
 80095d8:	f043 0301 	orr.w	r3, r3, #1
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	89a3      	ldrh	r3, [r4, #12]
 80095e0:	431d      	orrs	r5, r3
 80095e2:	81a5      	strh	r5, [r4, #12]
 80095e4:	e7cf      	b.n	8009586 <__smakebuf_r+0x18>
	...

080095e8 <_fstat_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	2300      	movs	r3, #0
 80095ec:	4d06      	ldr	r5, [pc, #24]	@ (8009608 <_fstat_r+0x20>)
 80095ee:	4604      	mov	r4, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	4611      	mov	r1, r2
 80095f4:	602b      	str	r3, [r5, #0]
 80095f6:	f7f9 fc9d 	bl	8002f34 <_fstat>
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	d102      	bne.n	8009604 <_fstat_r+0x1c>
 80095fe:	682b      	ldr	r3, [r5, #0]
 8009600:	b103      	cbz	r3, 8009604 <_fstat_r+0x1c>
 8009602:	6023      	str	r3, [r4, #0]
 8009604:	bd38      	pop	{r3, r4, r5, pc}
 8009606:	bf00      	nop
 8009608:	20000ad4 	.word	0x20000ad4

0800960c <_isatty_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	2300      	movs	r3, #0
 8009610:	4d05      	ldr	r5, [pc, #20]	@ (8009628 <_isatty_r+0x1c>)
 8009612:	4604      	mov	r4, r0
 8009614:	4608      	mov	r0, r1
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	f7f9 fc9b 	bl	8002f52 <_isatty>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_isatty_r+0x1a>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_isatty_r+0x1a>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	20000ad4 	.word	0x20000ad4

0800962c <_init>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	bf00      	nop
 8009630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009632:	bc08      	pop	{r3}
 8009634:	469e      	mov	lr, r3
 8009636:	4770      	bx	lr

08009638 <_fini>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	bf00      	nop
 800963c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963e:	bc08      	pop	{r3}
 8009640:	469e      	mov	lr, r3
 8009642:	4770      	bx	lr
