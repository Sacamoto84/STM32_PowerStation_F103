
STM32_PowerStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009114  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b74  08009228  08009228  00019228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d9c  08009d9c  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  08009d9c  08009d9c  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d9c  08009d9c  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009da4  08009da4  00019da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000238  08009fe0  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  08009fe0  00020a90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021f6e  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042bb  00000000  00000000  00042212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  000464d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015e6  00000000  00000000  00047940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e0ac  00000000  00000000  00048f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a49  00000000  00000000  00066fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095e53  00000000  00000000  00087a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063f8  00000000  00000000  0011d870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004bb3  00000000  00000000  00123c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0012881b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	0800920c 	.word	0x0800920c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	0800920c 	.word	0x0800920c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <MX_GPIO_Init+0xbc>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a28      	ldr	r2, [pc, #160]	; (80010ec <MX_GPIO_Init+0xbc>)
 800104a:	f043 0320 	orr.w	r3, r3, #32
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <MX_GPIO_Init+0xbc>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <MX_GPIO_Init+0xbc>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <MX_GPIO_Init+0xbc>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <MX_GPIO_Init+0xbc>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_GPIO_Init+0xbc>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <MX_GPIO_Init+0xbc>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_GPIO_Init+0xbc>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <MX_GPIO_Init+0xc0>)
 8001092:	f002 fc18 	bl	80038c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001096:	2310      	movs	r3, #16
 8001098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4619      	mov	r1, r3
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <MX_GPIO_Init+0xc0>)
 80010ae:	f002 fa6f 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB15 */
  GPIO_InitStruct.Pin = DRDY_Pin|GPIO_PIN_15;
 80010b2:	f248 0301 	movw	r3, #32769	; 0x8001
 80010b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	480b      	ldr	r0, [pc, #44]	; (80010f4 <MX_GPIO_Init+0xc4>)
 80010c8:	f002 fa62 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80010cc:	2340      	movs	r3, #64	; 0x40
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_GPIO_Init+0xc4>)
 80010e0:	f002 fa56 	bl	8003590 <HAL_GPIO_Init>

}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010800 	.word	0x40010800
 80010f4:	40010c00 	.word	0x40010c00

080010f8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_I2C2_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <MX_I2C2_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_I2C2_Init+0x50>)
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_I2C2_Init+0x58>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_I2C2_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_I2C2_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_I2C2_Init+0x50>)
 8001116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_I2C2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_I2C2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_I2C2_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_I2C2_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_I2C2_Init+0x50>)
 8001136:	f002 fbdf 	bl	80038f8 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001140:	f001 fdda 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000254 	.word	0x20000254
 800114c:	40005800 	.word	0x40005800
 8001150:	00061a80 	.word	0x00061a80

08001154 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <HAL_I2C_MspInit+0x74>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d124      	bne.n	80011be <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_I2C_MspInit+0x78>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <HAL_I2C_MspInit+0x78>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_I2C_MspInit+0x78>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800118c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001190:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001192:	2312      	movs	r3, #18
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <HAL_I2C_MspInit+0x7c>)
 80011a2:	f002 f9f5 	bl	8003590 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_I2C_MspInit+0x78>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_I2C_MspInit+0x78>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_I2C_MspInit+0x78>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40005800 	.word	0x40005800
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010c00 	.word	0x40010c00

080011d4 <_ZN7ADS124311sendCommandEh.isra.0>:





	void sendCommand(uint8_t cmd)
 80011d4:	b570      	push	{r4, r5, r6, lr}
	{
		ADS124x_CS_0;
 80011d6:	2200      	movs	r2, #0
 80011d8:	2110      	movs	r1, #16
	void sendCommand(uint8_t cmd)
 80011da:	4606      	mov	r6, r0
 80011dc:	b084      	sub	sp, #16
		ADS124x_CS_0;
 80011de:	481f      	ldr	r0, [pc, #124]	; (800125c <_ZN7ADS124311sendCommandEh.isra.0+0x88>)
 80011e0:	f002 fb71 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80011e4:	2300      	movs	r3, #0
 80011e6:	491e      	ldr	r1, [pc, #120]	; (8001260 <_ZN7ADS124311sendCommandEh.isra.0+0x8c>)
 80011e8:	4d1e      	ldr	r5, [pc, #120]	; (8001264 <_ZN7ADS124311sendCommandEh.isra.0+0x90>)
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <_ZN7ADS124311sendCommandEh.isra.0+0x94>)
 80011ee:	682b      	ldr	r3, [r5, #0]
 80011f0:	4c1e      	ldr	r4, [pc, #120]	; (800126c <_ZN7ADS124311sendCommandEh.isra.0+0x98>)
 80011f2:	fba2 2303 	umull	r2, r3, r2, r3
 80011f6:	0c9b      	lsrs	r3, r3, #18
 80011f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	3b10      	subs	r3, #16
 8001200:	6023      	str	r3, [r4, #0]
 8001202:	684a      	ldr	r2, [r1, #4]
 8001204:	4293      	cmp	r3, r2
 8001206:	d8fc      	bhi.n	8001202 <_ZN7ADS124311sendCommandEh.isra.0+0x2e>
		XferByte(cmd);
 8001208:	4a19      	ldr	r2, [pc, #100]	; (8001270 <_ZN7ADS124311sendCommandEh.isra.0+0x9c>)
 800120a:	f88d 600e 	strb.w	r6, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800120e:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8001212:	2b02      	cmp	r3, #2
 8001214:	d0fb      	beq.n	800120e <_ZN7ADS124311sendCommandEh.isra.0+0x3a>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001216:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800121a:	2301      	movs	r3, #1
 800121c:	f10d 020f 	add.w	r2, sp, #15
 8001220:	f10d 010e 	add.w	r1, sp, #14
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <_ZN7ADS124311sendCommandEh.isra.0+0x9c>)
 8001226:	9600      	str	r6, [sp, #0]
 8001228:	f003 fc96 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800122c:	2300      	movs	r3, #0
 800122e:	490c      	ldr	r1, [pc, #48]	; (8001260 <_ZN7ADS124311sendCommandEh.isra.0+0x8c>)
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <_ZN7ADS124311sendCommandEh.isra.0+0x94>)
 8001232:	604b      	str	r3, [r1, #4]
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	3b10      	subs	r3, #16
 8001244:	6023      	str	r3, [r4, #0]
 8001246:	684a      	ldr	r2, [r1, #4]
 8001248:	4293      	cmp	r3, r2
 800124a:	d8fc      	bhi.n	8001246 <_ZN7ADS124311sendCommandEh.isra.0+0x72>
		ADS124x_CS_1;
 800124c:	2201      	movs	r2, #1
 800124e:	2110      	movs	r1, #16
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <_ZN7ADS124311sendCommandEh.isra.0+0x88>)
	}
 8001252:	b004      	add	sp, #16
 8001254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ADS124x_CS_1;
 8001258:	f002 bb35 	b.w	80038c6 <HAL_GPIO_WritePin>
 800125c:	40010800 	.word	0x40010800
 8001260:	e0001000 	.word	0xe0001000
 8001264:	2000005c 	.word	0x2000005c
 8001268:	431bde83 	.word	0x431bde83
 800126c:	2000093c 	.word	0x2000093c
 8001270:	2000084c 	.word	0x2000084c

08001274 <_ZN7ADS124315readAllRegisterEv>:
	void readAllRegister() {
 8001274:	b5f0      	push	{r4, r5, r6, r7, lr}
		ADS124x_CS_0;
 8001276:	2200      	movs	r2, #0
 8001278:	2110      	movs	r1, #16
	void readAllRegister() {
 800127a:	4606      	mov	r6, r0
 800127c:	b085      	sub	sp, #20
		ADS124x_CS_0;
 800127e:	48cf      	ldr	r0, [pc, #828]	; (80015bc <_ZN7ADS124315readAllRegisterEv+0x348>)
 8001280:	f002 fb21 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001284:	2300      	movs	r3, #0
 8001286:	49ce      	ldr	r1, [pc, #824]	; (80015c0 <_ZN7ADS124315readAllRegisterEv+0x34c>)
 8001288:	4fce      	ldr	r7, [pc, #824]	; (80015c4 <_ZN7ADS124315readAllRegisterEv+0x350>)
 800128a:	604b      	str	r3, [r1, #4]
 800128c:	4ace      	ldr	r2, [pc, #824]	; (80015c8 <_ZN7ADS124315readAllRegisterEv+0x354>)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	4dce      	ldr	r5, [pc, #824]	; (80015cc <_ZN7ADS124315readAllRegisterEv+0x358>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	0c9b      	lsrs	r3, r3, #18
 8001298:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	3b10      	subs	r3, #16
 80012a0:	602b      	str	r3, [r5, #0]
 80012a2:	684a      	ldr	r2, [r1, #4]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d8fc      	bhi.n	80012a2 <_ZN7ADS124315readAllRegisterEv+0x2e>
		XferByte(0x10);
 80012a8:	2310      	movs	r3, #16
 80012aa:	4cc9      	ldr	r4, [pc, #804]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80012ac:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80012b0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d0fb      	beq.n	80012b0 <_ZN7ADS124315readAllRegisterEv+0x3c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80012b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012bc:	48c4      	ldr	r0, [pc, #784]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f10d 020f 	add.w	r2, sp, #15
 80012c4:	2301      	movs	r3, #1
 80012c6:	f10d 010e 	add.w	r1, sp, #14
 80012ca:	f003 fc45 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(15);
 80012ce:	230f      	movs	r3, #15
 80012d0:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80012d4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d0fb      	beq.n	80012d4 <_ZN7ADS124315readAllRegisterEv+0x60>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80012dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e0:	48bb      	ldr	r0, [pc, #748]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	f10d 020f 	add.w	r2, sp, #15
 80012e8:	2301      	movs	r3, #1
 80012ea:	f10d 010e 	add.w	r1, sp, #14
 80012ee:	f003 fc33 	bl	8004b58 <HAL_SPI_TransmitReceive>
		readSETUP(XferByte(0));
 80012f2:	2300      	movs	r3, #0
 80012f4:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80012f8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d0fb      	beq.n	80012f8 <_ZN7ADS124315readAllRegisterEv+0x84>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001304:	48b2      	ldr	r0, [pc, #712]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	f10d 020f 	add.w	r2, sp, #15
 800130c:	2301      	movs	r3, #1
 800130e:	f10d 010e 	add.w	r1, sp, #14
 8001312:	f003 fc21 	bl	8004b58 <HAL_SPI_TransmitReceive>


	void readSETUP(uint8_t p) {
		ADSregister.SETUP.PGA = p & 0x7;
		ADSregister.SETUP.BOCS = (p >> 3) & 0x1;
		ADSregister.SETUP.ID = p >> 4;
 8001316:	2300      	movs	r3, #0
 8001318:	f88d 300e 	strb.w	r3, [sp, #14]
		ADSregister.SETUP.PGA = p & 0x7;
 800131c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001320:	7033      	strb	r3, [r6, #0]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001322:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001326:	2b02      	cmp	r3, #2
 8001328:	d0fb      	beq.n	8001322 <_ZN7ADS124315readAllRegisterEv+0xae>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	48a8      	ldr	r0, [pc, #672]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	f10d 020f 	add.w	r2, sp, #15
 8001336:	2301      	movs	r3, #1
 8001338:	f10d 010e 	add.w	r1, sp, #14
 800133c:	f003 fc0c 	bl	8004b58 <HAL_SPI_TransmitReceive>
	}

	void readMUX(uint8_t p) {
		ADSregister.MUX.NSEL = p & 0x0F;
		ADSregister.MUX.PSEL = (uint8_t) ((p >> 4) & 0x0F);
 8001340:	2300      	movs	r3, #0
 8001342:	f88d 300e 	strb.w	r3, [sp, #14]
		ADSregister.MUX.NSEL = p & 0x0F;
 8001346:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800134a:	7073      	strb	r3, [r6, #1]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800134c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001350:	2b02      	cmp	r3, #2
 8001352:	d0fb      	beq.n	800134c <_ZN7ADS124315readAllRegisterEv+0xd8>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	489d      	ldr	r0, [pc, #628]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	f10d 020f 	add.w	r2, sp, #15
 8001360:	2301      	movs	r3, #1
 8001362:	f10d 010e 	add.w	r1, sp, #14
 8001366:	f003 fbf7 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (value >> pos) & 1;
 800136a:	2300      	movs	r3, #0
 800136c:	f88d 300e 	strb.w	r3, [sp, #14]
	}

	void readACR(uint8_t p) {
		ADSregister.ACR.DR0 = read_bit(p, 0);
 8001370:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001374:	70b3      	strb	r3, [r6, #2]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001376:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800137a:	2b02      	cmp	r3, #2
 800137c:	d0fb      	beq.n	8001376 <_ZN7ADS124315readAllRegisterEv+0x102>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	4893      	ldr	r0, [pc, #588]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	f10d 020f 	add.w	r2, sp, #15
 800138a:	2301      	movs	r3, #1
 800138c:	f10d 010e 	add.w	r1, sp, #14
 8001390:	f003 fbe2 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001394:	2300      	movs	r3, #0
 8001396:	f88d 300e 	strb.w	r3, [sp, #14]
 800139a:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.ODAC = XferByte(0);
 800139e:	70f3      	strb	r3, [r6, #3]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80013a0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d0fb      	beq.n	80013a0 <_ZN7ADS124315readAllRegisterEv+0x12c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80013a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ac:	4888      	ldr	r0, [pc, #544]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	f10d 020f 	add.w	r2, sp, #15
 80013b4:	2301      	movs	r3, #1
 80013b6:	f10d 010e 	add.w	r1, sp, #14
 80013ba:	f003 fbcd 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80013be:	2300      	movs	r3, #0
 80013c0:	f88d 300e 	strb.w	r3, [sp, #14]
 80013c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DIO = XferByte(0);
 80013c8:	7133      	strb	r3, [r6, #4]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80013ca:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d0fb      	beq.n	80013ca <_ZN7ADS124315readAllRegisterEv+0x156>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	487e      	ldr	r0, [pc, #504]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	f10d 020f 	add.w	r2, sp, #15
 80013de:	2301      	movs	r3, #1
 80013e0:	f10d 010e 	add.w	r1, sp, #14
 80013e4:	f003 fbb8 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f88d 300e 	strb.w	r3, [sp, #14]
 80013ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DIR = XferByte(0);
 80013f2:	7173      	strb	r3, [r6, #5]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80013f4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d0fb      	beq.n	80013f4 <_ZN7ADS124315readAllRegisterEv+0x180>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80013fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001400:	4873      	ldr	r0, [pc, #460]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	f10d 020f 	add.w	r2, sp, #15
 8001408:	2301      	movs	r3, #1
 800140a:	f10d 010e 	add.w	r1, sp, #14
 800140e:	f003 fba3 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001412:	2300      	movs	r3, #0
 8001414:	f88d 300e 	strb.w	r3, [sp, #14]
 8001418:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.IOCON = XferByte(0);
 800141c:	71b3      	strb	r3, [r6, #6]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800141e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001422:	2b02      	cmp	r3, #2
 8001424:	d0fb      	beq.n	800141e <_ZN7ADS124315readAllRegisterEv+0x1aa>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	4869      	ldr	r0, [pc, #420]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	f10d 020f 	add.w	r2, sp, #15
 8001432:	2301      	movs	r3, #1
 8001434:	f10d 010e 	add.w	r1, sp, #14
 8001438:	f003 fb8e 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 800143c:	2300      	movs	r3, #0
 800143e:	f88d 300e 	strb.w	r3, [sp, #14]
 8001442:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.OCR0 = XferByte(0);
 8001446:	71f3      	strb	r3, [r6, #7]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001448:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800144c:	2b02      	cmp	r3, #2
 800144e:	d0fb      	beq.n	8001448 <_ZN7ADS124315readAllRegisterEv+0x1d4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001454:	485e      	ldr	r0, [pc, #376]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	f10d 020f 	add.w	r2, sp, #15
 800145c:	2301      	movs	r3, #1
 800145e:	f10d 010e 	add.w	r1, sp, #14
 8001462:	f003 fb79 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001466:	2300      	movs	r3, #0
 8001468:	f88d 300e 	strb.w	r3, [sp, #14]
 800146c:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.OCR1 = XferByte(0);
 8001470:	7233      	strb	r3, [r6, #8]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001472:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001476:	2b02      	cmp	r3, #2
 8001478:	d0fb      	beq.n	8001472 <_ZN7ADS124315readAllRegisterEv+0x1fe>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	4854      	ldr	r0, [pc, #336]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	f10d 020f 	add.w	r2, sp, #15
 8001486:	2301      	movs	r3, #1
 8001488:	f10d 010e 	add.w	r1, sp, #14
 800148c:	f003 fb64 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001490:	2300      	movs	r3, #0
 8001492:	f88d 300e 	strb.w	r3, [sp, #14]
 8001496:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.OCR2 = XferByte(0);
 800149a:	7273      	strb	r3, [r6, #9]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800149c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d0fb      	beq.n	800149c <_ZN7ADS124315readAllRegisterEv+0x228>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80014a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a8:	4849      	ldr	r0, [pc, #292]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	f10d 020f 	add.w	r2, sp, #15
 80014b0:	2301      	movs	r3, #1
 80014b2:	f10d 010e 	add.w	r1, sp, #14
 80014b6:	f003 fb4f 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f88d 300e 	strb.w	r3, [sp, #14]
 80014c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.FSR0 = XferByte(0);
 80014c4:	72b3      	strb	r3, [r6, #10]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80014c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d0fb      	beq.n	80014c6 <_ZN7ADS124315readAllRegisterEv+0x252>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d2:	483f      	ldr	r0, [pc, #252]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	f10d 020f 	add.w	r2, sp, #15
 80014da:	2301      	movs	r3, #1
 80014dc:	f10d 010e 	add.w	r1, sp, #14
 80014e0:	f003 fb3a 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f88d 300e 	strb.w	r3, [sp, #14]
 80014ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.FSR1 = XferByte(0);
 80014ee:	72f3      	strb	r3, [r6, #11]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80014f0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d0fb      	beq.n	80014f0 <_ZN7ADS124315readAllRegisterEv+0x27c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80014f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fc:	4834      	ldr	r0, [pc, #208]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	f10d 020f 	add.w	r2, sp, #15
 8001504:	2301      	movs	r3, #1
 8001506:	f10d 010e 	add.w	r1, sp, #14
 800150a:	f003 fb25 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 800150e:	2300      	movs	r3, #0
 8001510:	f88d 300e 	strb.w	r3, [sp, #14]
 8001514:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.FSR2 = XferByte(0);
 8001518:	7333      	strb	r3, [r6, #12]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800151a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800151e:	2b02      	cmp	r3, #2
 8001520:	d0fb      	beq.n	800151a <_ZN7ADS124315readAllRegisterEv+0x2a6>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	482a      	ldr	r0, [pc, #168]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	f10d 020f 	add.w	r2, sp, #15
 800152e:	2301      	movs	r3, #1
 8001530:	f10d 010e 	add.w	r1, sp, #14
 8001534:	f003 fb10 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001538:	2300      	movs	r3, #0
 800153a:	f88d 300e 	strb.w	r3, [sp, #14]
 800153e:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DOR2 = XferByte(0);
 8001542:	7373      	strb	r3, [r6, #13]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001544:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001548:	2b02      	cmp	r3, #2
 800154a:	d0fb      	beq.n	8001544 <_ZN7ADS124315readAllRegisterEv+0x2d0>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800154c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001550:	481f      	ldr	r0, [pc, #124]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	f10d 020f 	add.w	r2, sp, #15
 8001558:	2301      	movs	r3, #1
 800155a:	f10d 010e 	add.w	r1, sp, #14
 800155e:	f003 fafb 	bl	8004b58 <HAL_SPI_TransmitReceive>
		return (unsigned char) rxData;
 8001562:	2300      	movs	r3, #0
 8001564:	f88d 300e 	strb.w	r3, [sp, #14]
 8001568:	f89d 300f 	ldrb.w	r3, [sp, #15]
		ADSregister.DOR1 = XferByte(0);
 800156c:	73b3      	strb	r3, [r6, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800156e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001572:	2b02      	cmp	r3, #2
 8001574:	d0fb      	beq.n	800156e <_ZN7ADS124315readAllRegisterEv+0x2fa>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	f10d 020f 	add.w	r2, sp, #15
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	f10d 010e 	add.w	r1, sp, #14
 8001584:	2301      	movs	r3, #1
 8001586:	4812      	ldr	r0, [pc, #72]	; (80015d0 <_ZN7ADS124315readAllRegisterEv+0x35c>)
 8001588:	f003 fae6 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800158c:	2300      	movs	r3, #0
		return (unsigned char) rxData;
 800158e:	f89d 200f 	ldrb.w	r2, [sp, #15]
		delayMicroseconds(20);
 8001592:	490b      	ldr	r1, [pc, #44]	; (80015c0 <_ZN7ADS124315readAllRegisterEv+0x34c>)
		ADSregister.DOR0 = XferByte(0);
 8001594:	73f2      	strb	r2, [r6, #15]
		delayMicroseconds(20);
 8001596:	604b      	str	r3, [r1, #4]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <_ZN7ADS124315readAllRegisterEv+0x354>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9b      	lsrs	r3, r3, #18
 80015a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	3b10      	subs	r3, #16
 80015aa:	602b      	str	r3, [r5, #0]
 80015ac:	684a      	ldr	r2, [r1, #4]
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d8fc      	bhi.n	80015ac <_ZN7ADS124315readAllRegisterEv+0x338>
		XferByte(15);
 80015b2:	230f      	movs	r3, #15
 80015b4:	f88d 300e 	strb.w	r3, [sp, #14]
 80015b8:	e00c      	b.n	80015d4 <_ZN7ADS124315readAllRegisterEv+0x360>
 80015ba:	bf00      	nop
 80015bc:	40010800 	.word	0x40010800
 80015c0:	e0001000 	.word	0xe0001000
 80015c4:	2000005c 	.word	0x2000005c
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	2000093c 	.word	0x2000093c
 80015d0:	2000084c 	.word	0x2000084c
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80015d4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d0fb      	beq.n	80015d4 <_ZN7ADS124315readAllRegisterEv+0x360>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80015dc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80015e0:	f10d 020f 	add.w	r2, sp, #15
 80015e4:	f10d 010e 	add.w	r1, sp, #14
 80015e8:	2301      	movs	r3, #1
 80015ea:	9400      	str	r4, [sp, #0]
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <_ZN7ADS124315readAllRegisterEv+0x390>)
 80015ee:	f003 fab3 	bl	8004b58 <HAL_SPI_TransmitReceive>
		ADS124x_CS_1;
 80015f2:	2201      	movs	r2, #1
 80015f4:	2110      	movs	r1, #16
 80015f6:	4804      	ldr	r0, [pc, #16]	; (8001608 <_ZN7ADS124315readAllRegisterEv+0x394>)
	}
 80015f8:	b005      	add	sp, #20
 80015fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		ADS124x_CS_1;
 80015fe:	f002 b962 	b.w	80038c6 <HAL_GPIO_WritePin>
 8001602:	bf00      	nop
 8001604:	2000084c 	.word	0x2000084c
 8001608:	40010800 	.word	0x40010800

0800160c <TIM1_UP_IRQHandler>:
Power power;
classLog Log;


extern "C" void TIM1_UP_IRQHandler(void)
{
 800160c:	b508      	push	{r3, lr}

	GPIO_PinState keyC;

	void tickKey() {

		key.tick();
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <TIM1_UP_IRQHandler+0x38>)
 8001610:	f004 fb90 	bl	8005d34 <_ZN7GButton4tickEv>

		if (key.isPress()) {
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <TIM1_UP_IRQHandler+0x38>)
 8001616:	f004 faef 	bl	8005bf8 <_ZN7GButton7isPressEv>
 800161a:	b130      	cbz	r0, 800162a <TIM1_UP_IRQHandler+0x1e>
			if (screen == UI)
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <TIM1_UP_IRQHandler+0x3c>)
 800161e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001622:	b93a      	cbnz	r2, 8001634 <TIM1_UP_IRQHandler+0x28>
				screen = BATTERY;
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	power.tickKey();


  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <TIM1_UP_IRQHandler+0x40>)
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800162c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 8001630:	f003 bd8a 	b.w	8005148 <HAL_TIM_IRQHandler>
			else
				screen = UI;
 8001634:	2200      	movs	r2, #0
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <TIM1_UP_IRQHandler+0x40>)
 8001638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800163c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 8001640:	f003 bd82 	b.w	8005148 <HAL_TIM_IRQHandler>
 8001644:	200007ac 	.word	0x200007ac
 8001648:	200007ec 	.word	0x200007ec
 800164c:	200008a8 	.word	0x200008a8

08001650 <_Z4loopv>:





void loop() {
 8001650:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001654:	4c11      	ldr	r4, [pc, #68]	; (800169c <_Z4loopv+0x4c>)
 8001656:	b095      	sub	sp, #84	; 0x54

	}

	void tick() {

		if (screen == UI)
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_Z4loopv+0x50>)
 800165a:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
 800165e:	2d00      	cmp	r5, #0
 8001660:	f040 82fe 	bne.w	8001c60 <_Z4loopv+0x610>

	}

	void screenUI() {

		tft->Fill1(0);
 8001664:	461e      	mov	r6, r3
 8001666:	4629      	mov	r1, r5
 8001668:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800166a:	f004 fe3f 	bl	80062ec <_ZN3TFT5Fill1Et>
	}
	void SetBColor(u16 BColor) {
		uTFT.BColor = BColor;
	}
	void GotoXY(i16 x, i16 y) {
		uTFT.CurrentX = x;
 800166e:	f44f 2300 	mov.w	r3, #524288	; 0x80000

		tft->GotoXY(0, 8);
 8001672:	6b37      	ldr	r7, [r6, #48]	; 0x30
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
static inline char FontClassicPuts(TFT * tft, char* str, FontDef_t* Font, uint8_t NoBack) {
	while (*str) {
 8001674:	2655      	movs	r6, #85	; 0x55
	for (i = 0; i < Font->FontHeight; i++) {
 8001676:	4628      	mov	r0, r5
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001678:	7821      	ldrb	r1, [r4, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 800167a:	7865      	ldrb	r5, [r4, #1]
 800167c:	f8df 9024 	ldr.w	r9, [pc, #36]	; 80016a4 <_Z4loopv+0x54>
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	b3a5      	cbz	r5, 80016ee <_Z4loopv+0x9e>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001684:	f1a6 0820 	sub.w	r8, r6, #32
	for (i = 0; i < Font->FontHeight; i++) {
 8001688:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800168a:	fb08 6305 	mla	r3, r8, r5, r6
 800168e:	6862      	ldr	r2, [r4, #4]
 8001690:	f832 a013 	ldrh.w	sl, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001694:	b359      	cbz	r1, 80016ee <_Z4loopv+0x9e>
 8001696:	2500      	movs	r5, #0
 8001698:	e011      	b.n	80016be <_Z4loopv+0x6e>
 800169a:	bf00      	nop
 800169c:	20000068 	.word	0x20000068
 80016a0:	200007ec 	.word	0x200007ec
 80016a4:	08009228 	.word	0x08009228
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80016a8:	4638      	mov	r0, r7
 80016aa:	8b3b      	ldrh	r3, [r7, #24]
 80016ac:	4432      	add	r2, r6
 80016ae:	f004 fdef 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 80016b2:	7821      	ldrb	r1, [r4, #0]
 80016b4:	3501      	adds	r5, #1
 80016b6:	42a9      	cmp	r1, r5
 80016b8:	d913      	bls.n	80016e2 <_Z4loopv+0x92>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80016ba:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
			if ((b << j) & 0x8000) {
 80016be:	fa0a f305 	lsl.w	r3, sl, r5
 80016c2:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80016c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016c8:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 80016cc:	d4ec      	bmi.n	80016a8 <_Z4loopv+0x58>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80016ce:	1941      	adds	r1, r0, r5
 80016d0:	8b7b      	ldrh	r3, [r7, #26]
 80016d2:	4638      	mov	r0, r7
 80016d4:	4432      	add	r2, r6
 80016d6:	f004 fddb 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 80016da:	7821      	ldrb	r1, [r4, #0]
 80016dc:	3501      	adds	r5, #1
 80016de:	428d      	cmp	r5, r1
 80016e0:	d3eb      	bcc.n	80016ba <_Z4loopv+0x6a>
	for (i = 0; i < Font->FontHeight; i++) {
 80016e2:	7865      	ldrb	r5, [r4, #1]
 80016e4:	3601      	adds	r6, #1
 80016e6:	42b5      	cmp	r5, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80016e8:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 80016ec:	d8cd      	bhi.n	800168a <_Z4loopv+0x3a>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80016ee:	4408      	add	r0, r1
 80016f0:	3801      	subs	r0, #1
	while (*str) {
 80016f2:	f819 6f01 	ldrb.w	r6, [r9, #1]!
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80016f6:	b200      	sxth	r0, r0
 80016f8:	82b8      	strh	r0, [r7, #20]
	while (*str) {
 80016fa:	2e00      	cmp	r6, #0
 80016fc:	d1c1      	bne.n	8001682 <_Z4loopv+0x32>
		FontClassicPuts(tft, "UI", &Font_7x10, 0);

		adc.readAllRegister();
 80016fe:	48bc      	ldr	r0, [pc, #752]	; (80019f0 <_Z4loopv+0x3a0>)
 8001700:	f7ff fdb8 	bl	8001274 <_ZN7ADS124315readAllRegisterEv>

		if (adc.ADSregister.SETUP.PGA != PGA_1) {
 8001704:	4bbb      	ldr	r3, [pc, #748]	; (80019f4 <_Z4loopv+0x3a4>)
 8001706:	7f1d      	ldrb	r5, [r3, #28]
 8001708:	076a      	lsls	r2, r5, #29
 800170a:	f041 801f 	bne.w	800274c <_Z4loopv+0x10fc>
		HAL_Delay(1);
 800170e:	2001      	movs	r0, #1
 8001710:	f001 fe0c 	bl	800332c <HAL_Delay>
		ADS124x_CS_0;
 8001714:	2200      	movs	r2, #0
 8001716:	2110      	movs	r1, #16
 8001718:	48b7      	ldr	r0, [pc, #732]	; (80019f8 <_Z4loopv+0x3a8>)
 800171a:	f002 f8d4 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 800171e:	2300      	movs	r3, #0
 8001720:	49b6      	ldr	r1, [pc, #728]	; (80019fc <_Z4loopv+0x3ac>)
 8001722:	4ab7      	ldr	r2, [pc, #732]	; (8001a00 <_Z4loopv+0x3b0>)
 8001724:	604b      	str	r3, [r1, #4]
 8001726:	4bb7      	ldr	r3, [pc, #732]	; (8001a04 <_Z4loopv+0x3b4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001734:	009a      	lsls	r2, r3, #2
 8001736:	4bb4      	ldr	r3, [pc, #720]	; (8001a08 <_Z4loopv+0x3b8>)
 8001738:	3a10      	subs	r2, #16
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	684b      	ldr	r3, [r1, #4]
 800173e:	429a      	cmp	r2, r3
 8001740:	d8fc      	bhi.n	800173c <_Z4loopv+0xec>
		XferByte(cmd);
 8001742:	23fc      	movs	r3, #252	; 0xfc
 8001744:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001748:	4bb0      	ldr	r3, [pc, #704]	; (8001a0c <_Z4loopv+0x3bc>)
 800174a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800174e:	2b02      	cmp	r3, #2
 8001750:	d0fa      	beq.n	8001748 <_Z4loopv+0xf8>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001752:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001756:	2301      	movs	r3, #1
 8001758:	aa04      	add	r2, sp, #16
 800175a:	48ac      	ldr	r0, [pc, #688]	; (8001a0c <_Z4loopv+0x3bc>)
 800175c:	f10d 010f 	add.w	r1, sp, #15
 8001760:	9600      	str	r6, [sp, #0]
 8001762:	f003 f9f9 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001766:	2300      	movs	r3, #0
 8001768:	4da4      	ldr	r5, [pc, #656]	; (80019fc <_Z4loopv+0x3ac>)
 800176a:	4aa5      	ldr	r2, [pc, #660]	; (8001a00 <_Z4loopv+0x3b0>)
 800176c:	606b      	str	r3, [r5, #4]
 800176e:	4ba5      	ldr	r3, [pc, #660]	; (8001a04 <_Z4loopv+0x3b4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	0c9b      	lsrs	r3, r3, #18
 8001778:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800177c:	009a      	lsls	r2, r3, #2
 800177e:	4ba2      	ldr	r3, [pc, #648]	; (8001a08 <_Z4loopv+0x3b8>)
 8001780:	3a10      	subs	r2, #16
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	686b      	ldr	r3, [r5, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	d8fc      	bhi.n	8001784 <_Z4loopv+0x134>
		ADS124x_CS_1;
 800178a:	2201      	movs	r2, #1
 800178c:	2110      	movs	r1, #16
 800178e:	489a      	ldr	r0, [pc, #616]	; (80019f8 <_Z4loopv+0x3a8>)
 8001790:	f002 f899 	bl	80038c6 <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8001794:	2320      	movs	r3, #32
 8001796:	4e97      	ldr	r6, [pc, #604]	; (80019f4 <_Z4loopv+0x3a4>)
		ADS124x_CS_0;
 8001798:	2200      	movs	r2, #0
 800179a:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 800179c:	7773      	strb	r3, [r6, #29]
		ADS124x_CS_0;
 800179e:	4896      	ldr	r0, [pc, #600]	; (80019f8 <_Z4loopv+0x3a8>)
 80017a0:	f002 f891 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80017a4:	2300      	movs	r3, #0
 80017a6:	606b      	str	r3, [r5, #4]
 80017a8:	4b96      	ldr	r3, [pc, #600]	; (8001a04 <_Z4loopv+0x3b4>)
 80017aa:	4a95      	ldr	r2, [pc, #596]	; (8001a00 <_Z4loopv+0x3b0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4993      	ldr	r1, [pc, #588]	; (80019fc <_Z4loopv+0x3ac>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0c9b      	lsrs	r3, r3, #18
 80017b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017ba:	009a      	lsls	r2, r3, #2
 80017bc:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <_Z4loopv+0x3b8>)
 80017be:	3a10      	subs	r2, #16
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	684b      	ldr	r3, [r1, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8fc      	bhi.n	80017c2 <_Z4loopv+0x172>
		XferByte(0x50 + r);
 80017c8:	2351      	movs	r3, #81	; 0x51
 80017ca:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80017ce:	4b8f      	ldr	r3, [pc, #572]	; (8001a0c <_Z4loopv+0x3bc>)
 80017d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d0fa      	beq.n	80017ce <_Z4loopv+0x17e>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80017d8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80017dc:	2301      	movs	r3, #1
 80017de:	488b      	ldr	r0, [pc, #556]	; (8001a0c <_Z4loopv+0x3bc>)
 80017e0:	aa04      	add	r2, sp, #16
 80017e2:	f10d 010f 	add.w	r1, sp, #15
 80017e6:	9500      	str	r5, [sp, #0]
 80017e8:	f003 f9b6 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(0);
 80017ec:	2300      	movs	r3, #0
 80017ee:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80017f2:	4b86      	ldr	r3, [pc, #536]	; (8001a0c <_Z4loopv+0x3bc>)
 80017f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d0fa      	beq.n	80017f2 <_Z4loopv+0x1a2>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80017fc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001800:	2301      	movs	r3, #1
 8001802:	4882      	ldr	r0, [pc, #520]	; (8001a0c <_Z4loopv+0x3bc>)
 8001804:	aa04      	add	r2, sp, #16
 8001806:	f10d 010f 	add.w	r1, sp, #15
 800180a:	9500      	str	r5, [sp, #0]
 800180c:	f003 f9a4 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8001810:	2320      	movs	r3, #32
 8001812:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001816:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <_Z4loopv+0x3bc>)
 8001818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800181c:	2b02      	cmp	r3, #2
 800181e:	d0fa      	beq.n	8001816 <_Z4loopv+0x1c6>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001820:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001824:	2301      	movs	r3, #1
 8001826:	aa04      	add	r2, sp, #16
 8001828:	4878      	ldr	r0, [pc, #480]	; (8001a0c <_Z4loopv+0x3bc>)
 800182a:	f10d 010f 	add.w	r1, sp, #15
 800182e:	9600      	str	r6, [sp, #0]
 8001830:	f003 f992 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001834:	2300      	movs	r3, #0
 8001836:	4d71      	ldr	r5, [pc, #452]	; (80019fc <_Z4loopv+0x3ac>)
 8001838:	4a71      	ldr	r2, [pc, #452]	; (8001a00 <_Z4loopv+0x3b0>)
 800183a:	606b      	str	r3, [r5, #4]
 800183c:	4b71      	ldr	r3, [pc, #452]	; (8001a04 <_Z4loopv+0x3b4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	0c9b      	lsrs	r3, r3, #18
 8001846:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800184a:	009a      	lsls	r2, r3, #2
 800184c:	4b6e      	ldr	r3, [pc, #440]	; (8001a08 <_Z4loopv+0x3b8>)
 800184e:	3a10      	subs	r2, #16
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	686b      	ldr	r3, [r5, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8fc      	bhi.n	8001852 <_Z4loopv+0x202>
		ADS124x_CS_1;
 8001858:	2201      	movs	r2, #1
 800185a:	2110      	movs	r1, #16
 800185c:	4866      	ldr	r0, [pc, #408]	; (80019f8 <_Z4loopv+0x3a8>)
 800185e:	f002 f832 	bl	80038c6 <HAL_GPIO_WritePin>
		HAL_Delay(41);
 8001862:	2029      	movs	r0, #41	; 0x29
 8001864:	f001 fd62 	bl	800332c <HAL_Delay>
		readAllRegister();
 8001868:	4861      	ldr	r0, [pc, #388]	; (80019f0 <_Z4loopv+0x3a0>)
 800186a:	f7ff fd03 	bl	8001274 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 800186e:	4961      	ldr	r1, [pc, #388]	; (80019f4 <_Z4loopv+0x3a4>)
 8001870:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8001874:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8001878:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	}

//Чтение выходного напряжения 2-7
	void readOut(void) {
		uint32_t v = adc.readADC(2, 0);
		vOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.0 / 2.1269
 8001882:	4318      	orrs	r0, r3
 8001884:	4688      	mov	r8, r1
 8001886:	f7ff fa05 	bl	8000c94 <__aeabi_ui2f>
 800188a:	4961      	ldr	r1, [pc, #388]	; (8001a10 <_Z4loopv+0x3c0>)
 800188c:	f7ff fa5a 	bl	8000d44 <__aeabi_fmul>
 8001890:	f7fe fdca 	bl	8000428 <__aeabi_f2d>
				* 3.000 / 3.004 * 5.0 / 4.997;
 8001894:	a352      	add	r3, pc, #328	; (adr r3, 80019e0 <_Z4loopv+0x390>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fe1d 	bl	80004d8 <__aeabi_dmul>
 800189e:	f7ff f8f3 	bl	8000a88 <__aeabi_d2f>

		//vOut = map(vOut, 1.2532, 11.004 , 1.2530, 11.015);
		vOut -=(iOut)*0.00008;
 80018a2:	f7fe fdc1 	bl	8000428 <__aeabi_f2d>
 80018a6:	4606      	mov	r6, r0
 80018a8:	f8d8 0014 	ldr.w	r0, [r8, #20]
 80018ac:	460f      	mov	r7, r1
 80018ae:	f7fe fdbb 	bl	8000428 <__aeabi_f2d>
 80018b2:	a34d      	add	r3, pc, #308	; (adr r3, 80019e8 <_Z4loopv+0x398>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe fe0e 	bl	80004d8 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4630      	mov	r0, r6
 80018c2:	4639      	mov	r1, r7
 80018c4:	f7fe fc50 	bl	8000168 <__aeabi_dsub>
 80018c8:	f7ff f8de 	bl	8000a88 <__aeabi_d2f>
 80018cc:	4603      	mov	r3, r0
		HAL_Delay(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f8c8 3010 	str.w	r3, [r8, #16]
 80018d4:	f001 fd2a 	bl	800332c <HAL_Delay>
		ADS124x_CS_0;
 80018d8:	2200      	movs	r2, #0
 80018da:	2110      	movs	r1, #16
 80018dc:	4846      	ldr	r0, [pc, #280]	; (80019f8 <_Z4loopv+0x3a8>)
 80018de:	f001 fff2 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80018e2:	2300      	movs	r3, #0
 80018e4:	606b      	str	r3, [r5, #4]
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <_Z4loopv+0x3b4>)
 80018e8:	4a45      	ldr	r2, [pc, #276]	; (8001a00 <_Z4loopv+0x3b0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4943      	ldr	r1, [pc, #268]	; (80019fc <_Z4loopv+0x3ac>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0c9b      	lsrs	r3, r3, #18
 80018f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018f8:	009a      	lsls	r2, r3, #2
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <_Z4loopv+0x3b8>)
 80018fc:	3a10      	subs	r2, #16
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	684b      	ldr	r3, [r1, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	d8fc      	bhi.n	8001900 <_Z4loopv+0x2b0>
		XferByte(cmd);
 8001906:	23fc      	movs	r3, #252	; 0xfc
 8001908:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800190c:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <_Z4loopv+0x3bc>)
 800190e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001912:	2b02      	cmp	r3, #2
 8001914:	d0fa      	beq.n	800190c <_Z4loopv+0x2bc>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001916:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800191a:	2301      	movs	r3, #1
 800191c:	aa04      	add	r2, sp, #16
 800191e:	483b      	ldr	r0, [pc, #236]	; (8001a0c <_Z4loopv+0x3bc>)
 8001920:	f10d 010f 	add.w	r1, sp, #15
 8001924:	9600      	str	r6, [sp, #0]
 8001926:	f003 f917 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800192a:	2300      	movs	r3, #0
 800192c:	4d33      	ldr	r5, [pc, #204]	; (80019fc <_Z4loopv+0x3ac>)
 800192e:	4a34      	ldr	r2, [pc, #208]	; (8001a00 <_Z4loopv+0x3b0>)
 8001930:	606b      	str	r3, [r5, #4]
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <_Z4loopv+0x3b4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001940:	009a      	lsls	r2, r3, #2
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <_Z4loopv+0x3b8>)
 8001944:	3a10      	subs	r2, #16
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	686b      	ldr	r3, [r5, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d8fc      	bhi.n	8001948 <_Z4loopv+0x2f8>
		ADS124x_CS_1;
 800194e:	2201      	movs	r2, #1
 8001950:	2110      	movs	r1, #16
 8001952:	4829      	ldr	r0, [pc, #164]	; (80019f8 <_Z4loopv+0x3a8>)
 8001954:	f001 ffb7 	bl	80038c6 <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8001958:	2376      	movs	r3, #118	; 0x76
 800195a:	4e26      	ldr	r6, [pc, #152]	; (80019f4 <_Z4loopv+0x3a4>)
		ADS124x_CS_0;
 800195c:	2200      	movs	r2, #0
 800195e:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 8001960:	7773      	strb	r3, [r6, #29]
		ADS124x_CS_0;
 8001962:	4825      	ldr	r0, [pc, #148]	; (80019f8 <_Z4loopv+0x3a8>)
 8001964:	f001 ffaf 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001968:	2300      	movs	r3, #0
 800196a:	606b      	str	r3, [r5, #4]
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <_Z4loopv+0x3b4>)
 800196e:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <_Z4loopv+0x3b0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4922      	ldr	r1, [pc, #136]	; (80019fc <_Z4loopv+0x3ac>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800197e:	009a      	lsls	r2, r3, #2
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <_Z4loopv+0x3b8>)
 8001982:	3a10      	subs	r2, #16
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	684b      	ldr	r3, [r1, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8fc      	bhi.n	8001986 <_Z4loopv+0x336>
		XferByte(0x50 + r);
 800198c:	2351      	movs	r3, #81	; 0x51
 800198e:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <_Z4loopv+0x3bc>)
 8001994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001998:	2b02      	cmp	r3, #2
 800199a:	d0fa      	beq.n	8001992 <_Z4loopv+0x342>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800199c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80019a0:	2301      	movs	r3, #1
 80019a2:	481a      	ldr	r0, [pc, #104]	; (8001a0c <_Z4loopv+0x3bc>)
 80019a4:	aa04      	add	r2, sp, #16
 80019a6:	f10d 010f 	add.w	r1, sp, #15
 80019aa:	9500      	str	r5, [sp, #0]
 80019ac:	f003 f8d4 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(0);
 80019b0:	2300      	movs	r3, #0
 80019b2:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_Z4loopv+0x3bc>)
 80019b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d0fa      	beq.n	80019b6 <_Z4loopv+0x366>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80019c0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80019c4:	2301      	movs	r3, #1
 80019c6:	4811      	ldr	r0, [pc, #68]	; (8001a0c <_Z4loopv+0x3bc>)
 80019c8:	aa04      	add	r2, sp, #16
 80019ca:	f10d 010f 	add.w	r1, sp, #15
 80019ce:	9500      	str	r5, [sp, #0]
 80019d0:	f003 f8c2 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(data);
 80019d4:	2376      	movs	r3, #118	; 0x76
 80019d6:	f88d 300f 	strb.w	r3, [sp, #15]
 80019da:	e01b      	b.n	8001a14 <_Z4loopv+0x3c4>
 80019dc:	f3af 8000 	nop.w
 80019e0:	881d1ca2 	.word	0x881d1ca2
 80019e4:	40168d31 	.word	0x40168d31
 80019e8:	88e368f1 	.word	0x88e368f1
 80019ec:	3f14f8b5 	.word	0x3f14f8b5
 80019f0:	20000808 	.word	0x20000808
 80019f4:	200007ec 	.word	0x200007ec
 80019f8:	40010800 	.word	0x40010800
 80019fc:	e0001000 	.word	0xe0001000
 8001a00:	431bde83 	.word	0x431bde83
 8001a04:	2000005c 	.word	0x2000005c
 8001a08:	2000093c 	.word	0x2000093c
 8001a0c:	2000084c 	.word	0x2000084c
 8001a10:	34200000 	.word	0x34200000
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001a14:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <_Z4loopv+0x584>)
 8001a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d0fa      	beq.n	8001a14 <_Z4loopv+0x3c4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001a1e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001a22:	2301      	movs	r3, #1
 8001a24:	aa04      	add	r2, sp, #16
 8001a26:	f10d 010f 	add.w	r1, sp, #15
 8001a2a:	486a      	ldr	r0, [pc, #424]	; (8001bd4 <_Z4loopv+0x584>)
 8001a2c:	9500      	str	r5, [sp, #0]
 8001a2e:	f003 f893 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001a32:	2300      	movs	r3, #0
 8001a34:	4968      	ldr	r1, [pc, #416]	; (8001bd8 <_Z4loopv+0x588>)
 8001a36:	4a69      	ldr	r2, [pc, #420]	; (8001bdc <_Z4loopv+0x58c>)
 8001a38:	604b      	str	r3, [r1, #4]
 8001a3a:	4b69      	ldr	r3, [pc, #420]	; (8001be0 <_Z4loopv+0x590>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	0c9b      	lsrs	r3, r3, #18
 8001a44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a48:	009a      	lsls	r2, r3, #2
 8001a4a:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <_Z4loopv+0x594>)
 8001a4c:	3a10      	subs	r2, #16
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	684b      	ldr	r3, [r1, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d8fc      	bhi.n	8001a50 <_Z4loopv+0x400>
		ADS124x_CS_1;
 8001a56:	2201      	movs	r2, #1
 8001a58:	2110      	movs	r1, #16
 8001a5a:	4863      	ldr	r0, [pc, #396]	; (8001be8 <_Z4loopv+0x598>)
 8001a5c:	f001 ff33 	bl	80038c6 <HAL_GPIO_WritePin>
		HAL_Delay(41);
 8001a60:	2029      	movs	r0, #41	; 0x29
 8001a62:	f001 fc63 	bl	800332c <HAL_Delay>
		readAllRegister();
 8001a66:	4861      	ldr	r0, [pc, #388]	; (8001bec <_Z4loopv+0x59c>)
 8001a68:	f7ff fc04 	bl	8001274 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8001a6c:	4960      	ldr	r1, [pc, #384]	; (8001bf0 <_Z4loopv+0x5a0>)
 8001a6e:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8001a72:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8001a76:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	}

//Чтение тока 7-6
	void readI(void) {
		uint32_t v = adc.readADC(7, 6);
		iOut = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 20000.0F ;
 8001a80:	4318      	orrs	r0, r3
 8001a82:	460d      	mov	r5, r1
 8001a84:	f7ff f906 	bl	8000c94 <__aeabi_ui2f>
 8001a88:	495a      	ldr	r1, [pc, #360]	; (8001bf4 <_Z4loopv+0x5a4>)
 8001a8a:	f7ff f95b 	bl	8000d44 <__aeabi_fmul>

	}

	long map(float x, float in_min, float in_max, float out_min, float out_max)
	{
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a8e:	495a      	ldr	r1, [pc, #360]	; (8001bf8 <_Z4loopv+0x5a8>)
 8001a90:	f7ff f84e 	bl	8000b30 <__aeabi_fsub>
 8001a94:	4959      	ldr	r1, [pc, #356]	; (8001bfc <_Z4loopv+0x5ac>)
 8001a96:	f7ff f955 	bl	8000d44 <__aeabi_fmul>
 8001a9a:	f7ff faa3 	bl	8000fe4 <__aeabi_f2iz>
		iOut = map(iOut, 3.5F, 996.0f , 0.0f, 1000.00f) ;// - 3.5F;
 8001a9e:	f7ff f8fd 	bl	8000c9c <__aeabi_i2f>
 8001aa2:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
		sprintf(str, "vOut  %f", vOut);
 8001aaa:	6928      	ldr	r0, [r5, #16]
		iOut = map(iOut, 3.5F, 996.0f , 0.0f, 1000.00f) ;// - 3.5F;
 8001aac:	6169      	str	r1, [r5, #20]
 8001aae:	615a      	str	r2, [r3, #20]
		sprintf(str, "vOut  %f", vOut);
 8001ab0:	f7fe fcba 	bl	8000428 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	a804      	add	r0, sp, #16
 8001aba:	4951      	ldr	r1, [pc, #324]	; (8001c00 <_Z4loopv+0x5b0>)
 8001abc:	f005 fa58 	bl	8006f70 <siprintf>
 8001ac0:	f89d 9010 	ldrb.w	r9, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 8001ac4:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8001ac6:	f1b9 0f00 	cmp.w	r9, #0
 8001aca:	d042      	beq.n	8001b52 <_Z4loopv+0x502>
 8001acc:	463b      	mov	r3, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001ace:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8001ad2:	464f      	mov	r7, r9
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	7822      	ldrb	r2, [r4, #0]
 8001ad8:	f10d 0a10 	add.w	sl, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 8001adc:	7863      	ldrb	r3, [r4, #1]
 8001ade:	b34b      	cbz	r3, 8001b34 <_Z4loopv+0x4e4>
 8001ae0:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001ae2:	f1a7 0820 	sub.w	r8, r7, #32
 8001ae6:	fb08 6303 	mla	r3, r8, r3, r6
 8001aea:	6861      	ldr	r1, [r4, #4]
 8001aec:	f831 b013 	ldrh.w	fp, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001af0:	b302      	cbz	r2, 8001b34 <_Z4loopv+0x4e4>
 8001af2:	2500      	movs	r5, #0
 8001af4:	e00b      	b.n	8001b0e <_Z4loopv+0x4be>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8001af6:	4648      	mov	r0, r9
 8001af8:	f8b9 3018 	ldrh.w	r3, [r9, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8001afc:	4432      	add	r2, r6
 8001afe:	f004 fbc7 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b02:	7822      	ldrb	r2, [r4, #0]
 8001b04:	3501      	adds	r5, #1
 8001b06:	4295      	cmp	r5, r2
 8001b08:	d20e      	bcs.n	8001b28 <_Z4loopv+0x4d8>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001b0a:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
			if ((b << j) & 0x8000) {
 8001b0e:	fa0b f305 	lsl.w	r3, fp, r5
 8001b12:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8001b14:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 8001b18:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 8001b1c:	d4eb      	bmi.n	8001af6 <_Z4loopv+0x4a6>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8001b1e:	1941      	adds	r1, r0, r5
 8001b20:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8001b24:	4648      	mov	r0, r9
 8001b26:	e7e9      	b.n	8001afc <_Z4loopv+0x4ac>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b28:	7863      	ldrb	r3, [r4, #1]
 8001b2a:	3601      	adds	r6, #1
 8001b2c:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001b2e:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8001b32:	d8d8      	bhi.n	8001ae6 <_Z4loopv+0x496>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001b34:	4410      	add	r0, r2
 8001b36:	3801      	subs	r0, #1
 8001b38:	b200      	sxth	r0, r0
 8001b3a:	f8a9 0014 	strh.w	r0, [r9, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8001b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8001b42:	42bb      	cmp	r3, r7
 8001b44:	d103      	bne.n	8001b4e <_Z4loopv+0x4fe>
	while (*str) {
 8001b46:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
 8001b4a:	2f00      	cmp	r7, #0
 8001b4c:	d1c6      	bne.n	8001adc <_Z4loopv+0x48c>
		tft->GotoXY(0, 44);
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <_Z4loopv+0x5a0>)
 8001b50:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8001b52:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
		sprintf(str, "I  %4.1f mA", iOut);
 8001b56:	4d26      	ldr	r5, [pc, #152]	; (8001bf0 <_Z4loopv+0x5a0>)
 8001b58:	6968      	ldr	r0, [r5, #20]
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	f7fe fc64 	bl	8000428 <__aeabi_f2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	a804      	add	r0, sp, #16
 8001b66:	4927      	ldr	r1, [pc, #156]	; (8001c04 <_Z4loopv+0x5b4>)
 8001b68:	f005 fa02 	bl	8006f70 <siprintf>
 8001b6c:	f89d 8010 	ldrb.w	r8, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 8001b70:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8001b74:	f1b8 0f00 	cmp.w	r8, #0
 8001b78:	d05a      	beq.n	8001c30 <_Z4loopv+0x5e0>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001b7a:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
 8001b7e:	7821      	ldrb	r1, [r4, #0]
 8001b80:	f10d 0910 	add.w	r9, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 8001b84:	7863      	ldrb	r3, [r4, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d044      	beq.n	8001c14 <_Z4loopv+0x5c4>
 8001b8a:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b8c:	f1a8 0720 	sub.w	r7, r8, #32
 8001b90:	fb07 6303 	mla	r3, r7, r3, r6
 8001b94:	6862      	ldr	r2, [r4, #4]
 8001b96:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b9a:	2900      	cmp	r1, #0
 8001b9c:	d03a      	beq.n	8001c14 <_Z4loopv+0x5c4>
 8001b9e:	2500      	movs	r5, #0
 8001ba0:	e00b      	b.n	8001bba <_Z4loopv+0x56a>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8001ba2:	4650      	mov	r0, sl
 8001ba4:	f8ba 3018 	ldrh.w	r3, [sl, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8001ba8:	4432      	add	r2, r6
 8001baa:	f004 fb71 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8001bae:	7821      	ldrb	r1, [r4, #0]
 8001bb0:	3501      	adds	r5, #1
 8001bb2:	428d      	cmp	r5, r1
 8001bb4:	d228      	bcs.n	8001c08 <_Z4loopv+0x5b8>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001bb6:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
			if ((b << j) & 0x8000) {
 8001bba:	fa0b f305 	lsl.w	r3, fp, r5
 8001bbe:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8001bc0:	f9ba 2016 	ldrsh.w	r2, [sl, #22]
 8001bc4:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 8001bc8:	d4eb      	bmi.n	8001ba2 <_Z4loopv+0x552>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8001bca:	1941      	adds	r1, r0, r5
 8001bcc:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 8001bd0:	4650      	mov	r0, sl
 8001bd2:	e7e9      	b.n	8001ba8 <_Z4loopv+0x558>
 8001bd4:	2000084c 	.word	0x2000084c
 8001bd8:	e0001000 	.word	0xe0001000
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	2000005c 	.word	0x2000005c
 8001be4:	2000093c 	.word	0x2000093c
 8001be8:	40010800 	.word	0x40010800
 8001bec:	20000808 	.word	0x20000808
 8001bf0:	200007ec 	.word	0x200007ec
 8001bf4:	3b435000 	.word	0x3b435000
 8001bf8:	40600000 	.word	0x40600000
 8001bfc:	3f80f79e 	.word	0x3f80f79e
 8001c00:	0800922c 	.word	0x0800922c
 8001c04:	08009238 	.word	0x08009238
	for (i = 0; i < Font->FontHeight; i++) {
 8001c08:	7863      	ldrb	r3, [r4, #1]
 8001c0a:	3601      	adds	r6, #1
 8001c0c:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001c0e:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8001c12:	d8bd      	bhi.n	8001b90 <_Z4loopv+0x540>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8001c14:	4408      	add	r0, r1
 8001c16:	3801      	subs	r0, #1
 8001c18:	b200      	sxth	r0, r0
 8001c1a:	f8aa 0014 	strh.w	r0, [sl, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8001c1e:	f899 3000 	ldrb.w	r3, [r9]
 8001c22:	4543      	cmp	r3, r8
 8001c24:	d104      	bne.n	8001c30 <_Z4loopv+0x5e0>
	while (*str) {
 8001c26:	f819 8f01 	ldrb.w	r8, [r9, #1]!
 8001c2a:	f1b8 0f00 	cmp.w	r8, #0
 8001c2e:	d1a9      	bne.n	8001b84 <_Z4loopv+0x534>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8001c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c34:	48b6      	ldr	r0, [pc, #728]	; (8001f10 <_Z4loopv+0x8c0>)
 8001c36:	f001 fe2f 	bl	8003898 <HAL_GPIO_ReadPin>
 8001c3a:	2801      	cmp	r0, #1
 8001c3c:	f000 8675 	beq.w	800292a <_Z4loopv+0x12da>
		tft->driver.Update();
 8001c40:	4bb4      	ldr	r3, [pc, #720]	; (8001f14 <_Z4loopv+0x8c4>)
 8001c42:	6b18      	ldr	r0, [r3, #48]	; 0x30
			break;
		}
	}

	void Update(void) {
		switch (LCD->LCD_Driver) {
 8001c44:	6843      	ldr	r3, [r0, #4]
 8001c46:	7a1b      	ldrb	r3, [r3, #8]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	f47f ad05 	bne.w	8001658 <_Z4loopv+0x8>

#if defined(TFT_DRIVER_SSD1306)
		case SSD1306:
			SSD1306_UpdateScreen();
 8001c4e:	3004      	adds	r0, #4
 8001c50:	f004 fafa 	bl	8006248 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
		if (screen == UI)
 8001c54:	4baf      	ldr	r3, [pc, #700]	; (8001f14 <_Z4loopv+0x8c4>)
 8001c56:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
 8001c5a:	2d00      	cmp	r5, #0
 8001c5c:	f43f ad02 	beq.w	8001664 <_Z4loopv+0x14>
		adc.readAllRegister();
 8001c60:	48ad      	ldr	r0, [pc, #692]	; (8001f18 <_Z4loopv+0x8c8>)
 8001c62:	f7ff fb07 	bl	8001274 <_ZN7ADS124315readAllRegisterEv>
		if (adc.ADSregister.SETUP.PGA != PGA_1) {
 8001c66:	4bab      	ldr	r3, [pc, #684]	; (8001f14 <_Z4loopv+0x8c4>)
 8001c68:	7f1d      	ldrb	r5, [r3, #28]
 8001c6a:	076a      	lsls	r2, r5, #29
 8001c6c:	f040 8472 	bne.w	8002554 <_Z4loopv+0xf04>
		HAL_Delay(1);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f001 fb5b 	bl	800332c <HAL_Delay>
		ADS124x_CS_0;
 8001c76:	2200      	movs	r2, #0
 8001c78:	2110      	movs	r1, #16
 8001c7a:	48a8      	ldr	r0, [pc, #672]	; (8001f1c <_Z4loopv+0x8cc>)
 8001c7c:	f001 fe23 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001c80:	2300      	movs	r3, #0
 8001c82:	49a7      	ldr	r1, [pc, #668]	; (8001f20 <_Z4loopv+0x8d0>)
 8001c84:	4aa7      	ldr	r2, [pc, #668]	; (8001f24 <_Z4loopv+0x8d4>)
 8001c86:	604b      	str	r3, [r1, #4]
 8001c88:	4ba7      	ldr	r3, [pc, #668]	; (8001f28 <_Z4loopv+0x8d8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	0c9b      	lsrs	r3, r3, #18
 8001c92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c96:	009a      	lsls	r2, r3, #2
 8001c98:	4ba4      	ldr	r3, [pc, #656]	; (8001f2c <_Z4loopv+0x8dc>)
 8001c9a:	3a10      	subs	r2, #16
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	684b      	ldr	r3, [r1, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d8fc      	bhi.n	8001c9e <_Z4loopv+0x64e>
		XferByte(cmd);
 8001ca4:	23fc      	movs	r3, #252	; 0xfc
 8001ca6:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001caa:	4ba1      	ldr	r3, [pc, #644]	; (8001f30 <_Z4loopv+0x8e0>)
 8001cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d0fa      	beq.n	8001caa <_Z4loopv+0x65a>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001cb4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001cb8:	2301      	movs	r3, #1
 8001cba:	aa04      	add	r2, sp, #16
 8001cbc:	489c      	ldr	r0, [pc, #624]	; (8001f30 <_Z4loopv+0x8e0>)
 8001cbe:	f10d 010f 	add.w	r1, sp, #15
 8001cc2:	9600      	str	r6, [sp, #0]
 8001cc4:	f002 ff48 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	4d95      	ldr	r5, [pc, #596]	; (8001f20 <_Z4loopv+0x8d0>)
 8001ccc:	4a95      	ldr	r2, [pc, #596]	; (8001f24 <_Z4loopv+0x8d4>)
 8001cce:	606b      	str	r3, [r5, #4]
 8001cd0:	4b95      	ldr	r3, [pc, #596]	; (8001f28 <_Z4loopv+0x8d8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	0c9b      	lsrs	r3, r3, #18
 8001cda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cde:	009a      	lsls	r2, r3, #2
 8001ce0:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <_Z4loopv+0x8dc>)
 8001ce2:	3a10      	subs	r2, #16
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	686b      	ldr	r3, [r5, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8fc      	bhi.n	8001ce6 <_Z4loopv+0x696>
		ADS124x_CS_1;
 8001cec:	2201      	movs	r2, #1
 8001cee:	2110      	movs	r1, #16
 8001cf0:	488a      	ldr	r0, [pc, #552]	; (8001f1c <_Z4loopv+0x8cc>)
 8001cf2:	f001 fde8 	bl	80038c6 <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8001cf6:	2356      	movs	r3, #86	; 0x56
 8001cf8:	4e86      	ldr	r6, [pc, #536]	; (8001f14 <_Z4loopv+0x8c4>)
		ADS124x_CS_0;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 8001cfe:	7773      	strb	r3, [r6, #29]
		ADS124x_CS_0;
 8001d00:	4886      	ldr	r0, [pc, #536]	; (8001f1c <_Z4loopv+0x8cc>)
 8001d02:	f001 fde0 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001d06:	2300      	movs	r3, #0
 8001d08:	606b      	str	r3, [r5, #4]
 8001d0a:	4b87      	ldr	r3, [pc, #540]	; (8001f28 <_Z4loopv+0x8d8>)
 8001d0c:	4a85      	ldr	r2, [pc, #532]	; (8001f24 <_Z4loopv+0x8d4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4983      	ldr	r1, [pc, #524]	; (8001f20 <_Z4loopv+0x8d0>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0c9b      	lsrs	r3, r3, #18
 8001d18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d1c:	009a      	lsls	r2, r3, #2
 8001d1e:	4b83      	ldr	r3, [pc, #524]	; (8001f2c <_Z4loopv+0x8dc>)
 8001d20:	3a10      	subs	r2, #16
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	684b      	ldr	r3, [r1, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d8fc      	bhi.n	8001d24 <_Z4loopv+0x6d4>
		XferByte(0x50 + r);
 8001d2a:	2351      	movs	r3, #81	; 0x51
 8001d2c:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001d30:	4b7f      	ldr	r3, [pc, #508]	; (8001f30 <_Z4loopv+0x8e0>)
 8001d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d0fa      	beq.n	8001d30 <_Z4loopv+0x6e0>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001d3a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001d3e:	2301      	movs	r3, #1
 8001d40:	487b      	ldr	r0, [pc, #492]	; (8001f30 <_Z4loopv+0x8e0>)
 8001d42:	aa04      	add	r2, sp, #16
 8001d44:	f10d 010f 	add.w	r1, sp, #15
 8001d48:	9500      	str	r5, [sp, #0]
 8001d4a:	f002 ff05 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001d54:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <_Z4loopv+0x8e0>)
 8001d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d0fa      	beq.n	8001d54 <_Z4loopv+0x704>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001d5e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001d62:	2301      	movs	r3, #1
 8001d64:	4872      	ldr	r0, [pc, #456]	; (8001f30 <_Z4loopv+0x8e0>)
 8001d66:	aa04      	add	r2, sp, #16
 8001d68:	f10d 010f 	add.w	r1, sp, #15
 8001d6c:	9500      	str	r5, [sp, #0]
 8001d6e:	f002 fef3 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8001d72:	2356      	movs	r3, #86	; 0x56
 8001d74:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001d78:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <_Z4loopv+0x8e0>)
 8001d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d0fa      	beq.n	8001d78 <_Z4loopv+0x728>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001d82:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001d86:	2301      	movs	r3, #1
 8001d88:	aa04      	add	r2, sp, #16
 8001d8a:	4869      	ldr	r0, [pc, #420]	; (8001f30 <_Z4loopv+0x8e0>)
 8001d8c:	f10d 010f 	add.w	r1, sp, #15
 8001d90:	9600      	str	r6, [sp, #0]
 8001d92:	f002 fee1 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001d96:	2300      	movs	r3, #0
 8001d98:	4d61      	ldr	r5, [pc, #388]	; (8001f20 <_Z4loopv+0x8d0>)
 8001d9a:	4a62      	ldr	r2, [pc, #392]	; (8001f24 <_Z4loopv+0x8d4>)
 8001d9c:	606b      	str	r3, [r5, #4]
 8001d9e:	4b62      	ldr	r3, [pc, #392]	; (8001f28 <_Z4loopv+0x8d8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0c9b      	lsrs	r3, r3, #18
 8001da8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001dac:	009a      	lsls	r2, r3, #2
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <_Z4loopv+0x8dc>)
 8001db0:	3a10      	subs	r2, #16
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	686b      	ldr	r3, [r5, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d8fc      	bhi.n	8001db4 <_Z4loopv+0x764>
		ADS124x_CS_1;
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2110      	movs	r1, #16
 8001dbe:	4857      	ldr	r0, [pc, #348]	; (8001f1c <_Z4loopv+0x8cc>)
 8001dc0:	f001 fd81 	bl	80038c6 <HAL_GPIO_WritePin>
		HAL_Delay(41);
 8001dc4:	2029      	movs	r0, #41	; 0x29
 8001dc6:	f001 fab1 	bl	800332c <HAL_Delay>
		readAllRegister();
 8001dca:	4853      	ldr	r0, [pc, #332]	; (8001f18 <_Z4loopv+0x8c8>)
 8001dcc:	f7ff fa52 	bl	8001274 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8001dd0:	4950      	ldr	r1, [pc, #320]	; (8001f14 <_Z4loopv+0x8c4>)
 8001dd2:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8001dd6:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8001dda:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		b1 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 4.120 / 2.0202
 8001de4:	4318      	orrs	r0, r3
 8001de6:	460e      	mov	r6, r1
 8001de8:	f7fe ff54 	bl	8000c94 <__aeabi_ui2f>
 8001dec:	4951      	ldr	r1, [pc, #324]	; (8001f34 <_Z4loopv+0x8e4>)
 8001dee:	f7fe ffa9 	bl	8000d44 <__aeabi_fmul>
 8001df2:	f7fe fb19 	bl	8000428 <__aeabi_f2d>
				* 4.119 / 4.2;
 8001df6:	a344      	add	r3, pc, #272	; (adr r3, 8001f08 <_Z4loopv+0x8b8>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fb6c 	bl	80004d8 <__aeabi_dmul>
 8001e00:	f7fe fe42 	bl	8000a88 <__aeabi_d2f>
 8001e04:	4603      	mov	r3, r0
		HAL_Delay(1);
 8001e06:	2001      	movs	r0, #1
 8001e08:	6033      	str	r3, [r6, #0]
 8001e0a:	f001 fa8f 	bl	800332c <HAL_Delay>
		ADS124x_CS_0;
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2110      	movs	r1, #16
 8001e12:	4842      	ldr	r0, [pc, #264]	; (8001f1c <_Z4loopv+0x8cc>)
 8001e14:	f001 fd57 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	606b      	str	r3, [r5, #4]
 8001e1c:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <_Z4loopv+0x8d8>)
 8001e1e:	4a41      	ldr	r2, [pc, #260]	; (8001f24 <_Z4loopv+0x8d4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	493f      	ldr	r1, [pc, #252]	; (8001f20 <_Z4loopv+0x8d0>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	0c9b      	lsrs	r3, r3, #18
 8001e2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e2e:	009a      	lsls	r2, r3, #2
 8001e30:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <_Z4loopv+0x8dc>)
 8001e32:	3a10      	subs	r2, #16
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	684b      	ldr	r3, [r1, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d8fc      	bhi.n	8001e36 <_Z4loopv+0x7e6>
		XferByte(cmd);
 8001e3c:	23fc      	movs	r3, #252	; 0xfc
 8001e3e:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <_Z4loopv+0x8e0>)
 8001e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d0fa      	beq.n	8001e42 <_Z4loopv+0x7f2>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001e4c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001e50:	2301      	movs	r3, #1
 8001e52:	aa04      	add	r2, sp, #16
 8001e54:	4836      	ldr	r0, [pc, #216]	; (8001f30 <_Z4loopv+0x8e0>)
 8001e56:	f10d 010f 	add.w	r1, sp, #15
 8001e5a:	9600      	str	r6, [sp, #0]
 8001e5c:	f002 fe7c 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001e60:	2300      	movs	r3, #0
 8001e62:	4d2f      	ldr	r5, [pc, #188]	; (8001f20 <_Z4loopv+0x8d0>)
 8001e64:	4a2f      	ldr	r2, [pc, #188]	; (8001f24 <_Z4loopv+0x8d4>)
 8001e66:	606b      	str	r3, [r5, #4]
 8001e68:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <_Z4loopv+0x8d8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	0c9b      	lsrs	r3, r3, #18
 8001e72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e76:	009a      	lsls	r2, r3, #2
 8001e78:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <_Z4loopv+0x8dc>)
 8001e7a:	3a10      	subs	r2, #16
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	686b      	ldr	r3, [r5, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8fc      	bhi.n	8001e7e <_Z4loopv+0x82e>
		ADS124x_CS_1;
 8001e84:	2201      	movs	r2, #1
 8001e86:	2110      	movs	r1, #16
 8001e88:	4824      	ldr	r0, [pc, #144]	; (8001f1c <_Z4loopv+0x8cc>)
 8001e8a:	f001 fd1c 	bl	80038c6 <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8001e8e:	2346      	movs	r3, #70	; 0x46
 8001e90:	4e20      	ldr	r6, [pc, #128]	; (8001f14 <_Z4loopv+0x8c4>)
		ADS124x_CS_0;
 8001e92:	2200      	movs	r2, #0
 8001e94:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 8001e96:	7773      	strb	r3, [r6, #29]
		ADS124x_CS_0;
 8001e98:	4820      	ldr	r0, [pc, #128]	; (8001f1c <_Z4loopv+0x8cc>)
 8001e9a:	f001 fd14 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	606b      	str	r3, [r5, #4]
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <_Z4loopv+0x8d8>)
 8001ea4:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <_Z4loopv+0x8d4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	491d      	ldr	r1, [pc, #116]	; (8001f20 <_Z4loopv+0x8d0>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0c9b      	lsrs	r3, r3, #18
 8001eb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001eb4:	009a      	lsls	r2, r3, #2
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <_Z4loopv+0x8dc>)
 8001eb8:	3a10      	subs	r2, #16
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	684b      	ldr	r3, [r1, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d8fc      	bhi.n	8001ebc <_Z4loopv+0x86c>
		XferByte(0x50 + r);
 8001ec2:	2351      	movs	r3, #81	; 0x51
 8001ec4:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <_Z4loopv+0x8e0>)
 8001eca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d0fa      	beq.n	8001ec8 <_Z4loopv+0x878>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001ed2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	4815      	ldr	r0, [pc, #84]	; (8001f30 <_Z4loopv+0x8e0>)
 8001eda:	aa04      	add	r2, sp, #16
 8001edc:	f10d 010f 	add.w	r1, sp, #15
 8001ee0:	9500      	str	r5, [sp, #0]
 8001ee2:	f002 fe39 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <_Z4loopv+0x8e0>)
 8001eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d0fa      	beq.n	8001eec <_Z4loopv+0x89c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001ef6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001efa:	2301      	movs	r3, #1
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <_Z4loopv+0x8e0>)
 8001efe:	aa04      	add	r2, sp, #16
 8001f00:	f10d 010f 	add.w	r1, sp, #15
 8001f04:	9500      	str	r5, [sp, #0]
 8001f06:	e017      	b.n	8001f38 <_Z4loopv+0x8e8>
 8001f08:	131ec926 	.word	0x131ec926
 8001f0c:	40000025 	.word	0x40000025
 8001f10:	40010c00 	.word	0x40010c00
 8001f14:	200007ec 	.word	0x200007ec
 8001f18:	20000808 	.word	0x20000808
 8001f1c:	40010800 	.word	0x40010800
 8001f20:	e0001000 	.word	0xe0001000
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	2000005c 	.word	0x2000005c
 8001f2c:	2000093c 	.word	0x2000093c
 8001f30:	2000084c 	.word	0x2000084c
 8001f34:	34200000 	.word	0x34200000
 8001f38:	f002 fe0e 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8001f3c:	2346      	movs	r3, #70	; 0x46
 8001f3e:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8001f42:	4ba9      	ldr	r3, [pc, #676]	; (80021e8 <_Z4loopv+0xb98>)
 8001f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d0fa      	beq.n	8001f42 <_Z4loopv+0x8f2>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8001f4c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001f50:	2301      	movs	r3, #1
 8001f52:	aa04      	add	r2, sp, #16
 8001f54:	48a4      	ldr	r0, [pc, #656]	; (80021e8 <_Z4loopv+0xb98>)
 8001f56:	f10d 010f 	add.w	r1, sp, #15
 8001f5a:	9600      	str	r6, [sp, #0]
 8001f5c:	f002 fdfc 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8001f60:	2300      	movs	r3, #0
 8001f62:	4da2      	ldr	r5, [pc, #648]	; (80021ec <_Z4loopv+0xb9c>)
 8001f64:	4aa2      	ldr	r2, [pc, #648]	; (80021f0 <_Z4loopv+0xba0>)
 8001f66:	606b      	str	r3, [r5, #4]
 8001f68:	4ba2      	ldr	r3, [pc, #648]	; (80021f4 <_Z4loopv+0xba4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f70:	0c9b      	lsrs	r3, r3, #18
 8001f72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f76:	009a      	lsls	r2, r3, #2
 8001f78:	4b9f      	ldr	r3, [pc, #636]	; (80021f8 <_Z4loopv+0xba8>)
 8001f7a:	3a10      	subs	r2, #16
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	686b      	ldr	r3, [r5, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8fc      	bhi.n	8001f7e <_Z4loopv+0x92e>
		ADS124x_CS_1;
 8001f84:	2201      	movs	r2, #1
 8001f86:	2110      	movs	r1, #16
 8001f88:	489c      	ldr	r0, [pc, #624]	; (80021fc <_Z4loopv+0xbac>)
 8001f8a:	f001 fc9c 	bl	80038c6 <HAL_GPIO_WritePin>
		HAL_Delay(41);
 8001f8e:	2029      	movs	r0, #41	; 0x29
 8001f90:	f001 f9cc 	bl	800332c <HAL_Delay>
		readAllRegister();
 8001f94:	489a      	ldr	r0, [pc, #616]	; (8002200 <_Z4loopv+0xbb0>)
 8001f96:	f7ff f96d 	bl	8001274 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 8001f9a:	499a      	ldr	r1, [pc, #616]	; (8002204 <_Z4loopv+0xbb4>)
 8001f9c:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8001fa0:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8001fa4:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		v8 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 8.197 / 2.1743
 8001fae:	4318      	orrs	r0, r3
 8001fb0:	460e      	mov	r6, r1
 8001fb2:	f7fe fe6f 	bl	8000c94 <__aeabi_ui2f>
 8001fb6:	4994      	ldr	r1, [pc, #592]	; (8002208 <_Z4loopv+0xbb8>)
 8001fb8:	f7fe fec4 	bl	8000d44 <__aeabi_fmul>
 8001fbc:	f7fe fa34 	bl	8000428 <__aeabi_f2d>
				* 8.197 / 8.196 * 8.192 / 8.191;
 8001fc0:	a385      	add	r3, pc, #532	; (adr r3, 80021d8 <_Z4loopv+0xb88>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fa87 	bl	80004d8 <__aeabi_dmul>
 8001fca:	f7fe fd5d 	bl	8000a88 <__aeabi_d2f>
		b2 = v8 - b1;
 8001fce:	6831      	ldr	r1, [r6, #0]
		v8 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 8.197 / 2.1743
 8001fd0:	61b0      	str	r0, [r6, #24]
		b2 = v8 - b1;
 8001fd2:	f7fe fdad 	bl	8000b30 <__aeabi_fsub>
 8001fd6:	4603      	mov	r3, r0
		HAL_Delay(1);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	6073      	str	r3, [r6, #4]
 8001fdc:	f001 f9a6 	bl	800332c <HAL_Delay>
		ADS124x_CS_0;
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	4885      	ldr	r0, [pc, #532]	; (80021fc <_Z4loopv+0xbac>)
 8001fe6:	f001 fc6e 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8001fea:	2300      	movs	r3, #0
 8001fec:	606b      	str	r3, [r5, #4]
 8001fee:	4b81      	ldr	r3, [pc, #516]	; (80021f4 <_Z4loopv+0xba4>)
 8001ff0:	4a7f      	ldr	r2, [pc, #508]	; (80021f0 <_Z4loopv+0xba0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	497d      	ldr	r1, [pc, #500]	; (80021ec <_Z4loopv+0xb9c>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0c9b      	lsrs	r3, r3, #18
 8001ffc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002000:	009a      	lsls	r2, r3, #2
 8002002:	4b7d      	ldr	r3, [pc, #500]	; (80021f8 <_Z4loopv+0xba8>)
 8002004:	3a10      	subs	r2, #16
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	684b      	ldr	r3, [r1, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	d8fc      	bhi.n	8002008 <_Z4loopv+0x9b8>
		XferByte(cmd);
 800200e:	23fc      	movs	r3, #252	; 0xfc
 8002010:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002014:	4b74      	ldr	r3, [pc, #464]	; (80021e8 <_Z4loopv+0xb98>)
 8002016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800201a:	2b02      	cmp	r3, #2
 800201c:	d0fa      	beq.n	8002014 <_Z4loopv+0x9c4>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800201e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002022:	2301      	movs	r3, #1
 8002024:	aa04      	add	r2, sp, #16
 8002026:	4870      	ldr	r0, [pc, #448]	; (80021e8 <_Z4loopv+0xb98>)
 8002028:	f10d 010f 	add.w	r1, sp, #15
 800202c:	9600      	str	r6, [sp, #0]
 800202e:	f002 fd93 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002032:	2300      	movs	r3, #0
 8002034:	4d6d      	ldr	r5, [pc, #436]	; (80021ec <_Z4loopv+0xb9c>)
 8002036:	4a6e      	ldr	r2, [pc, #440]	; (80021f0 <_Z4loopv+0xba0>)
 8002038:	606b      	str	r3, [r5, #4]
 800203a:	4b6e      	ldr	r3, [pc, #440]	; (80021f4 <_Z4loopv+0xba4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0c9b      	lsrs	r3, r3, #18
 8002044:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002048:	009a      	lsls	r2, r3, #2
 800204a:	4b6b      	ldr	r3, [pc, #428]	; (80021f8 <_Z4loopv+0xba8>)
 800204c:	3a10      	subs	r2, #16
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	686b      	ldr	r3, [r5, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d8fc      	bhi.n	8002050 <_Z4loopv+0xa00>
		ADS124x_CS_1;
 8002056:	2201      	movs	r2, #1
 8002058:	2110      	movs	r1, #16
 800205a:	4868      	ldr	r0, [pc, #416]	; (80021fc <_Z4loopv+0xbac>)
 800205c:	f001 fc33 	bl	80038c6 <HAL_GPIO_WritePin>
		ADSregister.MUX.NSEL = n;
 8002060:	2316      	movs	r3, #22
 8002062:	4e68      	ldr	r6, [pc, #416]	; (8002204 <_Z4loopv+0xbb4>)
		ADS124x_CS_0;
 8002064:	2200      	movs	r2, #0
 8002066:	2110      	movs	r1, #16
		ADSregister.MUX.NSEL = n;
 8002068:	7773      	strb	r3, [r6, #29]
		ADS124x_CS_0;
 800206a:	4864      	ldr	r0, [pc, #400]	; (80021fc <_Z4loopv+0xbac>)
 800206c:	f001 fc2b 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002070:	2300      	movs	r3, #0
 8002072:	606b      	str	r3, [r5, #4]
 8002074:	4b5f      	ldr	r3, [pc, #380]	; (80021f4 <_Z4loopv+0xba4>)
 8002076:	4a5e      	ldr	r2, [pc, #376]	; (80021f0 <_Z4loopv+0xba0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	495c      	ldr	r1, [pc, #368]	; (80021ec <_Z4loopv+0xb9c>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	0c9b      	lsrs	r3, r3, #18
 8002082:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002086:	009a      	lsls	r2, r3, #2
 8002088:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <_Z4loopv+0xba8>)
 800208a:	3a10      	subs	r2, #16
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	684b      	ldr	r3, [r1, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8fc      	bhi.n	800208e <_Z4loopv+0xa3e>
		XferByte(0x50 + r);
 8002094:	2351      	movs	r3, #81	; 0x51
 8002096:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <_Z4loopv+0xb98>)
 800209c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d0fa      	beq.n	800209a <_Z4loopv+0xa4a>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80020a4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80020a8:	2301      	movs	r3, #1
 80020aa:	484f      	ldr	r0, [pc, #316]	; (80021e8 <_Z4loopv+0xb98>)
 80020ac:	aa04      	add	r2, sp, #16
 80020ae:	f10d 010f 	add.w	r1, sp, #15
 80020b2:	9500      	str	r5, [sp, #0]
 80020b4:	f002 fd50 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(0);
 80020b8:	2300      	movs	r3, #0
 80020ba:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80020be:	4b4a      	ldr	r3, [pc, #296]	; (80021e8 <_Z4loopv+0xb98>)
 80020c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d0fa      	beq.n	80020be <_Z4loopv+0xa6e>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80020c8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80020cc:	2301      	movs	r3, #1
 80020ce:	4846      	ldr	r0, [pc, #280]	; (80021e8 <_Z4loopv+0xb98>)
 80020d0:	aa04      	add	r2, sp, #16
 80020d2:	f10d 010f 	add.w	r1, sp, #15
 80020d6:	9500      	str	r5, [sp, #0]
 80020d8:	f002 fd3e 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(data);
 80020dc:	2316      	movs	r3, #22
 80020de:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <_Z4loopv+0xb98>)
 80020e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d0fa      	beq.n	80020e2 <_Z4loopv+0xa92>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80020ec:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80020f0:	2301      	movs	r3, #1
 80020f2:	aa04      	add	r2, sp, #16
 80020f4:	f10d 010f 	add.w	r1, sp, #15
 80020f8:	483b      	ldr	r0, [pc, #236]	; (80021e8 <_Z4loopv+0xb98>)
 80020fa:	9500      	str	r5, [sp, #0]
 80020fc:	f002 fd2c 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002100:	2300      	movs	r3, #0
 8002102:	493a      	ldr	r1, [pc, #232]	; (80021ec <_Z4loopv+0xb9c>)
 8002104:	4a3a      	ldr	r2, [pc, #232]	; (80021f0 <_Z4loopv+0xba0>)
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	4b3a      	ldr	r3, [pc, #232]	; (80021f4 <_Z4loopv+0xba4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002116:	009a      	lsls	r2, r3, #2
 8002118:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <_Z4loopv+0xba8>)
 800211a:	3a10      	subs	r2, #16
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	684b      	ldr	r3, [r1, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8fc      	bhi.n	800211e <_Z4loopv+0xace>
		ADS124x_CS_1;
 8002124:	2201      	movs	r2, #1
 8002126:	2110      	movs	r1, #16
 8002128:	4834      	ldr	r0, [pc, #208]	; (80021fc <_Z4loopv+0xbac>)
 800212a:	f001 fbcc 	bl	80038c6 <HAL_GPIO_WritePin>
		HAL_Delay(41);
 800212e:	2029      	movs	r0, #41	; 0x29
 8002130:	f001 f8fc 	bl	800332c <HAL_Delay>
		readAllRegister();
 8002134:	4832      	ldr	r0, [pc, #200]	; (8002200 <_Z4loopv+0xbb0>)
 8002136:	f7ff f89d 	bl	8001274 <_ZN7ADS124315readAllRegisterEv>
		uint32_t r = (ADSregister.DOR2 << 16) | (ADSregister.DOR1 << 8)| ADSregister.DOR0;
 800213a:	4932      	ldr	r1, [pc, #200]	; (8002204 <_Z4loopv+0xbb4>)
 800213c:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8002140:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8002144:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		v12 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.292 / 2.1478;
 800214e:	4318      	orrs	r0, r3
 8002150:	460d      	mov	r5, r1
 8002152:	f7fe fd9f 	bl	8000c94 <__aeabi_ui2f>
 8002156:	492c      	ldr	r1, [pc, #176]	; (8002208 <_Z4loopv+0xbb8>)
 8002158:	f7fe fdf4 	bl	8000d44 <__aeabi_fmul>
 800215c:	f7fe f964 	bl	8000428 <__aeabi_f2d>
 8002160:	a31f      	add	r3, pc, #124	; (adr r3, 80021e0 <_Z4loopv+0xb90>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	f7fe f9b7 	bl	80004d8 <__aeabi_dmul>
 800216a:	f7fe fc8d 	bl	8000a88 <__aeabi_d2f>
		b3 = v12 - v8;
 800216e:	69a9      	ldr	r1, [r5, #24]
		v12 = (float) v / (256.0f * 256.0f * 256.0f) * 2.5F * 12.292 / 2.1478;
 8002170:	60e8      	str	r0, [r5, #12]
		b3 = v12 - v8;
 8002172:	f7fe fcdd 	bl	8000b30 <__aeabi_fsub>
 8002176:	4603      	mov	r3, r0
		tft->Fill1(0);
 8002178:	2100      	movs	r1, #0
 800217a:	6b28      	ldr	r0, [r5, #48]	; 0x30
		b3 = v12 - v8;
 800217c:	60ab      	str	r3, [r5, #8]
		tft->Fill1(0);
 800217e:	f004 f8b5 	bl	80062ec <_ZN3TFT5Fill1Et>
 8002182:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002186:	6b2b      	ldr	r3, [r5, #48]	; 0x30
		sprintf(str, "v12 %f", v12);
 8002188:	68e8      	ldr	r0, [r5, #12]
 800218a:	615a      	str	r2, [r3, #20]
 800218c:	f7fe f94c 	bl	8000428 <__aeabi_f2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	a804      	add	r0, sp, #16
 8002196:	491d      	ldr	r1, [pc, #116]	; (800220c <_Z4loopv+0xbbc>)
 8002198:	f004 feea 	bl	8006f70 <siprintf>
 800219c:	f89d 9010 	ldrb.w	r9, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 80021a0:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80021a2:	f1b9 0f00 	cmp.w	r9, #0
 80021a6:	d067      	beq.n	8002278 <_Z4loopv+0xc28>
 80021a8:	463b      	mov	r3, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80021aa:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80021ae:	464f      	mov	r7, r9
 80021b0:	4699      	mov	r9, r3
 80021b2:	7822      	ldrb	r2, [r4, #0]
 80021b4:	f10d 0a10 	add.w	sl, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 80021b8:	7863      	ldrb	r3, [r4, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d04d      	beq.n	800225a <_Z4loopv+0xc0a>
 80021be:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80021c0:	f1a7 0820 	sub.w	r8, r7, #32
 80021c4:	fb08 6303 	mla	r3, r8, r3, r6
 80021c8:	6861      	ldr	r1, [r4, #4]
 80021ca:	f831 b013 	ldrh.w	fp, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	d043      	beq.n	800225a <_Z4loopv+0xc0a>
 80021d2:	2500      	movs	r5, #0
 80021d4:	e028      	b.n	8002228 <_Z4loopv+0xbd8>
 80021d6:	bf00      	nop
 80021d8:	7d3e21a7 	.word	0x7d3e21a7
 80021dc:	400e2abd 	.word	0x400e2abd
 80021e0:	45c65bdf 	.word	0x45c65bdf
 80021e4:	4016e46b 	.word	0x4016e46b
 80021e8:	2000084c 	.word	0x2000084c
 80021ec:	e0001000 	.word	0xe0001000
 80021f0:	431bde83 	.word	0x431bde83
 80021f4:	2000005c 	.word	0x2000005c
 80021f8:	2000093c 	.word	0x2000093c
 80021fc:	40010800 	.word	0x40010800
 8002200:	20000808 	.word	0x20000808
 8002204:	200007ec 	.word	0x200007ec
 8002208:	34200000 	.word	0x34200000
 800220c:	08009244 	.word	0x08009244
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002210:	4432      	add	r2, r6
 8002212:	4648      	mov	r0, r9
 8002214:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8002218:	f004 f83a 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 800221c:	7822      	ldrb	r2, [r4, #0]
 800221e:	3501      	adds	r5, #1
 8002220:	42aa      	cmp	r2, r5
 8002222:	d914      	bls.n	800224e <_Z4loopv+0xbfe>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002224:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
			if ((b << j) & 0x8000) {
 8002228:	fa0b f305 	lsl.w	r3, fp, r5
 800222c:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800222e:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 8002232:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 8002236:	d4eb      	bmi.n	8002210 <_Z4loopv+0xbc0>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002238:	1941      	adds	r1, r0, r5
 800223a:	4432      	add	r2, r6
 800223c:	4648      	mov	r0, r9
 800223e:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8002242:	f004 f825 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8002246:	7822      	ldrb	r2, [r4, #0]
 8002248:	3501      	adds	r5, #1
 800224a:	4295      	cmp	r5, r2
 800224c:	d3ea      	bcc.n	8002224 <_Z4loopv+0xbd4>
	for (i = 0; i < Font->FontHeight; i++) {
 800224e:	7863      	ldrb	r3, [r4, #1]
 8002250:	3601      	adds	r6, #1
 8002252:	429e      	cmp	r6, r3
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002254:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8002258:	d3b4      	bcc.n	80021c4 <_Z4loopv+0xb74>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800225a:	4410      	add	r0, r2
 800225c:	3801      	subs	r0, #1
 800225e:	b200      	sxth	r0, r0
 8002260:	f8a9 0014 	strh.w	r0, [r9, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8002264:	f89a 3000 	ldrb.w	r3, [sl]
 8002268:	42bb      	cmp	r3, r7
 800226a:	d103      	bne.n	8002274 <_Z4loopv+0xc24>
	while (*str) {
 800226c:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
 8002270:	2f00      	cmp	r7, #0
 8002272:	d1a1      	bne.n	80021b8 <_Z4loopv+0xb68>
		tft->GotoXY(0, 17);
 8002274:	4bb2      	ldr	r3, [pc, #712]	; (8002540 <_Z4loopv+0xef0>)
 8002276:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8002278:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
		sprintf(str, "b3  %f", b3);
 800227c:	4db0      	ldr	r5, [pc, #704]	; (8002540 <_Z4loopv+0xef0>)
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	68a8      	ldr	r0, [r5, #8]
 8002282:	f7fe f8d1 	bl	8000428 <__aeabi_f2d>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	a804      	add	r0, sp, #16
 800228c:	49ad      	ldr	r1, [pc, #692]	; (8002544 <_Z4loopv+0xef4>)
 800228e:	f004 fe6f 	bl	8006f70 <siprintf>
 8002292:	f89d 9010 	ldrb.w	r9, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 8002296:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8002298:	f1b9 0f00 	cmp.w	r9, #0
 800229c:	d042      	beq.n	8002324 <_Z4loopv+0xcd4>
 800229e:	463b      	mov	r3, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80022a0:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80022a4:	464f      	mov	r7, r9
 80022a6:	4699      	mov	r9, r3
 80022a8:	7822      	ldrb	r2, [r4, #0]
 80022aa:	f10d 0a10 	add.w	sl, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 80022ae:	7863      	ldrb	r3, [r4, #1]
 80022b0:	b34b      	cbz	r3, 8002306 <_Z4loopv+0xcb6>
 80022b2:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80022b4:	f1a7 0820 	sub.w	r8, r7, #32
 80022b8:	fb08 6303 	mla	r3, r8, r3, r6
 80022bc:	6861      	ldr	r1, [r4, #4]
 80022be:	f831 b013 	ldrh.w	fp, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80022c2:	b302      	cbz	r2, 8002306 <_Z4loopv+0xcb6>
 80022c4:	2500      	movs	r5, #0
 80022c6:	e00b      	b.n	80022e0 <_Z4loopv+0xc90>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80022c8:	4648      	mov	r0, r9
 80022ca:	f8b9 3018 	ldrh.w	r3, [r9, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80022ce:	4432      	add	r2, r6
 80022d0:	f003 ffde 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 80022d4:	7822      	ldrb	r2, [r4, #0]
 80022d6:	3501      	adds	r5, #1
 80022d8:	4295      	cmp	r5, r2
 80022da:	d20e      	bcs.n	80022fa <_Z4loopv+0xcaa>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80022dc:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
			if ((b << j) & 0x8000) {
 80022e0:	fa0b f305 	lsl.w	r3, fp, r5
 80022e4:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80022e6:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 80022ea:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 80022ee:	d4eb      	bmi.n	80022c8 <_Z4loopv+0xc78>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80022f0:	1941      	adds	r1, r0, r5
 80022f2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80022f6:	4648      	mov	r0, r9
 80022f8:	e7e9      	b.n	80022ce <_Z4loopv+0xc7e>
	for (i = 0; i < Font->FontHeight; i++) {
 80022fa:	7863      	ldrb	r3, [r4, #1]
 80022fc:	3601      	adds	r6, #1
 80022fe:	429e      	cmp	r6, r3
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002300:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8002304:	d3d8      	bcc.n	80022b8 <_Z4loopv+0xc68>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002306:	4410      	add	r0, r2
 8002308:	3801      	subs	r0, #1
 800230a:	b200      	sxth	r0, r0
 800230c:	f8a9 0014 	strh.w	r0, [r9, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8002310:	f89a 3000 	ldrb.w	r3, [sl]
 8002314:	42bb      	cmp	r3, r7
 8002316:	d103      	bne.n	8002320 <_Z4loopv+0xcd0>
	while (*str) {
 8002318:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
 800231c:	2f00      	cmp	r7, #0
 800231e:	d1c6      	bne.n	80022ae <_Z4loopv+0xc5e>
		tft->GotoXY(0, 26);
 8002320:	4b87      	ldr	r3, [pc, #540]	; (8002540 <_Z4loopv+0xef0>)
 8002322:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8002324:	f44f 13d0 	mov.w	r3, #1703936	; 0x1a0000
		sprintf(str, "b2  %f", b2);
 8002328:	4d85      	ldr	r5, [pc, #532]	; (8002540 <_Z4loopv+0xef0>)
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	6868      	ldr	r0, [r5, #4]
 800232e:	f7fe f87b 	bl	8000428 <__aeabi_f2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	a804      	add	r0, sp, #16
 8002338:	4983      	ldr	r1, [pc, #524]	; (8002548 <_Z4loopv+0xef8>)
 800233a:	f004 fe19 	bl	8006f70 <siprintf>
 800233e:	f89d 9010 	ldrb.w	r9, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 8002342:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8002344:	f1b9 0f00 	cmp.w	r9, #0
 8002348:	d042      	beq.n	80023d0 <_Z4loopv+0xd80>
 800234a:	463b      	mov	r3, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800234c:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8002350:	464f      	mov	r7, r9
 8002352:	4699      	mov	r9, r3
 8002354:	7822      	ldrb	r2, [r4, #0]
 8002356:	f10d 0a10 	add.w	sl, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 800235a:	7863      	ldrb	r3, [r4, #1]
 800235c:	b34b      	cbz	r3, 80023b2 <_Z4loopv+0xd62>
 800235e:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002360:	f1a7 0820 	sub.w	r8, r7, #32
 8002364:	fb08 6303 	mla	r3, r8, r3, r6
 8002368:	6861      	ldr	r1, [r4, #4]
 800236a:	f831 b013 	ldrh.w	fp, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 800236e:	b302      	cbz	r2, 80023b2 <_Z4loopv+0xd62>
 8002370:	2500      	movs	r5, #0
 8002372:	e00b      	b.n	800238c <_Z4loopv+0xd3c>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002374:	4648      	mov	r0, r9
 8002376:	f8b9 3018 	ldrh.w	r3, [r9, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 800237a:	4432      	add	r2, r6
 800237c:	f003 ff88 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8002380:	7822      	ldrb	r2, [r4, #0]
 8002382:	3501      	adds	r5, #1
 8002384:	4295      	cmp	r5, r2
 8002386:	d20e      	bcs.n	80023a6 <_Z4loopv+0xd56>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002388:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
			if ((b << j) & 0x8000) {
 800238c:	fa0b f305 	lsl.w	r3, fp, r5
 8002390:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002392:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 8002396:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 800239a:	d4eb      	bmi.n	8002374 <_Z4loopv+0xd24>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 800239c:	1941      	adds	r1, r0, r5
 800239e:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80023a2:	4648      	mov	r0, r9
 80023a4:	e7e9      	b.n	800237a <_Z4loopv+0xd2a>
	for (i = 0; i < Font->FontHeight; i++) {
 80023a6:	7863      	ldrb	r3, [r4, #1]
 80023a8:	3601      	adds	r6, #1
 80023aa:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80023ac:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 80023b0:	d8d8      	bhi.n	8002364 <_Z4loopv+0xd14>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80023b2:	4410      	add	r0, r2
 80023b4:	3801      	subs	r0, #1
 80023b6:	b200      	sxth	r0, r0
 80023b8:	f8a9 0014 	strh.w	r0, [r9, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 80023bc:	f89a 3000 	ldrb.w	r3, [sl]
 80023c0:	42bb      	cmp	r3, r7
 80023c2:	d103      	bne.n	80023cc <_Z4loopv+0xd7c>
	while (*str) {
 80023c4:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
 80023c8:	2f00      	cmp	r7, #0
 80023ca:	d1c6      	bne.n	800235a <_Z4loopv+0xd0a>
		tft->GotoXY(0, 35);
 80023cc:	4b5c      	ldr	r3, [pc, #368]	; (8002540 <_Z4loopv+0xef0>)
 80023ce:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80023d0:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
		sprintf(str, "b1  %f", b1);
 80023d4:	4d5a      	ldr	r5, [pc, #360]	; (8002540 <_Z4loopv+0xef0>)
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	6828      	ldr	r0, [r5, #0]
 80023da:	f7fe f825 	bl	8000428 <__aeabi_f2d>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	a804      	add	r0, sp, #16
 80023e4:	4959      	ldr	r1, [pc, #356]	; (800254c <_Z4loopv+0xefc>)
 80023e6:	f004 fdc3 	bl	8006f70 <siprintf>
 80023ea:	f89d 9010 	ldrb.w	r9, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 80023ee:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80023f0:	f1b9 0f00 	cmp.w	r9, #0
 80023f4:	d042      	beq.n	800247c <_Z4loopv+0xe2c>
 80023f6:	463b      	mov	r3, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80023f8:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80023fc:	464f      	mov	r7, r9
 80023fe:	4699      	mov	r9, r3
 8002400:	7822      	ldrb	r2, [r4, #0]
 8002402:	f10d 0a10 	add.w	sl, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 8002406:	7863      	ldrb	r3, [r4, #1]
 8002408:	b34b      	cbz	r3, 800245e <_Z4loopv+0xe0e>
 800240a:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800240c:	f1a7 0820 	sub.w	r8, r7, #32
 8002410:	fb08 6303 	mla	r3, r8, r3, r6
 8002414:	6861      	ldr	r1, [r4, #4]
 8002416:	f831 b013 	ldrh.w	fp, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 800241a:	b302      	cbz	r2, 800245e <_Z4loopv+0xe0e>
 800241c:	2500      	movs	r5, #0
 800241e:	e00b      	b.n	8002438 <_Z4loopv+0xde8>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002420:	4648      	mov	r0, r9
 8002422:	f8b9 3018 	ldrh.w	r3, [r9, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002426:	4432      	add	r2, r6
 8002428:	f003 ff32 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 800242c:	7822      	ldrb	r2, [r4, #0]
 800242e:	3501      	adds	r5, #1
 8002430:	4295      	cmp	r5, r2
 8002432:	d20e      	bcs.n	8002452 <_Z4loopv+0xe02>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002434:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
			if ((b << j) & 0x8000) {
 8002438:	fa0b f305 	lsl.w	r3, fp, r5
 800243c:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 800243e:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 8002442:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 8002446:	d4eb      	bmi.n	8002420 <_Z4loopv+0xdd0>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002448:	1941      	adds	r1, r0, r5
 800244a:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800244e:	4648      	mov	r0, r9
 8002450:	e7e9      	b.n	8002426 <_Z4loopv+0xdd6>
	for (i = 0; i < Font->FontHeight; i++) {
 8002452:	7863      	ldrb	r3, [r4, #1]
 8002454:	3601      	adds	r6, #1
 8002456:	429e      	cmp	r6, r3
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002458:	f9b9 0014 	ldrsh.w	r0, [r9, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 800245c:	d3d8      	bcc.n	8002410 <_Z4loopv+0xdc0>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800245e:	4410      	add	r0, r2
 8002460:	3801      	subs	r0, #1
 8002462:	b200      	sxth	r0, r0
 8002464:	f8a9 0014 	strh.w	r0, [r9, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8002468:	f89a 3000 	ldrb.w	r3, [sl]
 800246c:	42bb      	cmp	r3, r7
 800246e:	d103      	bne.n	8002478 <_Z4loopv+0xe28>
	while (*str) {
 8002470:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
 8002474:	2f00      	cmp	r7, #0
 8002476:	d1c6      	bne.n	8002406 <_Z4loopv+0xdb6>
		tft->GotoXY(0, 44);
 8002478:	4b31      	ldr	r3, [pc, #196]	; (8002540 <_Z4loopv+0xef0>)
 800247a:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800247c:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
		sprintf(str, "v8  %f", v8);
 8002480:	4d2f      	ldr	r5, [pc, #188]	; (8002540 <_Z4loopv+0xef0>)
 8002482:	69a8      	ldr	r0, [r5, #24]
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	f7fd ffcf 	bl	8000428 <__aeabi_f2d>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	a804      	add	r0, sp, #16
 8002490:	492f      	ldr	r1, [pc, #188]	; (8002550 <_Z4loopv+0xf00>)
 8002492:	f004 fd6d 	bl	8006f70 <siprintf>
 8002496:	f89d 8010 	ldrb.w	r8, [sp, #16]
		FontClassicPuts(tft, str, &Font_7x10, 0);
 800249a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800249e:	f1b8 0f00 	cmp.w	r8, #0
 80024a2:	d041      	beq.n	8002528 <_Z4loopv+0xed8>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80024a4:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
 80024a8:	7821      	ldrb	r1, [r4, #0]
 80024aa:	f10d 0910 	add.w	r9, sp, #16
	for (i = 0; i < Font->FontHeight; i++) {
 80024ae:	7863      	ldrb	r3, [r4, #1]
 80024b0:	b34b      	cbz	r3, 8002506 <_Z4loopv+0xeb6>
 80024b2:	2600      	movs	r6, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80024b4:	f1a8 0720 	sub.w	r7, r8, #32
 80024b8:	fb07 6303 	mla	r3, r7, r3, r6
 80024bc:	6862      	ldr	r2, [r4, #4]
 80024be:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80024c2:	b301      	cbz	r1, 8002506 <_Z4loopv+0xeb6>
 80024c4:	2500      	movs	r5, #0
 80024c6:	e00b      	b.n	80024e0 <_Z4loopv+0xe90>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80024c8:	4650      	mov	r0, sl
 80024ca:	f8ba 3018 	ldrh.w	r3, [sl, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80024ce:	4432      	add	r2, r6
 80024d0:	f003 fede 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 80024d4:	7821      	ldrb	r1, [r4, #0]
 80024d6:	3501      	adds	r5, #1
 80024d8:	428d      	cmp	r5, r1
 80024da:	d20e      	bcs.n	80024fa <_Z4loopv+0xeaa>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80024dc:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
			if ((b << j) & 0x8000) {
 80024e0:	fa0b f305 	lsl.w	r3, fp, r5
 80024e4:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 80024e6:	f9ba 2016 	ldrsh.w	r2, [sl, #22]
 80024ea:	eb00 0105 	add.w	r1, r0, r5
			if ((b << j) & 0x8000) {
 80024ee:	d4eb      	bmi.n	80024c8 <_Z4loopv+0xe78>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80024f0:	1941      	adds	r1, r0, r5
 80024f2:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 80024f6:	4650      	mov	r0, sl
 80024f8:	e7e9      	b.n	80024ce <_Z4loopv+0xe7e>
	for (i = 0; i < Font->FontHeight; i++) {
 80024fa:	7863      	ldrb	r3, [r4, #1]
 80024fc:	3601      	adds	r6, #1
 80024fe:	42b3      	cmp	r3, r6
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002500:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8002504:	d8d8      	bhi.n	80024b8 <_Z4loopv+0xe68>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002506:	4408      	add	r0, r1
 8002508:	3801      	subs	r0, #1
 800250a:	b200      	sxth	r0, r0
 800250c:	f8aa 0014 	strh.w	r0, [sl, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 8002510:	f899 3000 	ldrb.w	r3, [r9]
 8002514:	4543      	cmp	r3, r8
 8002516:	d104      	bne.n	8002522 <_Z4loopv+0xed2>
	while (*str) {
 8002518:	f819 8f01 	ldrb.w	r8, [r9, #1]!
 800251c:	f1b8 0f00 	cmp.w	r8, #0
 8002520:	d1c5      	bne.n	80024ae <_Z4loopv+0xe5e>
		tft->driver.Update();
 8002522:	4b07      	ldr	r3, [pc, #28]	; (8002540 <_Z4loopv+0xef0>)
 8002524:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
		switch (LCD->LCD_Driver) {
 8002528:	f8da 3004 	ldr.w	r3, [sl, #4]
 800252c:	7a1b      	ldrb	r3, [r3, #8]
 800252e:	2b03      	cmp	r3, #3
 8002530:	f47f a892 	bne.w	8001658 <_Z4loopv+0x8>
			SSD1306_UpdateScreen();
 8002534:	f10a 0004 	add.w	r0, sl, #4
 8002538:	f003 fe86 	bl	8006248 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
	}
 800253c:	f7ff b88c 	b.w	8001658 <_Z4loopv+0x8>
 8002540:	200007ec 	.word	0x200007ec
 8002544:	0800924c 	.word	0x0800924c
 8002548:	08009254 	.word	0x08009254
 800254c:	0800925c 	.word	0x0800925c
 8002550:	08009264 	.word	0x08009264
		ADSregister.SETUP.PGA = pga;
 8002554:	f36f 0502 	bfc	r5, #0, #3
 8002558:	771d      	strb	r5, [r3, #28]
		ADS124x_CS_0;
 800255a:	2200      	movs	r2, #0
 800255c:	2110      	movs	r1, #16
 800255e:	4875      	ldr	r0, [pc, #468]	; (8002734 <_Z4loopv+0x10e4>)
 8002560:	f001 f9b1 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002564:	2300      	movs	r3, #0
 8002566:	4974      	ldr	r1, [pc, #464]	; (8002738 <_Z4loopv+0x10e8>)
 8002568:	4a74      	ldr	r2, [pc, #464]	; (800273c <_Z4loopv+0x10ec>)
 800256a:	604b      	str	r3, [r1, #4]
 800256c:	4b74      	ldr	r3, [pc, #464]	; (8002740 <_Z4loopv+0x10f0>)
	    uint8_t p = (ADSregister.SETUP.ID << 4) | (ADSregister.SETUP.BOCS << 3) |  ADSregister.SETUP.PGA;
 800256e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
		delayMicroseconds(20);
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	0c9b      	lsrs	r3, r3, #18
 800257a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800257e:	4a71      	ldr	r2, [pc, #452]	; (8002744 <_Z4loopv+0x10f4>)
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	3b10      	subs	r3, #16
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	684a      	ldr	r2, [r1, #4]
 8002588:	4293      	cmp	r3, r2
 800258a:	d8fc      	bhi.n	8002586 <_Z4loopv+0xf36>
		XferByte(0x50 + r);
 800258c:	2350      	movs	r3, #80	; 0x50
 800258e:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002592:	4b6d      	ldr	r3, [pc, #436]	; (8002748 <_Z4loopv+0x10f8>)
 8002594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002598:	2b02      	cmp	r3, #2
 800259a:	d0fa      	beq.n	8002592 <_Z4loopv+0xf42>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800259c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80025a0:	2301      	movs	r3, #1
 80025a2:	4869      	ldr	r0, [pc, #420]	; (8002748 <_Z4loopv+0x10f8>)
 80025a4:	aa04      	add	r2, sp, #16
 80025a6:	f10d 010f 	add.w	r1, sp, #15
 80025aa:	9600      	str	r6, [sp, #0]
 80025ac:	f002 fad4 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(0);
 80025b0:	2300      	movs	r3, #0
 80025b2:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80025b6:	4b64      	ldr	r3, [pc, #400]	; (8002748 <_Z4loopv+0x10f8>)
 80025b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d0fa      	beq.n	80025b6 <_Z4loopv+0xf66>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80025c0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80025c4:	2301      	movs	r3, #1
 80025c6:	4860      	ldr	r0, [pc, #384]	; (8002748 <_Z4loopv+0x10f8>)
 80025c8:	aa04      	add	r2, sp, #16
 80025ca:	f10d 010f 	add.w	r1, sp, #15
 80025ce:	9600      	str	r6, [sp, #0]
 80025d0:	f002 fac2 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(data);
 80025d4:	f88d 500f 	strb.w	r5, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80025d8:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <_Z4loopv+0x10f8>)
 80025da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d0fa      	beq.n	80025d8 <_Z4loopv+0xf88>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80025e2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80025e6:	2301      	movs	r3, #1
 80025e8:	aa04      	add	r2, sp, #16
 80025ea:	4857      	ldr	r0, [pc, #348]	; (8002748 <_Z4loopv+0x10f8>)
 80025ec:	f10d 010f 	add.w	r1, sp, #15
 80025f0:	9600      	str	r6, [sp, #0]
 80025f2:	f002 fab1 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80025f6:	2300      	movs	r3, #0
 80025f8:	4d4f      	ldr	r5, [pc, #316]	; (8002738 <_Z4loopv+0x10e8>)
 80025fa:	4a50      	ldr	r2, [pc, #320]	; (800273c <_Z4loopv+0x10ec>)
 80025fc:	606b      	str	r3, [r5, #4]
 80025fe:	4b50      	ldr	r3, [pc, #320]	; (8002740 <_Z4loopv+0x10f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0c9b      	lsrs	r3, r3, #18
 8002608:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800260c:	4a4d      	ldr	r2, [pc, #308]	; (8002744 <_Z4loopv+0x10f4>)
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	3b10      	subs	r3, #16
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	686a      	ldr	r2, [r5, #4]
 8002616:	4293      	cmp	r3, r2
 8002618:	d8fc      	bhi.n	8002614 <_Z4loopv+0xfc4>
		ADS124x_CS_1;
 800261a:	2201      	movs	r2, #1
 800261c:	2110      	movs	r1, #16
 800261e:	4845      	ldr	r0, [pc, #276]	; (8002734 <_Z4loopv+0x10e4>)
 8002620:	f001 f951 	bl	80038c6 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8002624:	2001      	movs	r0, #1
 8002626:	f000 fe81 	bl	800332c <HAL_Delay>
		ADS124x_CS_0;
 800262a:	2200      	movs	r2, #0
 800262c:	2110      	movs	r1, #16
 800262e:	4841      	ldr	r0, [pc, #260]	; (8002734 <_Z4loopv+0x10e4>)
 8002630:	f001 f949 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002634:	2300      	movs	r3, #0
 8002636:	606b      	str	r3, [r5, #4]
 8002638:	4b41      	ldr	r3, [pc, #260]	; (8002740 <_Z4loopv+0x10f0>)
 800263a:	4a40      	ldr	r2, [pc, #256]	; (800273c <_Z4loopv+0x10ec>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	493e      	ldr	r1, [pc, #248]	; (8002738 <_Z4loopv+0x10e8>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	0c9b      	lsrs	r3, r3, #18
 8002646:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800264a:	4a3e      	ldr	r2, [pc, #248]	; (8002744 <_Z4loopv+0x10f4>)
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	3b10      	subs	r3, #16
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	684a      	ldr	r2, [r1, #4]
 8002654:	4293      	cmp	r3, r2
 8002656:	d8fc      	bhi.n	8002652 <_Z4loopv+0x1002>
		XferByte(cmd);
 8002658:	23f0      	movs	r3, #240	; 0xf0
 800265a:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 800265e:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <_Z4loopv+0x10f8>)
 8002660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002664:	2b02      	cmp	r3, #2
 8002666:	d0fa      	beq.n	800265e <_Z4loopv+0x100e>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002668:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800266c:	2301      	movs	r3, #1
 800266e:	aa04      	add	r2, sp, #16
 8002670:	4835      	ldr	r0, [pc, #212]	; (8002748 <_Z4loopv+0x10f8>)
 8002672:	f10d 010f 	add.w	r1, sp, #15
 8002676:	9600      	str	r6, [sp, #0]
 8002678:	f002 fa6e 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 800267c:	2300      	movs	r3, #0
 800267e:	4d2e      	ldr	r5, [pc, #184]	; (8002738 <_Z4loopv+0x10e8>)
 8002680:	4a2e      	ldr	r2, [pc, #184]	; (800273c <_Z4loopv+0x10ec>)
 8002682:	606b      	str	r3, [r5, #4]
 8002684:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <_Z4loopv+0x10f0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002692:	4a2c      	ldr	r2, [pc, #176]	; (8002744 <_Z4loopv+0x10f4>)
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	3b10      	subs	r3, #16
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	686a      	ldr	r2, [r5, #4]
 800269c:	4293      	cmp	r3, r2
 800269e:	d8fc      	bhi.n	800269a <_Z4loopv+0x104a>
		ADS124x_CS_1;
 80026a0:	2201      	movs	r2, #1
 80026a2:	2110      	movs	r1, #16
 80026a4:	4823      	ldr	r0, [pc, #140]	; (8002734 <_Z4loopv+0x10e4>)
 80026a6:	f001 f90e 	bl	80038c6 <HAL_GPIO_WritePin>
		ADS124x_CS_0;
 80026aa:	2200      	movs	r2, #0
 80026ac:	2110      	movs	r1, #16
 80026ae:	4821      	ldr	r0, [pc, #132]	; (8002734 <_Z4loopv+0x10e4>)
 80026b0:	f001 f909 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80026b4:	2300      	movs	r3, #0
 80026b6:	606b      	str	r3, [r5, #4]
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <_Z4loopv+0x10f0>)
 80026ba:	4a20      	ldr	r2, [pc, #128]	; (800273c <_Z4loopv+0x10ec>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	491e      	ldr	r1, [pc, #120]	; (8002738 <_Z4loopv+0x10e8>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	0c9b      	lsrs	r3, r3, #18
 80026c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026ca:	4a1e      	ldr	r2, [pc, #120]	; (8002744 <_Z4loopv+0x10f4>)
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	3b10      	subs	r3, #16
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	684a      	ldr	r2, [r1, #4]
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d8fc      	bhi.n	80026d2 <_Z4loopv+0x1082>
		XferByte(cmd);
 80026d8:	23fc      	movs	r3, #252	; 0xfc
 80026da:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <_Z4loopv+0x10f8>)
 80026e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d0fa      	beq.n	80026de <_Z4loopv+0x108e>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80026e8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80026ec:	2301      	movs	r3, #1
 80026ee:	aa04      	add	r2, sp, #16
 80026f0:	f10d 010f 	add.w	r1, sp, #15
 80026f4:	4814      	ldr	r0, [pc, #80]	; (8002748 <_Z4loopv+0x10f8>)
 80026f6:	9500      	str	r5, [sp, #0]
 80026f8:	f002 fa2e 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80026fc:	2300      	movs	r3, #0
 80026fe:	490e      	ldr	r1, [pc, #56]	; (8002738 <_Z4loopv+0x10e8>)
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <_Z4loopv+0x10ec>)
 8002702:	604b      	str	r3, [r1, #4]
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <_Z4loopv+0x10f0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	0c9b      	lsrs	r3, r3, #18
 800270e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002712:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <_Z4loopv+0x10f4>)
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	3b10      	subs	r3, #16
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	684a      	ldr	r2, [r1, #4]
 800271c:	4293      	cmp	r3, r2
 800271e:	d8fc      	bhi.n	800271a <_Z4loopv+0x10ca>
		ADS124x_CS_1;
 8002720:	2201      	movs	r2, #1
 8002722:	2110      	movs	r1, #16
 8002724:	4803      	ldr	r0, [pc, #12]	; (8002734 <_Z4loopv+0x10e4>)
 8002726:	f001 f8ce 	bl	80038c6 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800272a:	2064      	movs	r0, #100	; 0x64
 800272c:	f000 fdfe 	bl	800332c <HAL_Delay>
 8002730:	f7ff ba9e 	b.w	8001c70 <_Z4loopv+0x620>
 8002734:	40010800 	.word	0x40010800
 8002738:	e0001000 	.word	0xe0001000
 800273c:	431bde83 	.word	0x431bde83
 8002740:	2000005c 	.word	0x2000005c
 8002744:	2000093c 	.word	0x2000093c
 8002748:	2000084c 	.word	0x2000084c
		ADSregister.SETUP.PGA = pga;
 800274c:	f366 0502 	bfi	r5, r6, #0, #3
 8002750:	771d      	strb	r5, [r3, #28]
		ADS124x_CS_0;
 8002752:	4632      	mov	r2, r6
 8002754:	2110      	movs	r1, #16
 8002756:	489f      	ldr	r0, [pc, #636]	; (80029d4 <_Z4loopv+0x1384>)
 8002758:	f001 f8b5 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 800275c:	499e      	ldr	r1, [pc, #632]	; (80029d8 <_Z4loopv+0x1388>)
 800275e:	4b9f      	ldr	r3, [pc, #636]	; (80029dc <_Z4loopv+0x138c>)
 8002760:	604e      	str	r6, [r1, #4]
 8002762:	4a9f      	ldr	r2, [pc, #636]	; (80029e0 <_Z4loopv+0x1390>)
 8002764:	681b      	ldr	r3, [r3, #0]
	    uint8_t p = (ADSregister.SETUP.ID << 4) | (ADSregister.SETUP.BOCS << 3) |  ADSregister.SETUP.PGA;
 8002766:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
		delayMicroseconds(20);
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002774:	4a9b      	ldr	r2, [pc, #620]	; (80029e4 <_Z4loopv+0x1394>)
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	3b10      	subs	r3, #16
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	684a      	ldr	r2, [r1, #4]
 800277e:	4293      	cmp	r3, r2
 8002780:	d8fc      	bhi.n	800277c <_Z4loopv+0x112c>
		XferByte(0x50 + r);
 8002782:	2350      	movs	r3, #80	; 0x50
 8002784:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002788:	4b97      	ldr	r3, [pc, #604]	; (80029e8 <_Z4loopv+0x1398>)
 800278a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800278e:	2b02      	cmp	r3, #2
 8002790:	d0fa      	beq.n	8002788 <_Z4loopv+0x1138>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002792:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002796:	2301      	movs	r3, #1
 8002798:	4893      	ldr	r0, [pc, #588]	; (80029e8 <_Z4loopv+0x1398>)
 800279a:	aa04      	add	r2, sp, #16
 800279c:	f10d 010f 	add.w	r1, sp, #15
 80027a0:	9600      	str	r6, [sp, #0]
 80027a2:	f002 f9d9 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(0);
 80027a6:	2300      	movs	r3, #0
 80027a8:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80027ac:	4b8e      	ldr	r3, [pc, #568]	; (80029e8 <_Z4loopv+0x1398>)
 80027ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d0fa      	beq.n	80027ac <_Z4loopv+0x115c>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80027b6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80027ba:	2301      	movs	r3, #1
 80027bc:	488a      	ldr	r0, [pc, #552]	; (80029e8 <_Z4loopv+0x1398>)
 80027be:	aa04      	add	r2, sp, #16
 80027c0:	f10d 010f 	add.w	r1, sp, #15
 80027c4:	9600      	str	r6, [sp, #0]
 80027c6:	f002 f9c7 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(data);
 80027ca:	f88d 500f 	strb.w	r5, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80027ce:	4b86      	ldr	r3, [pc, #536]	; (80029e8 <_Z4loopv+0x1398>)
 80027d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d0fa      	beq.n	80027ce <_Z4loopv+0x117e>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80027d8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80027dc:	2301      	movs	r3, #1
 80027de:	aa04      	add	r2, sp, #16
 80027e0:	4881      	ldr	r0, [pc, #516]	; (80029e8 <_Z4loopv+0x1398>)
 80027e2:	f10d 010f 	add.w	r1, sp, #15
 80027e6:	9600      	str	r6, [sp, #0]
 80027e8:	f002 f9b6 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80027ec:	2300      	movs	r3, #0
 80027ee:	4d7a      	ldr	r5, [pc, #488]	; (80029d8 <_Z4loopv+0x1388>)
 80027f0:	4a7b      	ldr	r2, [pc, #492]	; (80029e0 <_Z4loopv+0x1390>)
 80027f2:	606b      	str	r3, [r5, #4]
 80027f4:	4b79      	ldr	r3, [pc, #484]	; (80029dc <_Z4loopv+0x138c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	0c9b      	lsrs	r3, r3, #18
 80027fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002802:	4a78      	ldr	r2, [pc, #480]	; (80029e4 <_Z4loopv+0x1394>)
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	3b10      	subs	r3, #16
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	686a      	ldr	r2, [r5, #4]
 800280c:	4293      	cmp	r3, r2
 800280e:	d8fc      	bhi.n	800280a <_Z4loopv+0x11ba>
		ADS124x_CS_1;
 8002810:	2201      	movs	r2, #1
 8002812:	2110      	movs	r1, #16
 8002814:	486f      	ldr	r0, [pc, #444]	; (80029d4 <_Z4loopv+0x1384>)
 8002816:	f001 f856 	bl	80038c6 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800281a:	2001      	movs	r0, #1
 800281c:	f000 fd86 	bl	800332c <HAL_Delay>
		ADS124x_CS_0;
 8002820:	2200      	movs	r2, #0
 8002822:	2110      	movs	r1, #16
 8002824:	486b      	ldr	r0, [pc, #428]	; (80029d4 <_Z4loopv+0x1384>)
 8002826:	f001 f84e 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 800282a:	2300      	movs	r3, #0
 800282c:	606b      	str	r3, [r5, #4]
 800282e:	4b6b      	ldr	r3, [pc, #428]	; (80029dc <_Z4loopv+0x138c>)
 8002830:	4a6b      	ldr	r2, [pc, #428]	; (80029e0 <_Z4loopv+0x1390>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4968      	ldr	r1, [pc, #416]	; (80029d8 <_Z4loopv+0x1388>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	0c9b      	lsrs	r3, r3, #18
 800283c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002840:	4a68      	ldr	r2, [pc, #416]	; (80029e4 <_Z4loopv+0x1394>)
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	3b10      	subs	r3, #16
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	684a      	ldr	r2, [r1, #4]
 800284a:	4293      	cmp	r3, r2
 800284c:	d8fc      	bhi.n	8002848 <_Z4loopv+0x11f8>
		XferByte(cmd);
 800284e:	23f0      	movs	r3, #240	; 0xf0
 8002850:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002854:	4b64      	ldr	r3, [pc, #400]	; (80029e8 <_Z4loopv+0x1398>)
 8002856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800285a:	2b02      	cmp	r3, #2
 800285c:	d0fa      	beq.n	8002854 <_Z4loopv+0x1204>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 800285e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002862:	2301      	movs	r3, #1
 8002864:	aa04      	add	r2, sp, #16
 8002866:	4860      	ldr	r0, [pc, #384]	; (80029e8 <_Z4loopv+0x1398>)
 8002868:	f10d 010f 	add.w	r1, sp, #15
 800286c:	9600      	str	r6, [sp, #0]
 800286e:	f002 f973 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002872:	2300      	movs	r3, #0
 8002874:	4d58      	ldr	r5, [pc, #352]	; (80029d8 <_Z4loopv+0x1388>)
 8002876:	4a5a      	ldr	r2, [pc, #360]	; (80029e0 <_Z4loopv+0x1390>)
 8002878:	606b      	str	r3, [r5, #4]
 800287a:	4b58      	ldr	r3, [pc, #352]	; (80029dc <_Z4loopv+0x138c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0c9b      	lsrs	r3, r3, #18
 8002884:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002888:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <_Z4loopv+0x1394>)
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	3b10      	subs	r3, #16
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	686a      	ldr	r2, [r5, #4]
 8002892:	4293      	cmp	r3, r2
 8002894:	d8fc      	bhi.n	8002890 <_Z4loopv+0x1240>
		ADS124x_CS_1;
 8002896:	2201      	movs	r2, #1
 8002898:	2110      	movs	r1, #16
 800289a:	484e      	ldr	r0, [pc, #312]	; (80029d4 <_Z4loopv+0x1384>)
 800289c:	f001 f813 	bl	80038c6 <HAL_GPIO_WritePin>
		ADS124x_CS_0;
 80028a0:	2200      	movs	r2, #0
 80028a2:	2110      	movs	r1, #16
 80028a4:	484b      	ldr	r0, [pc, #300]	; (80029d4 <_Z4loopv+0x1384>)
 80028a6:	f001 f80e 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 80028aa:	2300      	movs	r3, #0
 80028ac:	606b      	str	r3, [r5, #4]
 80028ae:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <_Z4loopv+0x138c>)
 80028b0:	4a4b      	ldr	r2, [pc, #300]	; (80029e0 <_Z4loopv+0x1390>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4948      	ldr	r1, [pc, #288]	; (80029d8 <_Z4loopv+0x1388>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0c9b      	lsrs	r3, r3, #18
 80028bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80028c0:	4a48      	ldr	r2, [pc, #288]	; (80029e4 <_Z4loopv+0x1394>)
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	3b10      	subs	r3, #16
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	684a      	ldr	r2, [r1, #4]
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d8fc      	bhi.n	80028c8 <_Z4loopv+0x1278>
		XferByte(cmd);
 80028ce:	23fc      	movs	r3, #252	; 0xfc
 80028d0:	f88d 300f 	strb.w	r3, [sp, #15]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 80028d4:	4b44      	ldr	r3, [pc, #272]	; (80029e8 <_Z4loopv+0x1398>)
 80028d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d0fa      	beq.n	80028d4 <_Z4loopv+0x1284>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 80028de:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80028e2:	2301      	movs	r3, #1
 80028e4:	aa04      	add	r2, sp, #16
 80028e6:	f10d 010f 	add.w	r1, sp, #15
 80028ea:	483f      	ldr	r0, [pc, #252]	; (80029e8 <_Z4loopv+0x1398>)
 80028ec:	9500      	str	r5, [sp, #0]
 80028ee:	f002 f933 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 80028f2:	2300      	movs	r3, #0
 80028f4:	4938      	ldr	r1, [pc, #224]	; (80029d8 <_Z4loopv+0x1388>)
 80028f6:	4a3a      	ldr	r2, [pc, #232]	; (80029e0 <_Z4loopv+0x1390>)
 80028f8:	604b      	str	r3, [r1, #4]
 80028fa:	4b38      	ldr	r3, [pc, #224]	; (80029dc <_Z4loopv+0x138c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0c9b      	lsrs	r3, r3, #18
 8002904:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002908:	4a36      	ldr	r2, [pc, #216]	; (80029e4 <_Z4loopv+0x1394>)
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	3b10      	subs	r3, #16
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	684a      	ldr	r2, [r1, #4]
 8002912:	4293      	cmp	r3, r2
 8002914:	d8fc      	bhi.n	8002910 <_Z4loopv+0x12c0>
		ADS124x_CS_1;
 8002916:	2201      	movs	r2, #1
 8002918:	2110      	movs	r1, #16
 800291a:	482e      	ldr	r0, [pc, #184]	; (80029d4 <_Z4loopv+0x1384>)
 800291c:	f000 ffd3 	bl	80038c6 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8002920:	2064      	movs	r0, #100	; 0x64
 8002922:	f000 fd03 	bl	800332c <HAL_Delay>
 8002926:	f7fe bef2 	b.w	800170e <_Z4loopv+0xbe>
 800292a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800292e:	4d2f      	ldr	r5, [pc, #188]	; (80029ec <_Z4loopv+0x139c>)
 8002930:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			sprintf(str, "I  %4.1f mA", iOut);
 8002932:	6968      	ldr	r0, [r5, #20]
 8002934:	615a      	str	r2, [r3, #20]
 8002936:	f7fd fd77 	bl	8000428 <__aeabi_f2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	a804      	add	r0, sp, #16
 8002940:	492b      	ldr	r1, [pc, #172]	; (80029f0 <_Z4loopv+0x13a0>)
 8002942:	f004 fb15 	bl	8006f70 <siprintf>
 8002946:	f89d a010 	ldrb.w	sl, [sp, #16]
			FontClassicPuts(tft, str, &Font_7x10, 0);
 800294a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800294c:	f1ba 0f00 	cmp.w	sl, #0
 8002950:	f43f a976 	beq.w	8001c40 <_Z4loopv+0x5f0>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002954:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8002958:	7822      	ldrb	r2, [r4, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 800295a:	7865      	ldrb	r5, [r4, #1]
 800295c:	f10d 0b10 	add.w	fp, sp, #16
 8002960:	b345      	cbz	r5, 80029b4 <_Z4loopv+0x1364>
 8002962:	2700      	movs	r7, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002964:	f1aa 0920 	sub.w	r9, sl, #32
 8002968:	fb09 7005 	mla	r0, r9, r5, r7
 800296c:	6861      	ldr	r1, [r4, #4]
 800296e:	f831 8010 	ldrh.w	r8, [r1, r0, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8002972:	b1fa      	cbz	r2, 80029b4 <_Z4loopv+0x1364>
 8002974:	2500      	movs	r5, #0
 8002976:	e00a      	b.n	800298e <_Z4loopv+0x133e>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002978:	4630      	mov	r0, r6
 800297a:	8b33      	ldrh	r3, [r6, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 800297c:	443a      	add	r2, r7
 800297e:	f003 fc87 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8002982:	7822      	ldrb	r2, [r4, #0]
 8002984:	3501      	adds	r5, #1
 8002986:	4295      	cmp	r5, r2
 8002988:	d20e      	bcs.n	80029a8 <_Z4loopv+0x1358>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 800298a:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
			if ((b << j) & 0x8000) {
 800298e:	fa08 f205 	lsl.w	r2, r8, r5
 8002992:	f412 4f00 	tst.w	r2, #32768	; 0x8000
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002996:	eb03 0105 	add.w	r1, r3, r5
 800299a:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
			if ((b << j) & 0x8000) {
 800299e:	d1eb      	bne.n	8002978 <_Z4loopv+0x1328>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 80029a0:	1959      	adds	r1, r3, r5
 80029a2:	4630      	mov	r0, r6
 80029a4:	8b73      	ldrh	r3, [r6, #26]
 80029a6:	e7e9      	b.n	800297c <_Z4loopv+0x132c>
	for (i = 0; i < Font->FontHeight; i++) {
 80029a8:	7865      	ldrb	r5, [r4, #1]
 80029aa:	3701      	adds	r7, #1
 80029ac:	42bd      	cmp	r5, r7
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80029ae:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 80029b2:	d8d9      	bhi.n	8002968 <_Z4loopv+0x1318>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 80029b4:	4413      	add	r3, r2
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	82b3      	strh	r3, [r6, #20]
		if (FontClassicPutc(tft, *str, Font, NoBack) != *str) {
 80029bc:	f89b 1000 	ldrb.w	r1, [fp]
 80029c0:	4551      	cmp	r1, sl
 80029c2:	f47f a93d 	bne.w	8001c40 <_Z4loopv+0x5f0>
	while (*str) {
 80029c6:	f81b af01 	ldrb.w	sl, [fp, #1]!
 80029ca:	f1ba 0f00 	cmp.w	sl, #0
 80029ce:	d1c7      	bne.n	8002960 <_Z4loopv+0x1310>
 80029d0:	f7ff b936 	b.w	8001c40 <_Z4loopv+0x5f0>
 80029d4:	40010800 	.word	0x40010800
 80029d8:	e0001000 	.word	0xe0001000
 80029dc:	2000005c 	.word	0x2000005c
 80029e0:	431bde83 	.word	0x431bde83
 80029e4:	2000093c 	.word	0x2000093c
 80029e8:	2000084c 	.word	0x2000084c
 80029ec:	200007ec 	.word	0x200007ec
 80029f0:	08009238 	.word	0x08009238

080029f4 <setup>:
extern "C" void setup() {
 80029f4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	HAL_Delay(100);
 80029f8:	2064      	movs	r0, #100	; 0x64
extern "C" void setup() {
 80029fa:	b085      	sub	sp, #20
	HAL_Delay(100);
 80029fc:	f000 fc96 	bl	800332c <HAL_Delay>
	DWT_Init();
 8002a00:	f003 fa30 	bl	8005e64 <_Z8DWT_Initv>
		LCD = _LCD;
 8002a04:	4b72      	ldr	r3, [pc, #456]	; (8002bd0 <setup+0x1dc>)
 8002a06:	4e73      	ldr	r6, [pc, #460]	; (8002bd4 <setup+0x1e0>)
		switch (LCD->LCD_Driver) {
 8002a08:	7a1a      	ldrb	r2, [r3, #8]
		LCD = _LCD;
 8002a0a:	e9c6 3300 	strd	r3, r3, [r6]
		switch (LCD->LCD_Driver) {
 8002a0e:	2a03      	cmp	r2, #3
 8002a10:	f000 80d2 	beq.w	8002bb8 <setup+0x1c4>
	tft.Fill1(0);
 8002a14:	2100      	movs	r1, #0
 8002a16:	486f      	ldr	r0, [pc, #444]	; (8002bd4 <setup+0x1e0>)
 8002a18:	f003 fc68 	bl	80062ec <_ZN3TFT5Fill1Et>
		switch (LCD->LCD_Driver) {
 8002a1c:	6873      	ldr	r3, [r6, #4]
 8002a1e:	7a1b      	ldrb	r3, [r3, #8]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	f000 80d1 	beq.w	8002bc8 <setup+0x1d4>
		uTFT.Color = Color;
 8002a26:	2501      	movs	r5, #1
		uTFT.CurrentX = x;
 8002a28:	f04f 1214 	mov.w	r2, #1310740	; 0x140014
	for (i = 0; i < Font->FontHeight; i++) {
 8002a2c:	2114      	movs	r1, #20
	while (*str) {
 8002a2e:	2331      	movs	r3, #49	; 0x31
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002a30:	4f69      	ldr	r7, [pc, #420]	; (8002bd8 <setup+0x1e4>)
 8002a32:	e9c6 2505 	strd	r2, r5, [r6, #20]
 8002a36:	7838      	ldrb	r0, [r7, #0]
	for (i = 0; i < Font->FontHeight; i++) {
 8002a38:	787c      	ldrb	r4, [r7, #1]
 8002a3a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8002bdc <setup+0x1e8>
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002a3e:	f8df a194 	ldr.w	sl, [pc, #404]	; 8002bd4 <setup+0x1e0>
	for (i = 0; i < Font->FontHeight; i++) {
 8002a42:	b31c      	cbz	r4, 8002a8c <setup+0x98>
 8002a44:	2500      	movs	r5, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002a46:	f1a3 0820 	sub.w	r8, r3, #32
 8002a4a:	fb08 5304 	mla	r3, r8, r4, r5
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8002a54:	b1d0      	cbz	r0, 8002a8c <setup+0x98>
 8002a56:	2400      	movs	r4, #0
 8002a58:	e001      	b.n	8002a5e <setup+0x6a>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002a5a:	f9b6 1014 	ldrsh.w	r1, [r6, #20]
			if ((b << j) & 0x8000) {
 8002a5e:	fa0b f304 	lsl.w	r3, fp, r4
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002a62:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
			if ((b << j) & 0x8000) {
 8002a66:	041b      	lsls	r3, r3, #16
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002a68:	4650      	mov	r0, sl
 8002a6a:	bf4c      	ite	mi
 8002a6c:	8b33      	ldrhmi	r3, [r6, #24]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002a6e:	8b73      	ldrhpl	r3, [r6, #26]
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.Color);}
 8002a70:	4421      	add	r1, r4
				tft->SetPixel(tft->uTFT.CurrentX + j, (tft->uTFT.CurrentY + i), tft->uTFT.BColor);}
 8002a72:	442a      	add	r2, r5
 8002a74:	f003 fc0c 	bl	8006290 <_ZN3TFT8SetPixelEllt>
		for (j = 0; j < Font->FontWidth; j++) {
 8002a78:	7838      	ldrb	r0, [r7, #0]
 8002a7a:	3401      	adds	r4, #1
 8002a7c:	4284      	cmp	r4, r0
 8002a7e:	d3ec      	bcc.n	8002a5a <setup+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8002a80:	787c      	ldrb	r4, [r7, #1]
 8002a82:	3501      	adds	r5, #1
 8002a84:	42ac      	cmp	r4, r5
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002a86:	f9b6 1014 	ldrsh.w	r1, [r6, #20]
	for (i = 0; i < Font->FontHeight; i++) {
 8002a8a:	d8de      	bhi.n	8002a4a <setup+0x56>
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002a8c:	4401      	add	r1, r0
 8002a8e:	3901      	subs	r1, #1
	while (*str) {
 8002a90:	f819 3f01 	ldrb.w	r3, [r9, #1]!
	tft->uTFT.CurrentX += Font->FontWidth-1;
 8002a94:	b209      	sxth	r1, r1
 8002a96:	82b1      	strh	r1, [r6, #20]
	while (*str) {
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1d2      	bne.n	8002a42 <setup+0x4e>
	tft.LineH(10, 10, 50, 1);
 8002a9c:	220a      	movs	r2, #10
 8002a9e:	2401      	movs	r4, #1
 8002aa0:	2332      	movs	r3, #50	; 0x32
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	484b      	ldr	r0, [pc, #300]	; (8002bd4 <setup+0x1e0>)
 8002aa6:	9400      	str	r4, [sp, #0]
 8002aa8:	f003 fc44 	bl	8006334 <_ZN3TFT5LineHElllt>
 8002aac:	6873      	ldr	r3, [r6, #4]
 8002aae:	7a1b      	ldrb	r3, [r3, #8]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	f000 8085 	beq.w	8002bc0 <setup+0x1cc>
#define COLOR_RESET   "\33[0m"

class classLog {
public:

	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8002ab6:	484a      	ldr	r0, [pc, #296]	; (8002be0 <setup+0x1ec>)
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <setup+0x1f0>)

	UART_HandleTypeDef *huart;

	void w(char const *const format) {colorStringln(11, format);}
	void e(char const *const format) {colorStringln(9, format);}
	void i(char const *const format) {colorStringln(45, format);}
 8002aba:	212d      	movs	r1, #45	; 0x2d
 8002abc:	4a4a      	ldr	r2, [pc, #296]	; (8002be8 <setup+0x1f4>)
	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8002abe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
	void i(char const *const format) {colorStringln(45, format);}
 8002ac2:	f003 f9df 	bl	8005e84 <_ZN8classLog13colorStringlnEiPKc>
	power.tft = &tft;
 8002ac6:	4b49      	ldr	r3, [pc, #292]	; (8002bec <setup+0x1f8>)
	power.adc.sendCommand(RESET);
 8002ac8:	20fe      	movs	r0, #254	; 0xfe
	power.tft = &tft;
 8002aca:	631e      	str	r6, [r3, #48]	; 0x30
	power.adc.sendCommand(RESET);
 8002acc:	f7fe fb82 	bl	80011d4 <_ZN7ADS124311sendCommandEh.isra.0>
	power.adc.sendCommand(STOPC);
 8002ad0:	200f      	movs	r0, #15
 8002ad2:	f7fe fb7f 	bl	80011d4 <_ZN7ADS124311sendCommandEh.isra.0>
	power.adc.sendCommand(SELFCAL);
 8002ad6:	20f0      	movs	r0, #240	; 0xf0
 8002ad8:	f7fe fb7c 	bl	80011d4 <_ZN7ADS124311sendCommandEh.isra.0>
	power.adc.sendCommand(DSYNC);
 8002adc:	20fc      	movs	r0, #252	; 0xfc
 8002ade:	f7fe fb79 	bl	80011d4 <_ZN7ADS124311sendCommandEh.isra.0>
	HAL_Delay(100);
 8002ae2:	2064      	movs	r0, #100	; 0x64
 8002ae4:	f000 fc22 	bl	800332c <HAL_Delay>
		ADS124x_CS_0;
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2110      	movs	r1, #16
 8002aec:	4840      	ldr	r0, [pc, #256]	; (8002bf0 <setup+0x1fc>)
 8002aee:	f000 feea 	bl	80038c6 <HAL_GPIO_WritePin>
		delayMicroseconds(20);
 8002af2:	2300      	movs	r3, #0
 8002af4:	493f      	ldr	r1, [pc, #252]	; (8002bf4 <setup+0x200>)
 8002af6:	4e40      	ldr	r6, [pc, #256]	; (8002bf8 <setup+0x204>)
 8002af8:	604b      	str	r3, [r1, #4]
 8002afa:	4a40      	ldr	r2, [pc, #256]	; (8002bfc <setup+0x208>)
 8002afc:	6833      	ldr	r3, [r6, #0]
 8002afe:	4d40      	ldr	r5, [pc, #256]	; (8002c00 <setup+0x20c>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	0c9b      	lsrs	r3, r3, #18
 8002b06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b0a:	009a      	lsls	r2, r3, #2
 8002b0c:	3a10      	subs	r2, #16
 8002b0e:	602a      	str	r2, [r5, #0]
 8002b10:	684b      	ldr	r3, [r1, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d8fc      	bhi.n	8002b10 <setup+0x11c>
		XferByte(0x50 + r);
 8002b16:	2352      	movs	r3, #82	; 0x52
 8002b18:	4c3a      	ldr	r4, [pc, #232]	; (8002c04 <setup+0x210>)
 8002b1a:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002b1e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d0fb      	beq.n	8002b1e <setup+0x12a>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2a:	4836      	ldr	r0, [pc, #216]	; (8002c04 <setup+0x210>)
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	f10d 020f 	add.w	r2, sp, #15
 8002b32:	2301      	movs	r3, #1
 8002b34:	f10d 010e 	add.w	r1, sp, #14
 8002b38:	f002 f80e 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(0);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002b42:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d0fb      	beq.n	8002b42 <setup+0x14e>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4e:	482d      	ldr	r0, [pc, #180]	; (8002c04 <setup+0x210>)
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	f10d 020f 	add.w	r2, sp, #15
 8002b56:	2301      	movs	r3, #1
 8002b58:	f10d 010e 	add.w	r1, sp, #14
 8002b5c:	f001 fffc 	bl	8004b58 <HAL_SPI_TransmitReceive>
		XferByte(data);
 8002b60:	2340      	movs	r3, #64	; 0x40
 8002b62:	f88d 300e 	strb.w	r3, [sp, #14]
		while (hspi1.State == HAL_SPI_STATE_BUSY);
 8002b66:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d0fb      	beq.n	8002b66 <setup+0x172>
		HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 1000);
 8002b6e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002b72:	2301      	movs	r3, #1
 8002b74:	f10d 020f 	add.w	r2, sp, #15
 8002b78:	f10d 010e 	add.w	r1, sp, #14
 8002b7c:	4821      	ldr	r0, [pc, #132]	; (8002c04 <setup+0x210>)
 8002b7e:	9400      	str	r4, [sp, #0]
 8002b80:	f001 ffea 	bl	8004b58 <HAL_SPI_TransmitReceive>
		delayMicroseconds(20);
 8002b84:	2300      	movs	r3, #0
 8002b86:	491b      	ldr	r1, [pc, #108]	; (8002bf4 <setup+0x200>)
 8002b88:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <setup+0x208>)
 8002b8a:	604b      	str	r3, [r1, #4]
 8002b8c:	6833      	ldr	r3, [r6, #0]
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	0c9b      	lsrs	r3, r3, #18
 8002b94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	3a10      	subs	r2, #16
 8002b9c:	602a      	str	r2, [r5, #0]
 8002b9e:	684b      	ldr	r3, [r1, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d8fc      	bhi.n	8002b9e <setup+0x1aa>
		ADS124x_CS_1;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2110      	movs	r1, #16
 8002ba8:	4811      	ldr	r0, [pc, #68]	; (8002bf0 <setup+0x1fc>)
 8002baa:	f000 fe8c 	bl	80038c6 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1);
 8002bae:	4816      	ldr	r0, [pc, #88]	; (8002c08 <setup+0x214>)
 8002bb0:	f002 fa78 	bl	80050a4 <HAL_TIM_Base_Start_IT>
	loop();
 8002bb4:	f7fe fd4c 	bl	8001650 <_Z4loopv>
			SSD1306_Init();
 8002bb8:	1d30      	adds	r0, r6, #4
 8002bba:	f003 f993 	bl	8005ee4 <_ZN10TFT_Driver12SSD1306_InitEv>
			break;
 8002bbe:	e729      	b.n	8002a14 <setup+0x20>
			SSD1306_UpdateScreen();
 8002bc0:	4812      	ldr	r0, [pc, #72]	; (8002c0c <setup+0x218>)
 8002bc2:	f003 fb41 	bl	8006248 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
			break;
 8002bc6:	e776      	b.n	8002ab6 <setup+0xc2>
			SSD1306_UpdateScreen();
 8002bc8:	4810      	ldr	r0, [pc, #64]	; (8002c0c <setup+0x218>)
 8002bca:	f003 fb3d 	bl	8006248 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>
			break;
 8002bce:	e72a      	b.n	8002a26 <setup+0x32>
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000824 	.word	0x20000824
 8002bd8:	20000068 	.word	0x20000068
 8002bdc:	0800926c 	.word	0x0800926c
 8002be0:	200006a8 	.word	0x200006a8
 8002be4:	200008f0 	.word	0x200008f0
 8002be8:	08009274 	.word	0x08009274
 8002bec:	200007ec 	.word	0x200007ec
 8002bf0:	40010800 	.word	0x40010800
 8002bf4:	e0001000 	.word	0xe0001000
 8002bf8:	2000005c 	.word	0x2000005c
 8002bfc:	431bde83 	.word	0x431bde83
 8002c00:	2000093c 	.word	0x2000093c
 8002c04:	2000084c 	.word	0x2000084c
 8002c08:	200008a8 	.word	0x200008a8
 8002c0c:	20000828 	.word	0x20000828

08002c10 <_GLOBAL__sub_I_key>:
//		tft.driver.Update();


	}

}
 8002c10:	b530      	push	{r4, r5, lr}
GButton key(KEY_GPIO_Port, GPIO_PIN_6);
 8002c12:	2400      	movs	r4, #0
 8002c14:	4d09      	ldr	r5, [pc, #36]	; (8002c3c <_GLOBAL__sub_I_key+0x2c>)
 8002c16:	b083      	sub	sp, #12
 8002c18:	4629      	mov	r1, r5
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	2240      	movs	r2, #64	; 0x40
 8002c1e:	9400      	str	r4, [sp, #0]
 8002c20:	4807      	ldr	r0, [pc, #28]	; (8002c40 <_GLOBAL__sub_I_key+0x30>)
 8002c22:	f002 ffc5 	bl	8005bb0 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>
GButton keyC(GPIOB, GPIO_PIN_15);
 8002c26:	4623      	mov	r3, r4
 8002c28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	9400      	str	r4, [sp, #0]
 8002c30:	4804      	ldr	r0, [pc, #16]	; (8002c44 <_GLOBAL__sub_I_key+0x34>)
 8002c32:	f002 ffbd 	bl	8005bb0 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>
 8002c36:	b003      	add	sp, #12
 8002c38:	bd30      	pop	{r4, r5, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40010c00 	.word	0x40010c00
 8002c40:	200007ac 	.word	0x200007ac
 8002c44:	200007cc 	.word	0x200007cc

08002c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c4c:	f000 fb0c 	bl	8003268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c50:	f000 f80d 	bl	8002c6e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c54:	f7fe f9ec 	bl	8001030 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002c58:	f7fe fa4e 	bl	80010f8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002c5c:	f000 f852 	bl	8002d04 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002c60:	f000 fa66 	bl	8003130 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002c64:	f000 f9ee 	bl	8003044 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8002c68:	f7ff fec4 	bl	80029f4 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <main+0x24>

08002c6e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b090      	sub	sp, #64	; 0x40
 8002c72:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c74:	f107 0318 	add.w	r3, r7, #24
 8002c78:	2228      	movs	r2, #40	; 0x28
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 f9da 	bl	8007036 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c98:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002cac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb2:	f107 0318 	add.w	r3, r7, #24
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 faba 	bl	8004230 <HAL_RCC_OscConfig>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002cc2:	f000 f819 	bl	8002cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cc6:	230f      	movs	r3, #15
 8002cc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 fd27 	bl	8004734 <HAL_RCC_ClockConfig>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002cec:	f000 f804 	bl	8002cf8 <Error_Handler>
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3740      	adds	r7, #64	; 0x40
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfc:	b672      	cpsid	i
}
 8002cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <Error_Handler+0x8>
	...

08002d04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d0a:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <MX_SPI1_Init+0x68>)
 8002d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d38:	2220      	movs	r2, #32
 8002d3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d48:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d50:	220a      	movs	r2, #10
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d54:	4804      	ldr	r0, [pc, #16]	; (8002d68 <MX_SPI1_Init+0x64>)
 8002d56:	f001 fe7b 	bl	8004a50 <HAL_SPI_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d60:	f7ff ffca 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	2000084c 	.word	0x2000084c
 8002d6c:	40013000 	.word	0x40013000

08002d70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <HAL_SPI_MspInit+0x88>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d12f      	bne.n	8002df0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002d96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d9a:	6193      	str	r3, [r2, #24]
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002dc0:	23a0      	movs	r3, #160	; 0xa0
 8002dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	480b      	ldr	r0, [pc, #44]	; (8002e00 <HAL_SPI_MspInit+0x90>)
 8002dd4:	f000 fbdc 	bl	8003590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dd8:	2340      	movs	r3, #64	; 0x40
 8002dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de4:	f107 0310 	add.w	r3, r7, #16
 8002de8:	4619      	mov	r1, r3
 8002dea:	4805      	ldr	r0, [pc, #20]	; (8002e00 <HAL_SPI_MspInit+0x90>)
 8002dec:	f000 fbd0 	bl	8003590 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002df0:	bf00      	nop
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40013000 	.word	0x40013000
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40010800 	.word	0x40010800

08002e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_MspInit+0x5c>)
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <HAL_MspInit+0x5c>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6193      	str	r3, [r2, #24]
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_MspInit+0x5c>)
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_MspInit+0x5c>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <HAL_MspInit+0x5c>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	61d3      	str	r3, [r2, #28]
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_MspInit+0x5c>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_MspInit+0x60>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <HAL_MspInit+0x60>)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000

08002e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <NMI_Handler+0x4>

08002e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e72:	e7fe      	b.n	8002e72 <HardFault_Handler+0x4>

08002e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <MemManage_Handler+0x4>

08002e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e7e:	e7fe      	b.n	8002e7e <BusFault_Handler+0x4>

08002e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <UsageFault_Handler+0x4>

08002e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eae:	f000 fa21 	bl	80032f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  return 1;
 8002eba:	2301      	movs	r3, #1
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <_kill>:

int _kill(int pid, int sig)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ece:	f004 f905 	bl	80070dc <__errno>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2216      	movs	r2, #22
 8002ed6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_exit>:

void _exit (int status)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffe7 	bl	8002ec4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ef6:	e7fe      	b.n	8002ef6 <_exit+0x12>

08002ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e00a      	b.n	8002f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f0a:	f3af 8000 	nop.w
 8002f0e:	4601      	mov	r1, r0
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	60ba      	str	r2, [r7, #8]
 8002f16:	b2ca      	uxtb	r2, r1
 8002f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dbf0      	blt.n	8002f0a <_read+0x12>
  }

  return len;
 8002f28:	687b      	ldr	r3, [r7, #4]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e009      	b.n	8002f58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	60ba      	str	r2, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	dbf1      	blt.n	8002f44 <_write+0x12>
  }
  return len;
 8002f60:	687b      	ldr	r3, [r7, #4]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_close>:

int _close(int file)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f90:	605a      	str	r2, [r3, #4]
  return 0;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <_isatty>:

int _isatty(int file)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fa6:	2301      	movs	r3, #1
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
	...

08002fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <_sbrk+0x5c>)
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <_sbrk+0x60>)
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe0:	4b13      	ldr	r3, [pc, #76]	; (8003030 <_sbrk+0x64>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <_sbrk+0x64>)
 8002fea:	4a12      	ldr	r2, [pc, #72]	; (8003034 <_sbrk+0x68>)
 8002fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fee:	4b10      	ldr	r3, [pc, #64]	; (8003030 <_sbrk+0x64>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d207      	bcs.n	800300c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ffc:	f004 f86e 	bl	80070dc <__errno>
 8003000:	4603      	mov	r3, r0
 8003002:	220c      	movs	r2, #12
 8003004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	e009      	b.n	8003020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <_sbrk+0x64>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003012:	4b07      	ldr	r3, [pc, #28]	; (8003030 <_sbrk+0x64>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	4a05      	ldr	r2, [pc, #20]	; (8003030 <_sbrk+0x64>)
 800301c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20005000 	.word	0x20005000
 800302c:	00000400 	.word	0x00000400
 8003030:	200008a4 	.word	0x200008a4
 8003034:	20000a90 	.word	0x20000a90

08003038 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304a:	f107 0308 	add.w	r3, r7, #8
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003058:	463b      	mov	r3, r7
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <MX_TIM1_Init+0x98>)
 8003062:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <MX_TIM1_Init+0x9c>)
 8003064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <MX_TIM1_Init+0x98>)
 8003068:	2200      	movs	r2, #0
 800306a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <MX_TIM1_Init+0x98>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003072:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <MX_TIM1_Init+0x98>)
 8003074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003078:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <MX_TIM1_Init+0x98>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <MX_TIM1_Init+0x98>)
 8003082:	2200      	movs	r2, #0
 8003084:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <MX_TIM1_Init+0x98>)
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800308c:	4813      	ldr	r0, [pc, #76]	; (80030dc <MX_TIM1_Init+0x98>)
 800308e:	f001 ffb9 	bl	8005004 <HAL_TIM_Base_Init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003098:	f7ff fe2e 	bl	8002cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800309c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030a2:	f107 0308 	add.w	r3, r7, #8
 80030a6:	4619      	mov	r1, r3
 80030a8:	480c      	ldr	r0, [pc, #48]	; (80030dc <MX_TIM1_Init+0x98>)
 80030aa:	f002 f955 	bl	8005358 <HAL_TIM_ConfigClockSource>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80030b4:	f7ff fe20 	bl	8002cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80030b8:	2310      	movs	r3, #16
 80030ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030bc:	2300      	movs	r3, #0
 80030be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030c0:	463b      	mov	r3, r7
 80030c2:	4619      	mov	r1, r3
 80030c4:	4805      	ldr	r0, [pc, #20]	; (80030dc <MX_TIM1_Init+0x98>)
 80030c6:	f002 fb33 	bl	8005730 <HAL_TIMEx_MasterConfigSynchronization>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80030d0:	f7ff fe12 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80030d4:	bf00      	nop
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	200008a8 	.word	0x200008a8
 80030e0:	40012c00 	.word	0x40012c00

080030e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_TIM_Base_MspInit+0x44>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d113      	bne.n	800311e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_TIM_Base_MspInit+0x48>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	4a0c      	ldr	r2, [pc, #48]	; (800312c <HAL_TIM_Base_MspInit+0x48>)
 80030fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003100:	6193      	str	r3, [r2, #24]
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_TIM_Base_MspInit+0x48>)
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2100      	movs	r1, #0
 8003112:	2019      	movs	r0, #25
 8003114:	f000 fa05 	bl	8003522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003118:	2019      	movs	r0, #25
 800311a:	f000 fa1e 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40012c00 	.word	0x40012c00
 800312c:	40021000 	.word	0x40021000

08003130 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <MX_USART1_UART_Init+0x48>)
 8003136:	4a11      	ldr	r2, [pc, #68]	; (800317c <MX_USART1_UART_Init+0x4c>)
 8003138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <MX_USART1_UART_Init+0x48>)
 800313c:	4a10      	ldr	r2, [pc, #64]	; (8003180 <MX_USART1_UART_Init+0x50>)
 800313e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <MX_USART1_UART_Init+0x48>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <MX_USART1_UART_Init+0x48>)
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <MX_USART1_UART_Init+0x48>)
 800314e:	2200      	movs	r2, #0
 8003150:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <MX_USART1_UART_Init+0x48>)
 8003154:	220c      	movs	r2, #12
 8003156:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <MX_USART1_UART_Init+0x48>)
 800315a:	2200      	movs	r2, #0
 800315c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <MX_USART1_UART_Init+0x48>)
 8003160:	2200      	movs	r2, #0
 8003162:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003164:	4804      	ldr	r0, [pc, #16]	; (8003178 <MX_USART1_UART_Init+0x48>)
 8003166:	f002 fb53 	bl	8005810 <HAL_UART_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8003170:	f7ff fdc2 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}
 8003178:	200008f0 	.word	0x200008f0
 800317c:	40013800 	.word	0x40013800
 8003180:	001e8480 	.word	0x001e8480

08003184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_UART_MspInit+0x8c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d131      	bne.n	8003208 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031a4:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <HAL_UART_MspInit+0x90>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <HAL_UART_MspInit+0x90>)
 80031aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ae:	6193      	str	r3, [r2, #24]
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_UART_MspInit+0x90>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_UART_MspInit+0x90>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <HAL_UART_MspInit+0x90>)
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	6193      	str	r3, [r2, #24]
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_UART_MspInit+0x90>)
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031de:	2303      	movs	r3, #3
 80031e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e2:	f107 0310 	add.w	r3, r7, #16
 80031e6:	4619      	mov	r1, r3
 80031e8:	480b      	ldr	r0, [pc, #44]	; (8003218 <HAL_UART_MspInit+0x94>)
 80031ea:	f000 f9d1 	bl	8003590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fc:	f107 0310 	add.w	r3, r7, #16
 8003200:	4619      	mov	r1, r3
 8003202:	4805      	ldr	r0, [pc, #20]	; (8003218 <HAL_UART_MspInit+0x94>)
 8003204:	f000 f9c4 	bl	8003590 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003208:	bf00      	nop
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40013800 	.word	0x40013800
 8003214:	40021000 	.word	0x40021000
 8003218:	40010800 	.word	0x40010800

0800321c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800321c:	f7ff ff0c 	bl	8003038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003220:	480b      	ldr	r0, [pc, #44]	; (8003250 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003222:	490c      	ldr	r1, [pc, #48]	; (8003254 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003224:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003228:	e002      	b.n	8003230 <LoopCopyDataInit>

0800322a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800322a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800322c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322e:	3304      	adds	r3, #4

08003230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003234:	d3f9      	bcc.n	800322a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003238:	4c09      	ldr	r4, [pc, #36]	; (8003260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800323c:	e001      	b.n	8003242 <LoopFillZerobss>

0800323e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003240:	3204      	adds	r2, #4

08003242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003244:	d3fb      	bcc.n	800323e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003246:	f003 ff4f 	bl	80070e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800324a:	f7ff fcfd 	bl	8002c48 <main>
  bx lr
 800324e:	4770      	bx	lr
  ldr r0, =_sdata
 8003250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003254:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8003258:	08009da8 	.word	0x08009da8
  ldr r2, =_sbss
 800325c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8003260:	20000a90 	.word	0x20000a90

08003264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003264:	e7fe      	b.n	8003264 <ADC1_2_IRQHandler>
	...

08003268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800326c:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_Init+0x28>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a07      	ldr	r2, [pc, #28]	; (8003290 <HAL_Init+0x28>)
 8003272:	f043 0310 	orr.w	r3, r3, #16
 8003276:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003278:	2003      	movs	r0, #3
 800327a:	f000 f947 	bl	800350c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327e:	200f      	movs	r0, #15
 8003280:	f000 f808 	bl	8003294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003284:	f7ff fdbe 	bl	8002e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40022000 	.word	0x40022000

08003294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_InitTick+0x54>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_InitTick+0x58>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	4619      	mov	r1, r3
 80032a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f95f 	bl	8003576 <HAL_SYSTICK_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e00e      	b.n	80032e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b0f      	cmp	r3, #15
 80032c6:	d80a      	bhi.n	80032de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c8:	2200      	movs	r2, #0
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	f04f 30ff 	mov.w	r0, #4294967295
 80032d0:	f000 f927 	bl	8003522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d4:	4a06      	ldr	r2, [pc, #24]	; (80032f0 <HAL_InitTick+0x5c>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	e000      	b.n	80032e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	2000005c 	.word	0x2000005c
 80032ec:	20000064 	.word	0x20000064
 80032f0:	20000060 	.word	0x20000060

080032f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_IncTick+0x1c>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_IncTick+0x20>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4413      	add	r3, r2
 8003304:	4a03      	ldr	r2, [pc, #12]	; (8003314 <HAL_IncTick+0x20>)
 8003306:	6013      	str	r3, [r2, #0]
}
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	20000064 	.word	0x20000064
 8003314:	20000938 	.word	0x20000938

08003318 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b02      	ldr	r3, [pc, #8]	; (8003328 <HAL_GetTick+0x10>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	20000938 	.word	0x20000938

0800332c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003334:	f7ff fff0 	bl	8003318 <HAL_GetTick>
 8003338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d005      	beq.n	8003352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_Delay+0x44>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003352:	bf00      	nop
 8003354:	f7ff ffe0 	bl	8003318 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d8f7      	bhi.n	8003354 <HAL_Delay+0x28>
  {
  }
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000064 	.word	0x20000064

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4906      	ldr	r1, [pc, #24]	; (800340c <__NVIC_EnableIRQ+0x34>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100

08003410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	2b00      	cmp	r3, #0
 8003422:	db0a      	blt.n	800343a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b2da      	uxtb	r2, r3
 8003428:	490c      	ldr	r1, [pc, #48]	; (800345c <__NVIC_SetPriority+0x4c>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	0112      	lsls	r2, r2, #4
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	440b      	add	r3, r1
 8003434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003438:	e00a      	b.n	8003450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4908      	ldr	r1, [pc, #32]	; (8003460 <__NVIC_SetPriority+0x50>)
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	3b04      	subs	r3, #4
 8003448:	0112      	lsls	r2, r2, #4
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	440b      	add	r3, r1
 800344e:	761a      	strb	r2, [r3, #24]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000e100 	.word	0xe000e100
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003464:	b480      	push	{r7}
 8003466:	b089      	sub	sp, #36	; 0x24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f1c3 0307 	rsb	r3, r3, #7
 800347e:	2b04      	cmp	r3, #4
 8003480:	bf28      	it	cs
 8003482:	2304      	movcs	r3, #4
 8003484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3304      	adds	r3, #4
 800348a:	2b06      	cmp	r3, #6
 800348c:	d902      	bls.n	8003494 <NVIC_EncodePriority+0x30>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3b03      	subs	r3, #3
 8003492:	e000      	b.n	8003496 <NVIC_EncodePriority+0x32>
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43da      	mvns	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	401a      	ands	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ac:	f04f 31ff 	mov.w	r1, #4294967295
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	43d9      	mvns	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	4313      	orrs	r3, r2
         );
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d8:	d301      	bcc.n	80034de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034da:	2301      	movs	r3, #1
 80034dc:	e00f      	b.n	80034fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <SysTick_Config+0x40>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e6:	210f      	movs	r1, #15
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	f7ff ff90 	bl	8003410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <SysTick_Config+0x40>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <SysTick_Config+0x40>)
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	e000e010 	.word	0xe000e010

0800350c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff2d 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003534:	f7ff ff42 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	6978      	ldr	r0, [r7, #20]
 8003540:	f7ff ff90 	bl	8003464 <NVIC_EncodePriority>
 8003544:	4602      	mov	r2, r0
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff5f 	bl	8003410 <__NVIC_SetPriority>
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff35 	bl	80033d8 <__NVIC_EnableIRQ>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ffa2 	bl	80034c8 <SysTick_Config>
 8003584:	4603      	mov	r3, r0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003590:	b480      	push	{r7}
 8003592:	b08b      	sub	sp, #44	; 0x2c
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a2:	e169      	b.n	8003878 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035a4:	2201      	movs	r2, #1
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	429a      	cmp	r2, r3
 80035be:	f040 8158 	bne.w	8003872 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a9a      	ldr	r2, [pc, #616]	; (8003830 <HAL_GPIO_Init+0x2a0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d05e      	beq.n	800368a <HAL_GPIO_Init+0xfa>
 80035cc:	4a98      	ldr	r2, [pc, #608]	; (8003830 <HAL_GPIO_Init+0x2a0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d875      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 80035d2:	4a98      	ldr	r2, [pc, #608]	; (8003834 <HAL_GPIO_Init+0x2a4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d058      	beq.n	800368a <HAL_GPIO_Init+0xfa>
 80035d8:	4a96      	ldr	r2, [pc, #600]	; (8003834 <HAL_GPIO_Init+0x2a4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d86f      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 80035de:	4a96      	ldr	r2, [pc, #600]	; (8003838 <HAL_GPIO_Init+0x2a8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d052      	beq.n	800368a <HAL_GPIO_Init+0xfa>
 80035e4:	4a94      	ldr	r2, [pc, #592]	; (8003838 <HAL_GPIO_Init+0x2a8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d869      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 80035ea:	4a94      	ldr	r2, [pc, #592]	; (800383c <HAL_GPIO_Init+0x2ac>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d04c      	beq.n	800368a <HAL_GPIO_Init+0xfa>
 80035f0:	4a92      	ldr	r2, [pc, #584]	; (800383c <HAL_GPIO_Init+0x2ac>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d863      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 80035f6:	4a92      	ldr	r2, [pc, #584]	; (8003840 <HAL_GPIO_Init+0x2b0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d046      	beq.n	800368a <HAL_GPIO_Init+0xfa>
 80035fc:	4a90      	ldr	r2, [pc, #576]	; (8003840 <HAL_GPIO_Init+0x2b0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d85d      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 8003602:	2b12      	cmp	r3, #18
 8003604:	d82a      	bhi.n	800365c <HAL_GPIO_Init+0xcc>
 8003606:	2b12      	cmp	r3, #18
 8003608:	d859      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <HAL_GPIO_Init+0x80>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	0800368b 	.word	0x0800368b
 8003614:	08003665 	.word	0x08003665
 8003618:	08003677 	.word	0x08003677
 800361c:	080036b9 	.word	0x080036b9
 8003620:	080036bf 	.word	0x080036bf
 8003624:	080036bf 	.word	0x080036bf
 8003628:	080036bf 	.word	0x080036bf
 800362c:	080036bf 	.word	0x080036bf
 8003630:	080036bf 	.word	0x080036bf
 8003634:	080036bf 	.word	0x080036bf
 8003638:	080036bf 	.word	0x080036bf
 800363c:	080036bf 	.word	0x080036bf
 8003640:	080036bf 	.word	0x080036bf
 8003644:	080036bf 	.word	0x080036bf
 8003648:	080036bf 	.word	0x080036bf
 800364c:	080036bf 	.word	0x080036bf
 8003650:	080036bf 	.word	0x080036bf
 8003654:	0800366d 	.word	0x0800366d
 8003658:	08003681 	.word	0x08003681
 800365c:	4a79      	ldr	r2, [pc, #484]	; (8003844 <HAL_GPIO_Init+0x2b4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003662:	e02c      	b.n	80036be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	623b      	str	r3, [r7, #32]
          break;
 800366a:	e029      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	3304      	adds	r3, #4
 8003672:	623b      	str	r3, [r7, #32]
          break;
 8003674:	e024      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	3308      	adds	r3, #8
 800367c:	623b      	str	r3, [r7, #32]
          break;
 800367e:	e01f      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	330c      	adds	r3, #12
 8003686:	623b      	str	r3, [r7, #32]
          break;
 8003688:	e01a      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003692:	2304      	movs	r3, #4
 8003694:	623b      	str	r3, [r7, #32]
          break;
 8003696:	e013      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d105      	bne.n	80036ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036a0:	2308      	movs	r3, #8
 80036a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	611a      	str	r2, [r3, #16]
          break;
 80036aa:	e009      	b.n	80036c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036ac:	2308      	movs	r3, #8
 80036ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	615a      	str	r2, [r3, #20]
          break;
 80036b6:	e003      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
          break;
 80036bc:	e000      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          break;
 80036be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2bff      	cmp	r3, #255	; 0xff
 80036c4:	d801      	bhi.n	80036ca <HAL_GPIO_Init+0x13a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	e001      	b.n	80036ce <HAL_GPIO_Init+0x13e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2bff      	cmp	r3, #255	; 0xff
 80036d4:	d802      	bhi.n	80036dc <HAL_GPIO_Init+0x14c>
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	e002      	b.n	80036e2 <HAL_GPIO_Init+0x152>
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	3b08      	subs	r3, #8
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	210f      	movs	r1, #15
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	401a      	ands	r2, r3
 80036f4:	6a39      	ldr	r1, [r7, #32]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	431a      	orrs	r2, r3
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80b1 	beq.w	8003872 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003710:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_GPIO_Init+0x2b8>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4a4c      	ldr	r2, [pc, #304]	; (8003848 <HAL_GPIO_Init+0x2b8>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6193      	str	r3, [r2, #24]
 800371c:	4b4a      	ldr	r3, [pc, #296]	; (8003848 <HAL_GPIO_Init+0x2b8>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003728:	4a48      	ldr	r2, [pc, #288]	; (800384c <HAL_GPIO_Init+0x2bc>)
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	3302      	adds	r3, #2
 8003730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003734:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	220f      	movs	r2, #15
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a40      	ldr	r2, [pc, #256]	; (8003850 <HAL_GPIO_Init+0x2c0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_GPIO_Init+0x1ec>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <HAL_GPIO_Init+0x2c4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00d      	beq.n	8003778 <HAL_GPIO_Init+0x1e8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3e      	ldr	r2, [pc, #248]	; (8003858 <HAL_GPIO_Init+0x2c8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <HAL_GPIO_Init+0x1e4>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3d      	ldr	r2, [pc, #244]	; (800385c <HAL_GPIO_Init+0x2cc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_GPIO_Init+0x1e0>
 800376c:	2303      	movs	r3, #3
 800376e:	e006      	b.n	800377e <HAL_GPIO_Init+0x1ee>
 8003770:	2304      	movs	r3, #4
 8003772:	e004      	b.n	800377e <HAL_GPIO_Init+0x1ee>
 8003774:	2302      	movs	r3, #2
 8003776:	e002      	b.n	800377e <HAL_GPIO_Init+0x1ee>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_GPIO_Init+0x1ee>
 800377c:	2300      	movs	r3, #0
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	f002 0203 	and.w	r2, r2, #3
 8003784:	0092      	lsls	r2, r2, #2
 8003786:	4093      	lsls	r3, r2
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800378e:	492f      	ldr	r1, [pc, #188]	; (800384c <HAL_GPIO_Init+0x2bc>)
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	3302      	adds	r3, #2
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	492c      	ldr	r1, [pc, #176]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]
 80037b4:	e006      	b.n	80037c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037b6:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	43db      	mvns	r3, r3
 80037be:	4928      	ldr	r1, [pc, #160]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d006      	beq.n	80037de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	4922      	ldr	r1, [pc, #136]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60cb      	str	r3, [r1, #12]
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	491e      	ldr	r1, [pc, #120]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	4918      	ldr	r1, [pc, #96]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e006      	b.n	8003814 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	43db      	mvns	r3, r3
 800380e:	4914      	ldr	r1, [pc, #80]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 8003810:	4013      	ands	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d021      	beq.n	8003864 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	e021      	b.n	8003872 <HAL_GPIO_Init+0x2e2>
 800382e:	bf00      	nop
 8003830:	10320000 	.word	0x10320000
 8003834:	10310000 	.word	0x10310000
 8003838:	10220000 	.word	0x10220000
 800383c:	10210000 	.word	0x10210000
 8003840:	10120000 	.word	0x10120000
 8003844:	10110000 	.word	0x10110000
 8003848:	40021000 	.word	0x40021000
 800384c:	40010000 	.word	0x40010000
 8003850:	40010800 	.word	0x40010800
 8003854:	40010c00 	.word	0x40010c00
 8003858:	40011000 	.word	0x40011000
 800385c:	40011400 	.word	0x40011400
 8003860:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_GPIO_Init+0x304>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	43db      	mvns	r3, r3
 800386c:	4909      	ldr	r1, [pc, #36]	; (8003894 <HAL_GPIO_Init+0x304>)
 800386e:	4013      	ands	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	3301      	adds	r3, #1
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	f47f ae8e 	bne.w	80035a4 <HAL_GPIO_Init+0x14>
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	372c      	adds	r7, #44	; 0x2c
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	40010400 	.word	0x40010400

08003898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e001      	b.n	80038ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	807b      	strh	r3, [r7, #2]
 80038d2:	4613      	mov	r3, r2
 80038d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038d6:	787b      	ldrb	r3, [r7, #1]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038dc:	887a      	ldrh	r2, [r7, #2]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038e2:	e003      	b.n	80038ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038e4:	887b      	ldrh	r3, [r7, #2]
 80038e6:	041a      	lsls	r2, r3, #16
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	611a      	str	r2, [r3, #16]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e12b      	b.n	8003b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd fc18 	bl	8001154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800395a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800395c:	f001 f832 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8003960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4a81      	ldr	r2, [pc, #516]	; (8003b6c <HAL_I2C_Init+0x274>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d807      	bhi.n	800397c <HAL_I2C_Init+0x84>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a80      	ldr	r2, [pc, #512]	; (8003b70 <HAL_I2C_Init+0x278>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e006      	b.n	800398a <HAL_I2C_Init+0x92>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a7d      	ldr	r2, [pc, #500]	; (8003b74 <HAL_I2C_Init+0x27c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	bf94      	ite	ls
 8003984:	2301      	movls	r3, #1
 8003986:	2300      	movhi	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0e7      	b.n	8003b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a78      	ldr	r2, [pc, #480]	; (8003b78 <HAL_I2C_Init+0x280>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0c9b      	lsrs	r3, r3, #18
 800399c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a6a      	ldr	r2, [pc, #424]	; (8003b6c <HAL_I2C_Init+0x274>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d802      	bhi.n	80039cc <HAL_I2C_Init+0xd4>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3301      	adds	r3, #1
 80039ca:	e009      	b.n	80039e0 <HAL_I2C_Init+0xe8>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	4a69      	ldr	r2, [pc, #420]	; (8003b7c <HAL_I2C_Init+0x284>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	099b      	lsrs	r3, r3, #6
 80039de:	3301      	adds	r3, #1
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	495c      	ldr	r1, [pc, #368]	; (8003b6c <HAL_I2C_Init+0x274>)
 80039fc:	428b      	cmp	r3, r1
 80039fe:	d819      	bhi.n	8003a34 <HAL_I2C_Init+0x13c>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e59      	subs	r1, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a0e:	1c59      	adds	r1, r3, #1
 8003a10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a14:	400b      	ands	r3, r1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_I2C_Init+0x138>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e59      	subs	r1, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2e:	e051      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a30:	2304      	movs	r3, #4
 8003a32:	e04f      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d111      	bne.n	8003a60 <HAL_I2C_Init+0x168>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	440b      	add	r3, r1
 8003a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e012      	b.n	8003a86 <HAL_I2C_Init+0x18e>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1e58      	subs	r0, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	0099      	lsls	r1, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Init+0x196>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e022      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10e      	bne.n	8003ab4 <HAL_I2C_Init+0x1bc>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e58      	subs	r0, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	440b      	add	r3, r1
 8003aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab2:	e00f      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	0099      	lsls	r1, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	6809      	ldr	r1, [r1, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6911      	ldr	r1, [r2, #16]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	000186a0 	.word	0x000186a0
 8003b70:	001e847f 	.word	0x001e847f
 8003b74:	003d08ff 	.word	0x003d08ff
 8003b78:	431bde83 	.word	0x431bde83
 8003b7c:	10624dd3 	.word	0x10624dd3

08003b80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	817b      	strh	r3, [r7, #10]
 8003b90:	4613      	mov	r3, r2
 8003b92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b94:	f7ff fbc0 	bl	8003318 <HAL_GetTick>
 8003b98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	f040 80e0 	bne.w	8003d68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2319      	movs	r3, #25
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4970      	ldr	r1, [pc, #448]	; (8003d74 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f964 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0d3      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2C_Master_Transmit+0x50>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0cc      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d007      	beq.n	8003bf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2221      	movs	r2, #33	; 0x21
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2210      	movs	r2, #16
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	893a      	ldrh	r2, [r7, #8]
 8003c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a50      	ldr	r2, [pc, #320]	; (8003d78 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c38:	8979      	ldrh	r1, [r7, #10]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	6a3a      	ldr	r2, [r7, #32]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f89c 	bl	8003d7c <I2C_MasterRequestWrite>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e08d      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c64:	e066      	b.n	8003d34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	6a39      	ldr	r1, [r7, #32]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa22 	bl	80040b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d107      	bne.n	8003c8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06b      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d11b      	bne.n	8003d08 <HAL_I2C_Master_Transmit+0x188>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	6a39      	ldr	r1, [r7, #32]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fa19 	bl	8004144 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d107      	bne.n	8003d30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e01a      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d194      	bne.n	8003c66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	00100002 	.word	0x00100002
 8003d78:	ffff0000 	.word	0xffff0000

08003d7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d006      	beq.n	8003da6 <I2C_MasterRequestWrite+0x2a>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d003      	beq.n	8003da6 <I2C_MasterRequestWrite+0x2a>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003da4:	d108      	bne.n	8003db8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e00b      	b.n	8003dd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	2b12      	cmp	r3, #18
 8003dbe:	d107      	bne.n	8003dd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f84f 	bl	8003e80 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00d      	beq.n	8003e04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d103      	bne.n	8003e00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e035      	b.n	8003e70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0c:	d108      	bne.n	8003e20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e0e:	897b      	ldrh	r3, [r7, #10]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e1c:	611a      	str	r2, [r3, #16]
 8003e1e:	e01b      	b.n	8003e58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e20:	897b      	ldrh	r3, [r7, #10]
 8003e22:	11db      	asrs	r3, r3, #7
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f003 0306 	and.w	r3, r3, #6
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f063 030f 	orn	r3, r3, #15
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	490e      	ldr	r1, [pc, #56]	; (8003e78 <I2C_MasterRequestWrite+0xfc>)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f898 	bl	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e010      	b.n	8003e70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4907      	ldr	r1, [pc, #28]	; (8003e7c <I2C_MasterRequestWrite+0x100>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f888 	bl	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	00010008 	.word	0x00010008
 8003e7c:	00010002 	.word	0x00010002

08003e80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e90:	e048      	b.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e98:	d044      	beq.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7ff fa3d 	bl	8003318 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d139      	bne.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10d      	bne.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	e00c      	b.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	43da      	mvns	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d116      	bne.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e023      	b.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	0c1b      	lsrs	r3, r3, #16
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d10d      	bne.n	8003f4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	43da      	mvns	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	e00c      	b.n	8003f64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	43da      	mvns	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4013      	ands	r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d093      	beq.n	8003e92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f82:	e071      	b.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f92:	d123      	bne.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	f043 0204 	orr.w	r2, r3, #4
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e067      	b.n	80040ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d041      	beq.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe4:	f7ff f998 	bl	8003318 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d136      	bne.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d10c      	bne.n	800401e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	43da      	mvns	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf14      	ite	ne
 8004016:	2301      	movne	r3, #1
 8004018:	2300      	moveq	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e00b      	b.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	43da      	mvns	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d016      	beq.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e021      	b.n	80040ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	0c1b      	lsrs	r3, r3, #16
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10c      	bne.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	43da      	mvns	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4013      	ands	r3, r2
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e00b      	b.n	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	43da      	mvns	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f af6d 	bne.w	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040c0:	e034      	b.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f886 	bl	80041d4 <I2C_IsAcknowledgeFailed>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e034      	b.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d028      	beq.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040da:	f7ff f91d 	bl	8003318 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d302      	bcc.n	80040f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d11d      	bne.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b80      	cmp	r3, #128	; 0x80
 80040fc:	d016      	beq.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	f043 0220 	orr.w	r2, r3, #32
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e007      	b.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b80      	cmp	r3, #128	; 0x80
 8004138:	d1c3      	bne.n	80040c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004150:	e034      	b.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f83e 	bl	80041d4 <I2C_IsAcknowledgeFailed>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e034      	b.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d028      	beq.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7ff f8d5 	bl	8003318 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d11d      	bne.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b04      	cmp	r3, #4
 800418c:	d016      	beq.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e007      	b.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d1c3      	bne.n	8004152 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ea:	d11b      	bne.n	8004224 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	f043 0204 	orr.w	r2, r3, #4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e272      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8087 	beq.w	800435e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004250:	4b92      	ldr	r3, [pc, #584]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b04      	cmp	r3, #4
 800425a:	d00c      	beq.n	8004276 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800425c:	4b8f      	ldr	r3, [pc, #572]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b08      	cmp	r3, #8
 8004266:	d112      	bne.n	800428e <HAL_RCC_OscConfig+0x5e>
 8004268:	4b8c      	ldr	r3, [pc, #560]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004274:	d10b      	bne.n	800428e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004276:	4b89      	ldr	r3, [pc, #548]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d06c      	beq.n	800435c <HAL_RCC_OscConfig+0x12c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d168      	bne.n	800435c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e24c      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x76>
 8004298:	4b80      	ldr	r3, [pc, #512]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a7f      	ldr	r2, [pc, #508]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 800429e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	e02e      	b.n	8004304 <HAL_RCC_OscConfig+0xd4>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x98>
 80042ae:	4b7b      	ldr	r3, [pc, #492]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a7a      	ldr	r2, [pc, #488]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b78      	ldr	r3, [pc, #480]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a77      	ldr	r2, [pc, #476]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e01d      	b.n	8004304 <HAL_RCC_OscConfig+0xd4>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d0:	d10c      	bne.n	80042ec <HAL_RCC_OscConfig+0xbc>
 80042d2:	4b72      	ldr	r3, [pc, #456]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a71      	ldr	r2, [pc, #452]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6e      	ldr	r2, [pc, #440]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e00b      	b.n	8004304 <HAL_RCC_OscConfig+0xd4>
 80042ec:	4b6b      	ldr	r3, [pc, #428]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a6a      	ldr	r2, [pc, #424]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	4b68      	ldr	r3, [pc, #416]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a67      	ldr	r2, [pc, #412]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80042fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004302:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d013      	beq.n	8004334 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7ff f804 	bl	8003318 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004314:	f7ff f800 	bl	8003318 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e200      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004326:	4b5d      	ldr	r3, [pc, #372]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0xe4>
 8004332:	e014      	b.n	800435e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fe fff0 	bl	8003318 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fe ffec 	bl	8003318 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e1ec      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434e:	4b53      	ldr	r3, [pc, #332]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x10c>
 800435a:	e000      	b.n	800435e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d063      	beq.n	8004432 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800436a:	4b4c      	ldr	r3, [pc, #304]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004376:	4b49      	ldr	r3, [pc, #292]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b08      	cmp	r3, #8
 8004380:	d11c      	bne.n	80043bc <HAL_RCC_OscConfig+0x18c>
 8004382:	4b46      	ldr	r3, [pc, #280]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d116      	bne.n	80043bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	4b43      	ldr	r3, [pc, #268]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_RCC_OscConfig+0x176>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d001      	beq.n	80043a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e1c0      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	4b3d      	ldr	r3, [pc, #244]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4939      	ldr	r1, [pc, #228]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ba:	e03a      	b.n	8004432 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c4:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fe ffa5 	bl	8003318 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d2:	f7fe ffa1 	bl	8003318 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e1a1      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e4:	4b2d      	ldr	r3, [pc, #180]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b2a      	ldr	r3, [pc, #168]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4927      	ldr	r1, [pc, #156]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
 8004404:	e015      	b.n	8004432 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <HAL_RCC_OscConfig+0x270>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe ff84 	bl	8003318 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004414:	f7fe ff80 	bl	8003318 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e180      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d03a      	beq.n	80044b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d019      	beq.n	800447a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004446:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <HAL_RCC_OscConfig+0x274>)
 8004448:	2201      	movs	r2, #1
 800444a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444c:	f7fe ff64 	bl	8003318 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7fe ff60 	bl	8003318 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e160      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <HAL_RCC_OscConfig+0x26c>)
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004472:	2001      	movs	r0, #1
 8004474:	f000 face 	bl	8004a14 <RCC_Delay>
 8004478:	e01c      	b.n	80044b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <HAL_RCC_OscConfig+0x274>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004480:	f7fe ff4a 	bl	8003318 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004486:	e00f      	b.n	80044a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004488:	f7fe ff46 	bl	8003318 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d908      	bls.n	80044a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e146      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	42420000 	.word	0x42420000
 80044a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a8:	4b92      	ldr	r3, [pc, #584]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e9      	bne.n	8004488 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80a6 	beq.w	800460e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c6:	4b8b      	ldr	r3, [pc, #556]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10d      	bne.n	80044ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d2:	4b88      	ldr	r3, [pc, #544]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	4a87      	ldr	r2, [pc, #540]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044dc:	61d3      	str	r3, [r2, #28]
 80044de:	4b85      	ldr	r3, [pc, #532]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ee:	4b82      	ldr	r3, [pc, #520]	; (80046f8 <HAL_RCC_OscConfig+0x4c8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d118      	bne.n	800452c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044fa:	4b7f      	ldr	r3, [pc, #508]	; (80046f8 <HAL_RCC_OscConfig+0x4c8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a7e      	ldr	r2, [pc, #504]	; (80046f8 <HAL_RCC_OscConfig+0x4c8>)
 8004500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004506:	f7fe ff07 	bl	8003318 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450e:	f7fe ff03 	bl	8003318 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b64      	cmp	r3, #100	; 0x64
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e103      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004520:	4b75      	ldr	r3, [pc, #468]	; (80046f8 <HAL_RCC_OscConfig+0x4c8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x312>
 8004534:	4b6f      	ldr	r3, [pc, #444]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4a6e      	ldr	r2, [pc, #440]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6213      	str	r3, [r2, #32]
 8004540:	e02d      	b.n	800459e <HAL_RCC_OscConfig+0x36e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x334>
 800454a:	4b6a      	ldr	r3, [pc, #424]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	4a69      	ldr	r2, [pc, #420]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	6213      	str	r3, [r2, #32]
 8004556:	4b67      	ldr	r3, [pc, #412]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	4a66      	ldr	r2, [pc, #408]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	f023 0304 	bic.w	r3, r3, #4
 8004560:	6213      	str	r3, [r2, #32]
 8004562:	e01c      	b.n	800459e <HAL_RCC_OscConfig+0x36e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b05      	cmp	r3, #5
 800456a:	d10c      	bne.n	8004586 <HAL_RCC_OscConfig+0x356>
 800456c:	4b61      	ldr	r3, [pc, #388]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4a60      	ldr	r2, [pc, #384]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	6213      	str	r3, [r2, #32]
 8004578:	4b5e      	ldr	r3, [pc, #376]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4a5d      	ldr	r2, [pc, #372]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6213      	str	r3, [r2, #32]
 8004584:	e00b      	b.n	800459e <HAL_RCC_OscConfig+0x36e>
 8004586:	4b5b      	ldr	r3, [pc, #364]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4a5a      	ldr	r2, [pc, #360]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	6213      	str	r3, [r2, #32]
 8004592:	4b58      	ldr	r3, [pc, #352]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a57      	ldr	r2, [pc, #348]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d015      	beq.n	80045d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a6:	f7fe feb7 	bl	8003318 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ac:	e00a      	b.n	80045c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fe feb3 	bl	8003318 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e0b1      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c4:	4b4b      	ldr	r3, [pc, #300]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ee      	beq.n	80045ae <HAL_RCC_OscConfig+0x37e>
 80045d0:	e014      	b.n	80045fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d2:	f7fe fea1 	bl	8003318 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7fe fe9d 	bl	8003318 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e09b      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f0:	4b40      	ldr	r3, [pc, #256]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ee      	bne.n	80045da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004602:	4b3c      	ldr	r3, [pc, #240]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	4a3b      	ldr	r2, [pc, #236]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8087 	beq.w	8004726 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004618:	4b36      	ldr	r3, [pc, #216]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b08      	cmp	r3, #8
 8004622:	d061      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d146      	bne.n	80046ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462c:	4b33      	ldr	r3, [pc, #204]	; (80046fc <HAL_RCC_OscConfig+0x4cc>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004632:	f7fe fe71 	bl	8003318 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463a:	f7fe fe6d 	bl	8003318 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e06d      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800464c:	4b29      	ldr	r3, [pc, #164]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004660:	d108      	bne.n	8004674 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004662:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	4921      	ldr	r1, [pc, #132]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004674:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a19      	ldr	r1, [r3, #32]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	430b      	orrs	r3, r1
 8004686:	491b      	ldr	r1, [pc, #108]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCC_OscConfig+0x4cc>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004692:	f7fe fe41 	bl	8003318 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469a:	f7fe fe3d 	bl	8003318 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e03d      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ac:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x46a>
 80046b8:	e035      	b.n	8004726 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <HAL_RCC_OscConfig+0x4cc>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fe fe2a 	bl	8003318 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fe fe26 	bl	8003318 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e026      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x498>
 80046e6:	e01e      	b.n	8004726 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e019      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
 80046fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_RCC_OscConfig+0x500>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	429a      	cmp	r2, r3
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d001      	beq.n	8004726 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000

08004734 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0d0      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004748:	4b6a      	ldr	r3, [pc, #424]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d910      	bls.n	8004778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b67      	ldr	r3, [pc, #412]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 0207 	bic.w	r2, r3, #7
 800475e:	4965      	ldr	r1, [pc, #404]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004766:	4b63      	ldr	r3, [pc, #396]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0b8      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004790:	4b59      	ldr	r3, [pc, #356]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a58      	ldr	r2, [pc, #352]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800479a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a8:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4a52      	ldr	r2, [pc, #328]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b4:	4b50      	ldr	r3, [pc, #320]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	494d      	ldr	r1, [pc, #308]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d040      	beq.n	8004854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d115      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e07f      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f2:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e073      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004802:	4b3d      	ldr	r3, [pc, #244]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e06b      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004812:	4b39      	ldr	r3, [pc, #228]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f023 0203 	bic.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4936      	ldr	r1, [pc, #216]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004824:	f7fe fd78 	bl	8003318 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	e00a      	b.n	8004842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482c:	f7fe fd74 	bl	8003318 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e053      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	4b2d      	ldr	r3, [pc, #180]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 020c 	and.w	r2, r3, #12
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	429a      	cmp	r2, r3
 8004852:	d1eb      	bne.n	800482c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004854:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d210      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 0207 	bic.w	r2, r3, #7
 800486a:	4922      	ldr	r1, [pc, #136]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e032      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004890:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4916      	ldr	r1, [pc, #88]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	490e      	ldr	r1, [pc, #56]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048c2:	f000 f821 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	490a      	ldr	r1, [pc, #40]	; (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80048d4:	5ccb      	ldrb	r3, [r1, r3]
 80048d6:	fa22 f303 	lsr.w	r3, r2, r3
 80048da:	4a09      	ldr	r2, [pc, #36]	; (8004900 <HAL_RCC_ClockConfig+0x1cc>)
 80048dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_RCC_ClockConfig+0x1d0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fe fcd6 	bl	8003294 <HAL_InitTick>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40022000 	.word	0x40022000
 80048f8:	40021000 	.word	0x40021000
 80048fc:	0800927c 	.word	0x0800927c
 8004900:	2000005c 	.word	0x2000005c
 8004904:	20000060 	.word	0x20000060

08004908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004922:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_RCC_GetSysClockFreq+0x94>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b04      	cmp	r3, #4
 8004930:	d002      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0x30>
 8004932:	2b08      	cmp	r3, #8
 8004934:	d003      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0x36>
 8004936:	e027      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004938:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800493a:	613b      	str	r3, [r7, #16]
      break;
 800493c:	e027      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	0c9b      	lsrs	r3, r3, #18
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004948:	5cd3      	ldrb	r3, [r2, r3]
 800494a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d010      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004956:	4b11      	ldr	r3, [pc, #68]	; (800499c <HAL_RCC_GetSysClockFreq+0x94>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	0c5b      	lsrs	r3, r3, #17
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004962:	5cd3      	ldrb	r3, [r2, r3]
 8004964:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a0d      	ldr	r2, [pc, #52]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800496a:	fb03 f202 	mul.w	r2, r3, r2
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e004      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	613b      	str	r3, [r7, #16]
      break;
 8004986:	e002      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800498a:	613b      	str	r3, [r7, #16]
      break;
 800498c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800498e:	693b      	ldr	r3, [r7, #16]
}
 8004990:	4618      	mov	r0, r3
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	007a1200 	.word	0x007a1200
 80049a4:	08009294 	.word	0x08009294
 80049a8:	080092a4 	.word	0x080092a4
 80049ac:	003d0900 	.word	0x003d0900

080049b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b4:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	2000005c 	.word	0x2000005c

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c8:	f7ff fff2 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000
 80049e8:	0800928c 	.word	0x0800928c

080049ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f0:	f7ff ffde 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	0adb      	lsrs	r3, r3, #11
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4903      	ldr	r1, [pc, #12]	; (8004a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	0800928c 	.word	0x0800928c

08004a14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <RCC_Delay+0x34>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <RCC_Delay+0x38>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	0a5b      	lsrs	r3, r3, #9
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a30:	bf00      	nop
  }
  while (Delay --);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	60fa      	str	r2, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f9      	bne.n	8004a30 <RCC_Delay+0x1c>
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	2000005c 	.word	0x2000005c
 8004a4c:	10624dd3 	.word	0x10624dd3

08004a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e076      	b.n	8004b50 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d108      	bne.n	8004a7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a72:	d009      	beq.n	8004a88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	61da      	str	r2, [r3, #28]
 8004a7a:	e005      	b.n	8004a88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fe f964 	bl	8002d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	ea42 0103 	orr.w	r1, r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	0c1a      	lsrs	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f002 0204 	and.w	r2, r2, #4
 8004b2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	; 0x30
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b66:	2301      	movs	r3, #1
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_SPI_TransmitReceive+0x26>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e198      	b.n	8004eb0 <HAL_SPI_TransmitReceive+0x358>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b86:	f7fe fbc7 	bl	8003318 <HAL_GetTick>
 8004b8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d00f      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x70>
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bae:	d107      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d103      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x68>
 8004bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d003      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bc6:	e16d      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x82>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x82>
 8004bd4:	887b      	ldrh	r3, [r7, #2]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004be0:	e160      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d003      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2205      	movs	r2, #5
 8004bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	887a      	ldrh	r2, [r7, #2]
 8004c06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	887a      	ldrh	r2, [r7, #2]
 8004c1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d007      	beq.n	8004c4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c52:	d17c      	bne.n	8004d4e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_SPI_TransmitReceive+0x10a>
 8004c5c:	8b7b      	ldrh	r3, [r7, #26]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d16a      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	881a      	ldrh	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c86:	e057      	b.n	8004d38 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d11b      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x176>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d016      	beq.n	8004cce <HAL_SPI_TransmitReceive+0x176>
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d113      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	881a      	ldrh	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	1c9a      	adds	r2, r3, #2
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d119      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x1b8>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d014      	beq.n	8004d10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	b292      	uxth	r2, r2
 8004cf2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	1c9a      	adds	r2, r3, #2
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d10:	f7fe fb02 	bl	8003318 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d80b      	bhi.n	8004d38 <HAL_SPI_TransmitReceive+0x1e0>
 8004d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d007      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d36:	e0b5      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1a2      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x130>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d19d      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x130>
 8004d4c:	e080      	b.n	8004e50 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_SPI_TransmitReceive+0x204>
 8004d56:	8b7b      	ldrh	r3, [r7, #26]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d16f      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	7812      	ldrb	r2, [r2, #0]
 8004d68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d82:	e05b      	b.n	8004e3c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d11c      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x274>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d017      	beq.n	8004dcc <HAL_SPI_TransmitReceive+0x274>
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d114      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	330c      	adds	r3, #12
 8004dac:	7812      	ldrb	r2, [r2, #0]
 8004dae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d119      	bne.n	8004e0e <HAL_SPI_TransmitReceive+0x2b6>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d014      	beq.n	8004e0e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e0e:	f7fe fa83 	bl	8003318 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d803      	bhi.n	8004e26 <HAL_SPI_TransmitReceive+0x2ce>
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d102      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x2d4>
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d107      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e3a:	e033      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d19e      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x22c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d199      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f8b7 	bl	8004fc8 <SPI_EndRxTxTransaction>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d006      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e6c:	e01a      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9a:	e003      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3730      	adds	r7, #48	; 0x30
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ec8:	f7fe fa26 	bl	8003318 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ed8:	f7fe fa1e 	bl	8003318 <HAL_GetTick>
 8004edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ede:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	015b      	lsls	r3, r3, #5
 8004ee4:	0d1b      	lsrs	r3, r3, #20
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	fb02 f303 	mul.w	r3, r2, r3
 8004eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eee:	e054      	b.n	8004f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d050      	beq.n	8004f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ef8:	f7fe fa0e 	bl	8003318 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d902      	bls.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d13d      	bne.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f26:	d111      	bne.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f30:	d004      	beq.n	8004f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3a:	d107      	bne.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f54:	d10f      	bne.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e017      	b.n	8004fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d19b      	bne.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	2000005c 	.word	0x2000005c

08004fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2180      	movs	r1, #128	; 0x80
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f7ff ff6a 	bl	8004eb8 <SPI_WaitFlagStateUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e000      	b.n	8004ffc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e041      	b.n	800509a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fe f85a 	bl	80030e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 fa7c 	bl	8005540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d001      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e03a      	b.n	8005132 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a18      	ldr	r2, [pc, #96]	; (800513c <HAL_TIM_Base_Start_IT+0x98>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x58>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d009      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x58>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a14      	ldr	r2, [pc, #80]	; (8005140 <HAL_TIM_Base_Start_IT+0x9c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x58>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a13      	ldr	r2, [pc, #76]	; (8005144 <HAL_TIM_Base_Start_IT+0xa0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d111      	bne.n	8005120 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b06      	cmp	r3, #6
 800510c:	d010      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511e:	e007      	b.n	8005130 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800

08005148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b02      	cmp	r3, #2
 800515c:	d122      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b02      	cmp	r3, #2
 800516a:	d11b      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0202 	mvn.w	r2, #2
 8005174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9bd 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9b0 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f9bf 	bl	800551c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d122      	bne.n	80051f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d11b      	bne.n	80051f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0204 	mvn.w	r2, #4
 80051c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f993 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f986 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f995 	bl	800551c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b08      	cmp	r3, #8
 8005204:	d122      	bne.n	800524c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b08      	cmp	r3, #8
 8005212:	d11b      	bne.n	800524c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0208 	mvn.w	r2, #8
 800521c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2204      	movs	r2, #4
 8005222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f969 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 8005238:	e005      	b.n	8005246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f95c 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f96b 	bl	800551c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b10      	cmp	r3, #16
 8005258:	d122      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b10      	cmp	r3, #16
 8005266:	d11b      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0210 	mvn.w	r2, #16
 8005270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2208      	movs	r2, #8
 8005276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f93f 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 800528c:	e005      	b.n	800529a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f932 	bl	80054f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f941 	bl	800551c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d10e      	bne.n	80052cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d107      	bne.n	80052cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0201 	mvn.w	r2, #1
 80052c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f90d 	bl	80054e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	2b80      	cmp	r3, #128	; 0x80
 80052d8:	d10e      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e4:	2b80      	cmp	r3, #128	; 0x80
 80052e6:	d107      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fa83 	bl	80057fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d10e      	bne.n	8005324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005310:	2b40      	cmp	r3, #64	; 0x40
 8005312:	d107      	bne.n	8005324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800531c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f905 	bl	800552e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b20      	cmp	r3, #32
 8005330:	d10e      	bne.n	8005350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b20      	cmp	r3, #32
 800533e:	d107      	bne.n	8005350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0220 	mvn.w	r2, #32
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa4e 	bl	80057ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_TIM_ConfigClockSource+0x1c>
 8005370:	2302      	movs	r3, #2
 8005372:	e0b4      	b.n	80054de <HAL_TIM_ConfigClockSource+0x186>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800539a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ac:	d03e      	beq.n	800542c <HAL_TIM_ConfigClockSource+0xd4>
 80053ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b2:	f200 8087 	bhi.w	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	f000 8086 	beq.w	80054ca <HAL_TIM_ConfigClockSource+0x172>
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c2:	d87f      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b70      	cmp	r3, #112	; 0x70
 80053c6:	d01a      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0xa6>
 80053c8:	2b70      	cmp	r3, #112	; 0x70
 80053ca:	d87b      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b60      	cmp	r3, #96	; 0x60
 80053ce:	d050      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x11a>
 80053d0:	2b60      	cmp	r3, #96	; 0x60
 80053d2:	d877      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b50      	cmp	r3, #80	; 0x50
 80053d6:	d03c      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0xfa>
 80053d8:	2b50      	cmp	r3, #80	; 0x50
 80053da:	d873      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d058      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x13a>
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d86f      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b30      	cmp	r3, #48	; 0x30
 80053e6:	d064      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053e8:	2b30      	cmp	r3, #48	; 0x30
 80053ea:	d86b      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d060      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d867      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d05c      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d05a      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053fc:	e062      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800540e:	f000 f970 	bl	80056f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	609a      	str	r2, [r3, #8]
      break;
 800542a:	e04f      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800543c:	f000 f959 	bl	80056f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544e:	609a      	str	r2, [r3, #8]
      break;
 8005450:	e03c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	461a      	mov	r2, r3
 8005460:	f000 f8d0 	bl	8005604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2150      	movs	r1, #80	; 0x50
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f927 	bl	80056be <TIM_ITRx_SetConfig>
      break;
 8005470:	e02c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800547e:	461a      	mov	r2, r3
 8005480:	f000 f8ee 	bl	8005660 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2160      	movs	r1, #96	; 0x60
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f917 	bl	80056be <TIM_ITRx_SetConfig>
      break;
 8005490:	e01c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549e:	461a      	mov	r2, r3
 80054a0:	f000 f8b0 	bl	8005604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2140      	movs	r1, #64	; 0x40
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f907 	bl	80056be <TIM_ITRx_SetConfig>
      break;
 80054b0:	e00c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f000 f8fe 	bl	80056be <TIM_ITRx_SetConfig>
      break;
 80054c2:	e003      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
      break;
 80054c8:	e000      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr

0800551c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a29      	ldr	r2, [pc, #164]	; (80055f8 <TIM_Base_SetConfig+0xb8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00b      	beq.n	8005570 <TIM_Base_SetConfig+0x30>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555e:	d007      	beq.n	8005570 <TIM_Base_SetConfig+0x30>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a26      	ldr	r2, [pc, #152]	; (80055fc <TIM_Base_SetConfig+0xbc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_Base_SetConfig+0x30>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a25      	ldr	r2, [pc, #148]	; (8005600 <TIM_Base_SetConfig+0xc0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d108      	bne.n	8005582 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <TIM_Base_SetConfig+0xb8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00b      	beq.n	80055a2 <TIM_Base_SetConfig+0x62>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d007      	beq.n	80055a2 <TIM_Base_SetConfig+0x62>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a19      	ldr	r2, [pc, #100]	; (80055fc <TIM_Base_SetConfig+0xbc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d003      	beq.n	80055a2 <TIM_Base_SetConfig+0x62>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a18      	ldr	r2, [pc, #96]	; (8005600 <TIM_Base_SetConfig+0xc0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d108      	bne.n	80055b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a07      	ldr	r2, [pc, #28]	; (80055f8 <TIM_Base_SetConfig+0xb8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d103      	bne.n	80055e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	615a      	str	r2, [r3, #20]
}
 80055ee:	bf00      	nop
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	40012c00 	.word	0x40012c00
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800

08005604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 030a 	bic.w	r3, r3, #10
 8005640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr

08005660 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f023 0210 	bic.w	r2, r3, #16
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800568a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	031b      	lsls	r3, r3, #12
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800569c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	621a      	str	r2, [r3, #32]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	f043 0307 	orr.w	r3, r3, #7
 80056e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	609a      	str	r2, [r3, #8]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b087      	sub	sp, #28
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
 80056fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800570c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	021a      	lsls	r2, r3, #8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	431a      	orrs	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	609a      	str	r2, [r3, #8]
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr

08005730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005744:	2302      	movs	r3, #2
 8005746:	e046      	b.n	80057d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a16      	ldr	r2, [pc, #88]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00e      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005794:	d009      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a12      	ldr	r2, [pc, #72]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10c      	bne.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800

080057ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr

080057fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e042      	b.n	80058a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fd fca4 	bl	8003184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2224      	movs	r2, #36	; 0x24
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f91d 	bl	8005a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d16d      	bne.n	80059ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_UART_Transmit+0x2c>
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e066      	b.n	80059ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2221      	movs	r2, #33	; 0x21
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ee:	f7fd fd13 	bl	8003318 <HAL_GetTick>
 80058f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	88fa      	ldrh	r2, [r7, #6]
 80058f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	88fa      	ldrh	r2, [r7, #6]
 80058fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005908:	d108      	bne.n	800591c <HAL_UART_Transmit+0x6c>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	e003      	b.n	8005924 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005924:	e02a      	b.n	800597c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2200      	movs	r2, #0
 800592e:	2180      	movs	r1, #128	; 0x80
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f840 	bl	80059b6 <UART_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e036      	b.n	80059ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10b      	bne.n	800595e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	3302      	adds	r3, #2
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e007      	b.n	800596e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	3301      	adds	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1cf      	bne.n	8005926 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2200      	movs	r2, #0
 800598e:	2140      	movs	r1, #64	; 0x40
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f810 	bl	80059b6 <UART_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e006      	b.n	80059ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	e000      	b.n	80059ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80059ac:	2302      	movs	r3, #2
  }
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b090      	sub	sp, #64	; 0x40
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	4613      	mov	r3, r2
 80059c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c6:	e050      	b.n	8005a6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d04c      	beq.n	8005a6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80059d6:	f7fd fc9f 	bl	8003318 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d241      	bcs.n	8005a6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a06:	637a      	str	r2, [r7, #52]	; 0x34
 8005a08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e5      	bne.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3314      	adds	r3, #20
 8005a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f023 0301 	bic.w	r3, r3, #1
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3314      	adds	r3, #20
 8005a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a3a:	623a      	str	r2, [r7, #32]
 8005a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	69f9      	ldr	r1, [r7, #28]
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e5      	bne.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e00f      	b.n	8005a8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4013      	ands	r3, r2
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	bf0c      	ite	eq
 8005a7a:	2301      	moveq	r3, #1
 8005a7c:	2300      	movne	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d09f      	beq.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3740      	adds	r7, #64	; 0x40
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ace:	f023 030c 	bic.w	r3, r3, #12
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a2c      	ldr	r2, [pc, #176]	; (8005ba8 <UART_SetConfig+0x114>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d103      	bne.n	8005b04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005afc:	f7fe ff76 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	e002      	b.n	8005b0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b04:	f7fe ff5e 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8005b08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009a      	lsls	r2, r3, #2
 8005b14:	441a      	add	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	4a22      	ldr	r2, [pc, #136]	; (8005bac <UART_SetConfig+0x118>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	0119      	lsls	r1, r3, #4
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009a      	lsls	r2, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b40:	4b1a      	ldr	r3, [pc, #104]	; (8005bac <UART_SetConfig+0x118>)
 8005b42:	fba3 0302 	umull	r0, r3, r3, r2
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	2064      	movs	r0, #100	; 0x64
 8005b4a:	fb00 f303 	mul.w	r3, r0, r3
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	3332      	adds	r3, #50	; 0x32
 8005b54:	4a15      	ldr	r2, [pc, #84]	; (8005bac <UART_SetConfig+0x118>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b60:	4419      	add	r1, r3
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009a      	lsls	r2, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b78:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <UART_SetConfig+0x118>)
 8005b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	2064      	movs	r0, #100	; 0x64
 8005b82:	fb00 f303 	mul.w	r3, r0, r3
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	3332      	adds	r3, #50	; 0x32
 8005b8c:	4a07      	ldr	r2, [pc, #28]	; (8005bac <UART_SetConfig+0x118>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	f003 020f 	and.w	r2, r3, #15
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40013800 	.word	0x40013800
 8005bac:	51eb851f 	.word	0x51eb851f

08005bb0 <_ZN7GButtonC1EP12GPIO_TypeDeftbb>:
//value++;                                            // увеличивать/уменьшать переменную value с шагом и интервалом
//Serial.println(value);                              // для примера выведем в порт
//}

// ==================== CONSTRUCTOR ====================
GButton::GButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool type, bool dir) {
 8005bb0:	b410      	push	{r4}
 8005bb2:	2400      	movs	r4, #0
 8005bb4:	f89d c004 	ldrb.w	ip, [sp, #4]

	flags.GPIOx = GPIOx;
 8005bb8:	f8c0 1002 	str.w	r1, [r0, #2]
	flags.GPIO_Pin = GPIO_Pin;

	setType(type);
	flags.mode = false;
	flags.tickMode = false;
	flags.inv_state = dir;
 8005bbc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005bc0:	7841      	ldrb	r1, [r0, #1]
 8005bc2:	ea4c 03c3 	orr.w	r3, ip, r3, lsl #3
 8005bc6:	f003 031e 	and.w	r3, r3, #30
 8005bca:	f021 011e 	bic.w	r1, r1, #30
 8005bce:	430b      	orrs	r3, r1
	flags.GPIO_Pin = GPIO_Pin;
 8005bd0:	80c2      	strh	r2, [r0, #6]
	flags.inv_state = dir;
 8005bd2:	7043      	strb	r3, [r0, #1]
GButton::GButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool type, bool dir) {
 8005bd4:	4a06      	ldr	r2, [pc, #24]	; (8005bf0 <_ZN7GButtonC1EP12GPIO_TypeDeftbb+0x40>)
 8005bd6:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <_ZN7GButtonC1EP12GPIO_TypeDeftbb+0x44>)
 8005bd8:	7204      	strb	r4, [r0, #8]
 8005bda:	8244      	strh	r4, [r0, #18]
 8005bdc:	7504      	strb	r4, [r0, #20]
 8005bde:	6184      	str	r4, [r0, #24]
 8005be0:	8384      	strh	r4, [r0, #28]
 8005be2:	f8c0 200a 	str.w	r2, [r0, #10]
}
 8005be6:	bc10      	pop	{r4}
GButton::GButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool type, bool dir) {
 8005be8:	f8c0 300e 	str.w	r3, [r0, #14]
}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	01f4000a 	.word	0x01f4000a
 8005bf4:	019001f4 	.word	0x019001f4

08005bf8 <_ZN7GButton7isPressEv>:
void GButton::setTickMode(bool tickMode) {
	flags.tickMode = tickMode;
}

// ==================== IS ====================
bool GButton::isPress() {
 8005bf8:	b538      	push	{r3, r4, r5, lr}
	if (flags.tickMode)
 8005bfa:	7843      	ldrb	r3, [r0, #1]
bool GButton::isPress() {
 8005bfc:	4604      	mov	r4, r0
	if (flags.tickMode)
 8005bfe:	06d8      	lsls	r0, r3, #27
 8005c00:	d408      	bmi.n	8005c14 <_ZN7GButton7isPressEv+0x1c>
		GButton::tick();
	if (flags.isPress_f) {
 8005c02:	7823      	ldrb	r3, [r4, #0]
 8005c04:	069a      	lsls	r2, r3, #26
 8005c06:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8005c0a:	d502      	bpl.n	8005c12 <_ZN7GButton7isPressEv+0x1a>
		flags.isPress_f = false;
 8005c0c:	f36f 1345 	bfc	r3, #5, #1
 8005c10:	7023      	strb	r3, [r4, #0]
		return true;
	} else
		return false;
}
 8005c12:	bd38      	pop	{r3, r4, r5, pc}

void GButton::tick() {
	// читаем пин
	//if (!flags.mode && !flags.noPin) btn_state = !_buttonRead() ^ (flags.inv_state ^ flags.type);

	if (!flags.mode)	// && !flags.noPin)
 8005c14:	0759      	lsls	r1, r3, #29
 8005c16:	d531      	bpl.n	8005c7c <_ZN7GButton7isPressEv+0x84>

	uint32_t thisMls = uwTick;
	//uint32_t thisMls = millis();

	// нажатие
	if (btn_state && !btn_flag) {
 8005c18:	7f21      	ldrb	r1, [r4, #28]
	uint32_t thisMls = uwTick;
 8005c1a:	4a45      	ldr	r2, [pc, #276]	; (8005d30 <_ZN7GButton7isPressEv+0x138>)
 8005c1c:	6815      	ldr	r5, [r2, #0]
	if (btn_state && !btn_flag) {
 8005c1e:	b9d1      	cbnz	r1, 8005c56 <_ZN7GButton7isPressEv+0x5e>
				flags.isPress_f = true;
				flags.oneClick_f = true;
			}
		}
	} else {
		flags.btn_deb = false;
 8005c20:	7822      	ldrb	r2, [r4, #0]
 8005c22:	f361 0200 	bfi	r2, r1, #0, #1
 8005c26:	7022      	strb	r2, [r4, #0]
	}

	// отпускание
	if (!btn_state && btn_flag) {
 8005c28:	7f62      	ldrb	r2, [r4, #29]
 8005c2a:	2a00      	cmp	r2, #0
 8005c2c:	d138      	bne.n	8005ca0 <_ZN7GButton7isPressEv+0xa8>
			if (thisMls - btn_timer >= _debounce) {
 8005c2e:	69a2      	ldr	r2, [r4, #24]
 8005c30:	1aaa      	subs	r2, r5, r2
		flags.oneClick_f = false;
		btn_timer = thisMls;
	}

	// обработка накликивания
	if ((thisMls - btn_timer >= _click_timeout) && (btn_counter != 0)
 8005c32:	89e0      	ldrh	r0, [r4, #14]
 8005c34:	4290      	cmp	r0, r2
 8005c36:	d803      	bhi.n	8005c40 <_ZN7GButton7isPressEv+0x48>
 8005c38:	7ca2      	ldrb	r2, [r4, #18]
 8005c3a:	b10a      	cbz	r2, 8005c40 <_ZN7GButton7isPressEv+0x48>
			&& !btn_state) {    //И здесь еще добавлен !btn_state
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d070      	beq.n	8005d22 <_ZN7GButton7isPressEv+0x12a>
		btn_counter = 0;
		flags.counter_flag = true;
	}

	// сброс накликивания						//Добавлено
	if (flags.counter_reset) {
 8005c40:	0659      	lsls	r1, r3, #25
 8005c42:	d5de      	bpl.n	8005c02 <_ZN7GButton7isPressEv+0xa>
		last_counter = 0;
 8005c44:	2200      	movs	r2, #0
		flags.counter_flag = false;
 8005c46:	8823      	ldrh	r3, [r4, #0]
		last_counter = 0;
 8005c48:	74e2      	strb	r2, [r4, #19]
		flags.counter_flag = false;
 8005c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c4e:	f023 0304 	bic.w	r3, r3, #4
 8005c52:	8023      	strh	r3, [r4, #0]
 8005c54:	e7d5      	b.n	8005c02 <_ZN7GButton7isPressEv+0xa>
	if (btn_state && !btn_flag) {
 8005c56:	7f62      	ldrb	r2, [r4, #29]
 8005c58:	2a00      	cmp	r2, #0
 8005c5a:	d144      	bne.n	8005ce6 <_ZN7GButton7isPressEv+0xee>
		if (!flags.btn_deb) {
 8005c5c:	7820      	ldrb	r0, [r4, #0]
 8005c5e:	f010 0201 	ands.w	r2, r0, #1
 8005c62:	d059      	beq.n	8005d18 <_ZN7GButton7isPressEv+0x120>
			if (thisMls - btn_timer >= _debounce) {
 8005c64:	69a2      	ldr	r2, [r4, #24]
 8005c66:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 8005c6a:	1aaa      	subs	r2, r5, r2
 8005c6c:	4562      	cmp	r2, ip
 8005c6e:	d3e0      	bcc.n	8005c32 <_ZN7GButton7isPressEv+0x3a>
				flags.isPress_f = true;
 8005c70:	f060 005f 	orn	r0, r0, #95	; 0x5f
 8005c74:	7020      	strb	r0, [r4, #0]
				btn_flag = true;
 8005c76:	2001      	movs	r0, #1
 8005c78:	7760      	strb	r0, [r4, #29]
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8005c7a:	e03a      	b.n	8005cf2 <_ZN7GButton7isPressEv+0xfa>
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8005c7c:	88e1      	ldrh	r1, [r4, #6]
 8005c7e:	f8d4 0002 	ldr.w	r0, [r4, #2]
 8005c82:	f7fd fe09 	bl	8003898 <HAL_GPIO_ReadPin>
				^ (flags.inv_state ^ flags.type);
 8005c86:	7863      	ldrb	r3, [r4, #1]
 8005c88:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8005c8c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8005c90:	4051      	eors	r1, r2
 8005c92:	2800      	cmp	r0, #0
 8005c94:	bf08      	it	eq
 8005c96:	f081 0101 	eoreq.w	r1, r1, #1
 8005c9a:	b2c9      	uxtb	r1, r1
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8005c9c:	7721      	strb	r1, [r4, #28]
 8005c9e:	e7bc      	b.n	8005c1a <_ZN7GButton7isPressEv+0x22>
		if (!flags.hold_flag)
 8005ca0:	7822      	ldrb	r2, [r4, #0]
		btn_flag = false;
 8005ca2:	7761      	strb	r1, [r4, #29]
		if (!flags.hold_flag)
 8005ca4:	0792      	lsls	r2, r2, #30
 8005ca6:	d402      	bmi.n	8005cae <_ZN7GButton7isPressEv+0xb6>
			btn_counter++;
 8005ca8:	7ca2      	ldrb	r2, [r4, #18]
 8005caa:	3201      	adds	r2, #1
 8005cac:	74a2      	strb	r2, [r4, #18]
		flags.hold_flag = false;
 8005cae:	7820      	ldrb	r0, [r4, #0]
		btn_timer = thisMls;
 8005cb0:	61a5      	str	r5, [r4, #24]
		flags.hold_flag = false;
 8005cb2:	f020 0012 	bic.w	r0, r0, #18
 8005cb6:	f040 0010 	orr.w	r0, r0, #16
		if (flags.step_flag) {
 8005cba:	4602      	mov	r2, r0
		flags.hold_flag = false;
 8005cbc:	7020      	strb	r0, [r4, #0]
		if (flags.step_flag) {
 8005cbe:	0650      	lsls	r0, r2, #25
 8005cc0:	d505      	bpl.n	8005cce <_ZN7GButton7isPressEv+0xd6>
			btn_counter = 0;
 8005cc2:	2000      	movs	r0, #0
			flags.step_flag = false;
 8005cc4:	f360 1286 	bfi	r2, r0, #6, #1
 8005cc8:	7022      	strb	r2, [r4, #0]
			btn_counter = 0;
 8005cca:	8260      	strh	r0, [r4, #18]
			flags.step_flag = false;
 8005ccc:	b2d2      	uxtb	r2, r2
		if (flags.oneClick_f) {
 8005cce:	09d2      	lsrs	r2, r2, #7
 8005cd0:	d0af      	beq.n	8005c32 <_ZN7GButton7isPressEv+0x3a>
			flags.oneClick_f = false;
 8005cd2:	8823      	ldrh	r3, [r4, #0]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8005cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cde:	8023      	strh	r3, [r4, #0]
 8005ce0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005ce4:	e7a5      	b.n	8005c32 <_ZN7GButton7isPressEv+0x3a>
		flags.btn_deb = false;
 8005ce6:	7822      	ldrb	r2, [r4, #0]
 8005ce8:	f36f 0200 	bfc	r2, #0, #1
 8005cec:	7022      	strb	r2, [r4, #0]
			if (thisMls - btn_timer >= _debounce) {
 8005cee:	69a2      	ldr	r2, [r4, #24]
 8005cf0:	1aaa      	subs	r2, r5, r2
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8005cf2:	89a0      	ldrh	r0, [r4, #12]
 8005cf4:	4290      	cmp	r0, r2
 8005cf6:	d89c      	bhi.n	8005c32 <_ZN7GButton7isPressEv+0x3a>
			&& !flags.hold_flag) {
 8005cf8:	7820      	ldrb	r0, [r4, #0]
 8005cfa:	f010 0f02 	tst.w	r0, #2
 8005cfe:	f3c0 0c40 	ubfx	ip, r0, #1, #1
 8005d02:	d196      	bne.n	8005c32 <_ZN7GButton7isPressEv+0x3a>
		flags.hold_flag = true;
 8005d04:	f000 0035 	and.w	r0, r0, #53	; 0x35
 8005d08:	f040 004a 	orr.w	r0, r0, #74	; 0x4a
 8005d0c:	7020      	strb	r0, [r4, #0]
		last_hold_counter = btn_counter;
 8005d0e:	7ca0      	ldrb	r0, [r4, #18]
 8005d10:	4662      	mov	r2, ip
		btn_timer = thisMls;
 8005d12:	61a5      	str	r5, [r4, #24]
		last_hold_counter = btn_counter;
 8005d14:	7520      	strb	r0, [r4, #20]
		btn_timer = thisMls;
 8005d16:	e78c      	b.n	8005c32 <_ZN7GButton7isPressEv+0x3a>
			flags.btn_deb = true;
 8005d18:	f040 0001 	orr.w	r0, r0, #1
			btn_timer = thisMls;
 8005d1c:	61a5      	str	r5, [r4, #24]
			flags.btn_deb = true;
 8005d1e:	7020      	strb	r0, [r4, #0]
			btn_timer = thisMls;
 8005d20:	e787      	b.n	8005c32 <_ZN7GButton7isPressEv+0x3a>
		flags.counter_flag = true;
 8005d22:	7820      	ldrb	r0, [r4, #0]
		last_counter = btn_counter;
 8005d24:	74e2      	strb	r2, [r4, #19]
		flags.counter_flag = true;
 8005d26:	f040 0204 	orr.w	r2, r0, #4
		btn_counter = 0;
 8005d2a:	74a1      	strb	r1, [r4, #18]
		flags.counter_flag = true;
 8005d2c:	7022      	strb	r2, [r4, #0]
 8005d2e:	e787      	b.n	8005c40 <_ZN7GButton7isPressEv+0x48>
 8005d30:	20000938 	.word	0x20000938

08005d34 <_ZN7GButton4tickEv>:
	if (!flags.mode)	// && !flags.noPin)
 8005d34:	f890 c001 	ldrb.w	ip, [r0, #1]
void GButton::tick() {
 8005d38:	b510      	push	{r4, lr}
	if (!flags.mode)	// && !flags.noPin)
 8005d3a:	f01c 0f04 	tst.w	ip, #4
void GButton::tick() {
 8005d3e:	4604      	mov	r4, r0
	if (!flags.mode)	// && !flags.noPin)
 8005d40:	d06f      	beq.n	8005e22 <_ZN7GButton4tickEv+0xee>
	if (btn_state && !btn_flag) {
 8005d42:	7f02      	ldrb	r2, [r0, #28]
	uint32_t thisMls = uwTick;
 8005d44:	4b46      	ldr	r3, [pc, #280]	; (8005e60 <_ZN7GButton4tickEv+0x12c>)
 8005d46:	6818      	ldr	r0, [r3, #0]
	if (btn_state && !btn_flag) {
 8005d48:	b1da      	cbz	r2, 8005d82 <_ZN7GButton4tickEv+0x4e>
 8005d4a:	7f63      	ldrb	r3, [r4, #29]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d058      	beq.n	8005e02 <_ZN7GButton4tickEv+0xce>
		flags.btn_deb = false;
 8005d50:	7823      	ldrb	r3, [r4, #0]
 8005d52:	f36f 0300 	bfc	r3, #0, #1
 8005d56:	7023      	strb	r3, [r4, #0]
			if (thisMls - btn_timer >= _debounce) {
 8005d58:	69a3      	ldr	r3, [r4, #24]
 8005d5a:	1ac3      	subs	r3, r0, r3
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8005d5c:	89a1      	ldrh	r1, [r4, #12]
 8005d5e:	4299      	cmp	r1, r3
 8005d60:	d817      	bhi.n	8005d92 <_ZN7GButton4tickEv+0x5e>
			&& !flags.hold_flag) {
 8005d62:	7821      	ldrb	r1, [r4, #0]
 8005d64:	f011 0f02 	tst.w	r1, #2
 8005d68:	f3c1 0e40 	ubfx	lr, r1, #1, #1
 8005d6c:	d111      	bne.n	8005d92 <_ZN7GButton4tickEv+0x5e>
		flags.hold_flag = true;
 8005d6e:	f001 0135 	and.w	r1, r1, #53	; 0x35
 8005d72:	f041 014a 	orr.w	r1, r1, #74	; 0x4a
 8005d76:	7021      	strb	r1, [r4, #0]
		last_hold_counter = btn_counter;
 8005d78:	7ca1      	ldrb	r1, [r4, #18]
 8005d7a:	4673      	mov	r3, lr
		btn_timer = thisMls;
 8005d7c:	61a0      	str	r0, [r4, #24]
		last_hold_counter = btn_counter;
 8005d7e:	7521      	strb	r1, [r4, #20]
		btn_timer = thisMls;
 8005d80:	e007      	b.n	8005d92 <_ZN7GButton4tickEv+0x5e>
		flags.btn_deb = false;
 8005d82:	7823      	ldrb	r3, [r4, #0]
 8005d84:	f362 0300 	bfi	r3, r2, #0, #1
 8005d88:	7023      	strb	r3, [r4, #0]
	if (!btn_state && btn_flag) {
 8005d8a:	7f63      	ldrb	r3, [r4, #29]
 8005d8c:	b9a3      	cbnz	r3, 8005db8 <_ZN7GButton4tickEv+0x84>
			if (thisMls - btn_timer >= _debounce) {
 8005d8e:	69a3      	ldr	r3, [r4, #24]
 8005d90:	1ac3      	subs	r3, r0, r3
	if ((thisMls - btn_timer >= _click_timeout) && (btn_counter != 0)
 8005d92:	89e1      	ldrh	r1, [r4, #14]
 8005d94:	4299      	cmp	r1, r3
 8005d96:	d803      	bhi.n	8005da0 <_ZN7GButton4tickEv+0x6c>
 8005d98:	7ca3      	ldrb	r3, [r4, #18]
 8005d9a:	b10b      	cbz	r3, 8005da0 <_ZN7GButton4tickEv+0x6c>
			&& !btn_state) {    //И здесь еще добавлен !btn_state
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	d058      	beq.n	8005e52 <_ZN7GButton4tickEv+0x11e>
	if (flags.counter_reset) {
 8005da0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8005da4:	d007      	beq.n	8005db6 <_ZN7GButton4tickEv+0x82>
		last_counter = 0;
 8005da6:	2200      	movs	r2, #0
		flags.counter_flag = false;
 8005da8:	8823      	ldrh	r3, [r4, #0]
		last_counter = 0;
 8005daa:	74e2      	strb	r2, [r4, #19]
		flags.counter_flag = false;
 8005dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db0:	f023 0304 	bic.w	r3, r3, #4
 8005db4:	8023      	strh	r3, [r4, #0]
		flags.counter_reset = false;
	}
}
 8005db6:	bd10      	pop	{r4, pc}
		if (!flags.hold_flag)
 8005db8:	7823      	ldrb	r3, [r4, #0]
		btn_flag = false;
 8005dba:	7762      	strb	r2, [r4, #29]
		if (!flags.hold_flag)
 8005dbc:	079b      	lsls	r3, r3, #30
 8005dbe:	d402      	bmi.n	8005dc6 <_ZN7GButton4tickEv+0x92>
			btn_counter++;
 8005dc0:	7ca3      	ldrb	r3, [r4, #18]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	74a3      	strb	r3, [r4, #18]
		flags.hold_flag = false;
 8005dc6:	7821      	ldrb	r1, [r4, #0]
		btn_timer = thisMls;
 8005dc8:	61a0      	str	r0, [r4, #24]
		flags.hold_flag = false;
 8005dca:	f021 0112 	bic.w	r1, r1, #18
 8005dce:	f041 0110 	orr.w	r1, r1, #16
		if (flags.step_flag) {
 8005dd2:	460b      	mov	r3, r1
		flags.hold_flag = false;
 8005dd4:	7021      	strb	r1, [r4, #0]
		if (flags.step_flag) {
 8005dd6:	0659      	lsls	r1, r3, #25
 8005dd8:	d505      	bpl.n	8005de6 <_ZN7GButton4tickEv+0xb2>
			btn_counter = 0;
 8005dda:	2100      	movs	r1, #0
			flags.step_flag = false;
 8005ddc:	f361 1386 	bfi	r3, r1, #6, #1
 8005de0:	7023      	strb	r3, [r4, #0]
			btn_counter = 0;
 8005de2:	8261      	strh	r1, [r4, #18]
			flags.step_flag = false;
 8005de4:	b2db      	uxtb	r3, r3
		if (flags.oneClick_f) {
 8005de6:	09db      	lsrs	r3, r3, #7
 8005de8:	d0d3      	beq.n	8005d92 <_ZN7GButton4tickEv+0x5e>
			flags.oneClick_f = false;
 8005dea:	f8b4 c000 	ldrh.w	ip, [r4]
 8005dee:	2300      	movs	r3, #0
 8005df0:	f42c 7cc0 	bic.w	ip, ip, #384	; 0x180
 8005df4:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8005df8:	f8a4 c000 	strh.w	ip, [r4]
 8005dfc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8005e00:	e7c7      	b.n	8005d92 <_ZN7GButton4tickEv+0x5e>
		if (!flags.btn_deb) {
 8005e02:	7821      	ldrb	r1, [r4, #0]
 8005e04:	f011 0301 	ands.w	r3, r1, #1
 8005e08:	d01e      	beq.n	8005e48 <_ZN7GButton4tickEv+0x114>
			if (thisMls - btn_timer >= _debounce) {
 8005e0a:	69a3      	ldr	r3, [r4, #24]
 8005e0c:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
 8005e10:	1ac3      	subs	r3, r0, r3
 8005e12:	4573      	cmp	r3, lr
 8005e14:	d3bd      	bcc.n	8005d92 <_ZN7GButton4tickEv+0x5e>
				flags.isPress_f = true;
 8005e16:	f061 015f 	orn	r1, r1, #95	; 0x5f
 8005e1a:	7021      	strb	r1, [r4, #0]
				btn_flag = true;
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	7761      	strb	r1, [r4, #29]
	if (btn_flag && btn_state && (thisMls - btn_timer >= _timeout)
 8005e20:	e79c      	b.n	8005d5c <_ZN7GButton4tickEv+0x28>
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8005e22:	88c1      	ldrh	r1, [r0, #6]
 8005e24:	f8d0 0002 	ldr.w	r0, [r0, #2]
 8005e28:	f7fd fd36 	bl	8003898 <HAL_GPIO_ReadPin>
				^ (flags.inv_state ^ flags.type);
 8005e2c:	f894 c001 	ldrb.w	ip, [r4, #1]
 8005e30:	f3cc 0240 	ubfx	r2, ip, #1, #1
 8005e34:	f3cc 03c0 	ubfx	r3, ip, #3, #1
 8005e38:	405a      	eors	r2, r3
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	bf08      	it	eq
 8005e3e:	f082 0201 	eoreq.w	r2, r2, #1
 8005e42:	b2d2      	uxtb	r2, r2
		btn_state = !HAL_GPIO_ReadPin(flags.GPIOx, flags.GPIO_Pin)
 8005e44:	7722      	strb	r2, [r4, #28]
 8005e46:	e77d      	b.n	8005d44 <_ZN7GButton4tickEv+0x10>
			flags.btn_deb = true;
 8005e48:	f041 0101 	orr.w	r1, r1, #1
			btn_timer = thisMls;
 8005e4c:	61a0      	str	r0, [r4, #24]
			flags.btn_deb = true;
 8005e4e:	7021      	strb	r1, [r4, #0]
			btn_timer = thisMls;
 8005e50:	e79f      	b.n	8005d92 <_ZN7GButton4tickEv+0x5e>
		flags.counter_flag = true;
 8005e52:	7821      	ldrb	r1, [r4, #0]
		last_counter = btn_counter;
 8005e54:	74e3      	strb	r3, [r4, #19]
		flags.counter_flag = true;
 8005e56:	f041 0304 	orr.w	r3, r1, #4
		btn_counter = 0;
 8005e5a:	74a2      	strb	r2, [r4, #18]
		flags.counter_flag = true;
 8005e5c:	7023      	strb	r3, [r4, #0]
 8005e5e:	e79f      	b.n	8005da0 <_ZN7GButton4tickEv+0x6c>
 8005e60:	20000938 	.word	0x20000938

08005e64 <_Z8DWT_Initv>:

uint32_t us_count_tic;

void DWT_Init(void)
{
    SCB_DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8005e64:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8005e68:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;     // запускаем счётчик
 8005e6c:	4a04      	ldr	r2, [pc, #16]	; (8005e80 <_Z8DWT_Initv+0x1c>)
    SCB_DEMCR   |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8005e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e72:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;     // запускаем счётчик
 8005e76:	6813      	ldr	r3, [r2, #0]
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6013      	str	r3, [r2, #0]
}
 8005e7e:	4770      	bx	lr
 8005e80:	e0001000 	.word	0xe0001000

08005e84 <_ZN8classLog13colorStringlnEiPKc>:
	print(s);
	print(format);
	print("\33[0m");
}
void classLog::colorStringln(int c, char const *const format)
{
 8005e84:	460b      	mov	r3, r1
 8005e86:	b530      	push	{r4, r5, lr}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4615      	mov	r5, r2
	sprintf(s, "\33[38;05;%dm",color);
 8005e8e:	4913      	ldr	r1, [pc, #76]	; (8005edc <_ZN8classLog13colorStringlnEiPKc+0x58>)
 8005e90:	461a      	mov	r2, r3
 8005e92:	4668      	mov	r0, sp
 8005e94:	f001 f86c 	bl	8006f70 <siprintf>
			HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8005e98:	4668      	mov	r0, sp
 8005e9a:	f7fa f959 	bl	8000150 <strlen>
 8005e9e:	4669      	mov	r1, sp
 8005ea0:	b282      	uxth	r2, r0
 8005ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ea6:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8005eaa:	f7ff fd01 	bl	80058b0 <HAL_UART_Transmit>
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f7fa f94e 	bl	8000150 <strlen>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ebc:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8005ec0:	b292      	uxth	r2, r2
 8005ec2:	f7ff fcf5 	bl	80058b0 <HAL_UART_Transmit>
 8005ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eca:	2205      	movs	r2, #5
 8005ecc:	4904      	ldr	r1, [pc, #16]	; (8005ee0 <_ZN8classLog13colorStringlnEiPKc+0x5c>)
 8005ece:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
	color(c);
	print(format);
	print("\33[0m\n");
}
 8005ed2:	b005      	add	sp, #20
 8005ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ed8:	f7ff bcea 	b.w	80058b0 <HAL_UART_Transmit>
 8005edc:	080092a8 	.word	0x080092a8
 8005ee0:	080092b4 	.word	0x080092b4

08005ee4 <_ZN10TFT_Driver12SSD1306_InitEv>:
	}

}

//Инициализация первого экрана
void TFT_Driver::SSD1306_Init(void) {
 8005ee4:	b570      	push	{r4, r5, r6, lr}
	if (LCD->hi2c)  //I2C
 8005ee6:	6801      	ldr	r1, [r0, #0]
void TFT_Driver::SSD1306_Init(void) {
 8005ee8:	4604      	mov	r4, r0
	if (LCD->hi2c)  //I2C
 8005eea:	6908      	ldr	r0, [r1, #16]
void TFT_Driver::SSD1306_Init(void) {
 8005eec:	b084      	sub	sp, #16
	if (LCD->hi2c)  //I2C
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f000 819e 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005ef4:	f44f 462e 	mov.w	r6, #44544	; 0xae00
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005ef8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 8005efc:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f00:	2302      	movs	r3, #2
 8005f02:	7d09      	ldrb	r1, [r1, #20]
 8005f04:	aa03      	add	r2, sp, #12
 8005f06:	9500      	str	r5, [sp, #0]
 8005f08:	f7fd fe3a 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	6918      	ldr	r0, [r3, #16]
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f000 818d 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f1a:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f1e:	7d19      	ldrb	r1, [r3, #20]
 8005f20:	aa03      	add	r2, sp, #12
 8005f22:	2302      	movs	r3, #2
 8005f24:	9500      	str	r5, [sp, #0]
 8005f26:	f7fd fe2b 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f2a:	6821      	ldr	r1, [r4, #0]
 8005f2c:	6908      	ldr	r0, [r1, #16]
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	f000 817e 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005f34:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8005f38:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	7d09      	ldrb	r1, [r1, #20]
 8005f40:	aa03      	add	r2, sp, #12
 8005f42:	9500      	str	r5, [sp, #0]
 8005f44:	f7fd fe1c 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	6918      	ldr	r0, [r3, #16]
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f000 816f 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005f52:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 8005f56:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f5a:	7d19      	ldrb	r1, [r3, #20]
 8005f5c:	aa03      	add	r2, sp, #12
 8005f5e:	2302      	movs	r3, #2
 8005f60:	9500      	str	r5, [sp, #0]
 8005f62:	f7fd fe0d 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	6918      	ldr	r0, [r3, #16]
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f000 8160 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005f70:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8005f74:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f78:	7d19      	ldrb	r1, [r3, #20]
 8005f7a:	aa03      	add	r2, sp, #12
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	9500      	str	r5, [sp, #0]
 8005f80:	f7fd fdfe 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	6918      	ldr	r0, [r3, #16]
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	f000 8151 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005f94:	7d19      	ldrb	r1, [r3, #20]
 8005f96:	aa03      	add	r2, sp, #12
 8005f98:	2302      	movs	r3, #2
 8005f9a:	9500      	str	r5, [sp, #0]
 8005f9c:	f7fd fdf0 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	6918      	ldr	r0, [r3, #16]
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	f000 8143 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005faa:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005fae:	7d19      	ldrb	r1, [r3, #20]
 8005fb0:	aa03      	add	r2, sp, #12
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	9500      	str	r5, [sp, #0]
 8005fb6:	f7fd fde3 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	6918      	ldr	r0, [r3, #16]
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f000 8136 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005fc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fc8:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005fcc:	7d19      	ldrb	r1, [r3, #20]
 8005fce:	aa03      	add	r2, sp, #12
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	9500      	str	r5, [sp, #0]
 8005fd4:	f7fd fdd4 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	6918      	ldr	r0, [r3, #16]
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	f000 8127 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8005fe2:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8005fe6:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8005fea:	7d19      	ldrb	r1, [r3, #20]
 8005fec:	aa03      	add	r2, sp, #12
 8005fee:	2302      	movs	r3, #2
 8005ff0:	9500      	str	r5, [sp, #0]
 8005ff2:	f7fd fdc5 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8005ff6:	6821      	ldr	r1, [r4, #0]
 8005ff8:	6908      	ldr	r0, [r1, #16]
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	f000 8118 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006000:	f44f 467f 	mov.w	r6, #65280	; 0xff00
 8006004:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006008:	2302      	movs	r3, #2
 800600a:	7d09      	ldrb	r1, [r1, #20]
 800600c:	aa03      	add	r2, sp, #12
 800600e:	9500      	str	r5, [sp, #0]
 8006010:	f7fd fdb6 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	6918      	ldr	r0, [r3, #16]
 8006018:	2800      	cmp	r0, #0
 800601a:	f000 8109 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 800601e:	f44f 4221 	mov.w	r2, #41216	; 0xa100
 8006022:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006026:	7d19      	ldrb	r1, [r3, #20]
 8006028:	aa03      	add	r2, sp, #12
 800602a:	2302      	movs	r3, #2
 800602c:	9500      	str	r5, [sp, #0]
 800602e:	f7fd fda7 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	6918      	ldr	r0, [r3, #16]
 8006036:	2800      	cmp	r0, #0
 8006038:	f000 80fa 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 800603c:	f44f 4226 	mov.w	r2, #42496	; 0xa600
 8006040:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006044:	7d19      	ldrb	r1, [r3, #20]
 8006046:	aa03      	add	r2, sp, #12
 8006048:	2302      	movs	r3, #2
 800604a:	9500      	str	r5, [sp, #0]
 800604c:	f7fd fd98 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	6918      	ldr	r0, [r3, #16]
 8006054:	2800      	cmp	r0, #0
 8006056:	f000 80eb 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 800605a:	f44f 4228 	mov.w	r2, #43008	; 0xa800
 800605e:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006062:	7d19      	ldrb	r1, [r3, #20]
 8006064:	aa03      	add	r2, sp, #12
 8006066:	2302      	movs	r3, #2
 8006068:	9500      	str	r5, [sp, #0]
 800606a:	f7fd fd89 	bl	8003b80 <HAL_I2C_Master_Transmit>
	SSD1306_WRITECOMMAND(0xFF);
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)

	if (LCD->TFT_HEIGHT == 64)
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
	if (LCD->hi2c)  //I2C
 8006072:	6918      	ldr	r0, [r3, #16]
	if (LCD->TFT_HEIGHT == 64)
 8006074:	2a40      	cmp	r2, #64	; 0x40
 8006076:	f000 80dd 	beq.w	8006234 <_ZN10TFT_Driver12SSD1306_InitEv+0x350>
	if (LCD->hi2c)  //I2C
 800607a:	2800      	cmp	r0, #0
 800607c:	f000 80d8 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006080:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8006084:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006088:	7d19      	ldrb	r1, [r3, #20]
 800608a:	aa03      	add	r2, sp, #12
 800608c:	2302      	movs	r3, #2
 800608e:	9500      	str	r5, [sp, #0]
 8006090:	f7fd fd76 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006094:	6821      	ldr	r1, [r4, #0]
 8006096:	6908      	ldr	r0, [r1, #16]
 8006098:	2800      	cmp	r0, #0
 800609a:	f000 80c9 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 800609e:	f44f 4624 	mov.w	r6, #41984	; 0xa400
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80060a2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 80060a6:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80060aa:	2302      	movs	r3, #2
 80060ac:	7d09      	ldrb	r1, [r1, #20]
 80060ae:	aa03      	add	r2, sp, #12
 80060b0:	9500      	str	r5, [sp, #0]
 80060b2:	f7fd fd65 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	6918      	ldr	r0, [r3, #16]
 80060ba:	2800      	cmp	r0, #0
 80060bc:	f000 80b8 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80060c0:	f44f 4253 	mov.w	r2, #54016	; 0xd300
 80060c4:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80060c8:	7d19      	ldrb	r1, [r3, #20]
 80060ca:	aa03      	add	r2, sp, #12
 80060cc:	2302      	movs	r3, #2
 80060ce:	9500      	str	r5, [sp, #0]
 80060d0:	f7fd fd56 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	6918      	ldr	r0, [r3, #16]
 80060d8:	2800      	cmp	r0, #0
 80060da:	f000 80a9 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80060de:	2200      	movs	r2, #0
 80060e0:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80060e4:	7d19      	ldrb	r1, [r3, #20]
 80060e6:	aa03      	add	r2, sp, #12
 80060e8:	2302      	movs	r3, #2
 80060ea:	9500      	str	r5, [sp, #0]
 80060ec:	f7fd fd48 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	6918      	ldr	r0, [r3, #16]
 80060f4:	2800      	cmp	r0, #0
 80060f6:	f000 809b 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80060fa:	f44f 4255 	mov.w	r2, #54528	; 0xd500
 80060fe:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006102:	7d19      	ldrb	r1, [r3, #20]
 8006104:	aa03      	add	r2, sp, #12
 8006106:	2302      	movs	r3, #2
 8006108:	9500      	str	r5, [sp, #0]
 800610a:	f7fd fd39 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	6918      	ldr	r0, [r3, #16]
 8006112:	2800      	cmp	r0, #0
 8006114:	f000 808c 	beq.w	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006118:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800611c:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006120:	7d19      	ldrb	r1, [r3, #20]
 8006122:	aa03      	add	r2, sp, #12
 8006124:	2302      	movs	r3, #2
 8006126:	9500      	str	r5, [sp, #0]
 8006128:	f7fd fd2a 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	6918      	ldr	r0, [r3, #16]
 8006130:	2800      	cmp	r0, #0
 8006132:	d07d      	beq.n	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006134:	f44f 4259 	mov.w	r2, #55552	; 0xd900
 8006138:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 800613c:	7d19      	ldrb	r1, [r3, #20]
 800613e:	aa03      	add	r2, sp, #12
 8006140:	2302      	movs	r3, #2
 8006142:	9500      	str	r5, [sp, #0]
 8006144:	f7fd fd1c 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	6918      	ldr	r0, [r3, #16]
 800614c:	2800      	cmp	r0, #0
 800614e:	d06f      	beq.n	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006150:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8006154:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006158:	7d19      	ldrb	r1, [r3, #20]
 800615a:	aa03      	add	r2, sp, #12
 800615c:	2302      	movs	r3, #2
 800615e:	9500      	str	r5, [sp, #0]
 8006160:	f7fd fd0e 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	6918      	ldr	r0, [r3, #16]
 8006168:	2800      	cmp	r0, #0
 800616a:	d061      	beq.n	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 800616c:	f44f 425a 	mov.w	r2, #55808	; 0xda00
 8006170:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006174:	7d19      	ldrb	r1, [r3, #20]
 8006176:	aa03      	add	r2, sp, #12
 8006178:	2302      	movs	r3, #2
 800617a:	9500      	str	r5, [sp, #0]
 800617c:	f7fd fd00 	bl	8003b80 <HAL_I2C_Master_Transmit>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
	SSD1306_WRITECOMMAND(0x22); //

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
	if (LCD->TFT_HEIGHT == 64)
 8006180:	6821      	ldr	r1, [r4, #0]
 8006182:	684b      	ldr	r3, [r1, #4]
	if (LCD->hi2c)  //I2C
 8006184:	6908      	ldr	r0, [r1, #16]
	if (LCD->TFT_HEIGHT == 64)
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	d059      	beq.n	800623e <_ZN10TFT_Driver12SSD1306_InitEv+0x35a>
	if (LCD->hi2c)  //I2C
 800618a:	2800      	cmp	r0, #0
 800618c:	d050      	beq.n	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 800618e:	f44f 7600 	mov.w	r6, #512	; 0x200
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006192:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 8006196:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 800619a:	7d09      	ldrb	r1, [r1, #20]
 800619c:	2302      	movs	r3, #2
 800619e:	aa03      	add	r2, sp, #12
 80061a0:	9500      	str	r5, [sp, #0]
 80061a2:	f7fd fced 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 80061a6:	6821      	ldr	r1, [r4, #0]
 80061a8:	6908      	ldr	r0, [r1, #16]
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d040      	beq.n	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80061ae:	f44f 465b 	mov.w	r6, #56064	; 0xdb00
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80061b2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		dt[0] = 0;
 80061b6:	f8ad 600c 	strh.w	r6, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80061ba:	2302      	movs	r3, #2
 80061bc:	7d09      	ldrb	r1, [r1, #20]
 80061be:	aa03      	add	r2, sp, #12
 80061c0:	9500      	str	r5, [sp, #0]
 80061c2:	f7fd fcdd 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	6918      	ldr	r0, [r3, #16]
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d030      	beq.n	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80061ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061d2:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80061d6:	7d19      	ldrb	r1, [r3, #20]
 80061d8:	aa03      	add	r2, sp, #12
 80061da:	2302      	movs	r3, #2
 80061dc:	9500      	str	r5, [sp, #0]
 80061de:	f7fd fccf 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	6918      	ldr	r0, [r3, #16]
 80061e6:	b318      	cbz	r0, 8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 80061e8:	f44f 420d 	mov.w	r2, #36096	; 0x8d00
 80061ec:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 80061f0:	7d19      	ldrb	r1, [r3, #20]
 80061f2:	aa03      	add	r2, sp, #12
 80061f4:	2302      	movs	r3, #2
 80061f6:	9500      	str	r5, [sp, #0]
 80061f8:	f7fd fcc2 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6918      	ldr	r0, [r3, #16]
 8006200:	b1b0      	cbz	r0, 8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006202:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006206:	f8ad 200c 	strh.w	r2, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 800620a:	7d19      	ldrb	r1, [r3, #20]
 800620c:	aa03      	add	r2, sp, #12
 800620e:	2302      	movs	r3, #2
 8006210:	9500      	str	r5, [sp, #0]
 8006212:	f7fd fcb5 	bl	8003b80 <HAL_I2C_Master_Transmit>
	if (LCD->hi2c)  //I2C
 8006216:	6821      	ldr	r1, [r4, #0]
 8006218:	6908      	ldr	r0, [r1, #16]
 800621a:	b148      	cbz	r0, 8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 800621c:	f44f 442f 	mov.w	r4, #44800	; 0xaf00
 8006220:	f8ad 400c 	strh.w	r4, [sp, #12]
		HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, dt, 2, 1000);
 8006224:	7d09      	ldrb	r1, [r1, #20]
 8006226:	2302      	movs	r3, #2
 8006228:	aa03      	add	r2, sp, #12
 800622a:	9500      	str	r5, [sp, #0]
 800622c:	f7fd fca8 	bl	8003b80 <HAL_I2C_Master_Transmit>
		CS_1;
    #endif
	/* Set default values */
	//uTFT.CurrentX = 0;
	//uTFT.CurrentY = 0;
}
 8006230:	b004      	add	sp, #16
 8006232:	bd70      	pop	{r4, r5, r6, pc}
	if (LCD->hi2c)  //I2C
 8006234:	2800      	cmp	r0, #0
 8006236:	d0fb      	beq.n	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006238:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 800623c:	e722      	b.n	8006084 <_ZN10TFT_Driver12SSD1306_InitEv+0x1a0>
	if (LCD->hi2c)  //I2C
 800623e:	2800      	cmp	r0, #0
 8006240:	d0f6      	beq.n	8006230 <_ZN10TFT_Driver12SSD1306_InitEv+0x34c>
		dt[0] = 0;
 8006242:	f44f 5690 	mov.w	r6, #4608	; 0x1200
 8006246:	e7a6      	b.n	8006196 <_ZN10TFT_Driver12SSD1306_InitEv+0x2b2>

08006248 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv>:

//490uS-72MHz
void TFT_Driver::SSD1306_UpdateScreen(void) {
	uint8_t *p;

	if (LCD->hi2c)  //I2C
 8006248:	6803      	ldr	r3, [r0, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	b902      	cbnz	r2, 8006250 <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x8>
 800624e:	4770      	bx	lr
		//HAL_Delay(10);
#endif

		p = &LCD->buffer8[0];
		p--;
		*p = 0x40;
 8006250:	2140      	movs	r1, #64	; 0x40
void TFT_Driver::SSD1306_UpdateScreen(void) {
 8006252:	b510      	push	{r4, lr}

		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8006254:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		p = &LCD->buffer8[0];
 8006258:	69da      	ldr	r2, [r3, #28]
void TFT_Driver::SSD1306_UpdateScreen(void) {
 800625a:	b082      	sub	sp, #8
		*p = 0x40;
 800625c:	f802 1c01 	strb.w	r1, [r2, #-1]
		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8006260:	6800      	ldr	r0, [r0, #0]
 8006262:	3a01      	subs	r2, #1
				(LCD->TFT_HEIGHT * LCD->TFT_WIDTH) / 8 + 1, 1000);
 8006264:	e9d0 1300 	ldrd	r1, r3, [r0]
 8006268:	fb01 f303 	mul.w	r3, r1, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	bfb8      	it	lt
 8006270:	3307      	addlt	r3, #7
 8006272:	10db      	asrs	r3, r3, #3
		res = HAL_I2C_Master_Transmit(LCD->hi2c, LCD->I2C_Adress, p,
 8006274:	3301      	adds	r3, #1
 8006276:	7d01      	ldrb	r1, [r0, #20]
 8006278:	b29b      	uxth	r3, r3
 800627a:	6900      	ldr	r0, [r0, #16]
 800627c:	9400      	str	r4, [sp, #0]
 800627e:	f7fd fc7f 	bl	8003b80 <HAL_I2C_Master_Transmit>
 8006282:	4b02      	ldr	r3, [pc, #8]	; (800628c <_ZN10TFT_Driver20SSD1306_UpdateScreenEv+0x44>)
 8006284:	7018      	strb	r0, [r3, #0]

#endif

	}

}
 8006286:	b002      	add	sp, #8
 8006288:	bd10      	pop	{r4, pc}
 800628a:	bf00      	nop
 800628c:	20000940 	.word	0x20000940

08006290 <_ZN3TFT8SetPixelEllt>:
#include "TFT_config.h"

#include <math.h>
#include <stdio.h>

void TFT::SetPixel(int32_t x, int32_t y, uint16_t color) {
 8006290:	b410      	push	{r4}

	if ((x < 0) || (y < 0) || (x >= LCD->TFT_WIDTH) || (y >= LCD->TFT_HEIGHT))
 8006292:	ea51 0402 	orrs.w	r4, r1, r2
 8006296:	d40c      	bmi.n	80062b2 <_ZN3TFT8SetPixelEllt+0x22>
 8006298:	6800      	ldr	r0, [r0, #0]
 800629a:	6804      	ldr	r4, [r0, #0]
 800629c:	428c      	cmp	r4, r1
 800629e:	dd08      	ble.n	80062b2 <_ZN3TFT8SetPixelEllt+0x22>
 80062a0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80062a4:	4594      	cmp	ip, r2
 80062a6:	dd04      	ble.n	80062b2 <_ZN3TFT8SetPixelEllt+0x22>
		return;

#if defined(TFT_USE_1BIT)
#if !defined (TFT_USE_ONLY_ONE_BIT_COLOR)
  if (LCD->Bit == 1)
 80062a8:	f890 c009 	ldrb.w	ip, [r0, #9]
 80062ac:	f1bc 0f01 	cmp.w	ip, #1
 80062b0:	d001      	beq.n	80062b6 <_ZN3TFT8SetPixelEllt+0x26>
		LCD->buffer16[x + y * LCD->TFT_WIDTH] = color;
		return;
	}
#endif

}
 80062b2:	bc10      	pop	{r4}
 80062b4:	4770      	bx	lr
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] |= 1 << (y % 8);
 80062b6:	69c0      	ldr	r0, [r0, #28]
		if (color != 0)
 80062b8:	b163      	cbz	r3, 80062d4 <_ZN3TFT8SetPixelEllt+0x44>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] |= 1 << (y % 8);
 80062ba:	10d3      	asrs	r3, r2, #3
 80062bc:	fb04 1303 	mla	r3, r4, r3, r1
 80062c0:	f002 0207 	and.w	r2, r2, #7
 80062c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80062c8:	5cc2      	ldrb	r2, [r0, r3]
 80062ca:	ea4c 0c02 	orr.w	ip, ip, r2
 80062ce:	f800 c003 	strb.w	ip, [r0, r3]
 80062d2:	e7ee      	b.n	80062b2 <_ZN3TFT8SetPixelEllt+0x22>
			LCD->buffer8[x + (y / 8) * LCD->TFT_WIDTH] &= ~(1 << (y % 8));
 80062d4:	10d3      	asrs	r3, r2, #3
 80062d6:	fb04 1103 	mla	r1, r4, r3, r1
 80062da:	f002 0207 	and.w	r2, r2, #7
 80062de:	5c43      	ldrb	r3, [r0, r1]
 80062e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80062e4:	ea23 030c 	bic.w	r3, r3, ip
 80062e8:	5443      	strb	r3, [r0, r1]
 80062ea:	e7e2      	b.n	80062b2 <_ZN3TFT8SetPixelEllt+0x22>

080062ec <_ZN3TFT5Fill1Et>:
	if (color)
		c = 0xFF;
	else
		c = 0;

	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 80062ec:	6802      	ldr	r2, [r0, #0]
	if (color)
 80062ee:	f1b1 0c00 	subs.w	ip, r1, #0
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 80062f2:	e9d2 1300 	ldrd	r1, r3, [r2]
 80062f6:	fb01 f303 	mul.w	r3, r1, r3
	if (color)
 80062fa:	bf18      	it	ne
 80062fc:	f04f 0c01 	movne.w	ip, #1
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8006300:	2b07      	cmp	r3, #7
 8006302:	dd16      	ble.n	8006332 <_ZN3TFT5Fill1Et+0x46>
 8006304:	2100      	movs	r1, #0
void TFT::Fill1(uint16_t color) {
 8006306:	b410      	push	{r4}
 8006308:	f1cc 0c00 	rsb	ip, ip, #0
 800630c:	fa5f fc8c 	uxtb.w	ip, ip
		LCD->buffer8[i] = c;
 8006310:	69d3      	ldr	r3, [r2, #28]
 8006312:	f803 c001 	strb.w	ip, [r3, r1]
	for (int32_t i = 0; i < (LCD->TFT_HEIGHT * LCD->TFT_WIDTH / 8); i++)
 8006316:	6802      	ldr	r2, [r0, #0]
 8006318:	3101      	adds	r1, #1
 800631a:	e9d2 4300 	ldrd	r4, r3, [r2]
 800631e:	fb04 f303 	mul.w	r3, r4, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	bfb8      	it	lt
 8006326:	3307      	addlt	r3, #7
 8006328:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
 800632c:	dbf0      	blt.n	8006310 <_ZN3TFT5Fill1Et+0x24>
	return;
}
 800632e:	bc10      	pop	{r4}
 8006330:	4770      	bx	lr
 8006332:	4770      	bx	lr

08006334 <_ZN3TFT5LineHElllt>:
		}
	}

}

void TFT::LineH(int32_t Y, int32_t X1, int32_t X2, uint16_t color) {
 8006334:	b5f0      	push	{r4, r5, r6, r7, lr}

	int32_t i;

	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 8006336:	6805      	ldr	r5, [r0, #0]
void TFT::LineH(int32_t Y, int32_t X1, int32_t X2, uint16_t color) {
 8006338:	f8bd c014 	ldrh.w	ip, [sp, #20]
	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 800633c:	682c      	ldr	r4, [r5, #0]
	if (Y >= LCD->TFT_HEIGHT) return;
 800633e:	686e      	ldr	r6, [r5, #4]
	if (X2 >= LCD->TFT_WIDTH) X2 = LCD->TFT_WIDTH - 1;
 8006340:	429c      	cmp	r4, r3
 8006342:	bfd8      	it	le
 8006344:	f104 33ff 	addle.w	r3, r4, #4294967295
	if (Y >= LCD->TFT_HEIGHT) return;
 8006348:	428e      	cmp	r6, r1
 800634a:	dd0d      	ble.n	8006368 <_ZN3TFT5LineHElllt+0x34>

	if ((LCD->Bit) == 1) {
 800634c:	f895 e009 	ldrb.w	lr, [r5, #9]
 8006350:	f1be 0f01 	cmp.w	lr, #1
 8006354:	d042      	beq.n	80063dc <_ZN3TFT5LineHElllt+0xa8>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
		}
		return;
	}

	if ((LCD->Bit) == 16) {
 8006356:	f1be 0f10 	cmp.w	lr, #16
 800635a:	d006      	beq.n	800636a <_ZN3TFT5LineHElllt+0x36>
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
		}
		return;
	}

	if ((LCD->Bit) == 4) {
 800635c:	f1be 0f04 	cmp.w	lr, #4
 8006360:	d065      	beq.n	800642e <_ZN3TFT5LineHElllt+0xfa>
			}
		}
		return;
	}

	if ((LCD->Bit) == 8) {
 8006362:	f1be 0f08 	cmp.w	lr, #8
 8006366:	d021      	beq.n	80063ac <_ZN3TFT5LineHElllt+0x78>
		for (int32_t i = X1; i <= X2; i++)
			LCD->buffer8[i + YY] = color;
		return;
	}

}
 8006368:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800636a:	4293      	cmp	r3, r2
 800636c:	dbfc      	blt.n	8006368 <_ZN3TFT5LineHElllt+0x34>
 800636e:	f1c2 0601 	rsb	r6, r2, #1
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 8006372:	fb04 f101 	mul.w	r1, r4, r1
 8006376:	69a8      	ldr	r0, [r5, #24]
 8006378:	441e      	add	r6, r3
 800637a:	d013      	beq.n	80063a4 <_ZN3TFT5LineHElllt+0x70>
 800637c:	2400      	movs	r4, #0
 800637e:	188b      	adds	r3, r1, r2
 8006380:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006384:	0875      	lsrs	r5, r6, #1
 8006386:	f36c 040f 	bfi	r4, ip, #0, #16
 800638a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800638e:	f36c 441f 	bfi	r4, ip, #16, #16
 8006392:	f843 4b04 	str.w	r4, [r3], #4
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 8006396:	42ab      	cmp	r3, r5
 8006398:	d1fb      	bne.n	8006392 <_ZN3TFT5LineHElllt+0x5e>
 800639a:	f026 0301 	bic.w	r3, r6, #1
 800639e:	429e      	cmp	r6, r3
 80063a0:	441a      	add	r2, r3
 80063a2:	d0e1      	beq.n	8006368 <_ZN3TFT5LineHElllt+0x34>
			LCD->buffer16[i + Y * LCD->TFT_WIDTH] = color;
 80063a4:	4411      	add	r1, r2
 80063a6:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
}
 80063aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (int32_t i = X1; i <= X2; i++)
 80063ac:	4293      	cmp	r3, r2
		int YY = Y * LCD->TFT_WIDTH;
 80063ae:	fb01 f404 	mul.w	r4, r1, r4
		for (int32_t i = X1; i <= X2; i++)
 80063b2:	dbd9      	blt.n	8006368 <_ZN3TFT5LineHElllt+0x34>
			LCD->buffer8[i + YY] = color;
 80063b4:	69e9      	ldr	r1, [r5, #28]
 80063b6:	fa5f fc8c 	uxtb.w	ip, ip
 80063ba:	4421      	add	r1, r4
 80063bc:	f801 c002 	strb.w	ip, [r1, r2]
		for (int32_t i = X1; i <= X2; i++)
 80063c0:	3201      	adds	r2, #1
 80063c2:	4293      	cmp	r3, r2
 80063c4:	dbd0      	blt.n	8006368 <_ZN3TFT5LineHElllt+0x34>
 80063c6:	4422      	add	r2, r4
 80063c8:	3401      	adds	r4, #1
 80063ca:	4423      	add	r3, r4
			LCD->buffer8[i + YY] = color;
 80063cc:	6801      	ldr	r1, [r0, #0]
 80063ce:	69c9      	ldr	r1, [r1, #28]
 80063d0:	f801 c002 	strb.w	ip, [r1, r2]
		for (int32_t i = X1; i <= X2; i++)
 80063d4:	3201      	adds	r2, #1
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d1f8      	bne.n	80063cc <_ZN3TFT5LineHElllt+0x98>
}
 80063da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (color == 1) {
 80063dc:	f1bc 0f01 	cmp.w	ip, #1
 80063e0:	d07c      	beq.n	80064dc <_ZN3TFT5LineHElllt+0x1a8>
			for (i = X1; i <= X2; i++)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	dbc0      	blt.n	8006368 <_ZN3TFT5LineHElllt+0x34>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 80063e6:	2601      	movs	r6, #1
 80063e8:	468c      	mov	ip, r1
 80063ea:	2900      	cmp	r1, #0
 80063ec:	bfb8      	it	lt
 80063ee:	f101 0c07 	addlt.w	ip, r1, #7
 80063f2:	f001 0107 	and.w	r1, r1, #7
 80063f6:	408e      	lsls	r6, r1
 80063f8:	43f6      	mvns	r6, r6
 80063fa:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80063fe:	fb0c 2404 	mla	r4, ip, r4, r2
 8006402:	69ed      	ldr	r5, [r5, #28]
			for (i = X1; i <= X2; i++)
 8006404:	3201      	adds	r2, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 8006406:	5d29      	ldrb	r1, [r5, r4]
			for (i = X1; i <= X2; i++)
 8006408:	4293      	cmp	r3, r2
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 800640a:	ea01 0106 	and.w	r1, r1, r6
 800640e:	5529      	strb	r1, [r5, r4]
 8006410:	b2f6      	uxtb	r6, r6
			for (i = X1; i <= X2; i++)
 8006412:	dba9      	blt.n	8006368 <_ZN3TFT5LineHElllt+0x34>
 8006414:	3301      	adds	r3, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 8006416:	6804      	ldr	r4, [r0, #0]
 8006418:	6821      	ldr	r1, [r4, #0]
 800641a:	69e5      	ldr	r5, [r4, #28]
 800641c:	fb01 210c 	mla	r1, r1, ip, r2
 8006420:	5c6c      	ldrb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 8006422:	3201      	adds	r2, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 8006424:	4034      	ands	r4, r6
			for (i = X1; i <= X2; i++)
 8006426:	4293      	cmp	r3, r2
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] &= ~(1 << (Y % 8));
 8006428:	546c      	strb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 800642a:	d1f4      	bne.n	8006416 <_ZN3TFT5LineHElllt+0xe2>
}
 800642c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 800642e:	4293      	cmp	r3, r2
 8006430:	db9a      	blt.n	8006368 <_ZN3TFT5LineHElllt+0x34>
								& (0x0F)) | (color << 4);
 8006432:	ea4f 1e0c 	mov.w	lr, ip, lsl #4
 8006436:	2901      	cmp	r1, #1
 8006438:	fa4f fe8e 	sxtb.w	lr, lr
 800643c:	f103 0301 	add.w	r3, r3, #1
 8006440:	d00c      	beq.n	800645c <_ZN3TFT5LineHElllt+0x128>
 8006442:	e035      	b.n	80064b0 <_ZN3TFT5LineHElllt+0x17c>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8006444:	69ed      	ldr	r5, [r5, #28]
								& (0x0F)) | (color << 4);
 8006446:	5c6c      	ldrb	r4, [r5, r1]
 8006448:	f004 040f 	and.w	r4, r4, #15
 800644c:	ea4e 0404 	orr.w	r4, lr, r4
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8006450:	546c      	strb	r4, [r5, r1]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 8006452:	3201      	adds	r2, #1
 8006454:	429a      	cmp	r2, r3
 8006456:	d087      	beq.n	8006368 <_ZN3TFT5LineHElllt+0x34>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 8006458:	6805      	ldr	r5, [r0, #0]
 800645a:	682c      	ldr	r4, [r5, #0]
 800645c:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 8006460:	eb04 76d4 	add.w	r6, r4, r4, lsr #31
 8006464:	1049      	asrs	r1, r1, #1
 8006466:	eb01 0166 	add.w	r1, r1, r6, asr #1
			if (i % 2 == 0) {
 800646a:	07d6      	lsls	r6, r2, #31
 800646c:	d5ea      	bpl.n	8006444 <_ZN3TFT5LineHElllt+0x110>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 800646e:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 8006472:	69ed      	ldr	r5, [r5, #28]
 8006474:	1049      	asrs	r1, r1, #1
 8006476:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800647a:	eb01 0464 	add.w	r4, r1, r4, asr #1
								& (0xF0)) | color;
 800647e:	5d29      	ldrb	r1, [r5, r4]
 8006480:	f021 010f 	bic.w	r1, r1, #15
 8006484:	ea41 010c 	orr.w	r1, r1, ip
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 8006488:	5529      	strb	r1, [r5, r4]
 800648a:	e7e2      	b.n	8006452 <_ZN3TFT5LineHElllt+0x11e>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 800648c:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 8006490:	1064      	asrs	r4, r4, #1
 8006492:	fb01 4406 	mla	r4, r1, r6, r4
 8006496:	69ef      	ldr	r7, [r5, #28]
								& (0x0F)) | (color << 4);
 8006498:	5d3d      	ldrb	r5, [r7, r4]
 800649a:	f005 050f 	and.w	r5, r5, #15
 800649e:	ea4e 0505 	orr.w	r5, lr, r5
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 80064a2:	553d      	strb	r5, [r7, r4]
		for (i = X1; i <= X2; i++) //uTFT_SetPixel(X, i, color);
 80064a4:	3201      	adds	r2, #1
 80064a6:	429a      	cmp	r2, r3
 80064a8:	f43f af5e 	beq.w	8006368 <_ZN3TFT5LineHElllt+0x34>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80064ac:	6805      	ldr	r5, [r0, #0]
 80064ae:	682c      	ldr	r4, [r5, #0]
 80064b0:	eb04 76d4 	add.w	r6, r4, r4, lsr #31
			if (i % 2 == 0) {
 80064b4:	07d7      	lsls	r7, r2, #31
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80064b6:	ea4f 0666 	mov.w	r6, r6, asr #1
			if (i % 2 == 0) {
 80064ba:	d5e7      	bpl.n	800648c <_ZN3TFT5LineHElllt+0x158>
						(LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)]
 80064bc:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80064c0:	1066      	asrs	r6, r4, #1
 80064c2:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 80064c6:	1064      	asrs	r4, r4, #1
 80064c8:	fb01 4406 	mla	r4, r1, r6, r4
 80064cc:	69ef      	ldr	r7, [r5, #28]
								& (0xF0)) | color;
 80064ce:	5d3d      	ldrb	r5, [r7, r4]
 80064d0:	f025 050f 	bic.w	r5, r5, #15
 80064d4:	ea45 050c 	orr.w	r5, r5, ip
				LCD->buffer8[i / 2 + Y * ((LCD->TFT_WIDTH) / 2)] =
 80064d8:	553d      	strb	r5, [r7, r4]
 80064da:	e7e3      	b.n	80064a4 <_ZN3TFT5LineHElllt+0x170>
			for (i = X1; i <= X2; i++)
 80064dc:	4293      	cmp	r3, r2
 80064de:	f6ff af43 	blt.w	8006368 <_ZN3TFT5LineHElllt+0x34>
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 80064e2:	460e      	mov	r6, r1
 80064e4:	f04f 0c01 	mov.w	ip, #1
 80064e8:	2900      	cmp	r1, #0
 80064ea:	bfb8      	it	lt
 80064ec:	1dce      	addlt	r6, r1, #7
 80064ee:	10f6      	asrs	r6, r6, #3
 80064f0:	fb06 2404 	mla	r4, r6, r4, r2
 80064f4:	69ed      	ldr	r5, [r5, #28]
 80064f6:	f001 0107 	and.w	r1, r1, #7
 80064fa:	fa0c fc01 	lsl.w	ip, ip, r1
 80064fe:	5d29      	ldrb	r1, [r5, r4]
			for (i = X1; i <= X2; i++)
 8006500:	3201      	adds	r2, #1
 8006502:	fa5f fc8c 	uxtb.w	ip, ip
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 8006506:	ea4c 0101 	orr.w	r1, ip, r1
			for (i = X1; i <= X2; i++)
 800650a:	4293      	cmp	r3, r2
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 800650c:	5529      	strb	r1, [r5, r4]
			for (i = X1; i <= X2; i++)
 800650e:	f6ff af2b 	blt.w	8006368 <_ZN3TFT5LineHElllt+0x34>
 8006512:	3301      	adds	r3, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 8006514:	6804      	ldr	r4, [r0, #0]
 8006516:	6821      	ldr	r1, [r4, #0]
 8006518:	69e5      	ldr	r5, [r4, #28]
 800651a:	fb01 2106 	mla	r1, r1, r6, r2
 800651e:	5c6c      	ldrb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 8006520:	3201      	adds	r2, #1
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 8006522:	ea4c 0404 	orr.w	r4, ip, r4
			for (i = X1; i <= X2; i++)
 8006526:	429a      	cmp	r2, r3
				LCD->buffer8[i + (Y / 8) * LCD->TFT_WIDTH] |= 1 << (Y % 8);
 8006528:	546c      	strb	r4, [r5, r1]
			for (i = X1; i <= X2; i++)
 800652a:	d1f3      	bne.n	8006514 <_ZN3TFT5LineHElllt+0x1e0>
}
 800652c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800652e:	bf00      	nop

08006530 <__cvt>:
 8006530:	2b00      	cmp	r3, #0
 8006532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006536:	461f      	mov	r7, r3
 8006538:	bfbb      	ittet	lt
 800653a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800653e:	461f      	movlt	r7, r3
 8006540:	2300      	movge	r3, #0
 8006542:	232d      	movlt	r3, #45	; 0x2d
 8006544:	b088      	sub	sp, #32
 8006546:	4614      	mov	r4, r2
 8006548:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800654a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800654c:	7013      	strb	r3, [r2, #0]
 800654e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006550:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006554:	f023 0820 	bic.w	r8, r3, #32
 8006558:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800655c:	d005      	beq.n	800656a <__cvt+0x3a>
 800655e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006562:	d100      	bne.n	8006566 <__cvt+0x36>
 8006564:	3501      	adds	r5, #1
 8006566:	2302      	movs	r3, #2
 8006568:	e000      	b.n	800656c <__cvt+0x3c>
 800656a:	2303      	movs	r3, #3
 800656c:	aa07      	add	r2, sp, #28
 800656e:	9204      	str	r2, [sp, #16]
 8006570:	aa06      	add	r2, sp, #24
 8006572:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006576:	e9cd 3500 	strd	r3, r5, [sp]
 800657a:	4622      	mov	r2, r4
 800657c:	463b      	mov	r3, r7
 800657e:	f000 fe73 	bl	8007268 <_dtoa_r>
 8006582:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006586:	4606      	mov	r6, r0
 8006588:	d102      	bne.n	8006590 <__cvt+0x60>
 800658a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800658c:	07db      	lsls	r3, r3, #31
 800658e:	d522      	bpl.n	80065d6 <__cvt+0xa6>
 8006590:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006594:	eb06 0905 	add.w	r9, r6, r5
 8006598:	d110      	bne.n	80065bc <__cvt+0x8c>
 800659a:	7833      	ldrb	r3, [r6, #0]
 800659c:	2b30      	cmp	r3, #48	; 0x30
 800659e:	d10a      	bne.n	80065b6 <__cvt+0x86>
 80065a0:	2200      	movs	r2, #0
 80065a2:	2300      	movs	r3, #0
 80065a4:	4620      	mov	r0, r4
 80065a6:	4639      	mov	r1, r7
 80065a8:	f7fa f9fe 	bl	80009a8 <__aeabi_dcmpeq>
 80065ac:	b918      	cbnz	r0, 80065b6 <__cvt+0x86>
 80065ae:	f1c5 0501 	rsb	r5, r5, #1
 80065b2:	f8ca 5000 	str.w	r5, [sl]
 80065b6:	f8da 3000 	ldr.w	r3, [sl]
 80065ba:	4499      	add	r9, r3
 80065bc:	2200      	movs	r2, #0
 80065be:	2300      	movs	r3, #0
 80065c0:	4620      	mov	r0, r4
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7fa f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80065c8:	b108      	cbz	r0, 80065ce <__cvt+0x9e>
 80065ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80065ce:	2230      	movs	r2, #48	; 0x30
 80065d0:	9b07      	ldr	r3, [sp, #28]
 80065d2:	454b      	cmp	r3, r9
 80065d4:	d307      	bcc.n	80065e6 <__cvt+0xb6>
 80065d6:	4630      	mov	r0, r6
 80065d8:	9b07      	ldr	r3, [sp, #28]
 80065da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065dc:	1b9b      	subs	r3, r3, r6
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	b008      	add	sp, #32
 80065e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	9107      	str	r1, [sp, #28]
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	e7f0      	b.n	80065d0 <__cvt+0xa0>

080065ee <__exponent>:
 80065ee:	4603      	mov	r3, r0
 80065f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f2:	2900      	cmp	r1, #0
 80065f4:	f803 2b02 	strb.w	r2, [r3], #2
 80065f8:	bfb6      	itet	lt
 80065fa:	222d      	movlt	r2, #45	; 0x2d
 80065fc:	222b      	movge	r2, #43	; 0x2b
 80065fe:	4249      	neglt	r1, r1
 8006600:	2909      	cmp	r1, #9
 8006602:	7042      	strb	r2, [r0, #1]
 8006604:	dd2a      	ble.n	800665c <__exponent+0x6e>
 8006606:	f10d 0207 	add.w	r2, sp, #7
 800660a:	4617      	mov	r7, r2
 800660c:	260a      	movs	r6, #10
 800660e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006612:	4694      	mov	ip, r2
 8006614:	fb06 1415 	mls	r4, r6, r5, r1
 8006618:	3430      	adds	r4, #48	; 0x30
 800661a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800661e:	460c      	mov	r4, r1
 8006620:	2c63      	cmp	r4, #99	; 0x63
 8006622:	4629      	mov	r1, r5
 8006624:	f102 32ff 	add.w	r2, r2, #4294967295
 8006628:	dcf1      	bgt.n	800660e <__exponent+0x20>
 800662a:	3130      	adds	r1, #48	; 0x30
 800662c:	f1ac 0402 	sub.w	r4, ip, #2
 8006630:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006634:	4622      	mov	r2, r4
 8006636:	1c41      	adds	r1, r0, #1
 8006638:	42ba      	cmp	r2, r7
 800663a:	d30a      	bcc.n	8006652 <__exponent+0x64>
 800663c:	f10d 0209 	add.w	r2, sp, #9
 8006640:	eba2 020c 	sub.w	r2, r2, ip
 8006644:	42bc      	cmp	r4, r7
 8006646:	bf88      	it	hi
 8006648:	2200      	movhi	r2, #0
 800664a:	4413      	add	r3, r2
 800664c:	1a18      	subs	r0, r3, r0
 800664e:	b003      	add	sp, #12
 8006650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006652:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006656:	f801 5f01 	strb.w	r5, [r1, #1]!
 800665a:	e7ed      	b.n	8006638 <__exponent+0x4a>
 800665c:	2330      	movs	r3, #48	; 0x30
 800665e:	3130      	adds	r1, #48	; 0x30
 8006660:	7083      	strb	r3, [r0, #2]
 8006662:	70c1      	strb	r1, [r0, #3]
 8006664:	1d03      	adds	r3, r0, #4
 8006666:	e7f1      	b.n	800664c <__exponent+0x5e>

08006668 <_printf_float>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	b091      	sub	sp, #68	; 0x44
 800666e:	460c      	mov	r4, r1
 8006670:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006674:	4616      	mov	r6, r2
 8006676:	461f      	mov	r7, r3
 8006678:	4605      	mov	r5, r0
 800667a:	f000 fce5 	bl	8007048 <_localeconv_r>
 800667e:	6803      	ldr	r3, [r0, #0]
 8006680:	4618      	mov	r0, r3
 8006682:	9309      	str	r3, [sp, #36]	; 0x24
 8006684:	f7f9 fd64 	bl	8000150 <strlen>
 8006688:	2300      	movs	r3, #0
 800668a:	930e      	str	r3, [sp, #56]	; 0x38
 800668c:	f8d8 3000 	ldr.w	r3, [r8]
 8006690:	900a      	str	r0, [sp, #40]	; 0x28
 8006692:	3307      	adds	r3, #7
 8006694:	f023 0307 	bic.w	r3, r3, #7
 8006698:	f103 0208 	add.w	r2, r3, #8
 800669c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80066a0:	f8d4 b000 	ldr.w	fp, [r4]
 80066a4:	f8c8 2000 	str.w	r2, [r8]
 80066a8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80066ac:	4652      	mov	r2, sl
 80066ae:	4643      	mov	r3, r8
 80066b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066b4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80066b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ba:	f04f 32ff 	mov.w	r2, #4294967295
 80066be:	4650      	mov	r0, sl
 80066c0:	4b9c      	ldr	r3, [pc, #624]	; (8006934 <_printf_float+0x2cc>)
 80066c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066c4:	f7fa f9a2 	bl	8000a0c <__aeabi_dcmpun>
 80066c8:	bb70      	cbnz	r0, 8006728 <_printf_float+0xc0>
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295
 80066ce:	4650      	mov	r0, sl
 80066d0:	4b98      	ldr	r3, [pc, #608]	; (8006934 <_printf_float+0x2cc>)
 80066d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066d4:	f7fa f97c 	bl	80009d0 <__aeabi_dcmple>
 80066d8:	bb30      	cbnz	r0, 8006728 <_printf_float+0xc0>
 80066da:	2200      	movs	r2, #0
 80066dc:	2300      	movs	r3, #0
 80066de:	4650      	mov	r0, sl
 80066e0:	4641      	mov	r1, r8
 80066e2:	f7fa f96b 	bl	80009bc <__aeabi_dcmplt>
 80066e6:	b110      	cbz	r0, 80066ee <_printf_float+0x86>
 80066e8:	232d      	movs	r3, #45	; 0x2d
 80066ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ee:	4a92      	ldr	r2, [pc, #584]	; (8006938 <_printf_float+0x2d0>)
 80066f0:	4b92      	ldr	r3, [pc, #584]	; (800693c <_printf_float+0x2d4>)
 80066f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80066f6:	bf94      	ite	ls
 80066f8:	4690      	movls	r8, r2
 80066fa:	4698      	movhi	r8, r3
 80066fc:	2303      	movs	r3, #3
 80066fe:	f04f 0a00 	mov.w	sl, #0
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	f02b 0304 	bic.w	r3, fp, #4
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	4633      	mov	r3, r6
 800670c:	4621      	mov	r1, r4
 800670e:	4628      	mov	r0, r5
 8006710:	9700      	str	r7, [sp, #0]
 8006712:	aa0f      	add	r2, sp, #60	; 0x3c
 8006714:	f000 f9d6 	bl	8006ac4 <_printf_common>
 8006718:	3001      	adds	r0, #1
 800671a:	f040 8090 	bne.w	800683e <_printf_float+0x1d6>
 800671e:	f04f 30ff 	mov.w	r0, #4294967295
 8006722:	b011      	add	sp, #68	; 0x44
 8006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006728:	4652      	mov	r2, sl
 800672a:	4643      	mov	r3, r8
 800672c:	4650      	mov	r0, sl
 800672e:	4641      	mov	r1, r8
 8006730:	f7fa f96c 	bl	8000a0c <__aeabi_dcmpun>
 8006734:	b148      	cbz	r0, 800674a <_printf_float+0xe2>
 8006736:	f1b8 0f00 	cmp.w	r8, #0
 800673a:	bfb8      	it	lt
 800673c:	232d      	movlt	r3, #45	; 0x2d
 800673e:	4a80      	ldr	r2, [pc, #512]	; (8006940 <_printf_float+0x2d8>)
 8006740:	bfb8      	it	lt
 8006742:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006746:	4b7f      	ldr	r3, [pc, #508]	; (8006944 <_printf_float+0x2dc>)
 8006748:	e7d3      	b.n	80066f2 <_printf_float+0x8a>
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	d142      	bne.n	80067da <_printf_float+0x172>
 8006754:	2306      	movs	r3, #6
 8006756:	6063      	str	r3, [r4, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	9206      	str	r2, [sp, #24]
 800675c:	aa0e      	add	r2, sp, #56	; 0x38
 800675e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006762:	aa0d      	add	r2, sp, #52	; 0x34
 8006764:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006768:	9203      	str	r2, [sp, #12]
 800676a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800676e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006772:	6023      	str	r3, [r4, #0]
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	4652      	mov	r2, sl
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4628      	mov	r0, r5
 800677c:	4643      	mov	r3, r8
 800677e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006780:	f7ff fed6 	bl	8006530 <__cvt>
 8006784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006786:	4680      	mov	r8, r0
 8006788:	2947      	cmp	r1, #71	; 0x47
 800678a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800678c:	d108      	bne.n	80067a0 <_printf_float+0x138>
 800678e:	1cc8      	adds	r0, r1, #3
 8006790:	db02      	blt.n	8006798 <_printf_float+0x130>
 8006792:	6863      	ldr	r3, [r4, #4]
 8006794:	4299      	cmp	r1, r3
 8006796:	dd40      	ble.n	800681a <_printf_float+0x1b2>
 8006798:	f1a9 0902 	sub.w	r9, r9, #2
 800679c:	fa5f f989 	uxtb.w	r9, r9
 80067a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067a4:	d81f      	bhi.n	80067e6 <_printf_float+0x17e>
 80067a6:	464a      	mov	r2, r9
 80067a8:	3901      	subs	r1, #1
 80067aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067ae:	910d      	str	r1, [sp, #52]	; 0x34
 80067b0:	f7ff ff1d 	bl	80065ee <__exponent>
 80067b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067b6:	4682      	mov	sl, r0
 80067b8:	1813      	adds	r3, r2, r0
 80067ba:	2a01      	cmp	r2, #1
 80067bc:	6123      	str	r3, [r4, #16]
 80067be:	dc02      	bgt.n	80067c6 <_printf_float+0x15e>
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	07d2      	lsls	r2, r2, #31
 80067c4:	d501      	bpl.n	80067ca <_printf_float+0x162>
 80067c6:	3301      	adds	r3, #1
 80067c8:	6123      	str	r3, [r4, #16]
 80067ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d09b      	beq.n	800670a <_printf_float+0xa2>
 80067d2:	232d      	movs	r3, #45	; 0x2d
 80067d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d8:	e797      	b.n	800670a <_printf_float+0xa2>
 80067da:	2947      	cmp	r1, #71	; 0x47
 80067dc:	d1bc      	bne.n	8006758 <_printf_float+0xf0>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1ba      	bne.n	8006758 <_printf_float+0xf0>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e7b7      	b.n	8006756 <_printf_float+0xee>
 80067e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80067ea:	d118      	bne.n	800681e <_printf_float+0x1b6>
 80067ec:	2900      	cmp	r1, #0
 80067ee:	6863      	ldr	r3, [r4, #4]
 80067f0:	dd0b      	ble.n	800680a <_printf_float+0x1a2>
 80067f2:	6121      	str	r1, [r4, #16]
 80067f4:	b913      	cbnz	r3, 80067fc <_printf_float+0x194>
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	07d0      	lsls	r0, r2, #31
 80067fa:	d502      	bpl.n	8006802 <_printf_float+0x19a>
 80067fc:	3301      	adds	r3, #1
 80067fe:	440b      	add	r3, r1
 8006800:	6123      	str	r3, [r4, #16]
 8006802:	f04f 0a00 	mov.w	sl, #0
 8006806:	65a1      	str	r1, [r4, #88]	; 0x58
 8006808:	e7df      	b.n	80067ca <_printf_float+0x162>
 800680a:	b913      	cbnz	r3, 8006812 <_printf_float+0x1aa>
 800680c:	6822      	ldr	r2, [r4, #0]
 800680e:	07d2      	lsls	r2, r2, #31
 8006810:	d501      	bpl.n	8006816 <_printf_float+0x1ae>
 8006812:	3302      	adds	r3, #2
 8006814:	e7f4      	b.n	8006800 <_printf_float+0x198>
 8006816:	2301      	movs	r3, #1
 8006818:	e7f2      	b.n	8006800 <_printf_float+0x198>
 800681a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800681e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006820:	4299      	cmp	r1, r3
 8006822:	db05      	blt.n	8006830 <_printf_float+0x1c8>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	6121      	str	r1, [r4, #16]
 8006828:	07d8      	lsls	r0, r3, #31
 800682a:	d5ea      	bpl.n	8006802 <_printf_float+0x19a>
 800682c:	1c4b      	adds	r3, r1, #1
 800682e:	e7e7      	b.n	8006800 <_printf_float+0x198>
 8006830:	2900      	cmp	r1, #0
 8006832:	bfcc      	ite	gt
 8006834:	2201      	movgt	r2, #1
 8006836:	f1c1 0202 	rsble	r2, r1, #2
 800683a:	4413      	add	r3, r2
 800683c:	e7e0      	b.n	8006800 <_printf_float+0x198>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	055a      	lsls	r2, r3, #21
 8006842:	d407      	bmi.n	8006854 <_printf_float+0x1ec>
 8006844:	6923      	ldr	r3, [r4, #16]
 8006846:	4642      	mov	r2, r8
 8006848:	4631      	mov	r1, r6
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	d12b      	bne.n	80068aa <_printf_float+0x242>
 8006852:	e764      	b.n	800671e <_printf_float+0xb6>
 8006854:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006858:	f240 80dd 	bls.w	8006a16 <_printf_float+0x3ae>
 800685c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006860:	2200      	movs	r2, #0
 8006862:	2300      	movs	r3, #0
 8006864:	f7fa f8a0 	bl	80009a8 <__aeabi_dcmpeq>
 8006868:	2800      	cmp	r0, #0
 800686a:	d033      	beq.n	80068d4 <_printf_float+0x26c>
 800686c:	2301      	movs	r3, #1
 800686e:	4631      	mov	r1, r6
 8006870:	4628      	mov	r0, r5
 8006872:	4a35      	ldr	r2, [pc, #212]	; (8006948 <_printf_float+0x2e0>)
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	f43f af51 	beq.w	800671e <_printf_float+0xb6>
 800687c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006880:	429a      	cmp	r2, r3
 8006882:	db02      	blt.n	800688a <_printf_float+0x222>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	07d8      	lsls	r0, r3, #31
 8006888:	d50f      	bpl.n	80068aa <_printf_float+0x242>
 800688a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f af42 	beq.w	800671e <_printf_float+0xb6>
 800689a:	f04f 0800 	mov.w	r8, #0
 800689e:	f104 091a 	add.w	r9, r4, #26
 80068a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068a4:	3b01      	subs	r3, #1
 80068a6:	4543      	cmp	r3, r8
 80068a8:	dc09      	bgt.n	80068be <_printf_float+0x256>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	079b      	lsls	r3, r3, #30
 80068ae:	f100 8104 	bmi.w	8006aba <_printf_float+0x452>
 80068b2:	68e0      	ldr	r0, [r4, #12]
 80068b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068b6:	4298      	cmp	r0, r3
 80068b8:	bfb8      	it	lt
 80068ba:	4618      	movlt	r0, r3
 80068bc:	e731      	b.n	8006722 <_printf_float+0xba>
 80068be:	2301      	movs	r3, #1
 80068c0:	464a      	mov	r2, r9
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	f43f af28 	beq.w	800671e <_printf_float+0xb6>
 80068ce:	f108 0801 	add.w	r8, r8, #1
 80068d2:	e7e6      	b.n	80068a2 <_printf_float+0x23a>
 80068d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dc38      	bgt.n	800694c <_printf_float+0x2e4>
 80068da:	2301      	movs	r3, #1
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	4a19      	ldr	r2, [pc, #100]	; (8006948 <_printf_float+0x2e0>)
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f af1a 	beq.w	800671e <_printf_float+0xb6>
 80068ea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80068ee:	4313      	orrs	r3, r2
 80068f0:	d102      	bne.n	80068f8 <_printf_float+0x290>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	07d9      	lsls	r1, r3, #31
 80068f6:	d5d8      	bpl.n	80068aa <_printf_float+0x242>
 80068f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f af0b 	beq.w	800671e <_printf_float+0xb6>
 8006908:	f04f 0900 	mov.w	r9, #0
 800690c:	f104 0a1a 	add.w	sl, r4, #26
 8006910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006912:	425b      	negs	r3, r3
 8006914:	454b      	cmp	r3, r9
 8006916:	dc01      	bgt.n	800691c <_printf_float+0x2b4>
 8006918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800691a:	e794      	b.n	8006846 <_printf_float+0x1de>
 800691c:	2301      	movs	r3, #1
 800691e:	4652      	mov	r2, sl
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	f43f aef9 	beq.w	800671e <_printf_float+0xb6>
 800692c:	f109 0901 	add.w	r9, r9, #1
 8006930:	e7ee      	b.n	8006910 <_printf_float+0x2a8>
 8006932:	bf00      	nop
 8006934:	7fefffff 	.word	0x7fefffff
 8006938:	08009a28 	.word	0x08009a28
 800693c:	08009a2c 	.word	0x08009a2c
 8006940:	08009a30 	.word	0x08009a30
 8006944:	08009a34 	.word	0x08009a34
 8006948:	08009a38 	.word	0x08009a38
 800694c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800694e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006950:	429a      	cmp	r2, r3
 8006952:	bfa8      	it	ge
 8006954:	461a      	movge	r2, r3
 8006956:	2a00      	cmp	r2, #0
 8006958:	4691      	mov	r9, r2
 800695a:	dc37      	bgt.n	80069cc <_printf_float+0x364>
 800695c:	f04f 0b00 	mov.w	fp, #0
 8006960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006964:	f104 021a 	add.w	r2, r4, #26
 8006968:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800696c:	ebaa 0309 	sub.w	r3, sl, r9
 8006970:	455b      	cmp	r3, fp
 8006972:	dc33      	bgt.n	80069dc <_printf_float+0x374>
 8006974:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006978:	429a      	cmp	r2, r3
 800697a:	db3b      	blt.n	80069f4 <_printf_float+0x38c>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	07da      	lsls	r2, r3, #31
 8006980:	d438      	bmi.n	80069f4 <_printf_float+0x38c>
 8006982:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006986:	eba2 0903 	sub.w	r9, r2, r3
 800698a:	eba2 020a 	sub.w	r2, r2, sl
 800698e:	4591      	cmp	r9, r2
 8006990:	bfa8      	it	ge
 8006992:	4691      	movge	r9, r2
 8006994:	f1b9 0f00 	cmp.w	r9, #0
 8006998:	dc34      	bgt.n	8006a04 <_printf_float+0x39c>
 800699a:	f04f 0800 	mov.w	r8, #0
 800699e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069a2:	f104 0a1a 	add.w	sl, r4, #26
 80069a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069aa:	1a9b      	subs	r3, r3, r2
 80069ac:	eba3 0309 	sub.w	r3, r3, r9
 80069b0:	4543      	cmp	r3, r8
 80069b2:	f77f af7a 	ble.w	80068aa <_printf_float+0x242>
 80069b6:	2301      	movs	r3, #1
 80069b8:	4652      	mov	r2, sl
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	f43f aeac 	beq.w	800671e <_printf_float+0xb6>
 80069c6:	f108 0801 	add.w	r8, r8, #1
 80069ca:	e7ec      	b.n	80069a6 <_printf_float+0x33e>
 80069cc:	4613      	mov	r3, r2
 80069ce:	4631      	mov	r1, r6
 80069d0:	4642      	mov	r2, r8
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	d1c0      	bne.n	800695c <_printf_float+0x2f4>
 80069da:	e6a0      	b.n	800671e <_printf_float+0xb6>
 80069dc:	2301      	movs	r3, #1
 80069de:	4631      	mov	r1, r6
 80069e0:	4628      	mov	r0, r5
 80069e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80069e4:	47b8      	blx	r7
 80069e6:	3001      	adds	r0, #1
 80069e8:	f43f ae99 	beq.w	800671e <_printf_float+0xb6>
 80069ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069ee:	f10b 0b01 	add.w	fp, fp, #1
 80069f2:	e7b9      	b.n	8006968 <_printf_float+0x300>
 80069f4:	4631      	mov	r1, r6
 80069f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	d1bf      	bne.n	8006982 <_printf_float+0x31a>
 8006a02:	e68c      	b.n	800671e <_printf_float+0xb6>
 8006a04:	464b      	mov	r3, r9
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	eb08 020a 	add.w	r2, r8, sl
 8006a0e:	47b8      	blx	r7
 8006a10:	3001      	adds	r0, #1
 8006a12:	d1c2      	bne.n	800699a <_printf_float+0x332>
 8006a14:	e683      	b.n	800671e <_printf_float+0xb6>
 8006a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a18:	2a01      	cmp	r2, #1
 8006a1a:	dc01      	bgt.n	8006a20 <_printf_float+0x3b8>
 8006a1c:	07db      	lsls	r3, r3, #31
 8006a1e:	d539      	bpl.n	8006a94 <_printf_float+0x42c>
 8006a20:	2301      	movs	r3, #1
 8006a22:	4642      	mov	r2, r8
 8006a24:	4631      	mov	r1, r6
 8006a26:	4628      	mov	r0, r5
 8006a28:	47b8      	blx	r7
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	f43f ae77 	beq.w	800671e <_printf_float+0xb6>
 8006a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f43f ae6f 	beq.w	800671e <_printf_float+0xb6>
 8006a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a44:	2200      	movs	r2, #0
 8006a46:	2300      	movs	r3, #0
 8006a48:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006a4c:	f7f9 ffac 	bl	80009a8 <__aeabi_dcmpeq>
 8006a50:	b9d8      	cbnz	r0, 8006a8a <_printf_float+0x422>
 8006a52:	f109 33ff 	add.w	r3, r9, #4294967295
 8006a56:	f108 0201 	add.w	r2, r8, #1
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	d10e      	bne.n	8006a82 <_printf_float+0x41a>
 8006a64:	e65b      	b.n	800671e <_printf_float+0xb6>
 8006a66:	2301      	movs	r3, #1
 8006a68:	464a      	mov	r2, r9
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b8      	blx	r7
 8006a70:	3001      	adds	r0, #1
 8006a72:	f43f ae54 	beq.w	800671e <_printf_float+0xb6>
 8006a76:	f108 0801 	add.w	r8, r8, #1
 8006a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	4543      	cmp	r3, r8
 8006a80:	dcf1      	bgt.n	8006a66 <_printf_float+0x3fe>
 8006a82:	4653      	mov	r3, sl
 8006a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a88:	e6de      	b.n	8006848 <_printf_float+0x1e0>
 8006a8a:	f04f 0800 	mov.w	r8, #0
 8006a8e:	f104 091a 	add.w	r9, r4, #26
 8006a92:	e7f2      	b.n	8006a7a <_printf_float+0x412>
 8006a94:	2301      	movs	r3, #1
 8006a96:	4642      	mov	r2, r8
 8006a98:	e7df      	b.n	8006a5a <_printf_float+0x3f2>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	464a      	mov	r2, r9
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f43f ae3a 	beq.w	800671e <_printf_float+0xb6>
 8006aaa:	f108 0801 	add.w	r8, r8, #1
 8006aae:	68e3      	ldr	r3, [r4, #12]
 8006ab0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ab2:	1a5b      	subs	r3, r3, r1
 8006ab4:	4543      	cmp	r3, r8
 8006ab6:	dcf0      	bgt.n	8006a9a <_printf_float+0x432>
 8006ab8:	e6fb      	b.n	80068b2 <_printf_float+0x24a>
 8006aba:	f04f 0800 	mov.w	r8, #0
 8006abe:	f104 0919 	add.w	r9, r4, #25
 8006ac2:	e7f4      	b.n	8006aae <_printf_float+0x446>

08006ac4 <_printf_common>:
 8006ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac8:	4616      	mov	r6, r2
 8006aca:	4699      	mov	r9, r3
 8006acc:	688a      	ldr	r2, [r1, #8]
 8006ace:	690b      	ldr	r3, [r1, #16]
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	bfb8      	it	lt
 8006ad6:	4613      	movlt	r3, r2
 8006ad8:	6033      	str	r3, [r6, #0]
 8006ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ade:	460c      	mov	r4, r1
 8006ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae4:	b10a      	cbz	r2, 8006aea <_printf_common+0x26>
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	6033      	str	r3, [r6, #0]
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	0699      	lsls	r1, r3, #26
 8006aee:	bf42      	ittt	mi
 8006af0:	6833      	ldrmi	r3, [r6, #0]
 8006af2:	3302      	addmi	r3, #2
 8006af4:	6033      	strmi	r3, [r6, #0]
 8006af6:	6825      	ldr	r5, [r4, #0]
 8006af8:	f015 0506 	ands.w	r5, r5, #6
 8006afc:	d106      	bne.n	8006b0c <_printf_common+0x48>
 8006afe:	f104 0a19 	add.w	sl, r4, #25
 8006b02:	68e3      	ldr	r3, [r4, #12]
 8006b04:	6832      	ldr	r2, [r6, #0]
 8006b06:	1a9b      	subs	r3, r3, r2
 8006b08:	42ab      	cmp	r3, r5
 8006b0a:	dc2b      	bgt.n	8006b64 <_printf_common+0xa0>
 8006b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b10:	1e13      	subs	r3, r2, #0
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	bf18      	it	ne
 8006b16:	2301      	movne	r3, #1
 8006b18:	0692      	lsls	r2, r2, #26
 8006b1a:	d430      	bmi.n	8006b7e <_printf_common+0xba>
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b24:	47c0      	blx	r8
 8006b26:	3001      	adds	r0, #1
 8006b28:	d023      	beq.n	8006b72 <_printf_common+0xae>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	6922      	ldr	r2, [r4, #16]
 8006b2e:	f003 0306 	and.w	r3, r3, #6
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	bf14      	ite	ne
 8006b36:	2500      	movne	r5, #0
 8006b38:	6833      	ldreq	r3, [r6, #0]
 8006b3a:	f04f 0600 	mov.w	r6, #0
 8006b3e:	bf08      	it	eq
 8006b40:	68e5      	ldreq	r5, [r4, #12]
 8006b42:	f104 041a 	add.w	r4, r4, #26
 8006b46:	bf08      	it	eq
 8006b48:	1aed      	subeq	r5, r5, r3
 8006b4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b4e:	bf08      	it	eq
 8006b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b54:	4293      	cmp	r3, r2
 8006b56:	bfc4      	itt	gt
 8006b58:	1a9b      	subgt	r3, r3, r2
 8006b5a:	18ed      	addgt	r5, r5, r3
 8006b5c:	42b5      	cmp	r5, r6
 8006b5e:	d11a      	bne.n	8006b96 <_printf_common+0xd2>
 8006b60:	2000      	movs	r0, #0
 8006b62:	e008      	b.n	8006b76 <_printf_common+0xb2>
 8006b64:	2301      	movs	r3, #1
 8006b66:	4652      	mov	r2, sl
 8006b68:	4649      	mov	r1, r9
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	47c0      	blx	r8
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d103      	bne.n	8006b7a <_printf_common+0xb6>
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295
 8006b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7a:	3501      	adds	r5, #1
 8006b7c:	e7c1      	b.n	8006b02 <_printf_common+0x3e>
 8006b7e:	2030      	movs	r0, #48	; 0x30
 8006b80:	18e1      	adds	r1, r4, r3
 8006b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b8c:	4422      	add	r2, r4
 8006b8e:	3302      	adds	r3, #2
 8006b90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b94:	e7c2      	b.n	8006b1c <_printf_common+0x58>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4622      	mov	r2, r4
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	47c0      	blx	r8
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d0e6      	beq.n	8006b72 <_printf_common+0xae>
 8006ba4:	3601      	adds	r6, #1
 8006ba6:	e7d9      	b.n	8006b5c <_printf_common+0x98>

08006ba8 <_printf_i>:
 8006ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	7e0f      	ldrb	r7, [r1, #24]
 8006bae:	4691      	mov	r9, r2
 8006bb0:	2f78      	cmp	r7, #120	; 0x78
 8006bb2:	4680      	mov	r8, r0
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	469a      	mov	sl, r3
 8006bb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bbe:	d807      	bhi.n	8006bd0 <_printf_i+0x28>
 8006bc0:	2f62      	cmp	r7, #98	; 0x62
 8006bc2:	d80a      	bhi.n	8006bda <_printf_i+0x32>
 8006bc4:	2f00      	cmp	r7, #0
 8006bc6:	f000 80d5 	beq.w	8006d74 <_printf_i+0x1cc>
 8006bca:	2f58      	cmp	r7, #88	; 0x58
 8006bcc:	f000 80c1 	beq.w	8006d52 <_printf_i+0x1aa>
 8006bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bd8:	e03a      	b.n	8006c50 <_printf_i+0xa8>
 8006bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bde:	2b15      	cmp	r3, #21
 8006be0:	d8f6      	bhi.n	8006bd0 <_printf_i+0x28>
 8006be2:	a101      	add	r1, pc, #4	; (adr r1, 8006be8 <_printf_i+0x40>)
 8006be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c55 	.word	0x08006c55
 8006bf0:	08006bd1 	.word	0x08006bd1
 8006bf4:	08006bd1 	.word	0x08006bd1
 8006bf8:	08006bd1 	.word	0x08006bd1
 8006bfc:	08006bd1 	.word	0x08006bd1
 8006c00:	08006c55 	.word	0x08006c55
 8006c04:	08006bd1 	.word	0x08006bd1
 8006c08:	08006bd1 	.word	0x08006bd1
 8006c0c:	08006bd1 	.word	0x08006bd1
 8006c10:	08006bd1 	.word	0x08006bd1
 8006c14:	08006d5b 	.word	0x08006d5b
 8006c18:	08006c81 	.word	0x08006c81
 8006c1c:	08006d15 	.word	0x08006d15
 8006c20:	08006bd1 	.word	0x08006bd1
 8006c24:	08006bd1 	.word	0x08006bd1
 8006c28:	08006d7d 	.word	0x08006d7d
 8006c2c:	08006bd1 	.word	0x08006bd1
 8006c30:	08006c81 	.word	0x08006c81
 8006c34:	08006bd1 	.word	0x08006bd1
 8006c38:	08006bd1 	.word	0x08006bd1
 8006c3c:	08006d1d 	.word	0x08006d1d
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	602a      	str	r2, [r5, #0]
 8006c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0a0      	b.n	8006d96 <_printf_i+0x1ee>
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	682b      	ldr	r3, [r5, #0]
 8006c58:	0607      	lsls	r7, r0, #24
 8006c5a:	f103 0104 	add.w	r1, r3, #4
 8006c5e:	6029      	str	r1, [r5, #0]
 8006c60:	d501      	bpl.n	8006c66 <_printf_i+0xbe>
 8006c62:	681e      	ldr	r6, [r3, #0]
 8006c64:	e003      	b.n	8006c6e <_printf_i+0xc6>
 8006c66:	0646      	lsls	r6, r0, #25
 8006c68:	d5fb      	bpl.n	8006c62 <_printf_i+0xba>
 8006c6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	da03      	bge.n	8006c7a <_printf_i+0xd2>
 8006c72:	232d      	movs	r3, #45	; 0x2d
 8006c74:	4276      	negs	r6, r6
 8006c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c7a:	230a      	movs	r3, #10
 8006c7c:	4859      	ldr	r0, [pc, #356]	; (8006de4 <_printf_i+0x23c>)
 8006c7e:	e012      	b.n	8006ca6 <_printf_i+0xfe>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	6820      	ldr	r0, [r4, #0]
 8006c84:	1d19      	adds	r1, r3, #4
 8006c86:	6029      	str	r1, [r5, #0]
 8006c88:	0605      	lsls	r5, r0, #24
 8006c8a:	d501      	bpl.n	8006c90 <_printf_i+0xe8>
 8006c8c:	681e      	ldr	r6, [r3, #0]
 8006c8e:	e002      	b.n	8006c96 <_printf_i+0xee>
 8006c90:	0641      	lsls	r1, r0, #25
 8006c92:	d5fb      	bpl.n	8006c8c <_printf_i+0xe4>
 8006c94:	881e      	ldrh	r6, [r3, #0]
 8006c96:	2f6f      	cmp	r7, #111	; 0x6f
 8006c98:	bf0c      	ite	eq
 8006c9a:	2308      	moveq	r3, #8
 8006c9c:	230a      	movne	r3, #10
 8006c9e:	4851      	ldr	r0, [pc, #324]	; (8006de4 <_printf_i+0x23c>)
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ca6:	6865      	ldr	r5, [r4, #4]
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	bfa8      	it	ge
 8006cac:	6821      	ldrge	r1, [r4, #0]
 8006cae:	60a5      	str	r5, [r4, #8]
 8006cb0:	bfa4      	itt	ge
 8006cb2:	f021 0104 	bicge.w	r1, r1, #4
 8006cb6:	6021      	strge	r1, [r4, #0]
 8006cb8:	b90e      	cbnz	r6, 8006cbe <_printf_i+0x116>
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	d04b      	beq.n	8006d56 <_printf_i+0x1ae>
 8006cbe:	4615      	mov	r5, r2
 8006cc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cc4:	fb03 6711 	mls	r7, r3, r1, r6
 8006cc8:	5dc7      	ldrb	r7, [r0, r7]
 8006cca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cce:	4637      	mov	r7, r6
 8006cd0:	42bb      	cmp	r3, r7
 8006cd2:	460e      	mov	r6, r1
 8006cd4:	d9f4      	bls.n	8006cc0 <_printf_i+0x118>
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d10b      	bne.n	8006cf2 <_printf_i+0x14a>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	07de      	lsls	r6, r3, #31
 8006cde:	d508      	bpl.n	8006cf2 <_printf_i+0x14a>
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	6861      	ldr	r1, [r4, #4]
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	bfde      	ittt	le
 8006ce8:	2330      	movle	r3, #48	; 0x30
 8006cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cf2:	1b52      	subs	r2, r2, r5
 8006cf4:	6122      	str	r2, [r4, #16]
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	f8cd a000 	str.w	sl, [sp]
 8006d00:	aa03      	add	r2, sp, #12
 8006d02:	f7ff fedf 	bl	8006ac4 <_printf_common>
 8006d06:	3001      	adds	r0, #1
 8006d08:	d14a      	bne.n	8006da0 <_printf_i+0x1f8>
 8006d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0e:	b004      	add	sp, #16
 8006d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	f043 0320 	orr.w	r3, r3, #32
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	2778      	movs	r7, #120	; 0x78
 8006d1e:	4832      	ldr	r0, [pc, #200]	; (8006de8 <_printf_i+0x240>)
 8006d20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	6829      	ldr	r1, [r5, #0]
 8006d28:	061f      	lsls	r7, r3, #24
 8006d2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d2e:	d402      	bmi.n	8006d36 <_printf_i+0x18e>
 8006d30:	065f      	lsls	r7, r3, #25
 8006d32:	bf48      	it	mi
 8006d34:	b2b6      	uxthmi	r6, r6
 8006d36:	07df      	lsls	r7, r3, #31
 8006d38:	bf48      	it	mi
 8006d3a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d3e:	6029      	str	r1, [r5, #0]
 8006d40:	bf48      	it	mi
 8006d42:	6023      	strmi	r3, [r4, #0]
 8006d44:	b91e      	cbnz	r6, 8006d4e <_printf_i+0x1a6>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	f023 0320 	bic.w	r3, r3, #32
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	2310      	movs	r3, #16
 8006d50:	e7a6      	b.n	8006ca0 <_printf_i+0xf8>
 8006d52:	4824      	ldr	r0, [pc, #144]	; (8006de4 <_printf_i+0x23c>)
 8006d54:	e7e4      	b.n	8006d20 <_printf_i+0x178>
 8006d56:	4615      	mov	r5, r2
 8006d58:	e7bd      	b.n	8006cd6 <_printf_i+0x12e>
 8006d5a:	682b      	ldr	r3, [r5, #0]
 8006d5c:	6826      	ldr	r6, [r4, #0]
 8006d5e:	1d18      	adds	r0, r3, #4
 8006d60:	6961      	ldr	r1, [r4, #20]
 8006d62:	6028      	str	r0, [r5, #0]
 8006d64:	0635      	lsls	r5, r6, #24
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	d501      	bpl.n	8006d6e <_printf_i+0x1c6>
 8006d6a:	6019      	str	r1, [r3, #0]
 8006d6c:	e002      	b.n	8006d74 <_printf_i+0x1cc>
 8006d6e:	0670      	lsls	r0, r6, #25
 8006d70:	d5fb      	bpl.n	8006d6a <_printf_i+0x1c2>
 8006d72:	8019      	strh	r1, [r3, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	4615      	mov	r5, r2
 8006d78:	6123      	str	r3, [r4, #16]
 8006d7a:	e7bc      	b.n	8006cf6 <_printf_i+0x14e>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	1d1a      	adds	r2, r3, #4
 8006d82:	602a      	str	r2, [r5, #0]
 8006d84:	681d      	ldr	r5, [r3, #0]
 8006d86:	6862      	ldr	r2, [r4, #4]
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f000 f9d4 	bl	8007136 <memchr>
 8006d8e:	b108      	cbz	r0, 8006d94 <_printf_i+0x1ec>
 8006d90:	1b40      	subs	r0, r0, r5
 8006d92:	6060      	str	r0, [r4, #4]
 8006d94:	6863      	ldr	r3, [r4, #4]
 8006d96:	6123      	str	r3, [r4, #16]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d9e:	e7aa      	b.n	8006cf6 <_printf_i+0x14e>
 8006da0:	462a      	mov	r2, r5
 8006da2:	4649      	mov	r1, r9
 8006da4:	4640      	mov	r0, r8
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	47d0      	blx	sl
 8006daa:	3001      	adds	r0, #1
 8006dac:	d0ad      	beq.n	8006d0a <_printf_i+0x162>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	079b      	lsls	r3, r3, #30
 8006db2:	d413      	bmi.n	8006ddc <_printf_i+0x234>
 8006db4:	68e0      	ldr	r0, [r4, #12]
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	4298      	cmp	r0, r3
 8006dba:	bfb8      	it	lt
 8006dbc:	4618      	movlt	r0, r3
 8006dbe:	e7a6      	b.n	8006d0e <_printf_i+0x166>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4632      	mov	r2, r6
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	47d0      	blx	sl
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d09d      	beq.n	8006d0a <_printf_i+0x162>
 8006dce:	3501      	adds	r5, #1
 8006dd0:	68e3      	ldr	r3, [r4, #12]
 8006dd2:	9903      	ldr	r1, [sp, #12]
 8006dd4:	1a5b      	subs	r3, r3, r1
 8006dd6:	42ab      	cmp	r3, r5
 8006dd8:	dcf2      	bgt.n	8006dc0 <_printf_i+0x218>
 8006dda:	e7eb      	b.n	8006db4 <_printf_i+0x20c>
 8006ddc:	2500      	movs	r5, #0
 8006dde:	f104 0619 	add.w	r6, r4, #25
 8006de2:	e7f5      	b.n	8006dd0 <_printf_i+0x228>
 8006de4:	08009a3a 	.word	0x08009a3a
 8006de8:	08009a4b 	.word	0x08009a4b

08006dec <std>:
 8006dec:	2300      	movs	r3, #0
 8006dee:	b510      	push	{r4, lr}
 8006df0:	4604      	mov	r4, r0
 8006df2:	e9c0 3300 	strd	r3, r3, [r0]
 8006df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dfa:	6083      	str	r3, [r0, #8]
 8006dfc:	8181      	strh	r1, [r0, #12]
 8006dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8006e00:	81c2      	strh	r2, [r0, #14]
 8006e02:	6183      	str	r3, [r0, #24]
 8006e04:	4619      	mov	r1, r3
 8006e06:	2208      	movs	r2, #8
 8006e08:	305c      	adds	r0, #92	; 0x5c
 8006e0a:	f000 f914 	bl	8007036 <memset>
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <std+0x58>)
 8006e10:	6224      	str	r4, [r4, #32]
 8006e12:	6263      	str	r3, [r4, #36]	; 0x24
 8006e14:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <std+0x5c>)
 8006e16:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e18:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <std+0x60>)
 8006e1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <std+0x64>)
 8006e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e20:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <std+0x68>)
 8006e22:	429c      	cmp	r4, r3
 8006e24:	d006      	beq.n	8006e34 <std+0x48>
 8006e26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e2a:	4294      	cmp	r4, r2
 8006e2c:	d002      	beq.n	8006e34 <std+0x48>
 8006e2e:	33d0      	adds	r3, #208	; 0xd0
 8006e30:	429c      	cmp	r4, r3
 8006e32:	d105      	bne.n	8006e40 <std+0x54>
 8006e34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e3c:	f000 b978 	b.w	8007130 <__retarget_lock_init_recursive>
 8006e40:	bd10      	pop	{r4, pc}
 8006e42:	bf00      	nop
 8006e44:	08006fb1 	.word	0x08006fb1
 8006e48:	08006fd3 	.word	0x08006fd3
 8006e4c:	0800700b 	.word	0x0800700b
 8006e50:	0800702f 	.word	0x0800702f
 8006e54:	20000944 	.word	0x20000944

08006e58 <stdio_exit_handler>:
 8006e58:	4a02      	ldr	r2, [pc, #8]	; (8006e64 <stdio_exit_handler+0xc>)
 8006e5a:	4903      	ldr	r1, [pc, #12]	; (8006e68 <stdio_exit_handler+0x10>)
 8006e5c:	4803      	ldr	r0, [pc, #12]	; (8006e6c <stdio_exit_handler+0x14>)
 8006e5e:	f000 b869 	b.w	8006f34 <_fwalk_sglue>
 8006e62:	bf00      	nop
 8006e64:	20000070 	.word	0x20000070
 8006e68:	08008acd 	.word	0x08008acd
 8006e6c:	2000007c 	.word	0x2000007c

08006e70 <cleanup_stdio>:
 8006e70:	6841      	ldr	r1, [r0, #4]
 8006e72:	4b0c      	ldr	r3, [pc, #48]	; (8006ea4 <cleanup_stdio+0x34>)
 8006e74:	b510      	push	{r4, lr}
 8006e76:	4299      	cmp	r1, r3
 8006e78:	4604      	mov	r4, r0
 8006e7a:	d001      	beq.n	8006e80 <cleanup_stdio+0x10>
 8006e7c:	f001 fe26 	bl	8008acc <_fflush_r>
 8006e80:	68a1      	ldr	r1, [r4, #8]
 8006e82:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <cleanup_stdio+0x38>)
 8006e84:	4299      	cmp	r1, r3
 8006e86:	d002      	beq.n	8006e8e <cleanup_stdio+0x1e>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f001 fe1f 	bl	8008acc <_fflush_r>
 8006e8e:	68e1      	ldr	r1, [r4, #12]
 8006e90:	4b06      	ldr	r3, [pc, #24]	; (8006eac <cleanup_stdio+0x3c>)
 8006e92:	4299      	cmp	r1, r3
 8006e94:	d004      	beq.n	8006ea0 <cleanup_stdio+0x30>
 8006e96:	4620      	mov	r0, r4
 8006e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9c:	f001 be16 	b.w	8008acc <_fflush_r>
 8006ea0:	bd10      	pop	{r4, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000944 	.word	0x20000944
 8006ea8:	200009ac 	.word	0x200009ac
 8006eac:	20000a14 	.word	0x20000a14

08006eb0 <global_stdio_init.part.0>:
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <global_stdio_init.part.0+0x30>)
 8006eb4:	4c0b      	ldr	r4, [pc, #44]	; (8006ee4 <global_stdio_init.part.0+0x34>)
 8006eb6:	4a0c      	ldr	r2, [pc, #48]	; (8006ee8 <global_stdio_init.part.0+0x38>)
 8006eb8:	4620      	mov	r0, r4
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	2104      	movs	r1, #4
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f7ff ff94 	bl	8006dec <std>
 8006ec4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006ec8:	2201      	movs	r2, #1
 8006eca:	2109      	movs	r1, #9
 8006ecc:	f7ff ff8e 	bl	8006dec <std>
 8006ed0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eda:	2112      	movs	r1, #18
 8006edc:	f7ff bf86 	b.w	8006dec <std>
 8006ee0:	20000a7c 	.word	0x20000a7c
 8006ee4:	20000944 	.word	0x20000944
 8006ee8:	08006e59 	.word	0x08006e59

08006eec <__sfp_lock_acquire>:
 8006eec:	4801      	ldr	r0, [pc, #4]	; (8006ef4 <__sfp_lock_acquire+0x8>)
 8006eee:	f000 b920 	b.w	8007132 <__retarget_lock_acquire_recursive>
 8006ef2:	bf00      	nop
 8006ef4:	20000a85 	.word	0x20000a85

08006ef8 <__sfp_lock_release>:
 8006ef8:	4801      	ldr	r0, [pc, #4]	; (8006f00 <__sfp_lock_release+0x8>)
 8006efa:	f000 b91b 	b.w	8007134 <__retarget_lock_release_recursive>
 8006efe:	bf00      	nop
 8006f00:	20000a85 	.word	0x20000a85

08006f04 <__sinit>:
 8006f04:	b510      	push	{r4, lr}
 8006f06:	4604      	mov	r4, r0
 8006f08:	f7ff fff0 	bl	8006eec <__sfp_lock_acquire>
 8006f0c:	6a23      	ldr	r3, [r4, #32]
 8006f0e:	b11b      	cbz	r3, 8006f18 <__sinit+0x14>
 8006f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f14:	f7ff bff0 	b.w	8006ef8 <__sfp_lock_release>
 8006f18:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <__sinit+0x28>)
 8006f1a:	6223      	str	r3, [r4, #32]
 8006f1c:	4b04      	ldr	r3, [pc, #16]	; (8006f30 <__sinit+0x2c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1f5      	bne.n	8006f10 <__sinit+0xc>
 8006f24:	f7ff ffc4 	bl	8006eb0 <global_stdio_init.part.0>
 8006f28:	e7f2      	b.n	8006f10 <__sinit+0xc>
 8006f2a:	bf00      	nop
 8006f2c:	08006e71 	.word	0x08006e71
 8006f30:	20000a7c 	.word	0x20000a7c

08006f34 <_fwalk_sglue>:
 8006f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f38:	4607      	mov	r7, r0
 8006f3a:	4688      	mov	r8, r1
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	2600      	movs	r6, #0
 8006f40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f44:	f1b9 0901 	subs.w	r9, r9, #1
 8006f48:	d505      	bpl.n	8006f56 <_fwalk_sglue+0x22>
 8006f4a:	6824      	ldr	r4, [r4, #0]
 8006f4c:	2c00      	cmp	r4, #0
 8006f4e:	d1f7      	bne.n	8006f40 <_fwalk_sglue+0xc>
 8006f50:	4630      	mov	r0, r6
 8006f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f56:	89ab      	ldrh	r3, [r5, #12]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d907      	bls.n	8006f6c <_fwalk_sglue+0x38>
 8006f5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f60:	3301      	adds	r3, #1
 8006f62:	d003      	beq.n	8006f6c <_fwalk_sglue+0x38>
 8006f64:	4629      	mov	r1, r5
 8006f66:	4638      	mov	r0, r7
 8006f68:	47c0      	blx	r8
 8006f6a:	4306      	orrs	r6, r0
 8006f6c:	3568      	adds	r5, #104	; 0x68
 8006f6e:	e7e9      	b.n	8006f44 <_fwalk_sglue+0x10>

08006f70 <siprintf>:
 8006f70:	b40e      	push	{r1, r2, r3}
 8006f72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f76:	b500      	push	{lr}
 8006f78:	b09c      	sub	sp, #112	; 0x70
 8006f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f7c:	9002      	str	r0, [sp, #8]
 8006f7e:	9006      	str	r0, [sp, #24]
 8006f80:	9107      	str	r1, [sp, #28]
 8006f82:	9104      	str	r1, [sp, #16]
 8006f84:	4808      	ldr	r0, [pc, #32]	; (8006fa8 <siprintf+0x38>)
 8006f86:	4909      	ldr	r1, [pc, #36]	; (8006fac <siprintf+0x3c>)
 8006f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8c:	9105      	str	r1, [sp, #20]
 8006f8e:	6800      	ldr	r0, [r0, #0]
 8006f90:	a902      	add	r1, sp, #8
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	f001 fc1a 	bl	80087cc <_svfiprintf_r>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	9b02      	ldr	r3, [sp, #8]
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	b01c      	add	sp, #112	; 0x70
 8006fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa4:	b003      	add	sp, #12
 8006fa6:	4770      	bx	lr
 8006fa8:	200000c8 	.word	0x200000c8
 8006fac:	ffff0208 	.word	0xffff0208

08006fb0 <__sread>:
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb8:	f000 f86c 	bl	8007094 <_read_r>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	bfab      	itete	ge
 8006fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006fc4:	181b      	addge	r3, r3, r0
 8006fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fca:	bfac      	ite	ge
 8006fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fce:	81a3      	strhlt	r3, [r4, #12]
 8006fd0:	bd10      	pop	{r4, pc}

08006fd2 <__swrite>:
 8006fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	461f      	mov	r7, r3
 8006fd8:	898b      	ldrh	r3, [r1, #12]
 8006fda:	4605      	mov	r5, r0
 8006fdc:	05db      	lsls	r3, r3, #23
 8006fde:	460c      	mov	r4, r1
 8006fe0:	4616      	mov	r6, r2
 8006fe2:	d505      	bpl.n	8006ff0 <__swrite+0x1e>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fec:	f000 f840 	bl	8007070 <_lseek_r>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ff8:	81a3      	strh	r3, [r4, #12]
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007006:	f000 b857 	b.w	80070b8 <_write_r>

0800700a <__sseek>:
 800700a:	b510      	push	{r4, lr}
 800700c:	460c      	mov	r4, r1
 800700e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007012:	f000 f82d 	bl	8007070 <_lseek_r>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	bf15      	itete	ne
 800701c:	6560      	strne	r0, [r4, #84]	; 0x54
 800701e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007026:	81a3      	strheq	r3, [r4, #12]
 8007028:	bf18      	it	ne
 800702a:	81a3      	strhne	r3, [r4, #12]
 800702c:	bd10      	pop	{r4, pc}

0800702e <__sclose>:
 800702e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007032:	f000 b80d 	b.w	8007050 <_close_r>

08007036 <memset>:
 8007036:	4603      	mov	r3, r0
 8007038:	4402      	add	r2, r0
 800703a:	4293      	cmp	r3, r2
 800703c:	d100      	bne.n	8007040 <memset+0xa>
 800703e:	4770      	bx	lr
 8007040:	f803 1b01 	strb.w	r1, [r3], #1
 8007044:	e7f9      	b.n	800703a <memset+0x4>
	...

08007048 <_localeconv_r>:
 8007048:	4800      	ldr	r0, [pc, #0]	; (800704c <_localeconv_r+0x4>)
 800704a:	4770      	bx	lr
 800704c:	200001bc 	.word	0x200001bc

08007050 <_close_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	2300      	movs	r3, #0
 8007054:	4d05      	ldr	r5, [pc, #20]	; (800706c <_close_r+0x1c>)
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	f7fb ff85 	bl	8002f6a <_close>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_close_r+0x1a>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_close_r+0x1a>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	20000a80 	.word	0x20000a80

08007070 <_lseek_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	4611      	mov	r1, r2
 8007078:	2200      	movs	r2, #0
 800707a:	4d05      	ldr	r5, [pc, #20]	; (8007090 <_lseek_r+0x20>)
 800707c:	602a      	str	r2, [r5, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f7fb ff97 	bl	8002fb2 <_lseek>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_lseek_r+0x1e>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_lseek_r+0x1e>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20000a80 	.word	0x20000a80

08007094 <_read_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	4611      	mov	r1, r2
 800709c:	2200      	movs	r2, #0
 800709e:	4d05      	ldr	r5, [pc, #20]	; (80070b4 <_read_r+0x20>)
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f7fb ff28 	bl	8002ef8 <_read>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_read_r+0x1e>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_read_r+0x1e>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	20000a80 	.word	0x20000a80

080070b8 <_write_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	2200      	movs	r2, #0
 80070c2:	4d05      	ldr	r5, [pc, #20]	; (80070d8 <_write_r+0x20>)
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7fb ff33 	bl	8002f32 <_write>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_write_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_write_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20000a80 	.word	0x20000a80

080070dc <__errno>:
 80070dc:	4b01      	ldr	r3, [pc, #4]	; (80070e4 <__errno+0x8>)
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	200000c8 	.word	0x200000c8

080070e8 <__libc_init_array>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	2600      	movs	r6, #0
 80070ec:	4d0c      	ldr	r5, [pc, #48]	; (8007120 <__libc_init_array+0x38>)
 80070ee:	4c0d      	ldr	r4, [pc, #52]	; (8007124 <__libc_init_array+0x3c>)
 80070f0:	1b64      	subs	r4, r4, r5
 80070f2:	10a4      	asrs	r4, r4, #2
 80070f4:	42a6      	cmp	r6, r4
 80070f6:	d109      	bne.n	800710c <__libc_init_array+0x24>
 80070f8:	f002 f888 	bl	800920c <_init>
 80070fc:	2600      	movs	r6, #0
 80070fe:	4d0a      	ldr	r5, [pc, #40]	; (8007128 <__libc_init_array+0x40>)
 8007100:	4c0a      	ldr	r4, [pc, #40]	; (800712c <__libc_init_array+0x44>)
 8007102:	1b64      	subs	r4, r4, r5
 8007104:	10a4      	asrs	r4, r4, #2
 8007106:	42a6      	cmp	r6, r4
 8007108:	d105      	bne.n	8007116 <__libc_init_array+0x2e>
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007110:	4798      	blx	r3
 8007112:	3601      	adds	r6, #1
 8007114:	e7ee      	b.n	80070f4 <__libc_init_array+0xc>
 8007116:	f855 3b04 	ldr.w	r3, [r5], #4
 800711a:	4798      	blx	r3
 800711c:	3601      	adds	r6, #1
 800711e:	e7f2      	b.n	8007106 <__libc_init_array+0x1e>
 8007120:	08009d9c 	.word	0x08009d9c
 8007124:	08009d9c 	.word	0x08009d9c
 8007128:	08009d9c 	.word	0x08009d9c
 800712c:	08009da4 	.word	0x08009da4

08007130 <__retarget_lock_init_recursive>:
 8007130:	4770      	bx	lr

08007132 <__retarget_lock_acquire_recursive>:
 8007132:	4770      	bx	lr

08007134 <__retarget_lock_release_recursive>:
 8007134:	4770      	bx	lr

08007136 <memchr>:
 8007136:	4603      	mov	r3, r0
 8007138:	b510      	push	{r4, lr}
 800713a:	b2c9      	uxtb	r1, r1
 800713c:	4402      	add	r2, r0
 800713e:	4293      	cmp	r3, r2
 8007140:	4618      	mov	r0, r3
 8007142:	d101      	bne.n	8007148 <memchr+0x12>
 8007144:	2000      	movs	r0, #0
 8007146:	e003      	b.n	8007150 <memchr+0x1a>
 8007148:	7804      	ldrb	r4, [r0, #0]
 800714a:	3301      	adds	r3, #1
 800714c:	428c      	cmp	r4, r1
 800714e:	d1f6      	bne.n	800713e <memchr+0x8>
 8007150:	bd10      	pop	{r4, pc}

08007152 <quorem>:
 8007152:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007156:	6903      	ldr	r3, [r0, #16]
 8007158:	690c      	ldr	r4, [r1, #16]
 800715a:	4607      	mov	r7, r0
 800715c:	42a3      	cmp	r3, r4
 800715e:	db7f      	blt.n	8007260 <quorem+0x10e>
 8007160:	3c01      	subs	r4, #1
 8007162:	f100 0514 	add.w	r5, r0, #20
 8007166:	f101 0814 	add.w	r8, r1, #20
 800716a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007174:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007178:	3301      	adds	r3, #1
 800717a:	429a      	cmp	r2, r3
 800717c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007180:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007188:	d331      	bcc.n	80071ee <quorem+0x9c>
 800718a:	f04f 0e00 	mov.w	lr, #0
 800718e:	4640      	mov	r0, r8
 8007190:	46ac      	mov	ip, r5
 8007192:	46f2      	mov	sl, lr
 8007194:	f850 2b04 	ldr.w	r2, [r0], #4
 8007198:	b293      	uxth	r3, r2
 800719a:	fb06 e303 	mla	r3, r6, r3, lr
 800719e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071a2:	0c1a      	lsrs	r2, r3, #16
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	fb06 220e 	mla	r2, r6, lr, r2
 80071aa:	ebaa 0303 	sub.w	r3, sl, r3
 80071ae:	f8dc a000 	ldr.w	sl, [ip]
 80071b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071b6:	fa1f fa8a 	uxth.w	sl, sl
 80071ba:	4453      	add	r3, sl
 80071bc:	f8dc a000 	ldr.w	sl, [ip]
 80071c0:	b292      	uxth	r2, r2
 80071c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071d0:	4581      	cmp	r9, r0
 80071d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071d6:	f84c 3b04 	str.w	r3, [ip], #4
 80071da:	d2db      	bcs.n	8007194 <quorem+0x42>
 80071dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80071e0:	b92b      	cbnz	r3, 80071ee <quorem+0x9c>
 80071e2:	9b01      	ldr	r3, [sp, #4]
 80071e4:	3b04      	subs	r3, #4
 80071e6:	429d      	cmp	r5, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	d32d      	bcc.n	8007248 <quorem+0xf6>
 80071ec:	613c      	str	r4, [r7, #16]
 80071ee:	4638      	mov	r0, r7
 80071f0:	f001 f994 	bl	800851c <__mcmp>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	db23      	blt.n	8007240 <quorem+0xee>
 80071f8:	4629      	mov	r1, r5
 80071fa:	2000      	movs	r0, #0
 80071fc:	3601      	adds	r6, #1
 80071fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8007202:	f8d1 c000 	ldr.w	ip, [r1]
 8007206:	b293      	uxth	r3, r2
 8007208:	1ac3      	subs	r3, r0, r3
 800720a:	0c12      	lsrs	r2, r2, #16
 800720c:	fa1f f08c 	uxth.w	r0, ip
 8007210:	4403      	add	r3, r0
 8007212:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007216:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800721a:	b29b      	uxth	r3, r3
 800721c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007220:	45c1      	cmp	r9, r8
 8007222:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007226:	f841 3b04 	str.w	r3, [r1], #4
 800722a:	d2e8      	bcs.n	80071fe <quorem+0xac>
 800722c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007230:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007234:	b922      	cbnz	r2, 8007240 <quorem+0xee>
 8007236:	3b04      	subs	r3, #4
 8007238:	429d      	cmp	r5, r3
 800723a:	461a      	mov	r2, r3
 800723c:	d30a      	bcc.n	8007254 <quorem+0x102>
 800723e:	613c      	str	r4, [r7, #16]
 8007240:	4630      	mov	r0, r6
 8007242:	b003      	add	sp, #12
 8007244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007248:	6812      	ldr	r2, [r2, #0]
 800724a:	3b04      	subs	r3, #4
 800724c:	2a00      	cmp	r2, #0
 800724e:	d1cd      	bne.n	80071ec <quorem+0x9a>
 8007250:	3c01      	subs	r4, #1
 8007252:	e7c8      	b.n	80071e6 <quorem+0x94>
 8007254:	6812      	ldr	r2, [r2, #0]
 8007256:	3b04      	subs	r3, #4
 8007258:	2a00      	cmp	r2, #0
 800725a:	d1f0      	bne.n	800723e <quorem+0xec>
 800725c:	3c01      	subs	r4, #1
 800725e:	e7eb      	b.n	8007238 <quorem+0xe6>
 8007260:	2000      	movs	r0, #0
 8007262:	e7ee      	b.n	8007242 <quorem+0xf0>
 8007264:	0000      	movs	r0, r0
	...

08007268 <_dtoa_r>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	4616      	mov	r6, r2
 800726e:	461f      	mov	r7, r3
 8007270:	69c4      	ldr	r4, [r0, #28]
 8007272:	b099      	sub	sp, #100	; 0x64
 8007274:	4605      	mov	r5, r0
 8007276:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800727a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800727e:	b974      	cbnz	r4, 800729e <_dtoa_r+0x36>
 8007280:	2010      	movs	r0, #16
 8007282:	f000 fe1d 	bl	8007ec0 <malloc>
 8007286:	4602      	mov	r2, r0
 8007288:	61e8      	str	r0, [r5, #28]
 800728a:	b920      	cbnz	r0, 8007296 <_dtoa_r+0x2e>
 800728c:	21ef      	movs	r1, #239	; 0xef
 800728e:	4bac      	ldr	r3, [pc, #688]	; (8007540 <_dtoa_r+0x2d8>)
 8007290:	48ac      	ldr	r0, [pc, #688]	; (8007544 <_dtoa_r+0x2dc>)
 8007292:	f001 fc7b 	bl	8008b8c <__assert_func>
 8007296:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800729a:	6004      	str	r4, [r0, #0]
 800729c:	60c4      	str	r4, [r0, #12]
 800729e:	69eb      	ldr	r3, [r5, #28]
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	b151      	cbz	r1, 80072ba <_dtoa_r+0x52>
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	2301      	movs	r3, #1
 80072a8:	4093      	lsls	r3, r2
 80072aa:	604a      	str	r2, [r1, #4]
 80072ac:	608b      	str	r3, [r1, #8]
 80072ae:	4628      	mov	r0, r5
 80072b0:	f000 fefa 	bl	80080a8 <_Bfree>
 80072b4:	2200      	movs	r2, #0
 80072b6:	69eb      	ldr	r3, [r5, #28]
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	1e3b      	subs	r3, r7, #0
 80072bc:	bfaf      	iteee	ge
 80072be:	2300      	movge	r3, #0
 80072c0:	2201      	movlt	r2, #1
 80072c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072c6:	9305      	strlt	r3, [sp, #20]
 80072c8:	bfa8      	it	ge
 80072ca:	f8c8 3000 	strge.w	r3, [r8]
 80072ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80072d2:	4b9d      	ldr	r3, [pc, #628]	; (8007548 <_dtoa_r+0x2e0>)
 80072d4:	bfb8      	it	lt
 80072d6:	f8c8 2000 	strlt.w	r2, [r8]
 80072da:	ea33 0309 	bics.w	r3, r3, r9
 80072de:	d119      	bne.n	8007314 <_dtoa_r+0xac>
 80072e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80072e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072ec:	4333      	orrs	r3, r6
 80072ee:	f000 8589 	beq.w	8007e04 <_dtoa_r+0xb9c>
 80072f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072f4:	b953      	cbnz	r3, 800730c <_dtoa_r+0xa4>
 80072f6:	4b95      	ldr	r3, [pc, #596]	; (800754c <_dtoa_r+0x2e4>)
 80072f8:	e023      	b.n	8007342 <_dtoa_r+0xda>
 80072fa:	4b95      	ldr	r3, [pc, #596]	; (8007550 <_dtoa_r+0x2e8>)
 80072fc:	9303      	str	r3, [sp, #12]
 80072fe:	3308      	adds	r3, #8
 8007300:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	9803      	ldr	r0, [sp, #12]
 8007306:	b019      	add	sp, #100	; 0x64
 8007308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	4b8f      	ldr	r3, [pc, #572]	; (800754c <_dtoa_r+0x2e4>)
 800730e:	9303      	str	r3, [sp, #12]
 8007310:	3303      	adds	r3, #3
 8007312:	e7f5      	b.n	8007300 <_dtoa_r+0x98>
 8007314:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007318:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800731c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007320:	2200      	movs	r2, #0
 8007322:	2300      	movs	r3, #0
 8007324:	f7f9 fb40 	bl	80009a8 <__aeabi_dcmpeq>
 8007328:	4680      	mov	r8, r0
 800732a:	b160      	cbz	r0, 8007346 <_dtoa_r+0xde>
 800732c:	2301      	movs	r3, #1
 800732e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8562 	beq.w	8007dfe <_dtoa_r+0xb96>
 800733a:	4b86      	ldr	r3, [pc, #536]	; (8007554 <_dtoa_r+0x2ec>)
 800733c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	3b01      	subs	r3, #1
 8007342:	9303      	str	r3, [sp, #12]
 8007344:	e7de      	b.n	8007304 <_dtoa_r+0x9c>
 8007346:	ab16      	add	r3, sp, #88	; 0x58
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	ab17      	add	r3, sp, #92	; 0x5c
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	4628      	mov	r0, r5
 8007350:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007354:	f001 f98a 	bl	800866c <__d2b>
 8007358:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800735c:	4682      	mov	sl, r0
 800735e:	2c00      	cmp	r4, #0
 8007360:	d07e      	beq.n	8007460 <_dtoa_r+0x1f8>
 8007362:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007368:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800736c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007370:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007374:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007378:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800737c:	4619      	mov	r1, r3
 800737e:	2200      	movs	r2, #0
 8007380:	4b75      	ldr	r3, [pc, #468]	; (8007558 <_dtoa_r+0x2f0>)
 8007382:	f7f8 fef1 	bl	8000168 <__aeabi_dsub>
 8007386:	a368      	add	r3, pc, #416	; (adr r3, 8007528 <_dtoa_r+0x2c0>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f7f9 f8a4 	bl	80004d8 <__aeabi_dmul>
 8007390:	a367      	add	r3, pc, #412	; (adr r3, 8007530 <_dtoa_r+0x2c8>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f8 fee9 	bl	800016c <__adddf3>
 800739a:	4606      	mov	r6, r0
 800739c:	4620      	mov	r0, r4
 800739e:	460f      	mov	r7, r1
 80073a0:	f7f9 f830 	bl	8000404 <__aeabi_i2d>
 80073a4:	a364      	add	r3, pc, #400	; (adr r3, 8007538 <_dtoa_r+0x2d0>)
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	f7f9 f895 	bl	80004d8 <__aeabi_dmul>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4630      	mov	r0, r6
 80073b4:	4639      	mov	r1, r7
 80073b6:	f7f8 fed9 	bl	800016c <__adddf3>
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	f7f9 fb3b 	bl	8000a38 <__aeabi_d2iz>
 80073c2:	2200      	movs	r2, #0
 80073c4:	4683      	mov	fp, r0
 80073c6:	2300      	movs	r3, #0
 80073c8:	4630      	mov	r0, r6
 80073ca:	4639      	mov	r1, r7
 80073cc:	f7f9 faf6 	bl	80009bc <__aeabi_dcmplt>
 80073d0:	b148      	cbz	r0, 80073e6 <_dtoa_r+0x17e>
 80073d2:	4658      	mov	r0, fp
 80073d4:	f7f9 f816 	bl	8000404 <__aeabi_i2d>
 80073d8:	4632      	mov	r2, r6
 80073da:	463b      	mov	r3, r7
 80073dc:	f7f9 fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80073e0:	b908      	cbnz	r0, 80073e6 <_dtoa_r+0x17e>
 80073e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073e6:	f1bb 0f16 	cmp.w	fp, #22
 80073ea:	d857      	bhi.n	800749c <_dtoa_r+0x234>
 80073ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073f0:	4b5a      	ldr	r3, [pc, #360]	; (800755c <_dtoa_r+0x2f4>)
 80073f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	f7f9 fadf 	bl	80009bc <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d04e      	beq.n	80074a0 <_dtoa_r+0x238>
 8007402:	2300      	movs	r3, #0
 8007404:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007408:	930f      	str	r3, [sp, #60]	; 0x3c
 800740a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800740c:	1b1b      	subs	r3, r3, r4
 800740e:	1e5a      	subs	r2, r3, #1
 8007410:	bf46      	itte	mi
 8007412:	f1c3 0901 	rsbmi	r9, r3, #1
 8007416:	2300      	movmi	r3, #0
 8007418:	f04f 0900 	movpl.w	r9, #0
 800741c:	9209      	str	r2, [sp, #36]	; 0x24
 800741e:	bf48      	it	mi
 8007420:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007422:	f1bb 0f00 	cmp.w	fp, #0
 8007426:	db3d      	blt.n	80074a4 <_dtoa_r+0x23c>
 8007428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800742e:	445b      	add	r3, fp
 8007430:	9309      	str	r3, [sp, #36]	; 0x24
 8007432:	2300      	movs	r3, #0
 8007434:	930a      	str	r3, [sp, #40]	; 0x28
 8007436:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007438:	2b09      	cmp	r3, #9
 800743a:	d867      	bhi.n	800750c <_dtoa_r+0x2a4>
 800743c:	2b05      	cmp	r3, #5
 800743e:	bfc4      	itt	gt
 8007440:	3b04      	subgt	r3, #4
 8007442:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007446:	bfc8      	it	gt
 8007448:	2400      	movgt	r4, #0
 800744a:	f1a3 0302 	sub.w	r3, r3, #2
 800744e:	bfd8      	it	le
 8007450:	2401      	movle	r4, #1
 8007452:	2b03      	cmp	r3, #3
 8007454:	f200 8086 	bhi.w	8007564 <_dtoa_r+0x2fc>
 8007458:	e8df f003 	tbb	[pc, r3]
 800745c:	5637392c 	.word	0x5637392c
 8007460:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007464:	441c      	add	r4, r3
 8007466:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800746a:	2b20      	cmp	r3, #32
 800746c:	bfc1      	itttt	gt
 800746e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007472:	fa09 f903 	lslgt.w	r9, r9, r3
 8007476:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800747a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800747e:	bfd6      	itet	le
 8007480:	f1c3 0320 	rsble	r3, r3, #32
 8007484:	ea49 0003 	orrgt.w	r0, r9, r3
 8007488:	fa06 f003 	lslle.w	r0, r6, r3
 800748c:	f7f8 ffaa 	bl	80003e4 <__aeabi_ui2d>
 8007490:	2201      	movs	r2, #1
 8007492:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007496:	3c01      	subs	r4, #1
 8007498:	9213      	str	r2, [sp, #76]	; 0x4c
 800749a:	e76f      	b.n	800737c <_dtoa_r+0x114>
 800749c:	2301      	movs	r3, #1
 800749e:	e7b3      	b.n	8007408 <_dtoa_r+0x1a0>
 80074a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80074a2:	e7b2      	b.n	800740a <_dtoa_r+0x1a2>
 80074a4:	f1cb 0300 	rsb	r3, fp, #0
 80074a8:	930a      	str	r3, [sp, #40]	; 0x28
 80074aa:	2300      	movs	r3, #0
 80074ac:	eba9 090b 	sub.w	r9, r9, fp
 80074b0:	930e      	str	r3, [sp, #56]	; 0x38
 80074b2:	e7c0      	b.n	8007436 <_dtoa_r+0x1ce>
 80074b4:	2300      	movs	r3, #0
 80074b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	dc55      	bgt.n	800756a <_dtoa_r+0x302>
 80074be:	2301      	movs	r3, #1
 80074c0:	461a      	mov	r2, r3
 80074c2:	9306      	str	r3, [sp, #24]
 80074c4:	9308      	str	r3, [sp, #32]
 80074c6:	9223      	str	r2, [sp, #140]	; 0x8c
 80074c8:	e00b      	b.n	80074e2 <_dtoa_r+0x27a>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e7f3      	b.n	80074b6 <_dtoa_r+0x24e>
 80074ce:	2300      	movs	r3, #0
 80074d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074d4:	445b      	add	r3, fp
 80074d6:	9306      	str	r3, [sp, #24]
 80074d8:	3301      	adds	r3, #1
 80074da:	2b01      	cmp	r3, #1
 80074dc:	9308      	str	r3, [sp, #32]
 80074de:	bfb8      	it	lt
 80074e0:	2301      	movlt	r3, #1
 80074e2:	2100      	movs	r1, #0
 80074e4:	2204      	movs	r2, #4
 80074e6:	69e8      	ldr	r0, [r5, #28]
 80074e8:	f102 0614 	add.w	r6, r2, #20
 80074ec:	429e      	cmp	r6, r3
 80074ee:	d940      	bls.n	8007572 <_dtoa_r+0x30a>
 80074f0:	6041      	str	r1, [r0, #4]
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 fd98 	bl	8008028 <_Balloc>
 80074f8:	9003      	str	r0, [sp, #12]
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d13c      	bne.n	8007578 <_dtoa_r+0x310>
 80074fe:	4602      	mov	r2, r0
 8007500:	f240 11af 	movw	r1, #431	; 0x1af
 8007504:	4b16      	ldr	r3, [pc, #88]	; (8007560 <_dtoa_r+0x2f8>)
 8007506:	e6c3      	b.n	8007290 <_dtoa_r+0x28>
 8007508:	2301      	movs	r3, #1
 800750a:	e7e1      	b.n	80074d0 <_dtoa_r+0x268>
 800750c:	2401      	movs	r4, #1
 800750e:	2300      	movs	r3, #0
 8007510:	940b      	str	r4, [sp, #44]	; 0x2c
 8007512:	9322      	str	r3, [sp, #136]	; 0x88
 8007514:	f04f 33ff 	mov.w	r3, #4294967295
 8007518:	2200      	movs	r2, #0
 800751a:	9306      	str	r3, [sp, #24]
 800751c:	9308      	str	r3, [sp, #32]
 800751e:	2312      	movs	r3, #18
 8007520:	e7d1      	b.n	80074c6 <_dtoa_r+0x25e>
 8007522:	bf00      	nop
 8007524:	f3af 8000 	nop.w
 8007528:	636f4361 	.word	0x636f4361
 800752c:	3fd287a7 	.word	0x3fd287a7
 8007530:	8b60c8b3 	.word	0x8b60c8b3
 8007534:	3fc68a28 	.word	0x3fc68a28
 8007538:	509f79fb 	.word	0x509f79fb
 800753c:	3fd34413 	.word	0x3fd34413
 8007540:	08009a69 	.word	0x08009a69
 8007544:	08009a80 	.word	0x08009a80
 8007548:	7ff00000 	.word	0x7ff00000
 800754c:	08009a65 	.word	0x08009a65
 8007550:	08009a5c 	.word	0x08009a5c
 8007554:	08009a39 	.word	0x08009a39
 8007558:	3ff80000 	.word	0x3ff80000
 800755c:	08009b70 	.word	0x08009b70
 8007560:	08009ad8 	.word	0x08009ad8
 8007564:	2301      	movs	r3, #1
 8007566:	930b      	str	r3, [sp, #44]	; 0x2c
 8007568:	e7d4      	b.n	8007514 <_dtoa_r+0x2ac>
 800756a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800756c:	9306      	str	r3, [sp, #24]
 800756e:	9308      	str	r3, [sp, #32]
 8007570:	e7b7      	b.n	80074e2 <_dtoa_r+0x27a>
 8007572:	3101      	adds	r1, #1
 8007574:	0052      	lsls	r2, r2, #1
 8007576:	e7b7      	b.n	80074e8 <_dtoa_r+0x280>
 8007578:	69eb      	ldr	r3, [r5, #28]
 800757a:	9a03      	ldr	r2, [sp, #12]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	9b08      	ldr	r3, [sp, #32]
 8007580:	2b0e      	cmp	r3, #14
 8007582:	f200 80a8 	bhi.w	80076d6 <_dtoa_r+0x46e>
 8007586:	2c00      	cmp	r4, #0
 8007588:	f000 80a5 	beq.w	80076d6 <_dtoa_r+0x46e>
 800758c:	f1bb 0f00 	cmp.w	fp, #0
 8007590:	dd34      	ble.n	80075fc <_dtoa_r+0x394>
 8007592:	4b9a      	ldr	r3, [pc, #616]	; (80077fc <_dtoa_r+0x594>)
 8007594:	f00b 020f 	and.w	r2, fp, #15
 8007598:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800759c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80075a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80075a8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80075ac:	d016      	beq.n	80075dc <_dtoa_r+0x374>
 80075ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075b2:	4b93      	ldr	r3, [pc, #588]	; (8007800 <_dtoa_r+0x598>)
 80075b4:	2703      	movs	r7, #3
 80075b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075ba:	f7f9 f8b7 	bl	800072c <__aeabi_ddiv>
 80075be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075c2:	f004 040f 	and.w	r4, r4, #15
 80075c6:	4e8e      	ldr	r6, [pc, #568]	; (8007800 <_dtoa_r+0x598>)
 80075c8:	b954      	cbnz	r4, 80075e0 <_dtoa_r+0x378>
 80075ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d2:	f7f9 f8ab 	bl	800072c <__aeabi_ddiv>
 80075d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075da:	e029      	b.n	8007630 <_dtoa_r+0x3c8>
 80075dc:	2702      	movs	r7, #2
 80075de:	e7f2      	b.n	80075c6 <_dtoa_r+0x35e>
 80075e0:	07e1      	lsls	r1, r4, #31
 80075e2:	d508      	bpl.n	80075f6 <_dtoa_r+0x38e>
 80075e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075ec:	f7f8 ff74 	bl	80004d8 <__aeabi_dmul>
 80075f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075f4:	3701      	adds	r7, #1
 80075f6:	1064      	asrs	r4, r4, #1
 80075f8:	3608      	adds	r6, #8
 80075fa:	e7e5      	b.n	80075c8 <_dtoa_r+0x360>
 80075fc:	f000 80a5 	beq.w	800774a <_dtoa_r+0x4e2>
 8007600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007604:	f1cb 0400 	rsb	r4, fp, #0
 8007608:	4b7c      	ldr	r3, [pc, #496]	; (80077fc <_dtoa_r+0x594>)
 800760a:	f004 020f 	and.w	r2, r4, #15
 800760e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f8 ff5f 	bl	80004d8 <__aeabi_dmul>
 800761a:	2702      	movs	r7, #2
 800761c:	2300      	movs	r3, #0
 800761e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007622:	4e77      	ldr	r6, [pc, #476]	; (8007800 <_dtoa_r+0x598>)
 8007624:	1124      	asrs	r4, r4, #4
 8007626:	2c00      	cmp	r4, #0
 8007628:	f040 8084 	bne.w	8007734 <_dtoa_r+0x4cc>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1d2      	bne.n	80075d6 <_dtoa_r+0x36e>
 8007630:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007634:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 8087 	beq.w	800774e <_dtoa_r+0x4e6>
 8007640:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007644:	2200      	movs	r2, #0
 8007646:	4b6f      	ldr	r3, [pc, #444]	; (8007804 <_dtoa_r+0x59c>)
 8007648:	f7f9 f9b8 	bl	80009bc <__aeabi_dcmplt>
 800764c:	2800      	cmp	r0, #0
 800764e:	d07e      	beq.n	800774e <_dtoa_r+0x4e6>
 8007650:	9b08      	ldr	r3, [sp, #32]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d07b      	beq.n	800774e <_dtoa_r+0x4e6>
 8007656:	9b06      	ldr	r3, [sp, #24]
 8007658:	2b00      	cmp	r3, #0
 800765a:	dd38      	ble.n	80076ce <_dtoa_r+0x466>
 800765c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007660:	2200      	movs	r2, #0
 8007662:	4b69      	ldr	r3, [pc, #420]	; (8007808 <_dtoa_r+0x5a0>)
 8007664:	f7f8 ff38 	bl	80004d8 <__aeabi_dmul>
 8007668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800766c:	9c06      	ldr	r4, [sp, #24]
 800766e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007672:	3701      	adds	r7, #1
 8007674:	4638      	mov	r0, r7
 8007676:	f7f8 fec5 	bl	8000404 <__aeabi_i2d>
 800767a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800767e:	f7f8 ff2b 	bl	80004d8 <__aeabi_dmul>
 8007682:	2200      	movs	r2, #0
 8007684:	4b61      	ldr	r3, [pc, #388]	; (800780c <_dtoa_r+0x5a4>)
 8007686:	f7f8 fd71 	bl	800016c <__adddf3>
 800768a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800768e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007692:	9611      	str	r6, [sp, #68]	; 0x44
 8007694:	2c00      	cmp	r4, #0
 8007696:	d15d      	bne.n	8007754 <_dtoa_r+0x4ec>
 8007698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800769c:	2200      	movs	r2, #0
 800769e:	4b5c      	ldr	r3, [pc, #368]	; (8007810 <_dtoa_r+0x5a8>)
 80076a0:	f7f8 fd62 	bl	8000168 <__aeabi_dsub>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076ac:	4633      	mov	r3, r6
 80076ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076b0:	f7f9 f9a2 	bl	80009f8 <__aeabi_dcmpgt>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f040 8295 	bne.w	8007be4 <_dtoa_r+0x97c>
 80076ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80076c4:	f7f9 f97a 	bl	80009bc <__aeabi_dcmplt>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	f040 8289 	bne.w	8007be0 <_dtoa_r+0x978>
 80076ce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80076d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f2c0 8151 	blt.w	8007980 <_dtoa_r+0x718>
 80076de:	f1bb 0f0e 	cmp.w	fp, #14
 80076e2:	f300 814d 	bgt.w	8007980 <_dtoa_r+0x718>
 80076e6:	4b45      	ldr	r3, [pc, #276]	; (80077fc <_dtoa_r+0x594>)
 80076e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80076f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f280 80da 	bge.w	80078b0 <_dtoa_r+0x648>
 80076fc:	9b08      	ldr	r3, [sp, #32]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f300 80d6 	bgt.w	80078b0 <_dtoa_r+0x648>
 8007704:	f040 826b 	bne.w	8007bde <_dtoa_r+0x976>
 8007708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800770c:	2200      	movs	r2, #0
 800770e:	4b40      	ldr	r3, [pc, #256]	; (8007810 <_dtoa_r+0x5a8>)
 8007710:	f7f8 fee2 	bl	80004d8 <__aeabi_dmul>
 8007714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007718:	f7f9 f964 	bl	80009e4 <__aeabi_dcmpge>
 800771c:	9c08      	ldr	r4, [sp, #32]
 800771e:	4626      	mov	r6, r4
 8007720:	2800      	cmp	r0, #0
 8007722:	f040 8241 	bne.w	8007ba8 <_dtoa_r+0x940>
 8007726:	2331      	movs	r3, #49	; 0x31
 8007728:	9f03      	ldr	r7, [sp, #12]
 800772a:	f10b 0b01 	add.w	fp, fp, #1
 800772e:	f807 3b01 	strb.w	r3, [r7], #1
 8007732:	e23d      	b.n	8007bb0 <_dtoa_r+0x948>
 8007734:	07e2      	lsls	r2, r4, #31
 8007736:	d505      	bpl.n	8007744 <_dtoa_r+0x4dc>
 8007738:	e9d6 2300 	ldrd	r2, r3, [r6]
 800773c:	f7f8 fecc 	bl	80004d8 <__aeabi_dmul>
 8007740:	2301      	movs	r3, #1
 8007742:	3701      	adds	r7, #1
 8007744:	1064      	asrs	r4, r4, #1
 8007746:	3608      	adds	r6, #8
 8007748:	e76d      	b.n	8007626 <_dtoa_r+0x3be>
 800774a:	2702      	movs	r7, #2
 800774c:	e770      	b.n	8007630 <_dtoa_r+0x3c8>
 800774e:	46d8      	mov	r8, fp
 8007750:	9c08      	ldr	r4, [sp, #32]
 8007752:	e78f      	b.n	8007674 <_dtoa_r+0x40c>
 8007754:	9903      	ldr	r1, [sp, #12]
 8007756:	4b29      	ldr	r3, [pc, #164]	; (80077fc <_dtoa_r+0x594>)
 8007758:	4421      	add	r1, r4
 800775a:	9112      	str	r1, [sp, #72]	; 0x48
 800775c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800775e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007762:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007766:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800776a:	2900      	cmp	r1, #0
 800776c:	d054      	beq.n	8007818 <_dtoa_r+0x5b0>
 800776e:	2000      	movs	r0, #0
 8007770:	4928      	ldr	r1, [pc, #160]	; (8007814 <_dtoa_r+0x5ac>)
 8007772:	f7f8 ffdb 	bl	800072c <__aeabi_ddiv>
 8007776:	463b      	mov	r3, r7
 8007778:	4632      	mov	r2, r6
 800777a:	f7f8 fcf5 	bl	8000168 <__aeabi_dsub>
 800777e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007782:	9f03      	ldr	r7, [sp, #12]
 8007784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007788:	f7f9 f956 	bl	8000a38 <__aeabi_d2iz>
 800778c:	4604      	mov	r4, r0
 800778e:	f7f8 fe39 	bl	8000404 <__aeabi_i2d>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800779a:	f7f8 fce5 	bl	8000168 <__aeabi_dsub>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	3430      	adds	r4, #48	; 0x30
 80077a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077ac:	f807 4b01 	strb.w	r4, [r7], #1
 80077b0:	f7f9 f904 	bl	80009bc <__aeabi_dcmplt>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d173      	bne.n	80078a0 <_dtoa_r+0x638>
 80077b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077bc:	2000      	movs	r0, #0
 80077be:	4911      	ldr	r1, [pc, #68]	; (8007804 <_dtoa_r+0x59c>)
 80077c0:	f7f8 fcd2 	bl	8000168 <__aeabi_dsub>
 80077c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077c8:	f7f9 f8f8 	bl	80009bc <__aeabi_dcmplt>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	f040 80b6 	bne.w	800793e <_dtoa_r+0x6d6>
 80077d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077d4:	429f      	cmp	r7, r3
 80077d6:	f43f af7a 	beq.w	80076ce <_dtoa_r+0x466>
 80077da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077de:	2200      	movs	r2, #0
 80077e0:	4b09      	ldr	r3, [pc, #36]	; (8007808 <_dtoa_r+0x5a0>)
 80077e2:	f7f8 fe79 	bl	80004d8 <__aeabi_dmul>
 80077e6:	2200      	movs	r2, #0
 80077e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077f0:	4b05      	ldr	r3, [pc, #20]	; (8007808 <_dtoa_r+0x5a0>)
 80077f2:	f7f8 fe71 	bl	80004d8 <__aeabi_dmul>
 80077f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077fa:	e7c3      	b.n	8007784 <_dtoa_r+0x51c>
 80077fc:	08009b70 	.word	0x08009b70
 8007800:	08009b48 	.word	0x08009b48
 8007804:	3ff00000 	.word	0x3ff00000
 8007808:	40240000 	.word	0x40240000
 800780c:	401c0000 	.word	0x401c0000
 8007810:	40140000 	.word	0x40140000
 8007814:	3fe00000 	.word	0x3fe00000
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f8 fe5c 	bl	80004d8 <__aeabi_dmul>
 8007820:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007822:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007826:	9c03      	ldr	r4, [sp, #12]
 8007828:	9314      	str	r3, [sp, #80]	; 0x50
 800782a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800782e:	f7f9 f903 	bl	8000a38 <__aeabi_d2iz>
 8007832:	9015      	str	r0, [sp, #84]	; 0x54
 8007834:	f7f8 fde6 	bl	8000404 <__aeabi_i2d>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007840:	f7f8 fc92 	bl	8000168 <__aeabi_dsub>
 8007844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007846:	4606      	mov	r6, r0
 8007848:	3330      	adds	r3, #48	; 0x30
 800784a:	f804 3b01 	strb.w	r3, [r4], #1
 800784e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007850:	460f      	mov	r7, r1
 8007852:	429c      	cmp	r4, r3
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	d124      	bne.n	80078a4 <_dtoa_r+0x63c>
 800785a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800785e:	4baf      	ldr	r3, [pc, #700]	; (8007b1c <_dtoa_r+0x8b4>)
 8007860:	f7f8 fc84 	bl	800016c <__adddf3>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	f7f9 f8c4 	bl	80009f8 <__aeabi_dcmpgt>
 8007870:	2800      	cmp	r0, #0
 8007872:	d163      	bne.n	800793c <_dtoa_r+0x6d4>
 8007874:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007878:	2000      	movs	r0, #0
 800787a:	49a8      	ldr	r1, [pc, #672]	; (8007b1c <_dtoa_r+0x8b4>)
 800787c:	f7f8 fc74 	bl	8000168 <__aeabi_dsub>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4630      	mov	r0, r6
 8007886:	4639      	mov	r1, r7
 8007888:	f7f9 f898 	bl	80009bc <__aeabi_dcmplt>
 800788c:	2800      	cmp	r0, #0
 800788e:	f43f af1e 	beq.w	80076ce <_dtoa_r+0x466>
 8007892:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007894:	1e7b      	subs	r3, r7, #1
 8007896:	9314      	str	r3, [sp, #80]	; 0x50
 8007898:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800789c:	2b30      	cmp	r3, #48	; 0x30
 800789e:	d0f8      	beq.n	8007892 <_dtoa_r+0x62a>
 80078a0:	46c3      	mov	fp, r8
 80078a2:	e03b      	b.n	800791c <_dtoa_r+0x6b4>
 80078a4:	4b9e      	ldr	r3, [pc, #632]	; (8007b20 <_dtoa_r+0x8b8>)
 80078a6:	f7f8 fe17 	bl	80004d8 <__aeabi_dmul>
 80078aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078ae:	e7bc      	b.n	800782a <_dtoa_r+0x5c2>
 80078b0:	9f03      	ldr	r7, [sp, #12]
 80078b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80078b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078ba:	4640      	mov	r0, r8
 80078bc:	4649      	mov	r1, r9
 80078be:	f7f8 ff35 	bl	800072c <__aeabi_ddiv>
 80078c2:	f7f9 f8b9 	bl	8000a38 <__aeabi_d2iz>
 80078c6:	4604      	mov	r4, r0
 80078c8:	f7f8 fd9c 	bl	8000404 <__aeabi_i2d>
 80078cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078d0:	f7f8 fe02 	bl	80004d8 <__aeabi_dmul>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4640      	mov	r0, r8
 80078da:	4649      	mov	r1, r9
 80078dc:	f7f8 fc44 	bl	8000168 <__aeabi_dsub>
 80078e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80078e4:	f807 6b01 	strb.w	r6, [r7], #1
 80078e8:	9e03      	ldr	r6, [sp, #12]
 80078ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80078ee:	1bbe      	subs	r6, r7, r6
 80078f0:	45b4      	cmp	ip, r6
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	d136      	bne.n	8007966 <_dtoa_r+0x6fe>
 80078f8:	f7f8 fc38 	bl	800016c <__adddf3>
 80078fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007900:	4680      	mov	r8, r0
 8007902:	4689      	mov	r9, r1
 8007904:	f7f9 f878 	bl	80009f8 <__aeabi_dcmpgt>
 8007908:	bb58      	cbnz	r0, 8007962 <_dtoa_r+0x6fa>
 800790a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800790e:	4640      	mov	r0, r8
 8007910:	4649      	mov	r1, r9
 8007912:	f7f9 f849 	bl	80009a8 <__aeabi_dcmpeq>
 8007916:	b108      	cbz	r0, 800791c <_dtoa_r+0x6b4>
 8007918:	07e3      	lsls	r3, r4, #31
 800791a:	d422      	bmi.n	8007962 <_dtoa_r+0x6fa>
 800791c:	4651      	mov	r1, sl
 800791e:	4628      	mov	r0, r5
 8007920:	f000 fbc2 	bl	80080a8 <_Bfree>
 8007924:	2300      	movs	r3, #0
 8007926:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007928:	703b      	strb	r3, [r7, #0]
 800792a:	f10b 0301 	add.w	r3, fp, #1
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007932:	2b00      	cmp	r3, #0
 8007934:	f43f ace6 	beq.w	8007304 <_dtoa_r+0x9c>
 8007938:	601f      	str	r7, [r3, #0]
 800793a:	e4e3      	b.n	8007304 <_dtoa_r+0x9c>
 800793c:	4627      	mov	r7, r4
 800793e:	463b      	mov	r3, r7
 8007940:	461f      	mov	r7, r3
 8007942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007946:	2a39      	cmp	r2, #57	; 0x39
 8007948:	d107      	bne.n	800795a <_dtoa_r+0x6f2>
 800794a:	9a03      	ldr	r2, [sp, #12]
 800794c:	429a      	cmp	r2, r3
 800794e:	d1f7      	bne.n	8007940 <_dtoa_r+0x6d8>
 8007950:	2230      	movs	r2, #48	; 0x30
 8007952:	9903      	ldr	r1, [sp, #12]
 8007954:	f108 0801 	add.w	r8, r8, #1
 8007958:	700a      	strb	r2, [r1, #0]
 800795a:	781a      	ldrb	r2, [r3, #0]
 800795c:	3201      	adds	r2, #1
 800795e:	701a      	strb	r2, [r3, #0]
 8007960:	e79e      	b.n	80078a0 <_dtoa_r+0x638>
 8007962:	46d8      	mov	r8, fp
 8007964:	e7eb      	b.n	800793e <_dtoa_r+0x6d6>
 8007966:	2200      	movs	r2, #0
 8007968:	4b6d      	ldr	r3, [pc, #436]	; (8007b20 <_dtoa_r+0x8b8>)
 800796a:	f7f8 fdb5 	bl	80004d8 <__aeabi_dmul>
 800796e:	2200      	movs	r2, #0
 8007970:	2300      	movs	r3, #0
 8007972:	4680      	mov	r8, r0
 8007974:	4689      	mov	r9, r1
 8007976:	f7f9 f817 	bl	80009a8 <__aeabi_dcmpeq>
 800797a:	2800      	cmp	r0, #0
 800797c:	d09b      	beq.n	80078b6 <_dtoa_r+0x64e>
 800797e:	e7cd      	b.n	800791c <_dtoa_r+0x6b4>
 8007980:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007982:	2a00      	cmp	r2, #0
 8007984:	f000 80c4 	beq.w	8007b10 <_dtoa_r+0x8a8>
 8007988:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800798a:	2a01      	cmp	r2, #1
 800798c:	f300 80a8 	bgt.w	8007ae0 <_dtoa_r+0x878>
 8007990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007992:	2a00      	cmp	r2, #0
 8007994:	f000 80a0 	beq.w	8007ad8 <_dtoa_r+0x870>
 8007998:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800799c:	464f      	mov	r7, r9
 800799e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a2:	2101      	movs	r1, #1
 80079a4:	441a      	add	r2, r3
 80079a6:	4628      	mov	r0, r5
 80079a8:	4499      	add	r9, r3
 80079aa:	9209      	str	r2, [sp, #36]	; 0x24
 80079ac:	f000 fc32 	bl	8008214 <__i2b>
 80079b0:	4606      	mov	r6, r0
 80079b2:	b15f      	cbz	r7, 80079cc <_dtoa_r+0x764>
 80079b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	dd08      	ble.n	80079cc <_dtoa_r+0x764>
 80079ba:	42bb      	cmp	r3, r7
 80079bc:	bfa8      	it	ge
 80079be:	463b      	movge	r3, r7
 80079c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c2:	eba9 0903 	sub.w	r9, r9, r3
 80079c6:	1aff      	subs	r7, r7, r3
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	9309      	str	r3, [sp, #36]	; 0x24
 80079cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ce:	b1f3      	cbz	r3, 8007a0e <_dtoa_r+0x7a6>
 80079d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 80a0 	beq.w	8007b18 <_dtoa_r+0x8b0>
 80079d8:	2c00      	cmp	r4, #0
 80079da:	dd10      	ble.n	80079fe <_dtoa_r+0x796>
 80079dc:	4631      	mov	r1, r6
 80079de:	4622      	mov	r2, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 fcd5 	bl	8008390 <__pow5mult>
 80079e6:	4652      	mov	r2, sl
 80079e8:	4601      	mov	r1, r0
 80079ea:	4606      	mov	r6, r0
 80079ec:	4628      	mov	r0, r5
 80079ee:	f000 fc27 	bl	8008240 <__multiply>
 80079f2:	4680      	mov	r8, r0
 80079f4:	4651      	mov	r1, sl
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 fb56 	bl	80080a8 <_Bfree>
 80079fc:	46c2      	mov	sl, r8
 80079fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a00:	1b1a      	subs	r2, r3, r4
 8007a02:	d004      	beq.n	8007a0e <_dtoa_r+0x7a6>
 8007a04:	4651      	mov	r1, sl
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 fcc2 	bl	8008390 <__pow5mult>
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	2101      	movs	r1, #1
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 fbff 	bl	8008214 <__i2b>
 8007a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a18:	4604      	mov	r4, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f340 8082 	ble.w	8007b24 <_dtoa_r+0x8bc>
 8007a20:	461a      	mov	r2, r3
 8007a22:	4601      	mov	r1, r0
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 fcb3 	bl	8008390 <__pow5mult>
 8007a2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	dd7b      	ble.n	8007b2a <_dtoa_r+0x8c2>
 8007a32:	f04f 0800 	mov.w	r8, #0
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a3c:	6918      	ldr	r0, [r3, #16]
 8007a3e:	f000 fb9b 	bl	8008178 <__hi0bits>
 8007a42:	f1c0 0020 	rsb	r0, r0, #32
 8007a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a48:	4418      	add	r0, r3
 8007a4a:	f010 001f 	ands.w	r0, r0, #31
 8007a4e:	f000 8092 	beq.w	8007b76 <_dtoa_r+0x90e>
 8007a52:	f1c0 0320 	rsb	r3, r0, #32
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	f340 8085 	ble.w	8007b66 <_dtoa_r+0x8fe>
 8007a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5e:	f1c0 001c 	rsb	r0, r0, #28
 8007a62:	4403      	add	r3, r0
 8007a64:	4481      	add	r9, r0
 8007a66:	4407      	add	r7, r0
 8007a68:	9309      	str	r3, [sp, #36]	; 0x24
 8007a6a:	f1b9 0f00 	cmp.w	r9, #0
 8007a6e:	dd05      	ble.n	8007a7c <_dtoa_r+0x814>
 8007a70:	4651      	mov	r1, sl
 8007a72:	464a      	mov	r2, r9
 8007a74:	4628      	mov	r0, r5
 8007a76:	f000 fce5 	bl	8008444 <__lshift>
 8007a7a:	4682      	mov	sl, r0
 8007a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	dd05      	ble.n	8007a8e <_dtoa_r+0x826>
 8007a82:	4621      	mov	r1, r4
 8007a84:	461a      	mov	r2, r3
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 fcdc 	bl	8008444 <__lshift>
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d072      	beq.n	8007b7a <_dtoa_r+0x912>
 8007a94:	4621      	mov	r1, r4
 8007a96:	4650      	mov	r0, sl
 8007a98:	f000 fd40 	bl	800851c <__mcmp>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	da6c      	bge.n	8007b7a <_dtoa_r+0x912>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4651      	mov	r1, sl
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 fb20 	bl	80080ec <__multadd>
 8007aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aae:	4682      	mov	sl, r0
 8007ab0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 81ac 	beq.w	8007e12 <_dtoa_r+0xbaa>
 8007aba:	2300      	movs	r3, #0
 8007abc:	4631      	mov	r1, r6
 8007abe:	220a      	movs	r2, #10
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	f000 fb13 	bl	80080ec <__multadd>
 8007ac6:	9b06      	ldr	r3, [sp, #24]
 8007ac8:	4606      	mov	r6, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f300 8093 	bgt.w	8007bf6 <_dtoa_r+0x98e>
 8007ad0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	dc59      	bgt.n	8007b8a <_dtoa_r+0x922>
 8007ad6:	e08e      	b.n	8007bf6 <_dtoa_r+0x98e>
 8007ad8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ada:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ade:	e75d      	b.n	800799c <_dtoa_r+0x734>
 8007ae0:	9b08      	ldr	r3, [sp, #32]
 8007ae2:	1e5c      	subs	r4, r3, #1
 8007ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae6:	42a3      	cmp	r3, r4
 8007ae8:	bfbf      	itttt	lt
 8007aea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007aec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007aee:	1ae3      	sublt	r3, r4, r3
 8007af0:	18d2      	addlt	r2, r2, r3
 8007af2:	bfa8      	it	ge
 8007af4:	1b1c      	subge	r4, r3, r4
 8007af6:	9b08      	ldr	r3, [sp, #32]
 8007af8:	bfbe      	ittt	lt
 8007afa:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007afc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007afe:	2400      	movlt	r4, #0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bfb5      	itete	lt
 8007b04:	eba9 0703 	sublt.w	r7, r9, r3
 8007b08:	464f      	movge	r7, r9
 8007b0a:	2300      	movlt	r3, #0
 8007b0c:	9b08      	ldrge	r3, [sp, #32]
 8007b0e:	e747      	b.n	80079a0 <_dtoa_r+0x738>
 8007b10:	464f      	mov	r7, r9
 8007b12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007b16:	e74c      	b.n	80079b2 <_dtoa_r+0x74a>
 8007b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b1a:	e773      	b.n	8007a04 <_dtoa_r+0x79c>
 8007b1c:	3fe00000 	.word	0x3fe00000
 8007b20:	40240000 	.word	0x40240000
 8007b24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	dc18      	bgt.n	8007b5c <_dtoa_r+0x8f4>
 8007b2a:	9b04      	ldr	r3, [sp, #16]
 8007b2c:	b9b3      	cbnz	r3, 8007b5c <_dtoa_r+0x8f4>
 8007b2e:	9b05      	ldr	r3, [sp, #20]
 8007b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b34:	b993      	cbnz	r3, 8007b5c <_dtoa_r+0x8f4>
 8007b36:	9b05      	ldr	r3, [sp, #20]
 8007b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b3c:	0d1b      	lsrs	r3, r3, #20
 8007b3e:	051b      	lsls	r3, r3, #20
 8007b40:	b17b      	cbz	r3, 8007b62 <_dtoa_r+0x8fa>
 8007b42:	f04f 0801 	mov.w	r8, #1
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	f109 0901 	add.w	r9, r9, #1
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f47f af6f 	bne.w	8007a36 <_dtoa_r+0x7ce>
 8007b58:	2001      	movs	r0, #1
 8007b5a:	e774      	b.n	8007a46 <_dtoa_r+0x7de>
 8007b5c:	f04f 0800 	mov.w	r8, #0
 8007b60:	e7f6      	b.n	8007b50 <_dtoa_r+0x8e8>
 8007b62:	4698      	mov	r8, r3
 8007b64:	e7f4      	b.n	8007b50 <_dtoa_r+0x8e8>
 8007b66:	d080      	beq.n	8007a6a <_dtoa_r+0x802>
 8007b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b6a:	331c      	adds	r3, #28
 8007b6c:	441a      	add	r2, r3
 8007b6e:	4499      	add	r9, r3
 8007b70:	441f      	add	r7, r3
 8007b72:	9209      	str	r2, [sp, #36]	; 0x24
 8007b74:	e779      	b.n	8007a6a <_dtoa_r+0x802>
 8007b76:	4603      	mov	r3, r0
 8007b78:	e7f6      	b.n	8007b68 <_dtoa_r+0x900>
 8007b7a:	9b08      	ldr	r3, [sp, #32]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dc34      	bgt.n	8007bea <_dtoa_r+0x982>
 8007b80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	dd31      	ble.n	8007bea <_dtoa_r+0x982>
 8007b86:	9b08      	ldr	r3, [sp, #32]
 8007b88:	9306      	str	r3, [sp, #24]
 8007b8a:	9b06      	ldr	r3, [sp, #24]
 8007b8c:	b963      	cbnz	r3, 8007ba8 <_dtoa_r+0x940>
 8007b8e:	4621      	mov	r1, r4
 8007b90:	2205      	movs	r2, #5
 8007b92:	4628      	mov	r0, r5
 8007b94:	f000 faaa 	bl	80080ec <__multadd>
 8007b98:	4601      	mov	r1, r0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4650      	mov	r0, sl
 8007b9e:	f000 fcbd 	bl	800851c <__mcmp>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	f73f adbf 	bgt.w	8007726 <_dtoa_r+0x4be>
 8007ba8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007baa:	9f03      	ldr	r7, [sp, #12]
 8007bac:	ea6f 0b03 	mvn.w	fp, r3
 8007bb0:	f04f 0800 	mov.w	r8, #0
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 fa76 	bl	80080a8 <_Bfree>
 8007bbc:	2e00      	cmp	r6, #0
 8007bbe:	f43f aead 	beq.w	800791c <_dtoa_r+0x6b4>
 8007bc2:	f1b8 0f00 	cmp.w	r8, #0
 8007bc6:	d005      	beq.n	8007bd4 <_dtoa_r+0x96c>
 8007bc8:	45b0      	cmp	r8, r6
 8007bca:	d003      	beq.n	8007bd4 <_dtoa_r+0x96c>
 8007bcc:	4641      	mov	r1, r8
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 fa6a 	bl	80080a8 <_Bfree>
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 fa66 	bl	80080a8 <_Bfree>
 8007bdc:	e69e      	b.n	800791c <_dtoa_r+0x6b4>
 8007bde:	2400      	movs	r4, #0
 8007be0:	4626      	mov	r6, r4
 8007be2:	e7e1      	b.n	8007ba8 <_dtoa_r+0x940>
 8007be4:	46c3      	mov	fp, r8
 8007be6:	4626      	mov	r6, r4
 8007be8:	e59d      	b.n	8007726 <_dtoa_r+0x4be>
 8007bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 80c8 	beq.w	8007d82 <_dtoa_r+0xb1a>
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	9306      	str	r3, [sp, #24]
 8007bf6:	2f00      	cmp	r7, #0
 8007bf8:	dd05      	ble.n	8007c06 <_dtoa_r+0x99e>
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	463a      	mov	r2, r7
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 fc20 	bl	8008444 <__lshift>
 8007c04:	4606      	mov	r6, r0
 8007c06:	f1b8 0f00 	cmp.w	r8, #0
 8007c0a:	d05b      	beq.n	8007cc4 <_dtoa_r+0xa5c>
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	6871      	ldr	r1, [r6, #4]
 8007c10:	f000 fa0a 	bl	8008028 <_Balloc>
 8007c14:	4607      	mov	r7, r0
 8007c16:	b928      	cbnz	r0, 8007c24 <_dtoa_r+0x9bc>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c1e:	4b81      	ldr	r3, [pc, #516]	; (8007e24 <_dtoa_r+0xbbc>)
 8007c20:	f7ff bb36 	b.w	8007290 <_dtoa_r+0x28>
 8007c24:	6932      	ldr	r2, [r6, #16]
 8007c26:	f106 010c 	add.w	r1, r6, #12
 8007c2a:	3202      	adds	r2, #2
 8007c2c:	0092      	lsls	r2, r2, #2
 8007c2e:	300c      	adds	r0, #12
 8007c30:	f000 ff9e 	bl	8008b70 <memcpy>
 8007c34:	2201      	movs	r2, #1
 8007c36:	4639      	mov	r1, r7
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f000 fc03 	bl	8008444 <__lshift>
 8007c3e:	46b0      	mov	r8, r6
 8007c40:	4606      	mov	r6, r0
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	9a03      	ldr	r2, [sp, #12]
 8007c46:	3301      	adds	r3, #1
 8007c48:	9308      	str	r3, [sp, #32]
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c50:	9b04      	ldr	r3, [sp, #16]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	930a      	str	r3, [sp, #40]	; 0x28
 8007c58:	9b08      	ldr	r3, [sp, #32]
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	4650      	mov	r0, sl
 8007c60:	9304      	str	r3, [sp, #16]
 8007c62:	f7ff fa76 	bl	8007152 <quorem>
 8007c66:	4641      	mov	r1, r8
 8007c68:	9006      	str	r0, [sp, #24]
 8007c6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c6e:	4650      	mov	r0, sl
 8007c70:	f000 fc54 	bl	800851c <__mcmp>
 8007c74:	4632      	mov	r2, r6
 8007c76:	9009      	str	r0, [sp, #36]	; 0x24
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f000 fc6a 	bl	8008554 <__mdiff>
 8007c80:	68c2      	ldr	r2, [r0, #12]
 8007c82:	4607      	mov	r7, r0
 8007c84:	bb02      	cbnz	r2, 8007cc8 <_dtoa_r+0xa60>
 8007c86:	4601      	mov	r1, r0
 8007c88:	4650      	mov	r0, sl
 8007c8a:	f000 fc47 	bl	800851c <__mcmp>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	4639      	mov	r1, r7
 8007c92:	4628      	mov	r0, r5
 8007c94:	920c      	str	r2, [sp, #48]	; 0x30
 8007c96:	f000 fa07 	bl	80080a8 <_Bfree>
 8007c9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c9e:	9f08      	ldr	r7, [sp, #32]
 8007ca0:	ea43 0102 	orr.w	r1, r3, r2
 8007ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca6:	4319      	orrs	r1, r3
 8007ca8:	d110      	bne.n	8007ccc <_dtoa_r+0xa64>
 8007caa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cae:	d029      	beq.n	8007d04 <_dtoa_r+0xa9c>
 8007cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dd02      	ble.n	8007cbc <_dtoa_r+0xa54>
 8007cb6:	9b06      	ldr	r3, [sp, #24]
 8007cb8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	f883 9000 	strb.w	r9, [r3]
 8007cc2:	e777      	b.n	8007bb4 <_dtoa_r+0x94c>
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	e7ba      	b.n	8007c3e <_dtoa_r+0x9d6>
 8007cc8:	2201      	movs	r2, #1
 8007cca:	e7e1      	b.n	8007c90 <_dtoa_r+0xa28>
 8007ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	db04      	blt.n	8007cdc <_dtoa_r+0xa74>
 8007cd2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007cd4:	430b      	orrs	r3, r1
 8007cd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	d120      	bne.n	8007d1e <_dtoa_r+0xab6>
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	dded      	ble.n	8007cbc <_dtoa_r+0xa54>
 8007ce0:	4651      	mov	r1, sl
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f000 fbad 	bl	8008444 <__lshift>
 8007cea:	4621      	mov	r1, r4
 8007cec:	4682      	mov	sl, r0
 8007cee:	f000 fc15 	bl	800851c <__mcmp>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	dc03      	bgt.n	8007cfe <_dtoa_r+0xa96>
 8007cf6:	d1e1      	bne.n	8007cbc <_dtoa_r+0xa54>
 8007cf8:	f019 0f01 	tst.w	r9, #1
 8007cfc:	d0de      	beq.n	8007cbc <_dtoa_r+0xa54>
 8007cfe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d02:	d1d8      	bne.n	8007cb6 <_dtoa_r+0xa4e>
 8007d04:	2339      	movs	r3, #57	; 0x39
 8007d06:	9a04      	ldr	r2, [sp, #16]
 8007d08:	7013      	strb	r3, [r2, #0]
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	461f      	mov	r7, r3
 8007d0e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	2a39      	cmp	r2, #57	; 0x39
 8007d16:	d06b      	beq.n	8007df0 <_dtoa_r+0xb88>
 8007d18:	3201      	adds	r2, #1
 8007d1a:	701a      	strb	r2, [r3, #0]
 8007d1c:	e74a      	b.n	8007bb4 <_dtoa_r+0x94c>
 8007d1e:	2a00      	cmp	r2, #0
 8007d20:	dd07      	ble.n	8007d32 <_dtoa_r+0xaca>
 8007d22:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d26:	d0ed      	beq.n	8007d04 <_dtoa_r+0xa9c>
 8007d28:	9a04      	ldr	r2, [sp, #16]
 8007d2a:	f109 0301 	add.w	r3, r9, #1
 8007d2e:	7013      	strb	r3, [r2, #0]
 8007d30:	e740      	b.n	8007bb4 <_dtoa_r+0x94c>
 8007d32:	9b08      	ldr	r3, [sp, #32]
 8007d34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d36:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d042      	beq.n	8007dc4 <_dtoa_r+0xb5c>
 8007d3e:	4651      	mov	r1, sl
 8007d40:	2300      	movs	r3, #0
 8007d42:	220a      	movs	r2, #10
 8007d44:	4628      	mov	r0, r5
 8007d46:	f000 f9d1 	bl	80080ec <__multadd>
 8007d4a:	45b0      	cmp	r8, r6
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	f04f 020a 	mov.w	r2, #10
 8007d56:	4641      	mov	r1, r8
 8007d58:	4628      	mov	r0, r5
 8007d5a:	d107      	bne.n	8007d6c <_dtoa_r+0xb04>
 8007d5c:	f000 f9c6 	bl	80080ec <__multadd>
 8007d60:	4680      	mov	r8, r0
 8007d62:	4606      	mov	r6, r0
 8007d64:	9b08      	ldr	r3, [sp, #32]
 8007d66:	3301      	adds	r3, #1
 8007d68:	9308      	str	r3, [sp, #32]
 8007d6a:	e775      	b.n	8007c58 <_dtoa_r+0x9f0>
 8007d6c:	f000 f9be 	bl	80080ec <__multadd>
 8007d70:	4631      	mov	r1, r6
 8007d72:	4680      	mov	r8, r0
 8007d74:	2300      	movs	r3, #0
 8007d76:	220a      	movs	r2, #10
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 f9b7 	bl	80080ec <__multadd>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	e7f0      	b.n	8007d64 <_dtoa_r+0xafc>
 8007d82:	9b08      	ldr	r3, [sp, #32]
 8007d84:	9306      	str	r3, [sp, #24]
 8007d86:	9f03      	ldr	r7, [sp, #12]
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	f7ff f9e1 	bl	8007152 <quorem>
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d96:	f807 9b01 	strb.w	r9, [r7], #1
 8007d9a:	1afa      	subs	r2, r7, r3
 8007d9c:	9b06      	ldr	r3, [sp, #24]
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	dd07      	ble.n	8007db2 <_dtoa_r+0xb4a>
 8007da2:	4651      	mov	r1, sl
 8007da4:	2300      	movs	r3, #0
 8007da6:	220a      	movs	r2, #10
 8007da8:	4628      	mov	r0, r5
 8007daa:	f000 f99f 	bl	80080ec <__multadd>
 8007dae:	4682      	mov	sl, r0
 8007db0:	e7ea      	b.n	8007d88 <_dtoa_r+0xb20>
 8007db2:	9b06      	ldr	r3, [sp, #24]
 8007db4:	f04f 0800 	mov.w	r8, #0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bfcc      	ite	gt
 8007dbc:	461f      	movgt	r7, r3
 8007dbe:	2701      	movle	r7, #1
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	441f      	add	r7, r3
 8007dc4:	4651      	mov	r1, sl
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f000 fb3b 	bl	8008444 <__lshift>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4682      	mov	sl, r0
 8007dd2:	f000 fba3 	bl	800851c <__mcmp>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	dc97      	bgt.n	8007d0a <_dtoa_r+0xaa2>
 8007dda:	d102      	bne.n	8007de2 <_dtoa_r+0xb7a>
 8007ddc:	f019 0f01 	tst.w	r9, #1
 8007de0:	d193      	bne.n	8007d0a <_dtoa_r+0xaa2>
 8007de2:	463b      	mov	r3, r7
 8007de4:	461f      	mov	r7, r3
 8007de6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dea:	2a30      	cmp	r2, #48	; 0x30
 8007dec:	d0fa      	beq.n	8007de4 <_dtoa_r+0xb7c>
 8007dee:	e6e1      	b.n	8007bb4 <_dtoa_r+0x94c>
 8007df0:	9a03      	ldr	r2, [sp, #12]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d18a      	bne.n	8007d0c <_dtoa_r+0xaa4>
 8007df6:	2331      	movs	r3, #49	; 0x31
 8007df8:	f10b 0b01 	add.w	fp, fp, #1
 8007dfc:	e797      	b.n	8007d2e <_dtoa_r+0xac6>
 8007dfe:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <_dtoa_r+0xbc0>)
 8007e00:	f7ff ba9f 	b.w	8007342 <_dtoa_r+0xda>
 8007e04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f47f aa77 	bne.w	80072fa <_dtoa_r+0x92>
 8007e0c:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <_dtoa_r+0xbc4>)
 8007e0e:	f7ff ba98 	b.w	8007342 <_dtoa_r+0xda>
 8007e12:	9b06      	ldr	r3, [sp, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	dcb6      	bgt.n	8007d86 <_dtoa_r+0xb1e>
 8007e18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	f73f aeb5 	bgt.w	8007b8a <_dtoa_r+0x922>
 8007e20:	e7b1      	b.n	8007d86 <_dtoa_r+0xb1e>
 8007e22:	bf00      	nop
 8007e24:	08009ad8 	.word	0x08009ad8
 8007e28:	08009a38 	.word	0x08009a38
 8007e2c:	08009a5c 	.word	0x08009a5c

08007e30 <_free_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4605      	mov	r5, r0
 8007e34:	2900      	cmp	r1, #0
 8007e36:	d040      	beq.n	8007eba <_free_r+0x8a>
 8007e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e3c:	1f0c      	subs	r4, r1, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bfb8      	it	lt
 8007e42:	18e4      	addlt	r4, r4, r3
 8007e44:	f000 f8e4 	bl	8008010 <__malloc_lock>
 8007e48:	4a1c      	ldr	r2, [pc, #112]	; (8007ebc <_free_r+0x8c>)
 8007e4a:	6813      	ldr	r3, [r2, #0]
 8007e4c:	b933      	cbnz	r3, 8007e5c <_free_r+0x2c>
 8007e4e:	6063      	str	r3, [r4, #4]
 8007e50:	6014      	str	r4, [r2, #0]
 8007e52:	4628      	mov	r0, r5
 8007e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e58:	f000 b8e0 	b.w	800801c <__malloc_unlock>
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	d908      	bls.n	8007e72 <_free_r+0x42>
 8007e60:	6820      	ldr	r0, [r4, #0]
 8007e62:	1821      	adds	r1, r4, r0
 8007e64:	428b      	cmp	r3, r1
 8007e66:	bf01      	itttt	eq
 8007e68:	6819      	ldreq	r1, [r3, #0]
 8007e6a:	685b      	ldreq	r3, [r3, #4]
 8007e6c:	1809      	addeq	r1, r1, r0
 8007e6e:	6021      	streq	r1, [r4, #0]
 8007e70:	e7ed      	b.n	8007e4e <_free_r+0x1e>
 8007e72:	461a      	mov	r2, r3
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	b10b      	cbz	r3, 8007e7c <_free_r+0x4c>
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	d9fa      	bls.n	8007e72 <_free_r+0x42>
 8007e7c:	6811      	ldr	r1, [r2, #0]
 8007e7e:	1850      	adds	r0, r2, r1
 8007e80:	42a0      	cmp	r0, r4
 8007e82:	d10b      	bne.n	8007e9c <_free_r+0x6c>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	4401      	add	r1, r0
 8007e88:	1850      	adds	r0, r2, r1
 8007e8a:	4283      	cmp	r3, r0
 8007e8c:	6011      	str	r1, [r2, #0]
 8007e8e:	d1e0      	bne.n	8007e52 <_free_r+0x22>
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	4408      	add	r0, r1
 8007e96:	6010      	str	r0, [r2, #0]
 8007e98:	6053      	str	r3, [r2, #4]
 8007e9a:	e7da      	b.n	8007e52 <_free_r+0x22>
 8007e9c:	d902      	bls.n	8007ea4 <_free_r+0x74>
 8007e9e:	230c      	movs	r3, #12
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	e7d6      	b.n	8007e52 <_free_r+0x22>
 8007ea4:	6820      	ldr	r0, [r4, #0]
 8007ea6:	1821      	adds	r1, r4, r0
 8007ea8:	428b      	cmp	r3, r1
 8007eaa:	bf01      	itttt	eq
 8007eac:	6819      	ldreq	r1, [r3, #0]
 8007eae:	685b      	ldreq	r3, [r3, #4]
 8007eb0:	1809      	addeq	r1, r1, r0
 8007eb2:	6021      	streq	r1, [r4, #0]
 8007eb4:	6063      	str	r3, [r4, #4]
 8007eb6:	6054      	str	r4, [r2, #4]
 8007eb8:	e7cb      	b.n	8007e52 <_free_r+0x22>
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	20000a88 	.word	0x20000a88

08007ec0 <malloc>:
 8007ec0:	4b02      	ldr	r3, [pc, #8]	; (8007ecc <malloc+0xc>)
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	f000 b823 	b.w	8007f10 <_malloc_r>
 8007eca:	bf00      	nop
 8007ecc:	200000c8 	.word	0x200000c8

08007ed0 <sbrk_aligned>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	4e0e      	ldr	r6, [pc, #56]	; (8007f0c <sbrk_aligned+0x3c>)
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	6831      	ldr	r1, [r6, #0]
 8007ed8:	4605      	mov	r5, r0
 8007eda:	b911      	cbnz	r1, 8007ee2 <sbrk_aligned+0x12>
 8007edc:	f000 fe38 	bl	8008b50 <_sbrk_r>
 8007ee0:	6030      	str	r0, [r6, #0]
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f000 fe33 	bl	8008b50 <_sbrk_r>
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	d00a      	beq.n	8007f04 <sbrk_aligned+0x34>
 8007eee:	1cc4      	adds	r4, r0, #3
 8007ef0:	f024 0403 	bic.w	r4, r4, #3
 8007ef4:	42a0      	cmp	r0, r4
 8007ef6:	d007      	beq.n	8007f08 <sbrk_aligned+0x38>
 8007ef8:	1a21      	subs	r1, r4, r0
 8007efa:	4628      	mov	r0, r5
 8007efc:	f000 fe28 	bl	8008b50 <_sbrk_r>
 8007f00:	3001      	adds	r0, #1
 8007f02:	d101      	bne.n	8007f08 <sbrk_aligned+0x38>
 8007f04:	f04f 34ff 	mov.w	r4, #4294967295
 8007f08:	4620      	mov	r0, r4
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	20000a8c 	.word	0x20000a8c

08007f10 <_malloc_r>:
 8007f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f14:	1ccd      	adds	r5, r1, #3
 8007f16:	f025 0503 	bic.w	r5, r5, #3
 8007f1a:	3508      	adds	r5, #8
 8007f1c:	2d0c      	cmp	r5, #12
 8007f1e:	bf38      	it	cc
 8007f20:	250c      	movcc	r5, #12
 8007f22:	2d00      	cmp	r5, #0
 8007f24:	4607      	mov	r7, r0
 8007f26:	db01      	blt.n	8007f2c <_malloc_r+0x1c>
 8007f28:	42a9      	cmp	r1, r5
 8007f2a:	d905      	bls.n	8007f38 <_malloc_r+0x28>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	2600      	movs	r6, #0
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	4630      	mov	r0, r6
 8007f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800800c <_malloc_r+0xfc>
 8007f3c:	f000 f868 	bl	8008010 <__malloc_lock>
 8007f40:	f8d8 3000 	ldr.w	r3, [r8]
 8007f44:	461c      	mov	r4, r3
 8007f46:	bb5c      	cbnz	r4, 8007fa0 <_malloc_r+0x90>
 8007f48:	4629      	mov	r1, r5
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	f7ff ffc0 	bl	8007ed0 <sbrk_aligned>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	4604      	mov	r4, r0
 8007f54:	d155      	bne.n	8008002 <_malloc_r+0xf2>
 8007f56:	f8d8 4000 	ldr.w	r4, [r8]
 8007f5a:	4626      	mov	r6, r4
 8007f5c:	2e00      	cmp	r6, #0
 8007f5e:	d145      	bne.n	8007fec <_malloc_r+0xdc>
 8007f60:	2c00      	cmp	r4, #0
 8007f62:	d048      	beq.n	8007ff6 <_malloc_r+0xe6>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	4631      	mov	r1, r6
 8007f68:	4638      	mov	r0, r7
 8007f6a:	eb04 0903 	add.w	r9, r4, r3
 8007f6e:	f000 fdef 	bl	8008b50 <_sbrk_r>
 8007f72:	4581      	cmp	r9, r0
 8007f74:	d13f      	bne.n	8007ff6 <_malloc_r+0xe6>
 8007f76:	6821      	ldr	r1, [r4, #0]
 8007f78:	4638      	mov	r0, r7
 8007f7a:	1a6d      	subs	r5, r5, r1
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	f7ff ffa7 	bl	8007ed0 <sbrk_aligned>
 8007f82:	3001      	adds	r0, #1
 8007f84:	d037      	beq.n	8007ff6 <_malloc_r+0xe6>
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	442b      	add	r3, r5
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d038      	beq.n	8008006 <_malloc_r+0xf6>
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	42a2      	cmp	r2, r4
 8007f98:	d12b      	bne.n	8007ff2 <_malloc_r+0xe2>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	605a      	str	r2, [r3, #4]
 8007f9e:	e00f      	b.n	8007fc0 <_malloc_r+0xb0>
 8007fa0:	6822      	ldr	r2, [r4, #0]
 8007fa2:	1b52      	subs	r2, r2, r5
 8007fa4:	d41f      	bmi.n	8007fe6 <_malloc_r+0xd6>
 8007fa6:	2a0b      	cmp	r2, #11
 8007fa8:	d917      	bls.n	8007fda <_malloc_r+0xca>
 8007faa:	1961      	adds	r1, r4, r5
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	6025      	str	r5, [r4, #0]
 8007fb0:	bf18      	it	ne
 8007fb2:	6059      	strne	r1, [r3, #4]
 8007fb4:	6863      	ldr	r3, [r4, #4]
 8007fb6:	bf08      	it	eq
 8007fb8:	f8c8 1000 	streq.w	r1, [r8]
 8007fbc:	5162      	str	r2, [r4, r5]
 8007fbe:	604b      	str	r3, [r1, #4]
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	f104 060b 	add.w	r6, r4, #11
 8007fc6:	f000 f829 	bl	800801c <__malloc_unlock>
 8007fca:	f026 0607 	bic.w	r6, r6, #7
 8007fce:	1d23      	adds	r3, r4, #4
 8007fd0:	1af2      	subs	r2, r6, r3
 8007fd2:	d0ae      	beq.n	8007f32 <_malloc_r+0x22>
 8007fd4:	1b9b      	subs	r3, r3, r6
 8007fd6:	50a3      	str	r3, [r4, r2]
 8007fd8:	e7ab      	b.n	8007f32 <_malloc_r+0x22>
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	6862      	ldr	r2, [r4, #4]
 8007fde:	d1dd      	bne.n	8007f9c <_malloc_r+0x8c>
 8007fe0:	f8c8 2000 	str.w	r2, [r8]
 8007fe4:	e7ec      	b.n	8007fc0 <_malloc_r+0xb0>
 8007fe6:	4623      	mov	r3, r4
 8007fe8:	6864      	ldr	r4, [r4, #4]
 8007fea:	e7ac      	b.n	8007f46 <_malloc_r+0x36>
 8007fec:	4634      	mov	r4, r6
 8007fee:	6876      	ldr	r6, [r6, #4]
 8007ff0:	e7b4      	b.n	8007f5c <_malloc_r+0x4c>
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	e7cc      	b.n	8007f90 <_malloc_r+0x80>
 8007ff6:	230c      	movs	r3, #12
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	f000 f80e 	bl	800801c <__malloc_unlock>
 8008000:	e797      	b.n	8007f32 <_malloc_r+0x22>
 8008002:	6025      	str	r5, [r4, #0]
 8008004:	e7dc      	b.n	8007fc0 <_malloc_r+0xb0>
 8008006:	605b      	str	r3, [r3, #4]
 8008008:	deff      	udf	#255	; 0xff
 800800a:	bf00      	nop
 800800c:	20000a88 	.word	0x20000a88

08008010 <__malloc_lock>:
 8008010:	4801      	ldr	r0, [pc, #4]	; (8008018 <__malloc_lock+0x8>)
 8008012:	f7ff b88e 	b.w	8007132 <__retarget_lock_acquire_recursive>
 8008016:	bf00      	nop
 8008018:	20000a84 	.word	0x20000a84

0800801c <__malloc_unlock>:
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <__malloc_unlock+0x8>)
 800801e:	f7ff b889 	b.w	8007134 <__retarget_lock_release_recursive>
 8008022:	bf00      	nop
 8008024:	20000a84 	.word	0x20000a84

08008028 <_Balloc>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	69c6      	ldr	r6, [r0, #28]
 800802c:	4604      	mov	r4, r0
 800802e:	460d      	mov	r5, r1
 8008030:	b976      	cbnz	r6, 8008050 <_Balloc+0x28>
 8008032:	2010      	movs	r0, #16
 8008034:	f7ff ff44 	bl	8007ec0 <malloc>
 8008038:	4602      	mov	r2, r0
 800803a:	61e0      	str	r0, [r4, #28]
 800803c:	b920      	cbnz	r0, 8008048 <_Balloc+0x20>
 800803e:	216b      	movs	r1, #107	; 0x6b
 8008040:	4b17      	ldr	r3, [pc, #92]	; (80080a0 <_Balloc+0x78>)
 8008042:	4818      	ldr	r0, [pc, #96]	; (80080a4 <_Balloc+0x7c>)
 8008044:	f000 fda2 	bl	8008b8c <__assert_func>
 8008048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800804c:	6006      	str	r6, [r0, #0]
 800804e:	60c6      	str	r6, [r0, #12]
 8008050:	69e6      	ldr	r6, [r4, #28]
 8008052:	68f3      	ldr	r3, [r6, #12]
 8008054:	b183      	cbz	r3, 8008078 <_Balloc+0x50>
 8008056:	69e3      	ldr	r3, [r4, #28]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800805e:	b9b8      	cbnz	r0, 8008090 <_Balloc+0x68>
 8008060:	2101      	movs	r1, #1
 8008062:	fa01 f605 	lsl.w	r6, r1, r5
 8008066:	1d72      	adds	r2, r6, #5
 8008068:	4620      	mov	r0, r4
 800806a:	0092      	lsls	r2, r2, #2
 800806c:	f000 fdac 	bl	8008bc8 <_calloc_r>
 8008070:	b160      	cbz	r0, 800808c <_Balloc+0x64>
 8008072:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008076:	e00e      	b.n	8008096 <_Balloc+0x6e>
 8008078:	2221      	movs	r2, #33	; 0x21
 800807a:	2104      	movs	r1, #4
 800807c:	4620      	mov	r0, r4
 800807e:	f000 fda3 	bl	8008bc8 <_calloc_r>
 8008082:	69e3      	ldr	r3, [r4, #28]
 8008084:	60f0      	str	r0, [r6, #12]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e4      	bne.n	8008056 <_Balloc+0x2e>
 800808c:	2000      	movs	r0, #0
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	6802      	ldr	r2, [r0, #0]
 8008092:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008096:	2300      	movs	r3, #0
 8008098:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800809c:	e7f7      	b.n	800808e <_Balloc+0x66>
 800809e:	bf00      	nop
 80080a0:	08009a69 	.word	0x08009a69
 80080a4:	08009ae9 	.word	0x08009ae9

080080a8 <_Bfree>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	69c6      	ldr	r6, [r0, #28]
 80080ac:	4605      	mov	r5, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b976      	cbnz	r6, 80080d0 <_Bfree+0x28>
 80080b2:	2010      	movs	r0, #16
 80080b4:	f7ff ff04 	bl	8007ec0 <malloc>
 80080b8:	4602      	mov	r2, r0
 80080ba:	61e8      	str	r0, [r5, #28]
 80080bc:	b920      	cbnz	r0, 80080c8 <_Bfree+0x20>
 80080be:	218f      	movs	r1, #143	; 0x8f
 80080c0:	4b08      	ldr	r3, [pc, #32]	; (80080e4 <_Bfree+0x3c>)
 80080c2:	4809      	ldr	r0, [pc, #36]	; (80080e8 <_Bfree+0x40>)
 80080c4:	f000 fd62 	bl	8008b8c <__assert_func>
 80080c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080cc:	6006      	str	r6, [r0, #0]
 80080ce:	60c6      	str	r6, [r0, #12]
 80080d0:	b13c      	cbz	r4, 80080e2 <_Bfree+0x3a>
 80080d2:	69eb      	ldr	r3, [r5, #28]
 80080d4:	6862      	ldr	r2, [r4, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080dc:	6021      	str	r1, [r4, #0]
 80080de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	08009a69 	.word	0x08009a69
 80080e8:	08009ae9 	.word	0x08009ae9

080080ec <__multadd>:
 80080ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f0:	4607      	mov	r7, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	461e      	mov	r6, r3
 80080f6:	2000      	movs	r0, #0
 80080f8:	690d      	ldr	r5, [r1, #16]
 80080fa:	f101 0c14 	add.w	ip, r1, #20
 80080fe:	f8dc 3000 	ldr.w	r3, [ip]
 8008102:	3001      	adds	r0, #1
 8008104:	b299      	uxth	r1, r3
 8008106:	fb02 6101 	mla	r1, r2, r1, r6
 800810a:	0c1e      	lsrs	r6, r3, #16
 800810c:	0c0b      	lsrs	r3, r1, #16
 800810e:	fb02 3306 	mla	r3, r2, r6, r3
 8008112:	b289      	uxth	r1, r1
 8008114:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008118:	4285      	cmp	r5, r0
 800811a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800811e:	f84c 1b04 	str.w	r1, [ip], #4
 8008122:	dcec      	bgt.n	80080fe <__multadd+0x12>
 8008124:	b30e      	cbz	r6, 800816a <__multadd+0x7e>
 8008126:	68a3      	ldr	r3, [r4, #8]
 8008128:	42ab      	cmp	r3, r5
 800812a:	dc19      	bgt.n	8008160 <__multadd+0x74>
 800812c:	6861      	ldr	r1, [r4, #4]
 800812e:	4638      	mov	r0, r7
 8008130:	3101      	adds	r1, #1
 8008132:	f7ff ff79 	bl	8008028 <_Balloc>
 8008136:	4680      	mov	r8, r0
 8008138:	b928      	cbnz	r0, 8008146 <__multadd+0x5a>
 800813a:	4602      	mov	r2, r0
 800813c:	21ba      	movs	r1, #186	; 0xba
 800813e:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <__multadd+0x84>)
 8008140:	480c      	ldr	r0, [pc, #48]	; (8008174 <__multadd+0x88>)
 8008142:	f000 fd23 	bl	8008b8c <__assert_func>
 8008146:	6922      	ldr	r2, [r4, #16]
 8008148:	f104 010c 	add.w	r1, r4, #12
 800814c:	3202      	adds	r2, #2
 800814e:	0092      	lsls	r2, r2, #2
 8008150:	300c      	adds	r0, #12
 8008152:	f000 fd0d 	bl	8008b70 <memcpy>
 8008156:	4621      	mov	r1, r4
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff ffa5 	bl	80080a8 <_Bfree>
 800815e:	4644      	mov	r4, r8
 8008160:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008164:	3501      	adds	r5, #1
 8008166:	615e      	str	r6, [r3, #20]
 8008168:	6125      	str	r5, [r4, #16]
 800816a:	4620      	mov	r0, r4
 800816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008170:	08009ad8 	.word	0x08009ad8
 8008174:	08009ae9 	.word	0x08009ae9

08008178 <__hi0bits>:
 8008178:	0c02      	lsrs	r2, r0, #16
 800817a:	0412      	lsls	r2, r2, #16
 800817c:	4603      	mov	r3, r0
 800817e:	b9ca      	cbnz	r2, 80081b4 <__hi0bits+0x3c>
 8008180:	0403      	lsls	r3, r0, #16
 8008182:	2010      	movs	r0, #16
 8008184:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008188:	bf04      	itt	eq
 800818a:	021b      	lsleq	r3, r3, #8
 800818c:	3008      	addeq	r0, #8
 800818e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008192:	bf04      	itt	eq
 8008194:	011b      	lsleq	r3, r3, #4
 8008196:	3004      	addeq	r0, #4
 8008198:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800819c:	bf04      	itt	eq
 800819e:	009b      	lsleq	r3, r3, #2
 80081a0:	3002      	addeq	r0, #2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	db05      	blt.n	80081b2 <__hi0bits+0x3a>
 80081a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80081aa:	f100 0001 	add.w	r0, r0, #1
 80081ae:	bf08      	it	eq
 80081b0:	2020      	moveq	r0, #32
 80081b2:	4770      	bx	lr
 80081b4:	2000      	movs	r0, #0
 80081b6:	e7e5      	b.n	8008184 <__hi0bits+0xc>

080081b8 <__lo0bits>:
 80081b8:	6803      	ldr	r3, [r0, #0]
 80081ba:	4602      	mov	r2, r0
 80081bc:	f013 0007 	ands.w	r0, r3, #7
 80081c0:	d00b      	beq.n	80081da <__lo0bits+0x22>
 80081c2:	07d9      	lsls	r1, r3, #31
 80081c4:	d421      	bmi.n	800820a <__lo0bits+0x52>
 80081c6:	0798      	lsls	r0, r3, #30
 80081c8:	bf49      	itett	mi
 80081ca:	085b      	lsrmi	r3, r3, #1
 80081cc:	089b      	lsrpl	r3, r3, #2
 80081ce:	2001      	movmi	r0, #1
 80081d0:	6013      	strmi	r3, [r2, #0]
 80081d2:	bf5c      	itt	pl
 80081d4:	2002      	movpl	r0, #2
 80081d6:	6013      	strpl	r3, [r2, #0]
 80081d8:	4770      	bx	lr
 80081da:	b299      	uxth	r1, r3
 80081dc:	b909      	cbnz	r1, 80081e2 <__lo0bits+0x2a>
 80081de:	2010      	movs	r0, #16
 80081e0:	0c1b      	lsrs	r3, r3, #16
 80081e2:	b2d9      	uxtb	r1, r3
 80081e4:	b909      	cbnz	r1, 80081ea <__lo0bits+0x32>
 80081e6:	3008      	adds	r0, #8
 80081e8:	0a1b      	lsrs	r3, r3, #8
 80081ea:	0719      	lsls	r1, r3, #28
 80081ec:	bf04      	itt	eq
 80081ee:	091b      	lsreq	r3, r3, #4
 80081f0:	3004      	addeq	r0, #4
 80081f2:	0799      	lsls	r1, r3, #30
 80081f4:	bf04      	itt	eq
 80081f6:	089b      	lsreq	r3, r3, #2
 80081f8:	3002      	addeq	r0, #2
 80081fa:	07d9      	lsls	r1, r3, #31
 80081fc:	d403      	bmi.n	8008206 <__lo0bits+0x4e>
 80081fe:	085b      	lsrs	r3, r3, #1
 8008200:	f100 0001 	add.w	r0, r0, #1
 8008204:	d003      	beq.n	800820e <__lo0bits+0x56>
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	4770      	bx	lr
 800820a:	2000      	movs	r0, #0
 800820c:	4770      	bx	lr
 800820e:	2020      	movs	r0, #32
 8008210:	4770      	bx	lr
	...

08008214 <__i2b>:
 8008214:	b510      	push	{r4, lr}
 8008216:	460c      	mov	r4, r1
 8008218:	2101      	movs	r1, #1
 800821a:	f7ff ff05 	bl	8008028 <_Balloc>
 800821e:	4602      	mov	r2, r0
 8008220:	b928      	cbnz	r0, 800822e <__i2b+0x1a>
 8008222:	f240 1145 	movw	r1, #325	; 0x145
 8008226:	4b04      	ldr	r3, [pc, #16]	; (8008238 <__i2b+0x24>)
 8008228:	4804      	ldr	r0, [pc, #16]	; (800823c <__i2b+0x28>)
 800822a:	f000 fcaf 	bl	8008b8c <__assert_func>
 800822e:	2301      	movs	r3, #1
 8008230:	6144      	str	r4, [r0, #20]
 8008232:	6103      	str	r3, [r0, #16]
 8008234:	bd10      	pop	{r4, pc}
 8008236:	bf00      	nop
 8008238:	08009ad8 	.word	0x08009ad8
 800823c:	08009ae9 	.word	0x08009ae9

08008240 <__multiply>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	4691      	mov	r9, r2
 8008246:	690a      	ldr	r2, [r1, #16]
 8008248:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800824c:	460c      	mov	r4, r1
 800824e:	429a      	cmp	r2, r3
 8008250:	bfbe      	ittt	lt
 8008252:	460b      	movlt	r3, r1
 8008254:	464c      	movlt	r4, r9
 8008256:	4699      	movlt	r9, r3
 8008258:	6927      	ldr	r7, [r4, #16]
 800825a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	6861      	ldr	r1, [r4, #4]
 8008262:	eb07 060a 	add.w	r6, r7, sl
 8008266:	42b3      	cmp	r3, r6
 8008268:	b085      	sub	sp, #20
 800826a:	bfb8      	it	lt
 800826c:	3101      	addlt	r1, #1
 800826e:	f7ff fedb 	bl	8008028 <_Balloc>
 8008272:	b930      	cbnz	r0, 8008282 <__multiply+0x42>
 8008274:	4602      	mov	r2, r0
 8008276:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800827a:	4b43      	ldr	r3, [pc, #268]	; (8008388 <__multiply+0x148>)
 800827c:	4843      	ldr	r0, [pc, #268]	; (800838c <__multiply+0x14c>)
 800827e:	f000 fc85 	bl	8008b8c <__assert_func>
 8008282:	f100 0514 	add.w	r5, r0, #20
 8008286:	462b      	mov	r3, r5
 8008288:	2200      	movs	r2, #0
 800828a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800828e:	4543      	cmp	r3, r8
 8008290:	d321      	bcc.n	80082d6 <__multiply+0x96>
 8008292:	f104 0314 	add.w	r3, r4, #20
 8008296:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800829a:	f109 0314 	add.w	r3, r9, #20
 800829e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082a2:	9202      	str	r2, [sp, #8]
 80082a4:	1b3a      	subs	r2, r7, r4
 80082a6:	3a15      	subs	r2, #21
 80082a8:	f022 0203 	bic.w	r2, r2, #3
 80082ac:	3204      	adds	r2, #4
 80082ae:	f104 0115 	add.w	r1, r4, #21
 80082b2:	428f      	cmp	r7, r1
 80082b4:	bf38      	it	cc
 80082b6:	2204      	movcc	r2, #4
 80082b8:	9201      	str	r2, [sp, #4]
 80082ba:	9a02      	ldr	r2, [sp, #8]
 80082bc:	9303      	str	r3, [sp, #12]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d80c      	bhi.n	80082dc <__multiply+0x9c>
 80082c2:	2e00      	cmp	r6, #0
 80082c4:	dd03      	ble.n	80082ce <__multiply+0x8e>
 80082c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d05a      	beq.n	8008384 <__multiply+0x144>
 80082ce:	6106      	str	r6, [r0, #16]
 80082d0:	b005      	add	sp, #20
 80082d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d6:	f843 2b04 	str.w	r2, [r3], #4
 80082da:	e7d8      	b.n	800828e <__multiply+0x4e>
 80082dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80082e0:	f1ba 0f00 	cmp.w	sl, #0
 80082e4:	d023      	beq.n	800832e <__multiply+0xee>
 80082e6:	46a9      	mov	r9, r5
 80082e8:	f04f 0c00 	mov.w	ip, #0
 80082ec:	f104 0e14 	add.w	lr, r4, #20
 80082f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082f4:	f8d9 1000 	ldr.w	r1, [r9]
 80082f8:	fa1f fb82 	uxth.w	fp, r2
 80082fc:	b289      	uxth	r1, r1
 80082fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8008302:	4461      	add	r1, ip
 8008304:	f8d9 c000 	ldr.w	ip, [r9]
 8008308:	0c12      	lsrs	r2, r2, #16
 800830a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800830e:	fb0a c202 	mla	r2, sl, r2, ip
 8008312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008316:	b289      	uxth	r1, r1
 8008318:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800831c:	4577      	cmp	r7, lr
 800831e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008322:	f849 1b04 	str.w	r1, [r9], #4
 8008326:	d8e3      	bhi.n	80082f0 <__multiply+0xb0>
 8008328:	9a01      	ldr	r2, [sp, #4]
 800832a:	f845 c002 	str.w	ip, [r5, r2]
 800832e:	9a03      	ldr	r2, [sp, #12]
 8008330:	3304      	adds	r3, #4
 8008332:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008336:	f1b9 0f00 	cmp.w	r9, #0
 800833a:	d021      	beq.n	8008380 <__multiply+0x140>
 800833c:	46ae      	mov	lr, r5
 800833e:	f04f 0a00 	mov.w	sl, #0
 8008342:	6829      	ldr	r1, [r5, #0]
 8008344:	f104 0c14 	add.w	ip, r4, #20
 8008348:	f8bc b000 	ldrh.w	fp, [ip]
 800834c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008350:	b289      	uxth	r1, r1
 8008352:	fb09 220b 	mla	r2, r9, fp, r2
 8008356:	4452      	add	r2, sl
 8008358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800835c:	f84e 1b04 	str.w	r1, [lr], #4
 8008360:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008364:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008368:	f8be 1000 	ldrh.w	r1, [lr]
 800836c:	4567      	cmp	r7, ip
 800836e:	fb09 110a 	mla	r1, r9, sl, r1
 8008372:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008376:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800837a:	d8e5      	bhi.n	8008348 <__multiply+0x108>
 800837c:	9a01      	ldr	r2, [sp, #4]
 800837e:	50a9      	str	r1, [r5, r2]
 8008380:	3504      	adds	r5, #4
 8008382:	e79a      	b.n	80082ba <__multiply+0x7a>
 8008384:	3e01      	subs	r6, #1
 8008386:	e79c      	b.n	80082c2 <__multiply+0x82>
 8008388:	08009ad8 	.word	0x08009ad8
 800838c:	08009ae9 	.word	0x08009ae9

08008390 <__pow5mult>:
 8008390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008394:	4615      	mov	r5, r2
 8008396:	f012 0203 	ands.w	r2, r2, #3
 800839a:	4606      	mov	r6, r0
 800839c:	460f      	mov	r7, r1
 800839e:	d007      	beq.n	80083b0 <__pow5mult+0x20>
 80083a0:	4c25      	ldr	r4, [pc, #148]	; (8008438 <__pow5mult+0xa8>)
 80083a2:	3a01      	subs	r2, #1
 80083a4:	2300      	movs	r3, #0
 80083a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083aa:	f7ff fe9f 	bl	80080ec <__multadd>
 80083ae:	4607      	mov	r7, r0
 80083b0:	10ad      	asrs	r5, r5, #2
 80083b2:	d03d      	beq.n	8008430 <__pow5mult+0xa0>
 80083b4:	69f4      	ldr	r4, [r6, #28]
 80083b6:	b97c      	cbnz	r4, 80083d8 <__pow5mult+0x48>
 80083b8:	2010      	movs	r0, #16
 80083ba:	f7ff fd81 	bl	8007ec0 <malloc>
 80083be:	4602      	mov	r2, r0
 80083c0:	61f0      	str	r0, [r6, #28]
 80083c2:	b928      	cbnz	r0, 80083d0 <__pow5mult+0x40>
 80083c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80083c8:	4b1c      	ldr	r3, [pc, #112]	; (800843c <__pow5mult+0xac>)
 80083ca:	481d      	ldr	r0, [pc, #116]	; (8008440 <__pow5mult+0xb0>)
 80083cc:	f000 fbde 	bl	8008b8c <__assert_func>
 80083d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d4:	6004      	str	r4, [r0, #0]
 80083d6:	60c4      	str	r4, [r0, #12]
 80083d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80083dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083e0:	b94c      	cbnz	r4, 80083f6 <__pow5mult+0x66>
 80083e2:	f240 2171 	movw	r1, #625	; 0x271
 80083e6:	4630      	mov	r0, r6
 80083e8:	f7ff ff14 	bl	8008214 <__i2b>
 80083ec:	2300      	movs	r3, #0
 80083ee:	4604      	mov	r4, r0
 80083f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80083f4:	6003      	str	r3, [r0, #0]
 80083f6:	f04f 0900 	mov.w	r9, #0
 80083fa:	07eb      	lsls	r3, r5, #31
 80083fc:	d50a      	bpl.n	8008414 <__pow5mult+0x84>
 80083fe:	4639      	mov	r1, r7
 8008400:	4622      	mov	r2, r4
 8008402:	4630      	mov	r0, r6
 8008404:	f7ff ff1c 	bl	8008240 <__multiply>
 8008408:	4680      	mov	r8, r0
 800840a:	4639      	mov	r1, r7
 800840c:	4630      	mov	r0, r6
 800840e:	f7ff fe4b 	bl	80080a8 <_Bfree>
 8008412:	4647      	mov	r7, r8
 8008414:	106d      	asrs	r5, r5, #1
 8008416:	d00b      	beq.n	8008430 <__pow5mult+0xa0>
 8008418:	6820      	ldr	r0, [r4, #0]
 800841a:	b938      	cbnz	r0, 800842c <__pow5mult+0x9c>
 800841c:	4622      	mov	r2, r4
 800841e:	4621      	mov	r1, r4
 8008420:	4630      	mov	r0, r6
 8008422:	f7ff ff0d 	bl	8008240 <__multiply>
 8008426:	6020      	str	r0, [r4, #0]
 8008428:	f8c0 9000 	str.w	r9, [r0]
 800842c:	4604      	mov	r4, r0
 800842e:	e7e4      	b.n	80083fa <__pow5mult+0x6a>
 8008430:	4638      	mov	r0, r7
 8008432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008436:	bf00      	nop
 8008438:	08009c38 	.word	0x08009c38
 800843c:	08009a69 	.word	0x08009a69
 8008440:	08009ae9 	.word	0x08009ae9

08008444 <__lshift>:
 8008444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	460c      	mov	r4, r1
 800844a:	4607      	mov	r7, r0
 800844c:	4691      	mov	r9, r2
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	6849      	ldr	r1, [r1, #4]
 8008452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008456:	68a3      	ldr	r3, [r4, #8]
 8008458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800845c:	f108 0601 	add.w	r6, r8, #1
 8008460:	42b3      	cmp	r3, r6
 8008462:	db0b      	blt.n	800847c <__lshift+0x38>
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff fddf 	bl	8008028 <_Balloc>
 800846a:	4605      	mov	r5, r0
 800846c:	b948      	cbnz	r0, 8008482 <__lshift+0x3e>
 800846e:	4602      	mov	r2, r0
 8008470:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008474:	4b27      	ldr	r3, [pc, #156]	; (8008514 <__lshift+0xd0>)
 8008476:	4828      	ldr	r0, [pc, #160]	; (8008518 <__lshift+0xd4>)
 8008478:	f000 fb88 	bl	8008b8c <__assert_func>
 800847c:	3101      	adds	r1, #1
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	e7ee      	b.n	8008460 <__lshift+0x1c>
 8008482:	2300      	movs	r3, #0
 8008484:	f100 0114 	add.w	r1, r0, #20
 8008488:	f100 0210 	add.w	r2, r0, #16
 800848c:	4618      	mov	r0, r3
 800848e:	4553      	cmp	r3, sl
 8008490:	db33      	blt.n	80084fa <__lshift+0xb6>
 8008492:	6920      	ldr	r0, [r4, #16]
 8008494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008498:	f104 0314 	add.w	r3, r4, #20
 800849c:	f019 091f 	ands.w	r9, r9, #31
 80084a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084a8:	d02b      	beq.n	8008502 <__lshift+0xbe>
 80084aa:	468a      	mov	sl, r1
 80084ac:	2200      	movs	r2, #0
 80084ae:	f1c9 0e20 	rsb	lr, r9, #32
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	fa00 f009 	lsl.w	r0, r0, r9
 80084b8:	4310      	orrs	r0, r2
 80084ba:	f84a 0b04 	str.w	r0, [sl], #4
 80084be:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c2:	459c      	cmp	ip, r3
 80084c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80084c8:	d8f3      	bhi.n	80084b2 <__lshift+0x6e>
 80084ca:	ebac 0304 	sub.w	r3, ip, r4
 80084ce:	3b15      	subs	r3, #21
 80084d0:	f023 0303 	bic.w	r3, r3, #3
 80084d4:	3304      	adds	r3, #4
 80084d6:	f104 0015 	add.w	r0, r4, #21
 80084da:	4584      	cmp	ip, r0
 80084dc:	bf38      	it	cc
 80084de:	2304      	movcc	r3, #4
 80084e0:	50ca      	str	r2, [r1, r3]
 80084e2:	b10a      	cbz	r2, 80084e8 <__lshift+0xa4>
 80084e4:	f108 0602 	add.w	r6, r8, #2
 80084e8:	3e01      	subs	r6, #1
 80084ea:	4638      	mov	r0, r7
 80084ec:	4621      	mov	r1, r4
 80084ee:	612e      	str	r6, [r5, #16]
 80084f0:	f7ff fdda 	bl	80080a8 <_Bfree>
 80084f4:	4628      	mov	r0, r5
 80084f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80084fe:	3301      	adds	r3, #1
 8008500:	e7c5      	b.n	800848e <__lshift+0x4a>
 8008502:	3904      	subs	r1, #4
 8008504:	f853 2b04 	ldr.w	r2, [r3], #4
 8008508:	459c      	cmp	ip, r3
 800850a:	f841 2f04 	str.w	r2, [r1, #4]!
 800850e:	d8f9      	bhi.n	8008504 <__lshift+0xc0>
 8008510:	e7ea      	b.n	80084e8 <__lshift+0xa4>
 8008512:	bf00      	nop
 8008514:	08009ad8 	.word	0x08009ad8
 8008518:	08009ae9 	.word	0x08009ae9

0800851c <__mcmp>:
 800851c:	4603      	mov	r3, r0
 800851e:	690a      	ldr	r2, [r1, #16]
 8008520:	6900      	ldr	r0, [r0, #16]
 8008522:	b530      	push	{r4, r5, lr}
 8008524:	1a80      	subs	r0, r0, r2
 8008526:	d10d      	bne.n	8008544 <__mcmp+0x28>
 8008528:	3314      	adds	r3, #20
 800852a:	3114      	adds	r1, #20
 800852c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008530:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008534:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008538:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800853c:	4295      	cmp	r5, r2
 800853e:	d002      	beq.n	8008546 <__mcmp+0x2a>
 8008540:	d304      	bcc.n	800854c <__mcmp+0x30>
 8008542:	2001      	movs	r0, #1
 8008544:	bd30      	pop	{r4, r5, pc}
 8008546:	42a3      	cmp	r3, r4
 8008548:	d3f4      	bcc.n	8008534 <__mcmp+0x18>
 800854a:	e7fb      	b.n	8008544 <__mcmp+0x28>
 800854c:	f04f 30ff 	mov.w	r0, #4294967295
 8008550:	e7f8      	b.n	8008544 <__mcmp+0x28>
	...

08008554 <__mdiff>:
 8008554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	460d      	mov	r5, r1
 800855a:	4607      	mov	r7, r0
 800855c:	4611      	mov	r1, r2
 800855e:	4628      	mov	r0, r5
 8008560:	4614      	mov	r4, r2
 8008562:	f7ff ffdb 	bl	800851c <__mcmp>
 8008566:	1e06      	subs	r6, r0, #0
 8008568:	d111      	bne.n	800858e <__mdiff+0x3a>
 800856a:	4631      	mov	r1, r6
 800856c:	4638      	mov	r0, r7
 800856e:	f7ff fd5b 	bl	8008028 <_Balloc>
 8008572:	4602      	mov	r2, r0
 8008574:	b928      	cbnz	r0, 8008582 <__mdiff+0x2e>
 8008576:	f240 2137 	movw	r1, #567	; 0x237
 800857a:	4b3a      	ldr	r3, [pc, #232]	; (8008664 <__mdiff+0x110>)
 800857c:	483a      	ldr	r0, [pc, #232]	; (8008668 <__mdiff+0x114>)
 800857e:	f000 fb05 	bl	8008b8c <__assert_func>
 8008582:	2301      	movs	r3, #1
 8008584:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008588:	4610      	mov	r0, r2
 800858a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	bfa4      	itt	ge
 8008590:	4623      	movge	r3, r4
 8008592:	462c      	movge	r4, r5
 8008594:	4638      	mov	r0, r7
 8008596:	6861      	ldr	r1, [r4, #4]
 8008598:	bfa6      	itte	ge
 800859a:	461d      	movge	r5, r3
 800859c:	2600      	movge	r6, #0
 800859e:	2601      	movlt	r6, #1
 80085a0:	f7ff fd42 	bl	8008028 <_Balloc>
 80085a4:	4602      	mov	r2, r0
 80085a6:	b918      	cbnz	r0, 80085b0 <__mdiff+0x5c>
 80085a8:	f240 2145 	movw	r1, #581	; 0x245
 80085ac:	4b2d      	ldr	r3, [pc, #180]	; (8008664 <__mdiff+0x110>)
 80085ae:	e7e5      	b.n	800857c <__mdiff+0x28>
 80085b0:	f102 0814 	add.w	r8, r2, #20
 80085b4:	46c2      	mov	sl, r8
 80085b6:	f04f 0c00 	mov.w	ip, #0
 80085ba:	6927      	ldr	r7, [r4, #16]
 80085bc:	60c6      	str	r6, [r0, #12]
 80085be:	692e      	ldr	r6, [r5, #16]
 80085c0:	f104 0014 	add.w	r0, r4, #20
 80085c4:	f105 0914 	add.w	r9, r5, #20
 80085c8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80085cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085d0:	3410      	adds	r4, #16
 80085d2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80085d6:	f859 3b04 	ldr.w	r3, [r9], #4
 80085da:	fa1f f18b 	uxth.w	r1, fp
 80085de:	4461      	add	r1, ip
 80085e0:	fa1f fc83 	uxth.w	ip, r3
 80085e4:	0c1b      	lsrs	r3, r3, #16
 80085e6:	eba1 010c 	sub.w	r1, r1, ip
 80085ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80085f2:	b289      	uxth	r1, r1
 80085f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085f8:	454e      	cmp	r6, r9
 80085fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80085fe:	f84a 1b04 	str.w	r1, [sl], #4
 8008602:	d8e6      	bhi.n	80085d2 <__mdiff+0x7e>
 8008604:	1b73      	subs	r3, r6, r5
 8008606:	3b15      	subs	r3, #21
 8008608:	f023 0303 	bic.w	r3, r3, #3
 800860c:	3515      	adds	r5, #21
 800860e:	3304      	adds	r3, #4
 8008610:	42ae      	cmp	r6, r5
 8008612:	bf38      	it	cc
 8008614:	2304      	movcc	r3, #4
 8008616:	4418      	add	r0, r3
 8008618:	4443      	add	r3, r8
 800861a:	461e      	mov	r6, r3
 800861c:	4605      	mov	r5, r0
 800861e:	4575      	cmp	r5, lr
 8008620:	d30e      	bcc.n	8008640 <__mdiff+0xec>
 8008622:	f10e 0103 	add.w	r1, lr, #3
 8008626:	1a09      	subs	r1, r1, r0
 8008628:	f021 0103 	bic.w	r1, r1, #3
 800862c:	3803      	subs	r0, #3
 800862e:	4586      	cmp	lr, r0
 8008630:	bf38      	it	cc
 8008632:	2100      	movcc	r1, #0
 8008634:	440b      	add	r3, r1
 8008636:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800863a:	b189      	cbz	r1, 8008660 <__mdiff+0x10c>
 800863c:	6117      	str	r7, [r2, #16]
 800863e:	e7a3      	b.n	8008588 <__mdiff+0x34>
 8008640:	f855 8b04 	ldr.w	r8, [r5], #4
 8008644:	fa1f f188 	uxth.w	r1, r8
 8008648:	4461      	add	r1, ip
 800864a:	140c      	asrs	r4, r1, #16
 800864c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008650:	b289      	uxth	r1, r1
 8008652:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008656:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800865a:	f846 1b04 	str.w	r1, [r6], #4
 800865e:	e7de      	b.n	800861e <__mdiff+0xca>
 8008660:	3f01      	subs	r7, #1
 8008662:	e7e8      	b.n	8008636 <__mdiff+0xe2>
 8008664:	08009ad8 	.word	0x08009ad8
 8008668:	08009ae9 	.word	0x08009ae9

0800866c <__d2b>:
 800866c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800866e:	2101      	movs	r1, #1
 8008670:	4617      	mov	r7, r2
 8008672:	461c      	mov	r4, r3
 8008674:	9e08      	ldr	r6, [sp, #32]
 8008676:	f7ff fcd7 	bl	8008028 <_Balloc>
 800867a:	4605      	mov	r5, r0
 800867c:	b930      	cbnz	r0, 800868c <__d2b+0x20>
 800867e:	4602      	mov	r2, r0
 8008680:	f240 310f 	movw	r1, #783	; 0x30f
 8008684:	4b22      	ldr	r3, [pc, #136]	; (8008710 <__d2b+0xa4>)
 8008686:	4823      	ldr	r0, [pc, #140]	; (8008714 <__d2b+0xa8>)
 8008688:	f000 fa80 	bl	8008b8c <__assert_func>
 800868c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008690:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008694:	bb24      	cbnz	r4, 80086e0 <__d2b+0x74>
 8008696:	2f00      	cmp	r7, #0
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	d026      	beq.n	80086ea <__d2b+0x7e>
 800869c:	4668      	mov	r0, sp
 800869e:	9700      	str	r7, [sp, #0]
 80086a0:	f7ff fd8a 	bl	80081b8 <__lo0bits>
 80086a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086a8:	b1e8      	cbz	r0, 80086e6 <__d2b+0x7a>
 80086aa:	f1c0 0320 	rsb	r3, r0, #32
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	430b      	orrs	r3, r1
 80086b4:	40c2      	lsrs	r2, r0
 80086b6:	616b      	str	r3, [r5, #20]
 80086b8:	9201      	str	r2, [sp, #4]
 80086ba:	9b01      	ldr	r3, [sp, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	bf14      	ite	ne
 80086c0:	2102      	movne	r1, #2
 80086c2:	2101      	moveq	r1, #1
 80086c4:	61ab      	str	r3, [r5, #24]
 80086c6:	6129      	str	r1, [r5, #16]
 80086c8:	b1bc      	cbz	r4, 80086fa <__d2b+0x8e>
 80086ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80086ce:	4404      	add	r4, r0
 80086d0:	6034      	str	r4, [r6, #0]
 80086d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d8:	6018      	str	r0, [r3, #0]
 80086da:	4628      	mov	r0, r5
 80086dc:	b003      	add	sp, #12
 80086de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086e4:	e7d7      	b.n	8008696 <__d2b+0x2a>
 80086e6:	6169      	str	r1, [r5, #20]
 80086e8:	e7e7      	b.n	80086ba <__d2b+0x4e>
 80086ea:	a801      	add	r0, sp, #4
 80086ec:	f7ff fd64 	bl	80081b8 <__lo0bits>
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	2101      	movs	r1, #1
 80086f4:	616b      	str	r3, [r5, #20]
 80086f6:	3020      	adds	r0, #32
 80086f8:	e7e5      	b.n	80086c6 <__d2b+0x5a>
 80086fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086fe:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008702:	6030      	str	r0, [r6, #0]
 8008704:	6918      	ldr	r0, [r3, #16]
 8008706:	f7ff fd37 	bl	8008178 <__hi0bits>
 800870a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800870e:	e7e2      	b.n	80086d6 <__d2b+0x6a>
 8008710:	08009ad8 	.word	0x08009ad8
 8008714:	08009ae9 	.word	0x08009ae9

08008718 <__ssputs_r>:
 8008718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	461f      	mov	r7, r3
 800871e:	688e      	ldr	r6, [r1, #8]
 8008720:	4682      	mov	sl, r0
 8008722:	42be      	cmp	r6, r7
 8008724:	460c      	mov	r4, r1
 8008726:	4690      	mov	r8, r2
 8008728:	680b      	ldr	r3, [r1, #0]
 800872a:	d82c      	bhi.n	8008786 <__ssputs_r+0x6e>
 800872c:	898a      	ldrh	r2, [r1, #12]
 800872e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008732:	d026      	beq.n	8008782 <__ssputs_r+0x6a>
 8008734:	6965      	ldr	r5, [r4, #20]
 8008736:	6909      	ldr	r1, [r1, #16]
 8008738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800873c:	eba3 0901 	sub.w	r9, r3, r1
 8008740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008744:	1c7b      	adds	r3, r7, #1
 8008746:	444b      	add	r3, r9
 8008748:	106d      	asrs	r5, r5, #1
 800874a:	429d      	cmp	r5, r3
 800874c:	bf38      	it	cc
 800874e:	461d      	movcc	r5, r3
 8008750:	0553      	lsls	r3, r2, #21
 8008752:	d527      	bpl.n	80087a4 <__ssputs_r+0x8c>
 8008754:	4629      	mov	r1, r5
 8008756:	f7ff fbdb 	bl	8007f10 <_malloc_r>
 800875a:	4606      	mov	r6, r0
 800875c:	b360      	cbz	r0, 80087b8 <__ssputs_r+0xa0>
 800875e:	464a      	mov	r2, r9
 8008760:	6921      	ldr	r1, [r4, #16]
 8008762:	f000 fa05 	bl	8008b70 <memcpy>
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800876c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	6126      	str	r6, [r4, #16]
 8008774:	444e      	add	r6, r9
 8008776:	6026      	str	r6, [r4, #0]
 8008778:	463e      	mov	r6, r7
 800877a:	6165      	str	r5, [r4, #20]
 800877c:	eba5 0509 	sub.w	r5, r5, r9
 8008780:	60a5      	str	r5, [r4, #8]
 8008782:	42be      	cmp	r6, r7
 8008784:	d900      	bls.n	8008788 <__ssputs_r+0x70>
 8008786:	463e      	mov	r6, r7
 8008788:	4632      	mov	r2, r6
 800878a:	4641      	mov	r1, r8
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	f000 f9c5 	bl	8008b1c <memmove>
 8008792:	2000      	movs	r0, #0
 8008794:	68a3      	ldr	r3, [r4, #8]
 8008796:	1b9b      	subs	r3, r3, r6
 8008798:	60a3      	str	r3, [r4, #8]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	4433      	add	r3, r6
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a4:	462a      	mov	r2, r5
 80087a6:	f000 fa35 	bl	8008c14 <_realloc_r>
 80087aa:	4606      	mov	r6, r0
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d1e0      	bne.n	8008772 <__ssputs_r+0x5a>
 80087b0:	4650      	mov	r0, sl
 80087b2:	6921      	ldr	r1, [r4, #16]
 80087b4:	f7ff fb3c 	bl	8007e30 <_free_r>
 80087b8:	230c      	movs	r3, #12
 80087ba:	f8ca 3000 	str.w	r3, [sl]
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295
 80087c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c8:	81a3      	strh	r3, [r4, #12]
 80087ca:	e7e9      	b.n	80087a0 <__ssputs_r+0x88>

080087cc <_svfiprintf_r>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	4698      	mov	r8, r3
 80087d2:	898b      	ldrh	r3, [r1, #12]
 80087d4:	4607      	mov	r7, r0
 80087d6:	061b      	lsls	r3, r3, #24
 80087d8:	460d      	mov	r5, r1
 80087da:	4614      	mov	r4, r2
 80087dc:	b09d      	sub	sp, #116	; 0x74
 80087de:	d50e      	bpl.n	80087fe <_svfiprintf_r+0x32>
 80087e0:	690b      	ldr	r3, [r1, #16]
 80087e2:	b963      	cbnz	r3, 80087fe <_svfiprintf_r+0x32>
 80087e4:	2140      	movs	r1, #64	; 0x40
 80087e6:	f7ff fb93 	bl	8007f10 <_malloc_r>
 80087ea:	6028      	str	r0, [r5, #0]
 80087ec:	6128      	str	r0, [r5, #16]
 80087ee:	b920      	cbnz	r0, 80087fa <_svfiprintf_r+0x2e>
 80087f0:	230c      	movs	r3, #12
 80087f2:	603b      	str	r3, [r7, #0]
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	e0d0      	b.n	800899c <_svfiprintf_r+0x1d0>
 80087fa:	2340      	movs	r3, #64	; 0x40
 80087fc:	616b      	str	r3, [r5, #20]
 80087fe:	2300      	movs	r3, #0
 8008800:	9309      	str	r3, [sp, #36]	; 0x24
 8008802:	2320      	movs	r3, #32
 8008804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008808:	2330      	movs	r3, #48	; 0x30
 800880a:	f04f 0901 	mov.w	r9, #1
 800880e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008812:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80089b4 <_svfiprintf_r+0x1e8>
 8008816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800881a:	4623      	mov	r3, r4
 800881c:	469a      	mov	sl, r3
 800881e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008822:	b10a      	cbz	r2, 8008828 <_svfiprintf_r+0x5c>
 8008824:	2a25      	cmp	r2, #37	; 0x25
 8008826:	d1f9      	bne.n	800881c <_svfiprintf_r+0x50>
 8008828:	ebba 0b04 	subs.w	fp, sl, r4
 800882c:	d00b      	beq.n	8008846 <_svfiprintf_r+0x7a>
 800882e:	465b      	mov	r3, fp
 8008830:	4622      	mov	r2, r4
 8008832:	4629      	mov	r1, r5
 8008834:	4638      	mov	r0, r7
 8008836:	f7ff ff6f 	bl	8008718 <__ssputs_r>
 800883a:	3001      	adds	r0, #1
 800883c:	f000 80a9 	beq.w	8008992 <_svfiprintf_r+0x1c6>
 8008840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008842:	445a      	add	r2, fp
 8008844:	9209      	str	r2, [sp, #36]	; 0x24
 8008846:	f89a 3000 	ldrb.w	r3, [sl]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 80a1 	beq.w	8008992 <_svfiprintf_r+0x1c6>
 8008850:	2300      	movs	r3, #0
 8008852:	f04f 32ff 	mov.w	r2, #4294967295
 8008856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800885a:	f10a 0a01 	add.w	sl, sl, #1
 800885e:	9304      	str	r3, [sp, #16]
 8008860:	9307      	str	r3, [sp, #28]
 8008862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008866:	931a      	str	r3, [sp, #104]	; 0x68
 8008868:	4654      	mov	r4, sl
 800886a:	2205      	movs	r2, #5
 800886c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008870:	4850      	ldr	r0, [pc, #320]	; (80089b4 <_svfiprintf_r+0x1e8>)
 8008872:	f7fe fc60 	bl	8007136 <memchr>
 8008876:	9a04      	ldr	r2, [sp, #16]
 8008878:	b9d8      	cbnz	r0, 80088b2 <_svfiprintf_r+0xe6>
 800887a:	06d0      	lsls	r0, r2, #27
 800887c:	bf44      	itt	mi
 800887e:	2320      	movmi	r3, #32
 8008880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008884:	0711      	lsls	r1, r2, #28
 8008886:	bf44      	itt	mi
 8008888:	232b      	movmi	r3, #43	; 0x2b
 800888a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800888e:	f89a 3000 	ldrb.w	r3, [sl]
 8008892:	2b2a      	cmp	r3, #42	; 0x2a
 8008894:	d015      	beq.n	80088c2 <_svfiprintf_r+0xf6>
 8008896:	4654      	mov	r4, sl
 8008898:	2000      	movs	r0, #0
 800889a:	f04f 0c0a 	mov.w	ip, #10
 800889e:	9a07      	ldr	r2, [sp, #28]
 80088a0:	4621      	mov	r1, r4
 80088a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088a6:	3b30      	subs	r3, #48	; 0x30
 80088a8:	2b09      	cmp	r3, #9
 80088aa:	d94d      	bls.n	8008948 <_svfiprintf_r+0x17c>
 80088ac:	b1b0      	cbz	r0, 80088dc <_svfiprintf_r+0x110>
 80088ae:	9207      	str	r2, [sp, #28]
 80088b0:	e014      	b.n	80088dc <_svfiprintf_r+0x110>
 80088b2:	eba0 0308 	sub.w	r3, r0, r8
 80088b6:	fa09 f303 	lsl.w	r3, r9, r3
 80088ba:	4313      	orrs	r3, r2
 80088bc:	46a2      	mov	sl, r4
 80088be:	9304      	str	r3, [sp, #16]
 80088c0:	e7d2      	b.n	8008868 <_svfiprintf_r+0x9c>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	1d19      	adds	r1, r3, #4
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	9103      	str	r1, [sp, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bfbb      	ittet	lt
 80088ce:	425b      	neglt	r3, r3
 80088d0:	f042 0202 	orrlt.w	r2, r2, #2
 80088d4:	9307      	strge	r3, [sp, #28]
 80088d6:	9307      	strlt	r3, [sp, #28]
 80088d8:	bfb8      	it	lt
 80088da:	9204      	strlt	r2, [sp, #16]
 80088dc:	7823      	ldrb	r3, [r4, #0]
 80088de:	2b2e      	cmp	r3, #46	; 0x2e
 80088e0:	d10c      	bne.n	80088fc <_svfiprintf_r+0x130>
 80088e2:	7863      	ldrb	r3, [r4, #1]
 80088e4:	2b2a      	cmp	r3, #42	; 0x2a
 80088e6:	d134      	bne.n	8008952 <_svfiprintf_r+0x186>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	3402      	adds	r4, #2
 80088ec:	1d1a      	adds	r2, r3, #4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	9203      	str	r2, [sp, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bfb8      	it	lt
 80088f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80088fa:	9305      	str	r3, [sp, #20]
 80088fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80089b8 <_svfiprintf_r+0x1ec>
 8008900:	2203      	movs	r2, #3
 8008902:	4650      	mov	r0, sl
 8008904:	7821      	ldrb	r1, [r4, #0]
 8008906:	f7fe fc16 	bl	8007136 <memchr>
 800890a:	b138      	cbz	r0, 800891c <_svfiprintf_r+0x150>
 800890c:	2240      	movs	r2, #64	; 0x40
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	eba0 000a 	sub.w	r0, r0, sl
 8008914:	4082      	lsls	r2, r0
 8008916:	4313      	orrs	r3, r2
 8008918:	3401      	adds	r4, #1
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008920:	2206      	movs	r2, #6
 8008922:	4826      	ldr	r0, [pc, #152]	; (80089bc <_svfiprintf_r+0x1f0>)
 8008924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008928:	f7fe fc05 	bl	8007136 <memchr>
 800892c:	2800      	cmp	r0, #0
 800892e:	d038      	beq.n	80089a2 <_svfiprintf_r+0x1d6>
 8008930:	4b23      	ldr	r3, [pc, #140]	; (80089c0 <_svfiprintf_r+0x1f4>)
 8008932:	bb1b      	cbnz	r3, 800897c <_svfiprintf_r+0x1b0>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	3307      	adds	r3, #7
 8008938:	f023 0307 	bic.w	r3, r3, #7
 800893c:	3308      	adds	r3, #8
 800893e:	9303      	str	r3, [sp, #12]
 8008940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008942:	4433      	add	r3, r6
 8008944:	9309      	str	r3, [sp, #36]	; 0x24
 8008946:	e768      	b.n	800881a <_svfiprintf_r+0x4e>
 8008948:	460c      	mov	r4, r1
 800894a:	2001      	movs	r0, #1
 800894c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008950:	e7a6      	b.n	80088a0 <_svfiprintf_r+0xd4>
 8008952:	2300      	movs	r3, #0
 8008954:	f04f 0c0a 	mov.w	ip, #10
 8008958:	4619      	mov	r1, r3
 800895a:	3401      	adds	r4, #1
 800895c:	9305      	str	r3, [sp, #20]
 800895e:	4620      	mov	r0, r4
 8008960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008964:	3a30      	subs	r2, #48	; 0x30
 8008966:	2a09      	cmp	r2, #9
 8008968:	d903      	bls.n	8008972 <_svfiprintf_r+0x1a6>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0c6      	beq.n	80088fc <_svfiprintf_r+0x130>
 800896e:	9105      	str	r1, [sp, #20]
 8008970:	e7c4      	b.n	80088fc <_svfiprintf_r+0x130>
 8008972:	4604      	mov	r4, r0
 8008974:	2301      	movs	r3, #1
 8008976:	fb0c 2101 	mla	r1, ip, r1, r2
 800897a:	e7f0      	b.n	800895e <_svfiprintf_r+0x192>
 800897c:	ab03      	add	r3, sp, #12
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	462a      	mov	r2, r5
 8008982:	4638      	mov	r0, r7
 8008984:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <_svfiprintf_r+0x1f8>)
 8008986:	a904      	add	r1, sp, #16
 8008988:	f7fd fe6e 	bl	8006668 <_printf_float>
 800898c:	1c42      	adds	r2, r0, #1
 800898e:	4606      	mov	r6, r0
 8008990:	d1d6      	bne.n	8008940 <_svfiprintf_r+0x174>
 8008992:	89ab      	ldrh	r3, [r5, #12]
 8008994:	065b      	lsls	r3, r3, #25
 8008996:	f53f af2d 	bmi.w	80087f4 <_svfiprintf_r+0x28>
 800899a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800899c:	b01d      	add	sp, #116	; 0x74
 800899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a2:	ab03      	add	r3, sp, #12
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	462a      	mov	r2, r5
 80089a8:	4638      	mov	r0, r7
 80089aa:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <_svfiprintf_r+0x1f8>)
 80089ac:	a904      	add	r1, sp, #16
 80089ae:	f7fe f8fb 	bl	8006ba8 <_printf_i>
 80089b2:	e7eb      	b.n	800898c <_svfiprintf_r+0x1c0>
 80089b4:	08009c44 	.word	0x08009c44
 80089b8:	08009c4a 	.word	0x08009c4a
 80089bc:	08009c4e 	.word	0x08009c4e
 80089c0:	08006669 	.word	0x08006669
 80089c4:	08008719 	.word	0x08008719

080089c8 <__sflush_r>:
 80089c8:	898a      	ldrh	r2, [r1, #12]
 80089ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089cc:	4605      	mov	r5, r0
 80089ce:	0710      	lsls	r0, r2, #28
 80089d0:	460c      	mov	r4, r1
 80089d2:	d457      	bmi.n	8008a84 <__sflush_r+0xbc>
 80089d4:	684b      	ldr	r3, [r1, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dc04      	bgt.n	80089e4 <__sflush_r+0x1c>
 80089da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	dc01      	bgt.n	80089e4 <__sflush_r+0x1c>
 80089e0:	2000      	movs	r0, #0
 80089e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089e6:	2e00      	cmp	r6, #0
 80089e8:	d0fa      	beq.n	80089e0 <__sflush_r+0x18>
 80089ea:	2300      	movs	r3, #0
 80089ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089f0:	682f      	ldr	r7, [r5, #0]
 80089f2:	6a21      	ldr	r1, [r4, #32]
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	d032      	beq.n	8008a5e <__sflush_r+0x96>
 80089f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	075a      	lsls	r2, r3, #29
 80089fe:	d505      	bpl.n	8008a0c <__sflush_r+0x44>
 8008a00:	6863      	ldr	r3, [r4, #4]
 8008a02:	1ac0      	subs	r0, r0, r3
 8008a04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a06:	b10b      	cbz	r3, 8008a0c <__sflush_r+0x44>
 8008a08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a0a:	1ac0      	subs	r0, r0, r3
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4602      	mov	r2, r0
 8008a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a12:	4628      	mov	r0, r5
 8008a14:	6a21      	ldr	r1, [r4, #32]
 8008a16:	47b0      	blx	r6
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	d106      	bne.n	8008a2c <__sflush_r+0x64>
 8008a1e:	6829      	ldr	r1, [r5, #0]
 8008a20:	291d      	cmp	r1, #29
 8008a22:	d82b      	bhi.n	8008a7c <__sflush_r+0xb4>
 8008a24:	4a28      	ldr	r2, [pc, #160]	; (8008ac8 <__sflush_r+0x100>)
 8008a26:	410a      	asrs	r2, r1
 8008a28:	07d6      	lsls	r6, r2, #31
 8008a2a:	d427      	bmi.n	8008a7c <__sflush_r+0xb4>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	6062      	str	r2, [r4, #4]
 8008a30:	6922      	ldr	r2, [r4, #16]
 8008a32:	04d9      	lsls	r1, r3, #19
 8008a34:	6022      	str	r2, [r4, #0]
 8008a36:	d504      	bpl.n	8008a42 <__sflush_r+0x7a>
 8008a38:	1c42      	adds	r2, r0, #1
 8008a3a:	d101      	bne.n	8008a40 <__sflush_r+0x78>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b903      	cbnz	r3, 8008a42 <__sflush_r+0x7a>
 8008a40:	6560      	str	r0, [r4, #84]	; 0x54
 8008a42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a44:	602f      	str	r7, [r5, #0]
 8008a46:	2900      	cmp	r1, #0
 8008a48:	d0ca      	beq.n	80089e0 <__sflush_r+0x18>
 8008a4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a4e:	4299      	cmp	r1, r3
 8008a50:	d002      	beq.n	8008a58 <__sflush_r+0x90>
 8008a52:	4628      	mov	r0, r5
 8008a54:	f7ff f9ec 	bl	8007e30 <_free_r>
 8008a58:	2000      	movs	r0, #0
 8008a5a:	6360      	str	r0, [r4, #52]	; 0x34
 8008a5c:	e7c1      	b.n	80089e2 <__sflush_r+0x1a>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b0      	blx	r6
 8008a64:	1c41      	adds	r1, r0, #1
 8008a66:	d1c8      	bne.n	80089fa <__sflush_r+0x32>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d0c5      	beq.n	80089fa <__sflush_r+0x32>
 8008a6e:	2b1d      	cmp	r3, #29
 8008a70:	d001      	beq.n	8008a76 <__sflush_r+0xae>
 8008a72:	2b16      	cmp	r3, #22
 8008a74:	d101      	bne.n	8008a7a <__sflush_r+0xb2>
 8008a76:	602f      	str	r7, [r5, #0]
 8008a78:	e7b2      	b.n	80089e0 <__sflush_r+0x18>
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	e7ae      	b.n	80089e2 <__sflush_r+0x1a>
 8008a84:	690f      	ldr	r7, [r1, #16]
 8008a86:	2f00      	cmp	r7, #0
 8008a88:	d0aa      	beq.n	80089e0 <__sflush_r+0x18>
 8008a8a:	0793      	lsls	r3, r2, #30
 8008a8c:	bf18      	it	ne
 8008a8e:	2300      	movne	r3, #0
 8008a90:	680e      	ldr	r6, [r1, #0]
 8008a92:	bf08      	it	eq
 8008a94:	694b      	ldreq	r3, [r1, #20]
 8008a96:	1bf6      	subs	r6, r6, r7
 8008a98:	600f      	str	r7, [r1, #0]
 8008a9a:	608b      	str	r3, [r1, #8]
 8008a9c:	2e00      	cmp	r6, #0
 8008a9e:	dd9f      	ble.n	80089e0 <__sflush_r+0x18>
 8008aa0:	4633      	mov	r3, r6
 8008aa2:	463a      	mov	r2, r7
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	6a21      	ldr	r1, [r4, #32]
 8008aa8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008aac:	47e0      	blx	ip
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	dc06      	bgt.n	8008ac0 <__sflush_r+0xf8>
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	e790      	b.n	80089e2 <__sflush_r+0x1a>
 8008ac0:	4407      	add	r7, r0
 8008ac2:	1a36      	subs	r6, r6, r0
 8008ac4:	e7ea      	b.n	8008a9c <__sflush_r+0xd4>
 8008ac6:	bf00      	nop
 8008ac8:	dfbffffe 	.word	0xdfbffffe

08008acc <_fflush_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	690b      	ldr	r3, [r1, #16]
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	b913      	cbnz	r3, 8008adc <_fflush_r+0x10>
 8008ad6:	2500      	movs	r5, #0
 8008ad8:	4628      	mov	r0, r5
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	b118      	cbz	r0, 8008ae6 <_fflush_r+0x1a>
 8008ade:	6a03      	ldr	r3, [r0, #32]
 8008ae0:	b90b      	cbnz	r3, 8008ae6 <_fflush_r+0x1a>
 8008ae2:	f7fe fa0f 	bl	8006f04 <__sinit>
 8008ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0f3      	beq.n	8008ad6 <_fflush_r+0xa>
 8008aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008af0:	07d0      	lsls	r0, r2, #31
 8008af2:	d404      	bmi.n	8008afe <_fflush_r+0x32>
 8008af4:	0599      	lsls	r1, r3, #22
 8008af6:	d402      	bmi.n	8008afe <_fflush_r+0x32>
 8008af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008afa:	f7fe fb1a 	bl	8007132 <__retarget_lock_acquire_recursive>
 8008afe:	4628      	mov	r0, r5
 8008b00:	4621      	mov	r1, r4
 8008b02:	f7ff ff61 	bl	80089c8 <__sflush_r>
 8008b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b08:	4605      	mov	r5, r0
 8008b0a:	07da      	lsls	r2, r3, #31
 8008b0c:	d4e4      	bmi.n	8008ad8 <_fflush_r+0xc>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	059b      	lsls	r3, r3, #22
 8008b12:	d4e1      	bmi.n	8008ad8 <_fflush_r+0xc>
 8008b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b16:	f7fe fb0d 	bl	8007134 <__retarget_lock_release_recursive>
 8008b1a:	e7dd      	b.n	8008ad8 <_fflush_r+0xc>

08008b1c <memmove>:
 8008b1c:	4288      	cmp	r0, r1
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	eb01 0402 	add.w	r4, r1, r2
 8008b24:	d902      	bls.n	8008b2c <memmove+0x10>
 8008b26:	4284      	cmp	r4, r0
 8008b28:	4623      	mov	r3, r4
 8008b2a:	d807      	bhi.n	8008b3c <memmove+0x20>
 8008b2c:	1e43      	subs	r3, r0, #1
 8008b2e:	42a1      	cmp	r1, r4
 8008b30:	d008      	beq.n	8008b44 <memmove+0x28>
 8008b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b3a:	e7f8      	b.n	8008b2e <memmove+0x12>
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	4402      	add	r2, r0
 8008b40:	428a      	cmp	r2, r1
 8008b42:	d100      	bne.n	8008b46 <memmove+0x2a>
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b4e:	e7f7      	b.n	8008b40 <memmove+0x24>

08008b50 <_sbrk_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	2300      	movs	r3, #0
 8008b54:	4d05      	ldr	r5, [pc, #20]	; (8008b6c <_sbrk_r+0x1c>)
 8008b56:	4604      	mov	r4, r0
 8008b58:	4608      	mov	r0, r1
 8008b5a:	602b      	str	r3, [r5, #0]
 8008b5c:	f7fa fa36 	bl	8002fcc <_sbrk>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_sbrk_r+0x1a>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_sbrk_r+0x1a>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20000a80 	.word	0x20000a80

08008b70 <memcpy>:
 8008b70:	440a      	add	r2, r1
 8008b72:	4291      	cmp	r1, r2
 8008b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b78:	d100      	bne.n	8008b7c <memcpy+0xc>
 8008b7a:	4770      	bx	lr
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b82:	4291      	cmp	r1, r2
 8008b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b88:	d1f9      	bne.n	8008b7e <memcpy+0xe>
 8008b8a:	bd10      	pop	{r4, pc}

08008b8c <__assert_func>:
 8008b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b8e:	4614      	mov	r4, r2
 8008b90:	461a      	mov	r2, r3
 8008b92:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <__assert_func+0x2c>)
 8008b94:	4605      	mov	r5, r0
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68d8      	ldr	r0, [r3, #12]
 8008b9a:	b14c      	cbz	r4, 8008bb0 <__assert_func+0x24>
 8008b9c:	4b07      	ldr	r3, [pc, #28]	; (8008bbc <__assert_func+0x30>)
 8008b9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ba2:	9100      	str	r1, [sp, #0]
 8008ba4:	462b      	mov	r3, r5
 8008ba6:	4906      	ldr	r1, [pc, #24]	; (8008bc0 <__assert_func+0x34>)
 8008ba8:	f000 f870 	bl	8008c8c <fiprintf>
 8008bac:	f000 f880 	bl	8008cb0 <abort>
 8008bb0:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <__assert_func+0x38>)
 8008bb2:	461c      	mov	r4, r3
 8008bb4:	e7f3      	b.n	8008b9e <__assert_func+0x12>
 8008bb6:	bf00      	nop
 8008bb8:	200000c8 	.word	0x200000c8
 8008bbc:	08009c5f 	.word	0x08009c5f
 8008bc0:	08009c6c 	.word	0x08009c6c
 8008bc4:	08009c9a 	.word	0x08009c9a

08008bc8 <_calloc_r>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	fba1 5402 	umull	r5, r4, r1, r2
 8008bce:	b934      	cbnz	r4, 8008bde <_calloc_r+0x16>
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	f7ff f99d 	bl	8007f10 <_malloc_r>
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	b928      	cbnz	r0, 8008be6 <_calloc_r+0x1e>
 8008bda:	4630      	mov	r0, r6
 8008bdc:	bd70      	pop	{r4, r5, r6, pc}
 8008bde:	220c      	movs	r2, #12
 8008be0:	2600      	movs	r6, #0
 8008be2:	6002      	str	r2, [r0, #0]
 8008be4:	e7f9      	b.n	8008bda <_calloc_r+0x12>
 8008be6:	462a      	mov	r2, r5
 8008be8:	4621      	mov	r1, r4
 8008bea:	f7fe fa24 	bl	8007036 <memset>
 8008bee:	e7f4      	b.n	8008bda <_calloc_r+0x12>

08008bf0 <__ascii_mbtowc>:
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	b901      	cbnz	r1, 8008bf6 <__ascii_mbtowc+0x6>
 8008bf4:	a901      	add	r1, sp, #4
 8008bf6:	b142      	cbz	r2, 8008c0a <__ascii_mbtowc+0x1a>
 8008bf8:	b14b      	cbz	r3, 8008c0e <__ascii_mbtowc+0x1e>
 8008bfa:	7813      	ldrb	r3, [r2, #0]
 8008bfc:	600b      	str	r3, [r1, #0]
 8008bfe:	7812      	ldrb	r2, [r2, #0]
 8008c00:	1e10      	subs	r0, r2, #0
 8008c02:	bf18      	it	ne
 8008c04:	2001      	movne	r0, #1
 8008c06:	b002      	add	sp, #8
 8008c08:	4770      	bx	lr
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	e7fb      	b.n	8008c06 <__ascii_mbtowc+0x16>
 8008c0e:	f06f 0001 	mvn.w	r0, #1
 8008c12:	e7f8      	b.n	8008c06 <__ascii_mbtowc+0x16>

08008c14 <_realloc_r>:
 8008c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c18:	4680      	mov	r8, r0
 8008c1a:	4614      	mov	r4, r2
 8008c1c:	460e      	mov	r6, r1
 8008c1e:	b921      	cbnz	r1, 8008c2a <_realloc_r+0x16>
 8008c20:	4611      	mov	r1, r2
 8008c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c26:	f7ff b973 	b.w	8007f10 <_malloc_r>
 8008c2a:	b92a      	cbnz	r2, 8008c38 <_realloc_r+0x24>
 8008c2c:	f7ff f900 	bl	8007e30 <_free_r>
 8008c30:	4625      	mov	r5, r4
 8008c32:	4628      	mov	r0, r5
 8008c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c38:	f000 f841 	bl	8008cbe <_malloc_usable_size_r>
 8008c3c:	4284      	cmp	r4, r0
 8008c3e:	4607      	mov	r7, r0
 8008c40:	d802      	bhi.n	8008c48 <_realloc_r+0x34>
 8008c42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c46:	d812      	bhi.n	8008c6e <_realloc_r+0x5a>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	f7ff f960 	bl	8007f10 <_malloc_r>
 8008c50:	4605      	mov	r5, r0
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d0ed      	beq.n	8008c32 <_realloc_r+0x1e>
 8008c56:	42bc      	cmp	r4, r7
 8008c58:	4622      	mov	r2, r4
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	bf28      	it	cs
 8008c5e:	463a      	movcs	r2, r7
 8008c60:	f7ff ff86 	bl	8008b70 <memcpy>
 8008c64:	4631      	mov	r1, r6
 8008c66:	4640      	mov	r0, r8
 8008c68:	f7ff f8e2 	bl	8007e30 <_free_r>
 8008c6c:	e7e1      	b.n	8008c32 <_realloc_r+0x1e>
 8008c6e:	4635      	mov	r5, r6
 8008c70:	e7df      	b.n	8008c32 <_realloc_r+0x1e>

08008c72 <__ascii_wctomb>:
 8008c72:	4603      	mov	r3, r0
 8008c74:	4608      	mov	r0, r1
 8008c76:	b141      	cbz	r1, 8008c8a <__ascii_wctomb+0x18>
 8008c78:	2aff      	cmp	r2, #255	; 0xff
 8008c7a:	d904      	bls.n	8008c86 <__ascii_wctomb+0x14>
 8008c7c:	228a      	movs	r2, #138	; 0x8a
 8008c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	4770      	bx	lr
 8008c86:	2001      	movs	r0, #1
 8008c88:	700a      	strb	r2, [r1, #0]
 8008c8a:	4770      	bx	lr

08008c8c <fiprintf>:
 8008c8c:	b40e      	push	{r1, r2, r3}
 8008c8e:	b503      	push	{r0, r1, lr}
 8008c90:	4601      	mov	r1, r0
 8008c92:	ab03      	add	r3, sp, #12
 8008c94:	4805      	ldr	r0, [pc, #20]	; (8008cac <fiprintf+0x20>)
 8008c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	f000 f83d 	bl	8008d1c <_vfiprintf_r>
 8008ca2:	b002      	add	sp, #8
 8008ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ca8:	b003      	add	sp, #12
 8008caa:	4770      	bx	lr
 8008cac:	200000c8 	.word	0x200000c8

08008cb0 <abort>:
 8008cb0:	2006      	movs	r0, #6
 8008cb2:	b508      	push	{r3, lr}
 8008cb4:	f000 fa0a 	bl	80090cc <raise>
 8008cb8:	2001      	movs	r0, #1
 8008cba:	f7fa f913 	bl	8002ee4 <_exit>

08008cbe <_malloc_usable_size_r>:
 8008cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cc2:	1f18      	subs	r0, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bfbc      	itt	lt
 8008cc8:	580b      	ldrlt	r3, [r1, r0]
 8008cca:	18c0      	addlt	r0, r0, r3
 8008ccc:	4770      	bx	lr

08008cce <__sfputc_r>:
 8008cce:	6893      	ldr	r3, [r2, #8]
 8008cd0:	b410      	push	{r4}
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	6093      	str	r3, [r2, #8]
 8008cd8:	da07      	bge.n	8008cea <__sfputc_r+0x1c>
 8008cda:	6994      	ldr	r4, [r2, #24]
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	db01      	blt.n	8008ce4 <__sfputc_r+0x16>
 8008ce0:	290a      	cmp	r1, #10
 8008ce2:	d102      	bne.n	8008cea <__sfputc_r+0x1c>
 8008ce4:	bc10      	pop	{r4}
 8008ce6:	f000 b933 	b.w	8008f50 <__swbuf_r>
 8008cea:	6813      	ldr	r3, [r2, #0]
 8008cec:	1c58      	adds	r0, r3, #1
 8008cee:	6010      	str	r0, [r2, #0]
 8008cf0:	7019      	strb	r1, [r3, #0]
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	bc10      	pop	{r4}
 8008cf6:	4770      	bx	lr

08008cf8 <__sfputs_r>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	4614      	mov	r4, r2
 8008d00:	18d5      	adds	r5, r2, r3
 8008d02:	42ac      	cmp	r4, r5
 8008d04:	d101      	bne.n	8008d0a <__sfputs_r+0x12>
 8008d06:	2000      	movs	r0, #0
 8008d08:	e007      	b.n	8008d1a <__sfputs_r+0x22>
 8008d0a:	463a      	mov	r2, r7
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d12:	f7ff ffdc 	bl	8008cce <__sfputc_r>
 8008d16:	1c43      	adds	r3, r0, #1
 8008d18:	d1f3      	bne.n	8008d02 <__sfputs_r+0xa>
 8008d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d1c <_vfiprintf_r>:
 8008d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	460d      	mov	r5, r1
 8008d22:	4614      	mov	r4, r2
 8008d24:	4698      	mov	r8, r3
 8008d26:	4606      	mov	r6, r0
 8008d28:	b09d      	sub	sp, #116	; 0x74
 8008d2a:	b118      	cbz	r0, 8008d34 <_vfiprintf_r+0x18>
 8008d2c:	6a03      	ldr	r3, [r0, #32]
 8008d2e:	b90b      	cbnz	r3, 8008d34 <_vfiprintf_r+0x18>
 8008d30:	f7fe f8e8 	bl	8006f04 <__sinit>
 8008d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d36:	07d9      	lsls	r1, r3, #31
 8008d38:	d405      	bmi.n	8008d46 <_vfiprintf_r+0x2a>
 8008d3a:	89ab      	ldrh	r3, [r5, #12]
 8008d3c:	059a      	lsls	r2, r3, #22
 8008d3e:	d402      	bmi.n	8008d46 <_vfiprintf_r+0x2a>
 8008d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d42:	f7fe f9f6 	bl	8007132 <__retarget_lock_acquire_recursive>
 8008d46:	89ab      	ldrh	r3, [r5, #12]
 8008d48:	071b      	lsls	r3, r3, #28
 8008d4a:	d501      	bpl.n	8008d50 <_vfiprintf_r+0x34>
 8008d4c:	692b      	ldr	r3, [r5, #16]
 8008d4e:	b99b      	cbnz	r3, 8008d78 <_vfiprintf_r+0x5c>
 8008d50:	4629      	mov	r1, r5
 8008d52:	4630      	mov	r0, r6
 8008d54:	f000 f93a 	bl	8008fcc <__swsetup_r>
 8008d58:	b170      	cbz	r0, 8008d78 <_vfiprintf_r+0x5c>
 8008d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d5c:	07dc      	lsls	r4, r3, #31
 8008d5e:	d504      	bpl.n	8008d6a <_vfiprintf_r+0x4e>
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	b01d      	add	sp, #116	; 0x74
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	89ab      	ldrh	r3, [r5, #12]
 8008d6c:	0598      	lsls	r0, r3, #22
 8008d6e:	d4f7      	bmi.n	8008d60 <_vfiprintf_r+0x44>
 8008d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d72:	f7fe f9df 	bl	8007134 <__retarget_lock_release_recursive>
 8008d76:	e7f3      	b.n	8008d60 <_vfiprintf_r+0x44>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7c:	2320      	movs	r3, #32
 8008d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d82:	2330      	movs	r3, #48	; 0x30
 8008d84:	f04f 0901 	mov.w	r9, #1
 8008d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008f3c <_vfiprintf_r+0x220>
 8008d90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d94:	4623      	mov	r3, r4
 8008d96:	469a      	mov	sl, r3
 8008d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9c:	b10a      	cbz	r2, 8008da2 <_vfiprintf_r+0x86>
 8008d9e:	2a25      	cmp	r2, #37	; 0x25
 8008da0:	d1f9      	bne.n	8008d96 <_vfiprintf_r+0x7a>
 8008da2:	ebba 0b04 	subs.w	fp, sl, r4
 8008da6:	d00b      	beq.n	8008dc0 <_vfiprintf_r+0xa4>
 8008da8:	465b      	mov	r3, fp
 8008daa:	4622      	mov	r2, r4
 8008dac:	4629      	mov	r1, r5
 8008dae:	4630      	mov	r0, r6
 8008db0:	f7ff ffa2 	bl	8008cf8 <__sfputs_r>
 8008db4:	3001      	adds	r0, #1
 8008db6:	f000 80a9 	beq.w	8008f0c <_vfiprintf_r+0x1f0>
 8008dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dbc:	445a      	add	r2, fp
 8008dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8008dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 80a1 	beq.w	8008f0c <_vfiprintf_r+0x1f0>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd4:	f10a 0a01 	add.w	sl, sl, #1
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	9307      	str	r3, [sp, #28]
 8008ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008de0:	931a      	str	r3, [sp, #104]	; 0x68
 8008de2:	4654      	mov	r4, sl
 8008de4:	2205      	movs	r2, #5
 8008de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dea:	4854      	ldr	r0, [pc, #336]	; (8008f3c <_vfiprintf_r+0x220>)
 8008dec:	f7fe f9a3 	bl	8007136 <memchr>
 8008df0:	9a04      	ldr	r2, [sp, #16]
 8008df2:	b9d8      	cbnz	r0, 8008e2c <_vfiprintf_r+0x110>
 8008df4:	06d1      	lsls	r1, r2, #27
 8008df6:	bf44      	itt	mi
 8008df8:	2320      	movmi	r3, #32
 8008dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfe:	0713      	lsls	r3, r2, #28
 8008e00:	bf44      	itt	mi
 8008e02:	232b      	movmi	r3, #43	; 0x2b
 8008e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e08:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0e:	d015      	beq.n	8008e3c <_vfiprintf_r+0x120>
 8008e10:	4654      	mov	r4, sl
 8008e12:	2000      	movs	r0, #0
 8008e14:	f04f 0c0a 	mov.w	ip, #10
 8008e18:	9a07      	ldr	r2, [sp, #28]
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e20:	3b30      	subs	r3, #48	; 0x30
 8008e22:	2b09      	cmp	r3, #9
 8008e24:	d94d      	bls.n	8008ec2 <_vfiprintf_r+0x1a6>
 8008e26:	b1b0      	cbz	r0, 8008e56 <_vfiprintf_r+0x13a>
 8008e28:	9207      	str	r2, [sp, #28]
 8008e2a:	e014      	b.n	8008e56 <_vfiprintf_r+0x13a>
 8008e2c:	eba0 0308 	sub.w	r3, r0, r8
 8008e30:	fa09 f303 	lsl.w	r3, r9, r3
 8008e34:	4313      	orrs	r3, r2
 8008e36:	46a2      	mov	sl, r4
 8008e38:	9304      	str	r3, [sp, #16]
 8008e3a:	e7d2      	b.n	8008de2 <_vfiprintf_r+0xc6>
 8008e3c:	9b03      	ldr	r3, [sp, #12]
 8008e3e:	1d19      	adds	r1, r3, #4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	9103      	str	r1, [sp, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	bfbb      	ittet	lt
 8008e48:	425b      	neglt	r3, r3
 8008e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e4e:	9307      	strge	r3, [sp, #28]
 8008e50:	9307      	strlt	r3, [sp, #28]
 8008e52:	bfb8      	it	lt
 8008e54:	9204      	strlt	r2, [sp, #16]
 8008e56:	7823      	ldrb	r3, [r4, #0]
 8008e58:	2b2e      	cmp	r3, #46	; 0x2e
 8008e5a:	d10c      	bne.n	8008e76 <_vfiprintf_r+0x15a>
 8008e5c:	7863      	ldrb	r3, [r4, #1]
 8008e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e60:	d134      	bne.n	8008ecc <_vfiprintf_r+0x1b0>
 8008e62:	9b03      	ldr	r3, [sp, #12]
 8008e64:	3402      	adds	r4, #2
 8008e66:	1d1a      	adds	r2, r3, #4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	9203      	str	r2, [sp, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	bfb8      	it	lt
 8008e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e74:	9305      	str	r3, [sp, #20]
 8008e76:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f40 <_vfiprintf_r+0x224>
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	4650      	mov	r0, sl
 8008e7e:	7821      	ldrb	r1, [r4, #0]
 8008e80:	f7fe f959 	bl	8007136 <memchr>
 8008e84:	b138      	cbz	r0, 8008e96 <_vfiprintf_r+0x17a>
 8008e86:	2240      	movs	r2, #64	; 0x40
 8008e88:	9b04      	ldr	r3, [sp, #16]
 8008e8a:	eba0 000a 	sub.w	r0, r0, sl
 8008e8e:	4082      	lsls	r2, r0
 8008e90:	4313      	orrs	r3, r2
 8008e92:	3401      	adds	r4, #1
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9a:	2206      	movs	r2, #6
 8008e9c:	4829      	ldr	r0, [pc, #164]	; (8008f44 <_vfiprintf_r+0x228>)
 8008e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ea2:	f7fe f948 	bl	8007136 <memchr>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d03f      	beq.n	8008f2a <_vfiprintf_r+0x20e>
 8008eaa:	4b27      	ldr	r3, [pc, #156]	; (8008f48 <_vfiprintf_r+0x22c>)
 8008eac:	bb1b      	cbnz	r3, 8008ef6 <_vfiprintf_r+0x1da>
 8008eae:	9b03      	ldr	r3, [sp, #12]
 8008eb0:	3307      	adds	r3, #7
 8008eb2:	f023 0307 	bic.w	r3, r3, #7
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebc:	443b      	add	r3, r7
 8008ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec0:	e768      	b.n	8008d94 <_vfiprintf_r+0x78>
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eca:	e7a6      	b.n	8008e1a <_vfiprintf_r+0xfe>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f04f 0c0a 	mov.w	ip, #10
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	3401      	adds	r4, #1
 8008ed6:	9305      	str	r3, [sp, #20]
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ede:	3a30      	subs	r2, #48	; 0x30
 8008ee0:	2a09      	cmp	r2, #9
 8008ee2:	d903      	bls.n	8008eec <_vfiprintf_r+0x1d0>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d0c6      	beq.n	8008e76 <_vfiprintf_r+0x15a>
 8008ee8:	9105      	str	r1, [sp, #20]
 8008eea:	e7c4      	b.n	8008e76 <_vfiprintf_r+0x15a>
 8008eec:	4604      	mov	r4, r0
 8008eee:	2301      	movs	r3, #1
 8008ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ef4:	e7f0      	b.n	8008ed8 <_vfiprintf_r+0x1bc>
 8008ef6:	ab03      	add	r3, sp, #12
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	462a      	mov	r2, r5
 8008efc:	4630      	mov	r0, r6
 8008efe:	4b13      	ldr	r3, [pc, #76]	; (8008f4c <_vfiprintf_r+0x230>)
 8008f00:	a904      	add	r1, sp, #16
 8008f02:	f7fd fbb1 	bl	8006668 <_printf_float>
 8008f06:	4607      	mov	r7, r0
 8008f08:	1c78      	adds	r0, r7, #1
 8008f0a:	d1d6      	bne.n	8008eba <_vfiprintf_r+0x19e>
 8008f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f0e:	07d9      	lsls	r1, r3, #31
 8008f10:	d405      	bmi.n	8008f1e <_vfiprintf_r+0x202>
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	059a      	lsls	r2, r3, #22
 8008f16:	d402      	bmi.n	8008f1e <_vfiprintf_r+0x202>
 8008f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f1a:	f7fe f90b 	bl	8007134 <__retarget_lock_release_recursive>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	065b      	lsls	r3, r3, #25
 8008f22:	f53f af1d 	bmi.w	8008d60 <_vfiprintf_r+0x44>
 8008f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f28:	e71c      	b.n	8008d64 <_vfiprintf_r+0x48>
 8008f2a:	ab03      	add	r3, sp, #12
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	462a      	mov	r2, r5
 8008f30:	4630      	mov	r0, r6
 8008f32:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <_vfiprintf_r+0x230>)
 8008f34:	a904      	add	r1, sp, #16
 8008f36:	f7fd fe37 	bl	8006ba8 <_printf_i>
 8008f3a:	e7e4      	b.n	8008f06 <_vfiprintf_r+0x1ea>
 8008f3c:	08009c44 	.word	0x08009c44
 8008f40:	08009c4a 	.word	0x08009c4a
 8008f44:	08009c4e 	.word	0x08009c4e
 8008f48:	08006669 	.word	0x08006669
 8008f4c:	08008cf9 	.word	0x08008cf9

08008f50 <__swbuf_r>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	460e      	mov	r6, r1
 8008f54:	4614      	mov	r4, r2
 8008f56:	4605      	mov	r5, r0
 8008f58:	b118      	cbz	r0, 8008f62 <__swbuf_r+0x12>
 8008f5a:	6a03      	ldr	r3, [r0, #32]
 8008f5c:	b90b      	cbnz	r3, 8008f62 <__swbuf_r+0x12>
 8008f5e:	f7fd ffd1 	bl	8006f04 <__sinit>
 8008f62:	69a3      	ldr	r3, [r4, #24]
 8008f64:	60a3      	str	r3, [r4, #8]
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	071a      	lsls	r2, r3, #28
 8008f6a:	d525      	bpl.n	8008fb8 <__swbuf_r+0x68>
 8008f6c:	6923      	ldr	r3, [r4, #16]
 8008f6e:	b31b      	cbz	r3, 8008fb8 <__swbuf_r+0x68>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	6922      	ldr	r2, [r4, #16]
 8008f74:	b2f6      	uxtb	r6, r6
 8008f76:	1a98      	subs	r0, r3, r2
 8008f78:	6963      	ldr	r3, [r4, #20]
 8008f7a:	4637      	mov	r7, r6
 8008f7c:	4283      	cmp	r3, r0
 8008f7e:	dc04      	bgt.n	8008f8a <__swbuf_r+0x3a>
 8008f80:	4621      	mov	r1, r4
 8008f82:	4628      	mov	r0, r5
 8008f84:	f7ff fda2 	bl	8008acc <_fflush_r>
 8008f88:	b9e0      	cbnz	r0, 8008fc4 <__swbuf_r+0x74>
 8008f8a:	68a3      	ldr	r3, [r4, #8]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	60a3      	str	r3, [r4, #8]
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	6022      	str	r2, [r4, #0]
 8008f96:	701e      	strb	r6, [r3, #0]
 8008f98:	6962      	ldr	r2, [r4, #20]
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d004      	beq.n	8008faa <__swbuf_r+0x5a>
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	07db      	lsls	r3, r3, #31
 8008fa4:	d506      	bpl.n	8008fb4 <__swbuf_r+0x64>
 8008fa6:	2e0a      	cmp	r6, #10
 8008fa8:	d104      	bne.n	8008fb4 <__swbuf_r+0x64>
 8008faa:	4621      	mov	r1, r4
 8008fac:	4628      	mov	r0, r5
 8008fae:	f7ff fd8d 	bl	8008acc <_fflush_r>
 8008fb2:	b938      	cbnz	r0, 8008fc4 <__swbuf_r+0x74>
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb8:	4621      	mov	r1, r4
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f000 f806 	bl	8008fcc <__swsetup_r>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d0d5      	beq.n	8008f70 <__swbuf_r+0x20>
 8008fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8008fc8:	e7f4      	b.n	8008fb4 <__swbuf_r+0x64>
	...

08008fcc <__swsetup_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4b2a      	ldr	r3, [pc, #168]	; (8009078 <__swsetup_r+0xac>)
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	b118      	cbz	r0, 8008fe0 <__swsetup_r+0x14>
 8008fd8:	6a03      	ldr	r3, [r0, #32]
 8008fda:	b90b      	cbnz	r3, 8008fe0 <__swsetup_r+0x14>
 8008fdc:	f7fd ff92 	bl	8006f04 <__sinit>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fe6:	0718      	lsls	r0, r3, #28
 8008fe8:	d422      	bmi.n	8009030 <__swsetup_r+0x64>
 8008fea:	06d9      	lsls	r1, r3, #27
 8008fec:	d407      	bmi.n	8008ffe <__swsetup_r+0x32>
 8008fee:	2309      	movs	r3, #9
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	e034      	b.n	8009068 <__swsetup_r+0x9c>
 8008ffe:	0758      	lsls	r0, r3, #29
 8009000:	d512      	bpl.n	8009028 <__swsetup_r+0x5c>
 8009002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009004:	b141      	cbz	r1, 8009018 <__swsetup_r+0x4c>
 8009006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800900a:	4299      	cmp	r1, r3
 800900c:	d002      	beq.n	8009014 <__swsetup_r+0x48>
 800900e:	4628      	mov	r0, r5
 8009010:	f7fe ff0e 	bl	8007e30 <_free_r>
 8009014:	2300      	movs	r3, #0
 8009016:	6363      	str	r3, [r4, #52]	; 0x34
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800901e:	81a3      	strh	r3, [r4, #12]
 8009020:	2300      	movs	r3, #0
 8009022:	6063      	str	r3, [r4, #4]
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	f043 0308 	orr.w	r3, r3, #8
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	6923      	ldr	r3, [r4, #16]
 8009032:	b94b      	cbnz	r3, 8009048 <__swsetup_r+0x7c>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800903a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800903e:	d003      	beq.n	8009048 <__swsetup_r+0x7c>
 8009040:	4621      	mov	r1, r4
 8009042:	4628      	mov	r0, r5
 8009044:	f000 f883 	bl	800914e <__smakebuf_r>
 8009048:	89a0      	ldrh	r0, [r4, #12]
 800904a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800904e:	f010 0301 	ands.w	r3, r0, #1
 8009052:	d00a      	beq.n	800906a <__swsetup_r+0x9e>
 8009054:	2300      	movs	r3, #0
 8009056:	60a3      	str	r3, [r4, #8]
 8009058:	6963      	ldr	r3, [r4, #20]
 800905a:	425b      	negs	r3, r3
 800905c:	61a3      	str	r3, [r4, #24]
 800905e:	6923      	ldr	r3, [r4, #16]
 8009060:	b943      	cbnz	r3, 8009074 <__swsetup_r+0xa8>
 8009062:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009066:	d1c4      	bne.n	8008ff2 <__swsetup_r+0x26>
 8009068:	bd38      	pop	{r3, r4, r5, pc}
 800906a:	0781      	lsls	r1, r0, #30
 800906c:	bf58      	it	pl
 800906e:	6963      	ldrpl	r3, [r4, #20]
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	e7f4      	b.n	800905e <__swsetup_r+0x92>
 8009074:	2000      	movs	r0, #0
 8009076:	e7f7      	b.n	8009068 <__swsetup_r+0x9c>
 8009078:	200000c8 	.word	0x200000c8

0800907c <_raise_r>:
 800907c:	291f      	cmp	r1, #31
 800907e:	b538      	push	{r3, r4, r5, lr}
 8009080:	4604      	mov	r4, r0
 8009082:	460d      	mov	r5, r1
 8009084:	d904      	bls.n	8009090 <_raise_r+0x14>
 8009086:	2316      	movs	r3, #22
 8009088:	6003      	str	r3, [r0, #0]
 800908a:	f04f 30ff 	mov.w	r0, #4294967295
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009092:	b112      	cbz	r2, 800909a <_raise_r+0x1e>
 8009094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009098:	b94b      	cbnz	r3, 80090ae <_raise_r+0x32>
 800909a:	4620      	mov	r0, r4
 800909c:	f000 f830 	bl	8009100 <_getpid_r>
 80090a0:	462a      	mov	r2, r5
 80090a2:	4601      	mov	r1, r0
 80090a4:	4620      	mov	r0, r4
 80090a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090aa:	f000 b817 	b.w	80090dc <_kill_r>
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d00a      	beq.n	80090c8 <_raise_r+0x4c>
 80090b2:	1c59      	adds	r1, r3, #1
 80090b4:	d103      	bne.n	80090be <_raise_r+0x42>
 80090b6:	2316      	movs	r3, #22
 80090b8:	6003      	str	r3, [r0, #0]
 80090ba:	2001      	movs	r0, #1
 80090bc:	e7e7      	b.n	800908e <_raise_r+0x12>
 80090be:	2400      	movs	r4, #0
 80090c0:	4628      	mov	r0, r5
 80090c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090c6:	4798      	blx	r3
 80090c8:	2000      	movs	r0, #0
 80090ca:	e7e0      	b.n	800908e <_raise_r+0x12>

080090cc <raise>:
 80090cc:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <raise+0xc>)
 80090ce:	4601      	mov	r1, r0
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	f7ff bfd3 	b.w	800907c <_raise_r>
 80090d6:	bf00      	nop
 80090d8:	200000c8 	.word	0x200000c8

080090dc <_kill_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	2300      	movs	r3, #0
 80090e0:	4d06      	ldr	r5, [pc, #24]	; (80090fc <_kill_r+0x20>)
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	4611      	mov	r1, r2
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	f7f9 feeb 	bl	8002ec4 <_kill>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	d102      	bne.n	80090f8 <_kill_r+0x1c>
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	b103      	cbz	r3, 80090f8 <_kill_r+0x1c>
 80090f6:	6023      	str	r3, [r4, #0]
 80090f8:	bd38      	pop	{r3, r4, r5, pc}
 80090fa:	bf00      	nop
 80090fc:	20000a80 	.word	0x20000a80

08009100 <_getpid_r>:
 8009100:	f7f9 bed9 	b.w	8002eb6 <_getpid>

08009104 <__swhatbuf_r>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	460c      	mov	r4, r1
 8009108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910c:	4615      	mov	r5, r2
 800910e:	2900      	cmp	r1, #0
 8009110:	461e      	mov	r6, r3
 8009112:	b096      	sub	sp, #88	; 0x58
 8009114:	da0c      	bge.n	8009130 <__swhatbuf_r+0x2c>
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	2100      	movs	r1, #0
 800911a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800911e:	bf0c      	ite	eq
 8009120:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009124:	2340      	movne	r3, #64	; 0x40
 8009126:	2000      	movs	r0, #0
 8009128:	6031      	str	r1, [r6, #0]
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	b016      	add	sp, #88	; 0x58
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	466a      	mov	r2, sp
 8009132:	f000 f849 	bl	80091c8 <_fstat_r>
 8009136:	2800      	cmp	r0, #0
 8009138:	dbed      	blt.n	8009116 <__swhatbuf_r+0x12>
 800913a:	9901      	ldr	r1, [sp, #4]
 800913c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009140:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009144:	4259      	negs	r1, r3
 8009146:	4159      	adcs	r1, r3
 8009148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800914c:	e7eb      	b.n	8009126 <__swhatbuf_r+0x22>

0800914e <__smakebuf_r>:
 800914e:	898b      	ldrh	r3, [r1, #12]
 8009150:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009152:	079d      	lsls	r5, r3, #30
 8009154:	4606      	mov	r6, r0
 8009156:	460c      	mov	r4, r1
 8009158:	d507      	bpl.n	800916a <__smakebuf_r+0x1c>
 800915a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	6123      	str	r3, [r4, #16]
 8009162:	2301      	movs	r3, #1
 8009164:	6163      	str	r3, [r4, #20]
 8009166:	b002      	add	sp, #8
 8009168:	bd70      	pop	{r4, r5, r6, pc}
 800916a:	466a      	mov	r2, sp
 800916c:	ab01      	add	r3, sp, #4
 800916e:	f7ff ffc9 	bl	8009104 <__swhatbuf_r>
 8009172:	9900      	ldr	r1, [sp, #0]
 8009174:	4605      	mov	r5, r0
 8009176:	4630      	mov	r0, r6
 8009178:	f7fe feca 	bl	8007f10 <_malloc_r>
 800917c:	b948      	cbnz	r0, 8009192 <__smakebuf_r+0x44>
 800917e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009182:	059a      	lsls	r2, r3, #22
 8009184:	d4ef      	bmi.n	8009166 <__smakebuf_r+0x18>
 8009186:	f023 0303 	bic.w	r3, r3, #3
 800918a:	f043 0302 	orr.w	r3, r3, #2
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	e7e3      	b.n	800915a <__smakebuf_r+0xc>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	6020      	str	r0, [r4, #0]
 8009196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	9b00      	ldr	r3, [sp, #0]
 800919e:	6120      	str	r0, [r4, #16]
 80091a0:	6163      	str	r3, [r4, #20]
 80091a2:	9b01      	ldr	r3, [sp, #4]
 80091a4:	b15b      	cbz	r3, 80091be <__smakebuf_r+0x70>
 80091a6:	4630      	mov	r0, r6
 80091a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ac:	f000 f81e 	bl	80091ec <_isatty_r>
 80091b0:	b128      	cbz	r0, 80091be <__smakebuf_r+0x70>
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	f023 0303 	bic.w	r3, r3, #3
 80091b8:	f043 0301 	orr.w	r3, r3, #1
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	431d      	orrs	r5, r3
 80091c2:	81a5      	strh	r5, [r4, #12]
 80091c4:	e7cf      	b.n	8009166 <__smakebuf_r+0x18>
	...

080091c8 <_fstat_r>:
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	2300      	movs	r3, #0
 80091cc:	4d06      	ldr	r5, [pc, #24]	; (80091e8 <_fstat_r+0x20>)
 80091ce:	4604      	mov	r4, r0
 80091d0:	4608      	mov	r0, r1
 80091d2:	4611      	mov	r1, r2
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	f7f9 fed3 	bl	8002f80 <_fstat>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d102      	bne.n	80091e4 <_fstat_r+0x1c>
 80091de:	682b      	ldr	r3, [r5, #0]
 80091e0:	b103      	cbz	r3, 80091e4 <_fstat_r+0x1c>
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	bd38      	pop	{r3, r4, r5, pc}
 80091e6:	bf00      	nop
 80091e8:	20000a80 	.word	0x20000a80

080091ec <_isatty_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	2300      	movs	r3, #0
 80091f0:	4d05      	ldr	r5, [pc, #20]	; (8009208 <_isatty_r+0x1c>)
 80091f2:	4604      	mov	r4, r0
 80091f4:	4608      	mov	r0, r1
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	f7f9 fed1 	bl	8002f9e <_isatty>
 80091fc:	1c43      	adds	r3, r0, #1
 80091fe:	d102      	bne.n	8009206 <_isatty_r+0x1a>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	b103      	cbz	r3, 8009206 <_isatty_r+0x1a>
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	bd38      	pop	{r3, r4, r5, pc}
 8009208:	20000a80 	.word	0x20000a80

0800920c <_init>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	bf00      	nop
 8009210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009212:	bc08      	pop	{r3}
 8009214:	469e      	mov	lr, r3
 8009216:	4770      	bx	lr

08009218 <_fini>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	bf00      	nop
 800921c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921e:	bc08      	pop	{r3}
 8009220:	469e      	mov	lr, r3
 8009222:	4770      	bx	lr
